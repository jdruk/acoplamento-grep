/* grep.c - main driver file for grep.
   Copyright (C) 1992 Free Software Foundation, Inc.
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
   Written July 1992 by Mike Haertel.  */
/* I added a series define from makefile here in order to run cfe */
#define GREP 1
#define STDC_HEADERS 1
#define HAVE_STRING_H 1
#define HAVE_SYS_PARAM_H 1
#define HAVE_UNISTD_H 1
#define HAVE_ALLOCA_H 1
#define HAVE_GETPAGESIZE 1
#define HAVE_MEMCHR 1
#define HAVE_STRERROR 1
#define HAVE_VALLOC 1
#define HAVE_WORKING_MMAP 1
/*** end of cfe purpose **/
#ifndef errno
#endif
#ifdef STDC_HEADERS
#define flag_stdlib 1
#define flag_systypes 1
extern void free();
#endif
#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
#define flag_string 1
#ifdef NEED_MEMORY_H
#define flag_memory 1
#endif
#define flag_strings 1
#ifdef __STDC__
#endif
#define strrchr rindex
#endif
#ifdef HAVE_UNISTD_H
#if flag_systypes==0
#define flag_systypes 1
#endif
#include <fcntl.h>
#define O_RDONLY 0
#endif
#include "getpagesize.h"
#undef MAX
#define MAX(A,B) ((A) > (B) ? (A) : (B))
/* Provide missing ANSI features if necessary. */
#ifndef HAVE_STRERROR
#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
#endif
#ifndef HAVE_MEMCHR
#ifdef __STDC__
#define VOID void
#define VOID char
#endif
     size_t n;
  for (p = (unsigned char *) vp; n--; ++p)
    if (*p == c)
  return 0;
#endif
/* Define flags declared in grep.h. */
static char *filename;
   that something awful happened. */
#ifdef __STDC__
#endif
  if (errnum)
    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
    fprintf(stderr, "%s: %s\n", prog, mesg);
  errseen = 1;
/* Like error(), but die horribly after printing. */
fatal(mesg, errnum)
#ifdef __STDC__
#endif
  exit(2);
/* Interface to handle errors and fix library lossage. */
xmalloc(size)
     size_t size;
  result = malloc(size);
  if (size && !result)
    fatal("memory exhausted", 0);
/* Interface to handle errors and fix some library lossage. */
xrealloc(ptr, size)
     size_t size;
  if (ptr)
    result = realloc(ptr, size);
    result = malloc(size);
  if (size && !result)
    fatal("memory exhausted", 0);
#if !defined(HAVE_VALLOC)
#define valloc malloc
#ifdef __STDC__
extern void *valloc(size_t);
#endif
#endif
/* Hairy buffering mechanism for grep.  The intent is to keep
   all reads aligned on a page boundary and multiples of the
   page size. */
static char *buffer;		/* Base of buffer. */
static size_t bufsalloc;	/* Allocated size of buffer save region. */
static size_t bufalloc;		/* Total buffer size. */
static int bufdesc;		/* File descriptor. */
static char *bufbeg;		/* Beginning of user-visible stuff. */
static char *buflim;		/* Limit of user-visible stuff. */
#if defined(HAVE_WORKING_MMAP)
#if flag_systypes==0
#define flag_systypes 1
#endif
static int bufmapped;		/* True for ordinary files. */
static struct stat bufstat;	/* From fstat(). */
static off_t bufoffset;		/* What read() normally remembers. */
#endif
/* Reset the buffer for a new file.  Initialize
   on the first time through. */
reset(fd)
     int fd;
  static int initialized;
  if (!initialized)
      initialized = 1;
#ifndef BUFSALLOC
      bufsalloc = MAX(8192, getpagesize());
      bufsalloc = BUFSALLOC;
#endif
      bufalloc = 5 * bufsalloc;
      /* The 1 byte of overflow is a kludge for dfaexec(), which
	 inserts a sentinel newline at the end of the buffer
      buffer = valloc(bufalloc + 1);
      if (!buffer)
	fatal("memory exhausted", 0);
      bufbeg = buffer;
      buflim = buffer;
  bufdesc = fd;
#if defined(HAVE_WORKING_MMAP)
  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
    bufmapped = 0;
      bufmapped = 1;
      bufoffset = lseek(fd, 0, 1);
#endif
/* Read new stuff into the buffer, saving the specified
   amount of old stuff.  When we're done, 'bufbeg' points
   to the beginning of the buffer contents, and 'buflim'
   points just after the end.  Return count of new stuff. */
fillbuf(save)
     size_t save;
  char *nbuffer, *dp, *sp;
#if defined(HAVE_WORKING_MMAP)
#endif
  static int pagesize;
  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
  if (save > bufsalloc)
      while (save > bufsalloc)
	bufsalloc *= 2;
      bufalloc = 5 * bufsalloc;
      nbuffer = valloc(bufalloc + 1);
      if (!nbuffer)
	fatal("memory exhausted", 0);
    nbuffer = buffer;
  sp = buflim - save;
  dp = nbuffer + bufsalloc - save;
  bufbeg = dp;
  while (save--)
  /* We may have allocated a new, larger buffer.  Since
     there is no portable vfree(), we just have to forget
  buffer = nbuffer;
#if defined(HAVE_WORKING_MMAP)
  if (bufmapped && bufoffset % pagesize == 0
      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
      maddr = buffer + bufsalloc;
      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
      if (maddr == (caddr_t) -1)
	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
#if 0
	 but it doesn't, at least not on a Sun running 4.1.
	 In fact, it actually slows us down about 30%! */
      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
#endif
      cc = bufalloc - bufsalloc;
      bufoffset += cc;
	 Note that we need to synchronize the file offset the
	 first time through. */
      if (bufmapped)
	  bufmapped = 0;
	  lseek(bufdesc, bufoffset, 0);
      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
#endif
  if (cc > 0)
    buflim = buffer + bufsalloc + cc;
    buflim = buffer + bufsalloc;
/* Flags controlling the style of output. */
static int out_invert;		/* Print nonmatching stuff. */
static int out_file;		/* Print filenames. */
static int out_byte;		/* Print byte offsets. */
static int out_before;		/* Lines of leading context. */
static int out_after;		/* Lines of trailing context. */
/* Internal variables to keep track of byte count, context, etc. */
static size_t totalcc;		/* Total character count before bufbeg. */
static char *lastnl;		/* Pointer after last newline counted. */
static char *lastout;		/* Pointer after last character output;
				   NULL if no character has been output
				   or if it's conceptually before bufbeg. */
static size_t totalnl;		/* Total newline count before lastnl. */
static int pending;		/* Pending lines of output. */
  for (beg = lastnl; beg < lim; ++beg)
    if (*beg == '\n')
  if (out_file)
    printf("%s%c", filename, sep);
  if (out_line)
      printf("%d%c", ++totalnl, sep);
  if (out_byte)
    printf("%lu%c", totalcc + (beg - bufbeg), sep);
  fwrite(beg, 1, lim - beg, stdout);
  if (ferror(stdout))
/* Print pending lines of trailing context prior to LIM. */
  if (!lastout)
    lastout = bufbeg;
  while (pending > 0 && lastout < lim)
      --pending;
      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
      prline(lastout, nl, '-');
   If NLINESP is non-null, store a count of lines between BEG and LIM. */
  static int used;		/* avoid printing "--" before any output */
  if (!out_quiet && pending > 0)
  if (!out_quiet)
      bp = lastout ? lastout : bufbeg;
      for (i = 0; i < out_before; ++i)
	if (p > bp)
	    --p;
	  while (p > bp && p[-1] != '\n');
      /* We only print the "--" separator if our output is
	 discontiguous from the last output in the file. */
      if ((out_before || out_after) && used && p != lastout)
	puts("--");
	  nl = memchr(p, '\n', beg - p);
	  prline(p, nl + 1, '-');
	  p = nl + 1;
  if (nlinesp)
      for (n = 0; p < lim; ++n)
	  if ((nl = memchr(p, '\n', lim - p)) != 0)
	  if (!out_quiet)
    if (!out_quiet)
  pending = out_after;
  used = 1;
/* Scan the specified portion of the buffer, matching lines (or
   between matching lines if OUT_INVERT is true).  Return a count of
grepbuf(beg, lim)
  nlines = 0;
  while ((b = (*execute)(p, lim - p, &endp)) != 0)
      /* Avoid matching the empty line at the end of the buffer. */
      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
      if (!out_invert)
	  prtext(b, endp, (int *) 0);
	  nlines += 1;
      else if (p < b)
  if (out_invert && p < lim)
/* Search a given file.  Return a count of lines printed. */
grep(fd)
     int fd;
  size_t residue, save;
  reset(fd);
  totalcc = 0;
  lastout = 0;
  totalnl = 0;
  pending = 0;
  nlines = 0;
  residue = 0;
  save = 0;
  for (;;)
      if (fillbuf(save) < 0)
	  error(filename, errno);
      lastnl = bufbeg;
      if (lastout)
	lastout = bufbeg;
      if (buflim - bufbeg == save)
      beg = bufbeg + save - residue;
      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
      residue = buflim - lim;
      if (beg < lim)
	  nlines += grepbuf(beg, lim);
	  if (pending)
      i = 0;
      while (i < out_before && beg > bufbeg && beg != lastout)
	    --beg;
	  while (beg > bufbeg && beg[-1] != '\n');
      if (beg != lastout)
	lastout = 0;
      save = residue + lim - beg;
      totalcc += buflim - bufbeg - save;
      if (out_line)
  if (residue)
      nlines += grepbuf(bufbeg + save - residue, buflim);
      if (pending)
	prpending(buflim);
static char version[] = "GNU grep version 2.0";
#define USAGE \
  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
  fprintf(stderr, USAGE, prog);
  exit(2);
/* Go through the matchers vector and look for the specified matcher.
   If we find it, install it in compile and execute, and return 1.  */
  for (i = 0; matchers[i].name; ++i)
    if (strcmp(name, matchers[i].name) == 0)
	return 1;
  return 0;
  size_t keycc, oldcc, keyalloc;
  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
  FILE *fp;
  prog = argv[0];
  if (prog && strrchr(prog, '/'))
    prog = strrchr(prog, '/') + 1;
  keycc = 0;
  keyfound = 0;
  count_matches = 0;
  no_filenames = 0;
  list_files = 0;
  suppress_errors = 0;
  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
      case '0':
      case '1':
      case '2':
      case '3':
      case '4':
      case '5':
      case '6':
      case '7':
      case '8':
      case '9':
	out_before = 10 * out_before + opt - '0';
	out_after = 10 * out_after + opt - '0';
	out_after = atoi(optarg);
	if (out_after < 0)
	out_before = atoi(optarg);
	if (out_before < 0)
	out_before = out_after = 2;
	if (matcher && strcmp(matcher, "egrep") != 0)
	  fatal("you may specify only one of -E, -F, or -G", 0);
	matcher = "posix-egrep";
	if (matcher && strcmp(matcher, "fgrep") != 0)
	  fatal("you may specify only one of -E, -F, or -G", 0);;
	matcher = "fgrep";
	if (matcher && strcmp(matcher, "grep") != 0)
	  fatal("you may specify only one of -E, -F, or -G", 0);
	fprintf(stderr, "%s\n", version);
	if (matcher)
	  fatal("matcher already specified", 0);
	out_byte = 1;
	out_quiet = 1;
	count_matches = 1;
	keys = xrealloc(keys, keycc + cc + 1);
	if (keyfound)
	keyfound = 1;
      case 'f':
	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
	if (!fp)
	  fatal(optarg, errno);
	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
	if (keyfound)
	while (!feof(fp)
	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
	    if (keycc == keyalloc)
	      keys = xrealloc(keys, keyalloc *= 2);
	if (fp != stdin)
	  fclose(fp);
	/* Nuke the final newline to avoid matching a null string. */
	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
	  --keycc;
	keyfound = 1;
	no_filenames = 1;
      case 'y':			/* For old-timers . . . */
	match_icase = 1;
	/* Like -l, except list files that don't contain matches.
	out_quiet = 1;
	list_files = -1;
	out_quiet = 1;
	list_files = 1;
	out_line = 1;
	out_quiet = 1;
	suppress_errors = 1;
	out_invert = 1;
	match_words = 1;
	match_lines = 1;
      default:
  if (!keyfound)
    if (optind < argc)
  if (!matcher)
  if (!setmatcher(matcher) && !setmatcher("default"))
  if (argc - optind > 1 && !no_filenames)
    out_file = 1;
  status = 1;
  if (optind < argc)
	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
	if (desc < 0)
	    if (!suppress_errors)
	    filename = desc == 0 ? "(standard input)" : argv[optind];
	    if (count_matches)
		if (out_file)
		  printf("%s:", filename);
		printf("%d\n", count);
	    if (count)
		status = 0;
		if (list_files == 1)
		  printf("%s\n", filename);
	    else if (list_files == -1)
	      printf("%s\n", filename);
	if (desc != 0)
      filename = "(standard input)";
      count = grep(0);
      if (count_matches)
	printf("%d\n", count);
      if (count)
	  status = 0;
	  if (list_files == 1)
	    printf("(standard input)\n");
      else if (list_files == -1)
	printf("(standard input)\n");
  exit(errseen ? 2 : status);
/* Getopt for GNU.
   NOTE: getopt is now part of the C library, so if you don't know what
   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
   before changing it!
   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
   	Free Software Foundation, Inc.
   This program is free software; you can redistribute it and/or modify it
   under the terms of the GNU General Public License as published by the
   Free Software Foundation; either version 2, or (at your option) any
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
/* NOTE!!!  AIX requires this to be the first thing in the file.
   Do not put ANYTHING before it!  */
#if !defined (__GNUC__) && defined (_AIX)
#endif
#ifdef HAVE_CONFIG_H
#include "config.h"
#define flag_config 1
#endif
#ifdef __GNUC__
#define alloca __builtin_alloca
#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
#define flag_alloca 1
#ifndef _AIX
#endif
#endif /* alloca.h */
#endif /* not __GNUC__ */
#if !__STDC__ && !defined(const) && IN_GCC
#define const
#endif
/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
#ifndef _NO_PROTO
#define _NO_PROTO
#endif
/* Comment out all this code if we are using the GNU C Library, and are not
   actually compiling the library itself.  This code is part of the GNU C
   (especially if it is a shared library).  Rather than having every GNU
   program understand `configure --with-gnu-libc' and omit the object files,
   it is simpler to just do this in the source for each such file.  */
#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
/* This needs to come after some library #include
   to get __GNU_LIBRARY__ defined.  */
#ifdef	__GNU_LIBRARY__
#undef	alloca
/* Don't include stdlib.h for non-GNU C libraries because some of them
   contain conflicting prototypes for getopt.  */
#if flag_stdlib==0   
#define flag_stdlib 1
#endif
#define	__alloca	alloca
#endif	/* GNU C library.  */
/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
   long-named option.  Because this is not POSIX.2 compliant, it is
/* #define GETOPT_COMPAT */
/* This version of `getopt' appears to the caller like standard Unix `getopt'
   but it behaves differently for the user, since it allows the user
   As `getopt' works, it permutes the elements of ARGV so that,
   all application programs are extended to handle flexible argument order.
   they can distinguish the relative order of options and other arguments.  */
/* For communication from `getopt' to the caller.
   When `getopt' finds an option that takes an argument,
   each non-option ARGV-element is returned here.  */
char *optarg = 0;
/* Index in ARGV of the next element to be scanned.
   This is used for communication to and from the caller
   and for communication between successive calls to `getopt'.
   On entry to `getopt', zero means this is the first call; initialize.
   When `getopt' returns EOF, this is the index of the first of the
   non-option elements that the caller should itself scan.
   Otherwise, `optind' communicates from one call to the next
   how much of ARGV has been scanned so far.  */
/* XXX 1003.2 says this must be 1 before any call.  */
int optind = 0;
/* The next char to be scanned in the option-element
   in which the last option character we returned was found.
   This allows us to pick up the scan where we left off.
   If this is zero, or a null string, it means resume the scan
   by advancing to the next ARGV-element.  */
/* Callers store zero here to inhibit the error message
   for unrecognized options.  */
int opterr = 1;
/* Set to an option character which was unrecognized.
   This must be initialized on some systems to avoid linking in the
/* Describe how to deal with options that follow non-option ARGV-elements.
   If the caller did not specify anything,
   the default is REQUIRE_ORDER if the environment variable
   POSIXLY_CORRECT is defined, PERMUTE otherwise.
   REQUIRE_ORDER means don't recognize them as options;
   stop option processing when the first non-option is seen.
   This mode of operation is selected by either setting the environment
   variable POSIXLY_CORRECT, or using `+' as the first character
   of the list of option characters.
   PERMUTE is the default.  We permute the contents of ARGV as we scan,
   so that eventually all the non-options are at the end.  This allows options
   to expect options and other ARGV-elements in any order and that care about
   the ordering of the two.  We describe each non-option ARGV-element
   as if it were the argument of an option with character code 1.
   Using `-' as the first character of the list of option characters
   selects this mode of operation.
   The special argument `--' forces an end of option-scanning regardless
   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
#ifdef	__GNU_LIBRARY__
/* We want to avoid inclusion of string.h with non-GNU libraries
#if flag_string==0   
#define flag_string 1
#endif
#define	my_index	strchr
#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
/* Avoid depending on library functions or files
      if (*str == chr)
  return 0;
my_bcopy (from, to, size)
     const char *from;
     int size;
  for (i = 0; i < size; i++)
    to[i] = from[i];
#endif				/* GNU C library.  */
/* Handle permutation of arguments.  */
/* Describe the part of ARGV that contains non-options that have
   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
   `last_nonopt' is the index after the last of them.  */
static int first_nonopt;
/* Exchange two adjacent subsequences of ARGV.
   One subsequence is elements [first_nonopt,last_nonopt)
   which contains all the non-options that have been skipped so far.
   the options processed since those non-options were skipped.
   `first_nonopt' and `last_nonopt' are relocated so that they describe
   the new indices of the non-options in ARGV after they are moved.  */
  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
  char **temp = (char **) __alloca (nonopts_size);
  /* Interchange the two blocks of data in ARGV.  */
  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
	    (optind - last_nonopt) * sizeof (char *));
	    (char *) &argv[first_nonopt + optind - last_nonopt],
	    nonopts_size);
  /* Update records for the slots the non-options now occupy.  */
  first_nonopt += (optind - last_nonopt);
/* Scan elements of ARGV (whose length is ARGC) for option characters
   If an element of ARGV starts with '-', and is not exactly "-" or "--",
   then it is an option element.  The characters of this element
   (aside from the initial '-') are option characters.  If `getopt'
   is called repeatedly, it returns successively each of the option characters
   from each of the option elements.
   If `getopt' finds another option character, it returns that character,
   resume the scan with the following option character or ARGV-element.
   If there are no more option characters, `getopt' returns `EOF'.
   Then `optind' is the index in ARGV of the first ARGV-element
   that is not an option.  (The ARGV-elements have been permuted
   If an option character is seen that is not listed in OPTSTRING,
   return '?' after printing an error message.  If you set `opterr' to
   zero, the error message is suppressed but we still return '?'.
   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
   so the following text in the same ARGV-element, or the text of the following
   ARGV-element, is returned in `optarg'.  Two colons mean an option that
   wants an optional arg; if there is text in the current ARGV-element,
   it is returned in `optarg', otherwise `optarg' is set to zero.
   If OPTSTRING starts with `-' or `+', it requests different methods of
   handling the non-option ARGV-elements.
   Long-named options begin with `--' instead of `-'.
   or is an exact match for some defined option.  If they have an
   argument, it follows the option name in the same ARGV-element, separated
   from the option name by a `=', or else the in next ARGV-element.
   When `getopt' finds a long-named option, it returns 0 if that option's
   `flag' field is nonzero, the value of the option's `val' field
   if the `flag' field is zero.
   The elements of ARGV aren't really const, because we permute them.
   LONGOPTS is a vector of `struct option' terminated by an
   element containing a name which is zero.
   LONGIND returns the index in LONGOPT of the long-named option found.
   It is only valid when a long-named option has been found by the most
   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
   long-named options.  */
  optarg = 0;
  /* Initialize the internal data when the first call is made.
     Start processing options with ARGV-element 1 (since ARGV-element 0
     is the program name); the sequence of previously skipped
     non-option ARGV-elements is empty.  */
  if (optind == 0)
      first_nonopt = last_nonopt = optind = 1;
      /* Determine how to handle the ordering of options and nonoptions.  */
      if (optstring[0] == '-')
      else if (optstring[0] == '+')
      else if (getenv ("POSIXLY_CORRECT") != NULL)
  if (nextchar == NULL || *nextchar == '\0')
      if (ordering == PERMUTE)
	  /* If we have just processed some options following some non-options,
	     exchange them so that the options come first.  */
	  if (first_nonopt != last_nonopt && last_nonopt != optind)
	  else if (last_nonopt != optind)
	    first_nonopt = optind;
	  /* Now skip any additional non-options
	     and extend the range of non-options previously skipped.  */
		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
#ifdef GETOPT_COMPAT
		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
#endif				/* GETOPT_COMPAT */
      /* Special ARGV-element `--' means premature end of options.
	 then exchange with previous non-options as if it were an option,
	 then skip everything else like a non-option.  */
      if (optind != argc && !strcmp (argv[optind], "--"))
	  if (first_nonopt != last_nonopt && last_nonopt != optind)
	  else if (first_nonopt == last_nonopt)
	    first_nonopt = optind;
      /* If we have done all the ARGV-elements, stop the scan
	 and back over any non-options that we skipped and permuted.  */
      if (optind == argc)
	  /* Set the next-arg-index to point at the non-options
	  if (first_nonopt != last_nonopt)
	    optind = first_nonopt;
      /* If we have come to a non-option and did not permute it,
      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
#ifdef GETOPT_COMPAT
	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
#endif				/* GETOPT_COMPAT */
	  if (ordering == REQUIRE_ORDER)
	  return 1;
      /* We have found another option-ARGV-element.
      nextchar = (argv[optind] + 1
		  + (longopts != NULL && argv[optind][1] == '-'));
  if (longopts != NULL
      && ((argv[optind][0] == '-'
	   && (argv[optind][1] == '-' || long_only))
#ifdef GETOPT_COMPAT
	  || argv[optind][0] == '+'
#endif				/* GETOPT_COMPAT */
      int exact = 0;
      int ambig = 0;
      const struct option *pfound = NULL;
      int indfound;
      /* Test all options for either exact match or abbreviated matches.  */
      for (p = longopts, option_index = 0; p->name;
	if (!strncmp (p->name, nextchar, s - nextchar))
	    if (s - nextchar == strlen (p->name))
		/* Exact match found.  */
		pfound = p;
		indfound = option_index;
		exact = 1;
	    else if (pfound == NULL)
		/* First nonexact match found.  */
		pfound = p;
		indfound = option_index;
	      /* Second nonexact match found.  */
	      ambig = 1;
      if (ambig && !exact)
	  if (opterr)
	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
		     argv[0], argv[optind]);
      if (pfound != NULL)
	  option_index = indfound;
	  if (*s)
	      if (pfound->has_arg)
		optarg = s + 1;
		  if (opterr)
		      if (argv[optind - 1][1] == '-')
			/* --option */
			fprintf (stderr,
				 "%s: option `--%s' doesn't allow an argument\n",
				 argv[0], pfound->name);
			/* +option or -option */
			fprintf (stderr,
			     argv[0], argv[optind - 1][0], pfound->name);
	  else if (pfound->has_arg == 1)
	      if (optind < argc)
		  if (opterr)
		    fprintf (stderr, "%s: option `%s' requires an argument\n",
			     argv[0], argv[optind - 1]);
		  return optstring[0] == ':' ? ':' : '?';
	  if (longind != NULL)
	  if (pfound->flag)
	      *(pfound->flag) = pfound->val;
	      return 0;
	  return pfound->val;
      /* Can't find it as a long option.  If this is not getopt_long_only,
	 or the option starts with '--' or is not a valid short
      if (!long_only || argv[optind][1] == '-'
#ifdef GETOPT_COMPAT
	  || argv[optind][0] == '+'
#endif				/* GETOPT_COMPAT */
	  if (opterr)
	      if (argv[optind][1] == '-')
		/* --option */
		fprintf (stderr, "%s: unrecognized option `--%s'\n",
			 argv[0], nextchar);
		/* +option or -option */
		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
			 argv[0], argv[optind][0], nextchar);
  /* Look at and handle the next option-character.  */
    if (*nextchar == '\0')
    if (temp == NULL || c == ':')
	if (opterr)
#if 0
	    if (c < 040 || c >= 0177)
	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
		       argv[0], c);
	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
	    /* 1003.2 specifies the format of this message.  */
	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
#endif
    if (temp[1] == ':')
	if (temp[2] == ':')
	    if (*nextchar != '\0')
	      optarg = 0;
	    if (*nextchar != '\0')
		/* If we end this ARGV-element by taking the rest as an arg,
	    else if (optind == argc)
		if (opterr)
#if 0
		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
			     argv[0], c);
		    /* 1003.2 specifies the format of this message.  */
		    fprintf (stderr, "%s: option requires an argument -- %c\n",
			     argv[0], c);
#endif
		if (optstring[0] == ':')
		 increment it again when taking next ARGV-elt as argument.  */
			   (const struct option *) 0,
			   (int *) 0,
			   0);
#endif	/* _LIBC or not __GNU_LIBRARY__.  */
#ifdef TEST
/* Compile with -DTEST to make an executable for use in testing
   the above definition of `getopt'.  */
  int digit_optind = 0;
  while (1)
      int this_option_optind = optind ? optind : 1;
      c = getopt (argc, argv, "abc:d:0123456789");
      if (c == EOF)
	case '0':
	case '1':
	case '2':
	case '3':
	case '4':
	case '5':
	case '6':
	case '7':
	case '8':
	case '9':
	  if (digit_optind != 0 && digit_optind != this_option_optind)
	    printf ("digits occur in two different argv-elements.\n");
	  printf ("option %c\n", c);
	  printf ("option a\n");
	  printf ("option b\n");
	  printf ("option c with value `%s'\n", optarg);
	default:
	  printf ("?? getopt returned character code 0%o ??\n", c);
  if (optind < argc)
      printf ("non-option ARGV-elements: ");
	printf ("%s ", argv[optind++]);
      printf ("\n");
  exit (0);
#endif /* TEST */
   version 0.12.
   (Implements POSIX draft P10003.2/D11.2, except for
   internationalization features.)
   Copyright (C) 1993 Free Software Foundation, Inc.
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2, or (at your option)
   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   GNU General Public License for more details.
   You should have received a copy of the GNU General Public License
   along with this program; if not, write to the Free Software
   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
/* AIX requires this to be the first thing in the file. */
#if defined (_AIX) && !defined (REGEX_MALLOC)
#endif
#define _GNU_SOURCE
/* We need this for `regex.h', and perhaps for the Emacs include files.  */
#if flag_systypes==0
#define flag_systypes 1
#endif
#ifdef HAVE_CONFIG_H
#if flag_config==0
#include "config.h"
#define flag_config 1
#endif
#endif
#ifdef emacs
#include "buffer.h"
#undef NULL
/* We used to test for `BSTRING' here, but only GCC and Emacs define
   `BSTRING', as far as I know, and neither of them use this code.  */
#if HAVE_STRING_H || STDC_HEADERS
#if flag_string==0
#define flag_string 1
#endif
#ifndef bcmp
#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
#endif
#ifndef bcopy
#define bcopy(s, d, n)	memcpy ((d), (s), (n))
#endif
#ifndef bzero
#define bzero(s, n)	memset ((s), 0, (n))
#endif
#if flag_strings==0
#define flag_strings 1
#endif
#endif
#ifdef STDC_HEADERS
#if flag_stdlib==0 
#define flag_stdlib 1
#endif
#endif
/* Define the syntax stuff for \<, \>, etc.  */
/* This must be nonzero for the wordchar and notwordchar pattern
   commands in re_match_2.  */
#ifndef Sword 
#define Sword 1
#endif
#ifdef SYNTAX_TABLE
#define CHAR_SET_SIZE 256
   static int done = 0;
   if (done)
   bzero (re_syntax_table, sizeof re_syntax_table);
   for (c = 'a'; c <= 'z'; c++)
   for (c = 'A'; c <= 'Z'; c++)
   for (c = '0'; c <= '9'; c++)
   done = 1;
#endif /* not SYNTAX_TABLE */
#define SYNTAX(c) re_syntax_table[c]
#endif /* not emacs */
/* Get the interface, including the syntax bits.  */
/* isalpha etc. are used for the character classes.  */
   "... Some ctype macros are valid only for character codes that
   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
   ctype uses should be through macros like ISPRINT...  If
   STDC_HEADERS is defined, then autoconf has verified that the ctype
   macros don't need to be guarded with references to isascii. ...
   Defining isascii to 1 should let any compiler worth its salt
   eliminate the && through constant folding."  */
#if ! defined (isascii) || defined (STDC_HEADERS)
#undef isascii
#define isascii(c) 1
#endif
#ifdef isblank
#define ISBLANK(c) (isascii (c) && isblank (c))
#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
#endif
#ifdef isgraph
#define ISGRAPH(c) (isascii (c) && isgraph (c))
#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
#endif
#define ISPRINT(c) (isascii (c) && isprint (c))
#define ISDIGIT(c) (isascii (c) && isdigit (c))
#define ISALNUM(c) (isascii (c) && isalnum (c))
#define ISALPHA(c) (isascii (c) && isalpha (c))
#define ISCNTRL(c) (isascii (c) && iscntrl (c))
#define ISLOWER(c) (isascii (c) && islower (c))
#define ISPUNCT(c) (isascii (c) && ispunct (c))
#define ISSPACE(c) (isascii (c) && isspace (c))
#define ISUPPER(c) (isascii (c) && isupper (c))
#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
#ifndef NULL
#define NULL 0
#endif
/* We remove any previous definition of `SIGN_EXTEND_CHAR',
   since ours (we hope) works properly with all combinations of
#undef SIGN_EXTEND_CHAR
#if __STDC__
#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
#endif
/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
   use `alloca' instead of `malloc'.  This is because using malloc in
   re_search* or re_match* could cause memory leaks when C-g is used in
   Emacs; also, malloc is slower and causes storage fragmentation.  On
   not functions -- `alloca'-allocated space disappears at the end of the
   function it is called in.  */
#ifdef REGEX_MALLOC
#define REGEX_ALLOCATE malloc
#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
/* Emacs already defines alloca, sometimes.  */
#ifndef alloca
#ifdef __GNUC__
#define alloca __builtin_alloca
#if HAVE_ALLOCA_H
#if flag_alloca==0
#define flag_alloca 1
#endif 
#ifndef _AIX /* Already did AIX, up at the top.  */
#endif /* not _AIX */
#endif /* not HAVE_ALLOCA_H */ 
#endif /* not __GNUC__ */
#endif /* not alloca */
#define REGEX_ALLOCATE alloca
#define REGEX_REALLOCATE(source, osize, nsize)				\
  (destination = (char *) alloca (nsize),				\
   bcopy (source, destination, osize),					\
#endif /* not REGEX_MALLOC */
/* True if `size1' is non-NULL and PTR is pointing anywhere inside
   `string1' or just past its end.  This works if PTR is NULL, which is
#define FIRST_STRING_P(ptr) 					\
  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
/* (Re)Allocate N items of type T using malloc, or fail.  */
#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
#define BYTEWIDTH 8 /* In bits.  */
#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
#undef MAX               /****** added later *******/
#define MAX(a, b) ((a) > (b) ? (a) : (b))
#define MIN(a, b) ((a) < (b) ? (a) : (b))
typedef char boolean;
#define false 0
#define true 1
   expressions.  Some opcodes are followed by argument bytes.  A
   command code can specify any interpretation whatsoever for its
   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
   `exactn' we use here must also be 1.  */
typedef enum
  no_op = 0,
  exactn = 1,
        /* Matches any one char belonging to specified set.  First
           following byte is number of bitmap bytes.  Then come bytes
           for a bitmap saying which chars are in.  Bits in each byte
           are ordered low-bit-first.  A character is in the set if its
           bit is 1.  A character too large to have a bit in the map is
           not one of those specified.  */
        /* Start remembering the text that is matched, for storing in a
           the range 0 to one less than the pattern buffer's re_nsub
           field.  Then followed by one byte with the number of groups
           inner to this one.  (This last has to be part of the
           start_memory only because we need it in the on_failure_jump
           of re_match_2.)  */
           number, in the range 0 to one less than `re_nsub' in the
           pattern buffer, and one byte with the number of inner groups,
           just like `start_memory'.  (We need the number of inner
           groups here because we don't have any easy way of finding the
        /* Match a duplicate of something remembered. Followed by one
        /* Fail unless at beginning of line.  */
        /* Fail unless at end of line.  */
        /* Succeeds if at beginning of buffer (if emacs) or at beginning
           of string to be matched (if not).  */
  begbuf,
        /* Analogously, for end of buffer/string.  */
  endbuf,
	/* Same as jump, but marks the end of an alternative.  */
        /* Followed by two-byte relative address of place to resume at
           in case of failure.  */
  on_failure_jump,
        /* Like on_failure_jump, but pushes a placeholder instead of the
  on_failure_keep_string_jump,
        /* Throw away latest failure point and then jump to following
           two-byte relative address.  */
  pop_failure_jump,
        /* Change to pop_failure_jump if know won't have to backtrack to
           back to the beginning of a repeat.  If what follows this jump
           sure that there is no use backtracking out of repetitions
           already matched, then we change it to a pop_failure_jump.
           Followed by two-byte address.  */
        /* Jump to following two-byte address, and push a dummy failure
           point. This failure point will be thrown away if an attempt
           is made to use it for a failure.  A `+' construct makes this
           before the first repeat.  Also used as an intermediary kind
           of jump when compiling an alternative.  */
  dummy_failure_jump,
	/* Push a dummy failure point and continue.  Used at the end of
  push_dummy_failure,
        /* Followed by two-byte relative address and two-byte number n.
           After matching N times, jump to the address upon failure.  */
        /* Followed by two-byte relative address, and two-byte number n.
           Jump to the address N times, then fail.  */
        /* Set the following two-byte relative address to the
           subsequent two-byte number.  The address *includes* the two
           bytes of number.  */
  wordchar,	/* Matches any word-constituent character.  */
  notwordchar,	/* Matches any char that is not a word-constituent.  */
  wordbeg,	/* Succeeds if at word beginning.  */
  wordend,	/* Succeeds if at word end.  */
  wordbound,	/* Succeeds if at a word boundary.  */
  notwordbound	/* Succeeds if not at a word boundary.  */
#ifdef emacs
  ,before_dot,	/* Succeeds if before point.  */
  at_dot,	/* Succeeds if at point.  */
  after_dot,	/* Succeeds if after point.  */
	/* Matches any character whose syntax is specified.  Followed by
	/* Matches any character whose syntax is not that specified.  */
#endif /* emacs */
#define STORE_NUMBER(destination, number)				\
    (destination)[0] = (number) & 0377;					\
    (destination)[1] = (number) >> 8;					\
  } while (0)
   the byte after where the number is stored.  Therefore, DESTINATION
#define STORE_NUMBER_AND_INCR(destination, number)			\
    (destination) += 2;							\
  } while (0)
#define EXTRACT_NUMBER(destination, source)				\
    (destination) = *(source) & 0377;					\
    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
  } while (0)
#ifdef DEBUG
  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
  *dest = *source & 0377;
  *dest += temp << 8;
#ifndef EXTRACT_MACROS /* To debug the macros.  */
#undef EXTRACT_NUMBER
#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
#endif /* not EXTRACT_MACROS */
#endif /* DEBUG */
/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
    (source) += 2; 							\
  } while (0)
#ifdef DEBUG
  *source += 2;
#ifndef EXTRACT_MACROS
#undef EXTRACT_NUMBER_AND_INCR
#define EXTRACT_NUMBER_AND_INCR(dest, src) \
#endif /* not EXTRACT_MACROS */
#endif /* DEBUG */
/* If DEBUG is defined, Regex prints many voluminous messages about what
   it is doing (if the variable `debug' is nonzero).  If linked with the
   interactively.  And if linked with the main program in `main.c' and
   the other test files, you can run the already-written tests.  */
#ifdef DEBUG
/* We use standard I/O for debugging.  */
/* It is useful to test things that ``must'' be true when debugging.  */
static int debug = 0;
#define DEBUG_STATEMENT(e) e
#define DEBUG_PRINT1(x) if (debug) printf (x)
#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
  if (debug) print_partial_compiled_pattern (s, e)
#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
  if (debug) print_double_string (w, s1, sz1, s2, sz2)
/* Print the fastmap in human-readable form.  */
print_fastmap (fastmap)
    char *fastmap;
  unsigned was_a_range = 0;
  unsigned i = 0;  
  while (i < (1 << BYTEWIDTH))
      if (fastmap[i++])
	  was_a_range = 0;
          printchar (i - 1);
          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
              was_a_range = 1;
	  if (was_a_range)
              printf ("-");
              printchar (i - 1);
/* Print a compiled pattern string in human-readable form, starting at
   the START pointer into it and ending just before the pointer END.  */
  int mcnt, mcnt2;
  if (start == NULL)
      printf ("(null)\n");
      printf ("%d:\t", p - start);
          printf ("/no_op");
          printf ("/exactn/%d", mcnt);
          while (--mcnt);
          printf ("/start_memory/%d/%d", mcnt, *p++);
	  printf ("/stop_memory/%d/%d", mcnt, *p++);
	  printf ("/duplicate/%d", *p++);
	  printf ("/anychar");
            register int c, last = -100;
	    register int in_range = 0;
	    printf ("/charset [%s",
	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
            for (c = 0; c < 256; c++)
	      if (c / 8 < *p
		  && (p[1 + (c/8)] & (1 << (c % 8))))
		  if (last + 1 == c && ! in_range)
		      putchar ('-');
		      in_range = 1;
		  else if (last + 1 != c && in_range)
		      in_range = 0;
		  if (! in_range)
	    if (in_range)
	    p += 1 + *p;
	  printf ("/begline");
          printf ("/endline");
	case on_failure_jump:
  	  printf ("/on_failure_jump to %d", p + mcnt - start);
	case on_failure_keep_string_jump:
  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
	case dummy_failure_jump:
  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
	case push_dummy_failure:
          printf ("/push_dummy_failure");
  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
        case pop_failure_jump:
  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
  	  printf ("/jump_past_alt to %d", p + mcnt - start);
  	  printf ("/jump to %d", p + mcnt - start);
          extract_number_and_incr (&mcnt2, &p);
	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
          extract_number_and_incr (&mcnt2, &p);
	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
          extract_number_and_incr (&mcnt2, &p);
	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
	  printf ("/wordbound");
	  printf ("/notwordbound");
	  printf ("/wordbeg");
	  printf ("/wordend");
#ifdef emacs
	case before_dot:
	  printf ("/before_dot");
	  printf ("/at_dot");
	case after_dot:
	  printf ("/after_dot");
          printf ("/syntaxspec");
	  printf ("/%d", mcnt);
          printf ("/notsyntaxspec");
	  printf ("/%d", mcnt);
#endif /* emacs */
	  printf ("/wordchar");
	  printf ("/notwordchar");
	case begbuf:
	  printf ("/begbuf");
	case endbuf:
	  printf ("/endbuf");
        default:
          printf ("?%d", *(p-1));
  printf ("%d:\tend of pattern.\n", p - start);
print_compiled_pattern (bufp)
    struct re_pattern_buffer *bufp;
  unsigned char *buffer = bufp->buffer;
  print_partial_compiled_pattern (buffer, buffer + bufp->used);
  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
  if (bufp->fastmap_accurate && bufp->fastmap)
      printf ("fastmap: ");
      print_fastmap (bufp->fastmap);
  printf ("re_nsub: %d\t", bufp->re_nsub);
  printf ("regs_alloc: %d\t", bufp->regs_allocated);
  printf ("can_be_null: %d\t", bufp->can_be_null);
  printf ("newline_anchor: %d\n", bufp->newline_anchor);
  printf ("no_sub: %d\t", bufp->no_sub);
  printf ("not_bol: %d\t", bufp->not_bol);
  printf ("not_eol: %d\t", bufp->not_eol);
  printf ("syntax: %d\n", bufp->syntax);
print_double_string (where, string1, size1, string2, size2)
    const char *string1;
    const char *string2;
    int size1;
    int size2;
  if (where == NULL)
    printf ("(null)");
      if (FIRST_STRING_P (where))
          for (this_char = where - string1; this_char < size1; this_char++)
            printchar (string1[this_char]);
          where = string2;    
      for (this_char = where - string2; this_char < size2; this_char++)
        printchar (string2[this_char]);
#undef assert
#define assert(e)
#define DEBUG_STATEMENT(e)
#define DEBUG_PRINT1(x)
#define DEBUG_PRINT2(x1, x2)
#define DEBUG_PRINT3(x1, x2, x3)
#define DEBUG_PRINT4(x1, x2, x3, x4)
#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
#endif /* not DEBUG */
/* Set by `re_set_syntax' to the current regexp syntax to recognize.Segmentation fault
