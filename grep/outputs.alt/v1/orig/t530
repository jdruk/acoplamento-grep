../inputs/grep0.dat:1:Before an alternative
../inputs/grep0.dat:2:store_op2 (op, loc, arg1, arg2)
../inputs/grep0.dat:3:store_op2 (op, loc, arg1, arg2)
../inputs/grep0.dat:4:syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep0.dat:5:re_opcode_t op;
../inputs/grep0.dat:6:static void
../inputs/grep0.dat:7:syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep0.dat:8:        : next_backslash && next_next && *next_next == ')')
../inputs/grep0.dat:9:Before an alternative
../inputs/grep0.dat:11:struct trie
../inputs/grep0.dat:12: ../inputs/grep1.dat:1:/* grep.c - main driver file for grep.
../inputs/grep1.dat:2:   Copyright (C) 1992 Free Software Foundation, Inc.
../inputs/grep1.dat:3:
../inputs/grep1.dat:4:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:5:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:6:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:7:   any later version.
../inputs/grep1.dat:8:
../inputs/grep1.dat:9:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:12:   GNU General Public License for more details.
../inputs/grep1.dat:13:
../inputs/grep1.dat:14:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:15:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:16:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:17:
../inputs/grep1.dat:18:   Written July 1992 by Mike Haertel.  */
../inputs/grep1.dat:19:
../inputs/grep1.dat:20:
../inputs/grep1.dat:21:/* I added a series define from makefile here in order to run cfe */
../inputs/grep1.dat:22:#define GREP 1
../inputs/grep1.dat:23:#define STDC_HEADERS 1
../inputs/grep1.dat:24:#define HAVE_STRING_H 1
../inputs/grep1.dat:25:#define HAVE_SYS_PARAM_H 1
../inputs/grep1.dat:26:#define HAVE_UNISTD_H 1
../inputs/grep1.dat:27:#define HAVE_ALLOCA_H 1
../inputs/grep1.dat:28:#define HAVE_GETPAGESIZE 1
../inputs/grep1.dat:29:#define HAVE_MEMCHR 1
../inputs/grep1.dat:30:#define HAVE_STRERROR 1
../inputs/grep1.dat:31:#define HAVE_VALLOC 1
../inputs/grep1.dat:32:#define HAVE_WORKING_MMAP 1
../inputs/grep1.dat:33:/*** end of cfe purpose **/
../inputs/grep1.dat:34:
../inputs/grep1.dat:37:
../inputs/grep1.dat:38:#ifndef errno
../inputs/grep1.dat:39:extern int errno;
../inputs/grep1.dat:40:#endif
../inputs/grep1.dat:41:
../inputs/grep1.dat:42:#ifdef STDC_HEADERS
../inputs/grep1.dat:44:#define flag_stdlib 1
../inputs/grep1.dat:45:#else
../inputs/grep1.dat:47:#define flag_systypes 1
../inputs/grep1.dat:48:extern char *malloc(), *realloc();
../inputs/grep1.dat:49:extern void free();
../inputs/grep1.dat:50:#endif
../inputs/grep1.dat:51:
../inputs/grep1.dat:52:#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
../inputs/grep1.dat:54:#define flag_string 1
../inputs/grep1.dat:55:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:57:#define flag_memory 1
../inputs/grep1.dat:58:#endif
../inputs/grep1.dat:59:#else
../inputs/grep1.dat:61:#define flag_strings 1
../inputs/grep1.dat:62:#ifdef __STDC__
../inputs/grep1.dat:63:extern void *memchr();
../inputs/grep1.dat:64:#else
../inputs/grep1.dat:65:extern char *memchr();
../inputs/grep1.dat:66:#endif
../inputs/grep1.dat:67:#define strrchr rindex
../inputs/grep1.dat:68:#endif
../inputs/grep1.dat:69:
../inputs/grep1.dat:70:#ifdef HAVE_UNISTD_H
../inputs/grep1.dat:71:#if flag_systypes==0
../inputs/grep1.dat:73:#define flag_systypes 1
../inputs/grep1.dat:74:#endif
../inputs/grep1.dat:77:#else
../inputs/grep1.dat:78:#define O_RDONLY 0
../inputs/grep1.dat:79:extern int open(), read(), close();
../inputs/grep1.dat:80:#endif
../inputs/grep1.dat:81:
../inputs/grep1.dat:84:
../inputs/grep1.dat:85:#undef MAX
../inputs/grep1.dat:86:#define MAX(A,B) ((A) > (B) ? (A) : (B))
../inputs/grep1.dat:87:
../inputs/grep1.dat:88:/* Provide missing ANSI features if necessary. */
../inputs/grep1.dat:89:
../inputs/grep1.dat:90:#ifndef HAVE_STRERROR
../inputs/grep1.dat:91:extern int sys_nerr;
../inputs/grep1.dat:92:extern char *sys_errlist[];
../inputs/grep1.dat:93:#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
../inputs/grep1.dat:94:#endif
../inputs/grep1.dat:95:
../inputs/grep1.dat:96:#ifndef HAVE_MEMCHR
../inputs/grep1.dat:97:#ifdef __STDC__
../inputs/grep1.dat:98:#define VOID void
../inputs/grep1.dat:99:#else
../inputs/grep1.dat:100:#define VOID char
../inputs/grep1.dat:101:#endif
../inputs/grep1.dat:102:VOID *
../inputs/grep1.dat:103:memchr(vp, c, n)
../inputs/grep1.dat:104:     VOID *vp;
../inputs/grep1.dat:105:     int c;
../inputs/grep1.dat:106:     size_t n;
../inputs/grep1.dat:107:{
../inputs/grep1.dat:108:  unsigned char *p;
../inputs/grep1.dat:109:
../inputs/grep1.dat:110:  for (p = (unsigned char *) vp; n--; ++p)
../inputs/grep1.dat:111:    if (*p == c)
../inputs/grep1.dat:112:      return (VOID *) p;
../inputs/grep1.dat:113:  return 0;
../inputs/grep1.dat:114:}
../inputs/grep1.dat:115:#endif
../inputs/grep1.dat:116:    
../inputs/grep1.dat:117:/* Define flags declared in grep.h. */
../inputs/grep1.dat:118:char *matcher;
../inputs/grep1.dat:119:int match_icase;
../inputs/grep1.dat:120:int match_words;
../inputs/grep1.dat:121:int match_lines;
../inputs/grep1.dat:122:
../inputs/grep1.dat:123:/* Functions we'll use to search. */
../inputs/grep1.dat:124:static void (*compile)();
../inputs/grep1.dat:125:static char *(*execute)();
../inputs/grep1.dat:126:
../inputs/grep1.dat:127:/* For error messages. */
../inputs/grep1.dat:128:static char *prog;
../inputs/grep1.dat:129:static char *filename;
../inputs/grep1.dat:130:static int errseen;
../inputs/grep1.dat:131:
../inputs/grep1.dat:132:/* Print a message and possibly an error string.  Remember
../inputs/grep1.dat:133:   that something awful happened. */
../inputs/grep1.dat:134:static void
../inputs/grep1.dat:135:error(mesg, errnum)
../inputs/grep1.dat:136:#ifdef __STDC__
../inputs/grep1.dat:137:     const
../inputs/grep1.dat:138:#endif
../inputs/grep1.dat:139:     char *mesg;
../inputs/grep1.dat:140:     int errnum;
../inputs/grep1.dat:141:{
../inputs/grep1.dat:142:  if (errnum)
../inputs/grep1.dat:143:    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
../inputs/grep1.dat:144:  else
../inputs/grep1.dat:145:    fprintf(stderr, "%s: %s\n", prog, mesg);
../inputs/grep1.dat:146:  errseen = 1;
../inputs/grep1.dat:147:}
../inputs/grep1.dat:148:
../inputs/grep1.dat:149:/* Like error(), but die horribly after printing. */
../inputs/grep1.dat:150:void
../inputs/grep1.dat:151:fatal(mesg, errnum)
../inputs/grep1.dat:152:#ifdef __STDC__
../inputs/grep1.dat:153:     const
../inputs/grep1.dat:154:#endif
../inputs/grep1.dat:155:     char *mesg;
../inputs/grep1.dat:156:     int errnum;
../inputs/grep1.dat:157:{
../inputs/grep1.dat:158:  error(mesg, errnum);
../inputs/grep1.dat:159:  exit(2);
../inputs/grep1.dat:160:}
../inputs/grep1.dat:161:
../inputs/grep1.dat:162:/* Interface to handle errors and fix library lossage. */
../inputs/grep1.dat:163:char *
../inputs/grep1.dat:164:xmalloc(size)
../inputs/grep1.dat:165:     size_t size;
../inputs/grep1.dat:166:{
../inputs/grep1.dat:167:  char *result;
../inputs/grep1.dat:168:
../inputs/grep1.dat:169:  result = malloc(size);
../inputs/grep1.dat:170:  if (size && !result)
../inputs/grep1.dat:171:    fatal("memory exhausted", 0);
../inputs/grep1.dat:172:  return result;
../inputs/grep1.dat:173:}
../inputs/grep1.dat:174:
../inputs/grep1.dat:175:/* Interface to handle errors and fix some library lossage. */
../inputs/grep1.dat:176:char *
../inputs/grep1.dat:177:xrealloc(ptr, size)
../inputs/grep1.dat:178:     char *ptr;
../inputs/grep1.dat:179:     size_t size;
../inputs/grep1.dat:180:{
../inputs/grep1.dat:181:  char *result;
../inputs/grep1.dat:182:
../inputs/grep1.dat:183:  if (ptr)
../inputs/grep1.dat:184:    result = realloc(ptr, size);
../inputs/grep1.dat:185:  else
../inputs/grep1.dat:186:    result = malloc(size);
../inputs/grep1.dat:187:  if (size && !result)
../inputs/grep1.dat:188:    fatal("memory exhausted", 0);
../inputs/grep1.dat:189:  return result;
../inputs/grep1.dat:190:}
../inputs/grep1.dat:191:
../inputs/grep1.dat:192:#if !defined(HAVE_VALLOC)
../inputs/grep1.dat:193:#define valloc malloc
../inputs/grep1.dat:194:#else
../inputs/grep1.dat:195:#ifdef __STDC__
../inputs/grep1.dat:196:extern void *valloc(size_t);
../inputs/grep1.dat:197:#else
../inputs/grep1.dat:198:extern char *valloc();
../inputs/grep1.dat:199:#endif
../inputs/grep1.dat:200:#endif
../inputs/grep1.dat:201:
../inputs/grep1.dat:202:/* Hairy buffering mechanism for grep.  The intent is to keep
../inputs/grep1.dat:203:   all reads aligned on a page boundary and multiples of the
../inputs/grep1.dat:204:   page size. */
../inputs/grep1.dat:205:
../inputs/grep1.dat:206:static char *buffer;		/* Base of buffer. */
../inputs/grep1.dat:207:static size_t bufsalloc;	/* Allocated size of buffer save region. */
../inputs/grep1.dat:208:static size_t bufalloc;		/* Total buffer size. */
../inputs/grep1.dat:209:static int bufdesc;		/* File descriptor. */
../inputs/grep1.dat:210:static char *bufbeg;		/* Beginning of user-visible stuff. */
../inputs/grep1.dat:211:static char *buflim;		/* Limit of user-visible stuff. */
../inputs/grep1.dat:212:
../inputs/grep1.dat:213:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:214:#if flag_systypes==0
../inputs/grep1.dat:216:#define flag_systypes 1
../inputs/grep1.dat:217:#endif
../inputs/grep1.dat:220:
../inputs/grep1.dat:221:static int bufmapped;		/* True for ordinary files. */
../inputs/grep1.dat:222:static struct stat bufstat;	/* From fstat(). */
../inputs/grep1.dat:223:static off_t bufoffset;		/* What read() normally remembers. */
../inputs/grep1.dat:224:#endif
../inputs/grep1.dat:225:
../inputs/grep1.dat:226:/* Reset the buffer for a new file.  Initialize
../inputs/grep1.dat:227:   on the first time through. */
../inputs/grep1.dat:228:void
../inputs/grep1.dat:229:reset(fd)
../inputs/grep1.dat:230:     int fd;
../inputs/grep1.dat:231:{
../inputs/grep1.dat:232:  static int initialized;
../inputs/grep1.dat:233:
../inputs/grep1.dat:234:  if (!initialized)
../inputs/grep1.dat:235:    {
../inputs/grep1.dat:236:      initialized = 1;
../inputs/grep1.dat:237:#ifndef BUFSALLOC
../inputs/grep1.dat:238:      bufsalloc = MAX(8192, getpagesize());
../inputs/grep1.dat:239:#else
../inputs/grep1.dat:240:      bufsalloc = BUFSALLOC;
../inputs/grep1.dat:241:#endif
../inputs/grep1.dat:242:      bufalloc = 5 * bufsalloc;
../inputs/grep1.dat:243:      /* The 1 byte of overflow is a kludge for dfaexec(), which
../inputs/grep1.dat:244:	 inserts a sentinel newline at the end of the buffer
../inputs/grep1.dat:245:	 being searched.  There's gotta be a better way... */
../inputs/grep1.dat:246:      buffer = valloc(bufalloc + 1);
../inputs/grep1.dat:247:      if (!buffer)
../inputs/grep1.dat:248:	fatal("memory exhausted", 0);
../inputs/grep1.dat:249:      bufbeg = buffer;
../inputs/grep1.dat:250:      buflim = buffer;
../inputs/grep1.dat:251:    }
../inputs/grep1.dat:252:  bufdesc = fd;
../inputs/grep1.dat:253:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:254:  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
../inputs/grep1.dat:255:    bufmapped = 0;
../inputs/grep1.dat:256:  else
../inputs/grep1.dat:257:    {
../inputs/grep1.dat:258:      bufmapped = 1;
../inputs/grep1.dat:259:      bufoffset = lseek(fd, 0, 1);
../inputs/grep1.dat:260:    }
../inputs/grep1.dat:261:#endif
../inputs/grep1.dat:262:}
../inputs/grep1.dat:263:
../inputs/grep1.dat:264:/* Read new stuff into the buffer, saving the specified
../inputs/grep1.dat:265:   amount of old stuff.  When we're done, 'bufbeg' points
../inputs/grep1.dat:266:   to the beginning of the buffer contents, and 'buflim'
../inputs/grep1.dat:267:   points just after the end.  Return count of new stuff. */
../inputs/grep1.dat:268:static int
../inputs/grep1.dat:269:fillbuf(save)
../inputs/grep1.dat:270:     size_t save;
../inputs/grep1.dat:271:{
../inputs/grep1.dat:272:  char *nbuffer, *dp, *sp;
../inputs/grep1.dat:273:  int cc;
../inputs/grep1.dat:274:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:275:  caddr_t maddr;
../inputs/grep1.dat:276:#endif
../inputs/grep1.dat:277:  static int pagesize;
../inputs/grep1.dat:278:
../inputs/grep1.dat:279:  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
../inputs/grep1.dat:280:    abort();
../inputs/grep1.dat:281:
../inputs/grep1.dat:282:  if (save > bufsalloc)
../inputs/grep1.dat:283:    {
../inputs/grep1.dat:284:      while (save > bufsalloc)
../inputs/grep1.dat:285:	bufsalloc *= 2;
../inputs/grep1.dat:286:      bufalloc = 5 * bufsalloc;
../inputs/grep1.dat:287:      nbuffer = valloc(bufalloc + 1);
../inputs/grep1.dat:288:      if (!nbuffer)
../inputs/grep1.dat:289:	fatal("memory exhausted", 0);
../inputs/grep1.dat:290:    }
../inputs/grep1.dat:291:  else
../inputs/grep1.dat:292:    nbuffer = buffer;
../inputs/grep1.dat:293:
../inputs/grep1.dat:294:  sp = buflim - save;
../inputs/grep1.dat:295:  dp = nbuffer + bufsalloc - save;
../inputs/grep1.dat:296:  bufbeg = dp;
../inputs/grep1.dat:297:  while (save--)
../inputs/grep1.dat:298:    *dp++ = *sp++;
../inputs/grep1.dat:299:
../inputs/grep1.dat:300:  /* We may have allocated a new, larger buffer.  Since
../inputs/grep1.dat:301:     there is no portable vfree(), we just have to forget
../inputs/grep1.dat:302:     about the old one.  Sorry. */
../inputs/grep1.dat:303:  buffer = nbuffer;
../inputs/grep1.dat:304:
../inputs/grep1.dat:305:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:306:  if (bufmapped && bufoffset % pagesize == 0
../inputs/grep1.dat:307:      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
../inputs/grep1.dat:308:    {
../inputs/grep1.dat:309:      maddr = buffer + bufsalloc;
../inputs/grep1.dat:310:      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
../inputs/grep1.dat:311:		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
../inputs/grep1.dat:312:      if (maddr == (caddr_t) -1)
../inputs/grep1.dat:313:	{
../inputs/grep1.dat:314:	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
../inputs/grep1.dat:315:		  strerror(errno));
../inputs/grep1.dat:316:	  goto tryread;
../inputs/grep1.dat:317:	}
../inputs/grep1.dat:318:#if 0
../inputs/grep1.dat:319:      /* You might thing this (or MADV_WILLNEED) would help,
../inputs/grep1.dat:320:	 but it doesn't, at least not on a Sun running 4.1.
../inputs/grep1.dat:321:	 In fact, it actually slows us down about 30%! */
../inputs/grep1.dat:322:      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
../inputs/grep1.dat:323:#endif
../inputs/grep1.dat:324:      cc = bufalloc - bufsalloc;
../inputs/grep1.dat:325:      bufoffset += cc;
../inputs/grep1.dat:326:    }
../inputs/grep1.dat:327:  else
../inputs/grep1.dat:328:    {
../inputs/grep1.dat:329:    tryread:
../inputs/grep1.dat:330:      /* We come here when we're not going to use mmap() any more.
../inputs/grep1.dat:331:	 Note that we need to synchronize the file offset the
../inputs/grep1.dat:332:	 first time through. */
../inputs/grep1.dat:333:      if (bufmapped)
../inputs/grep1.dat:334:	{
../inputs/grep1.dat:335:	  bufmapped = 0;
../inputs/grep1.dat:336:	  lseek(bufdesc, bufoffset, 0);
../inputs/grep1.dat:337:	}
../inputs/grep1.dat:338:      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
../inputs/grep1.dat:339:    }
../inputs/grep1.dat:340:#else
../inputs/grep1.dat:341:  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
../inputs/grep1.dat:342:#endif
../inputs/grep1.dat:343:  if (cc > 0)
../inputs/grep1.dat:344:    buflim = buffer + bufsalloc + cc;
../inputs/grep1.dat:345:  else
../inputs/grep1.dat:346:    buflim = buffer + bufsalloc;
../inputs/grep1.dat:347:  return cc;
../inputs/grep1.dat:348:}
../inputs/grep1.dat:349:
../inputs/grep1.dat:350:/* Flags controlling the style of output. */
../inputs/grep1.dat:351:static int out_quiet;		/* Suppress all normal output. */
../inputs/grep1.dat:352:static int out_invert;		/* Print nonmatching stuff. */
../inputs/grep1.dat:353:static int out_file;		/* Print filenames. */
../inputs/grep1.dat:354:static int out_line;		/* Print line numbers. */
../inputs/grep1.dat:355:static int out_byte;		/* Print byte offsets. */
../inputs/grep1.dat:356:static int out_before;		/* Lines of leading context. */
../inputs/grep1.dat:357:static int out_after;		/* Lines of trailing context. */
../inputs/grep1.dat:358:
../inputs/grep1.dat:359:/* Internal variables to keep track of byte count, context, etc. */
../inputs/grep1.dat:360:static size_t totalcc;		/* Total character count before bufbeg. */
../inputs/grep1.dat:361:static char *lastnl;		/* Pointer after last newline counted. */
../inputs/grep1.dat:362:static char *lastout;		/* Pointer after last character output;
../inputs/grep1.dat:363:				   NULL if no character has been output
../inputs/grep1.dat:364:				   or if it's conceptually before bufbeg. */
../inputs/grep1.dat:365:static size_t totalnl;		/* Total newline count before lastnl. */
../inputs/grep1.dat:366:static int pending;		/* Pending lines of output. */
../inputs/grep1.dat:367:
../inputs/grep1.dat:368:static void
../inputs/grep1.dat:369:nlscan(lim)
../inputs/grep1.dat:370:     char *lim;
../inputs/grep1.dat:371:{
../inputs/grep1.dat:372:  char *beg;
../inputs/grep1.dat:373:
../inputs/grep1.dat:374:  for (beg = lastnl; beg < lim; ++beg)
../inputs/grep1.dat:375:    if (*beg == '\n')
../inputs/grep1.dat:376:      ++totalnl;
../inputs/grep1.dat:377:  lastnl = beg;
../inputs/grep1.dat:378:}
../inputs/grep1.dat:379:
../inputs/grep1.dat:380:static void
../inputs/grep1.dat:381:prline(beg, lim, sep)
../inputs/grep1.dat:382:     char *beg;
../inputs/grep1.dat:383:     char *lim;
../inputs/grep1.dat:384:     char sep;
../inputs/grep1.dat:385:{
../inputs/grep1.dat:386:  if (out_file)
../inputs/grep1.dat:387:    printf("%s%c", filename, sep);
../inputs/grep1.dat:388:  if (out_line)
../inputs/grep1.dat:389:    {
../inputs/grep1.dat:390:      nlscan(beg);
../inputs/grep1.dat:391:      printf("%d%c", ++totalnl, sep);
../inputs/grep1.dat:392:      lastnl = lim;
../inputs/grep1.dat:393:    }
../inputs/grep1.dat:394:  if (out_byte)
../inputs/grep1.dat:395:    printf("%lu%c", totalcc + (beg - bufbeg), sep);
../inputs/grep1.dat:396:  fwrite(beg, 1, lim - beg, stdout);
../inputs/grep1.dat:397:  if (ferror(stdout))
../inputs/grep1.dat:398:    error("writing output", errno);
../inputs/grep1.dat:399:  lastout = lim;
../inputs/grep1.dat:400:}
../inputs/grep1.dat:401:
../inputs/grep1.dat:402:/* Print pending lines of trailing context prior to LIM. */
../inputs/grep1.dat:403:static void
../inputs/grep1.dat:404:prpending(lim)
../inputs/grep1.dat:405:     char *lim;
../inputs/grep1.dat:406:{
../inputs/grep1.dat:407:  char *nl;
../inputs/grep1.dat:408:
../inputs/grep1.dat:409:  if (!lastout)
../inputs/grep1.dat:410:    lastout = bufbeg;
../inputs/grep1.dat:411:  while (pending > 0 && lastout < lim)
../inputs/grep1.dat:412:    {
../inputs/grep1.dat:413:      --pending;
../inputs/grep1.dat:414:      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
../inputs/grep1.dat:415:	++nl;
../inputs/grep1.dat:416:      else
../inputs/grep1.dat:417:	nl = lim;
../inputs/grep1.dat:418:      prline(lastout, nl, '-');
../inputs/grep1.dat:419:    }
../inputs/grep1.dat:420:}
../inputs/grep1.dat:421:
../inputs/grep1.dat:422:/* Print the lines between BEG and LIM.  Deal with context crap.
../inputs/grep1.dat:423:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
../inputs/grep1.dat:424:static void
../inputs/grep1.dat:425:prtext(beg, lim, nlinesp)
../inputs/grep1.dat:426:     char *beg;
../inputs/grep1.dat:427:     char *lim;
../inputs/grep1.dat:428:     int *nlinesp;
../inputs/grep1.dat:429:{
../inputs/grep1.dat:430:  static int used;		/* avoid printing "--" before any output */
../inputs/grep1.dat:431:  char *bp, *p, *nl;
../inputs/grep1.dat:432:  int i, n;
../inputs/grep1.dat:433:
../inputs/grep1.dat:434:  if (!out_quiet && pending > 0)
../inputs/grep1.dat:435:    prpending(beg);
../inputs/grep1.dat:436:
../inputs/grep1.dat:437:  p = beg;
../inputs/grep1.dat:438:
../inputs/grep1.dat:439:  if (!out_quiet)
../inputs/grep1.dat:440:    {
../inputs/grep1.dat:441:      /* Deal with leading context crap. */
../inputs/grep1.dat:442:
../inputs/grep1.dat:443:      bp = lastout ? lastout : bufbeg;
../inputs/grep1.dat:444:      for (i = 0; i < out_before; ++i)
../inputs/grep1.dat:445:	if (p > bp)
../inputs/grep1.dat:446:	  do
../inputs/grep1.dat:447:	    --p;
../inputs/grep1.dat:448:	  while (p > bp && p[-1] != '\n');
../inputs/grep1.dat:449:
../inputs/grep1.dat:450:      /* We only print the "--" separator if our output is
../inputs/grep1.dat:451:	 discontiguous from the last output in the file. */
../inputs/grep1.dat:452:      if ((out_before || out_after) && used && p != lastout)
../inputs/grep1.dat:453:	puts("--");
../inputs/grep1.dat:454:
../inputs/grep1.dat:455:      while (p < beg)
../inputs/grep1.dat:456:	{
../inputs/grep1.dat:457:	  nl = memchr(p, '\n', beg - p);
../inputs/grep1.dat:458:	  prline(p, nl + 1, '-');
../inputs/grep1.dat:459:	  p = nl + 1;
../inputs/grep1.dat:460:	}
../inputs/grep1.dat:461:    }
../inputs/grep1.dat:462:
../inputs/grep1.dat:463:  if (nlinesp)
../inputs/grep1.dat:464:    {
../inputs/grep1.dat:465:      /* Caller wants a line count. */
../inputs/grep1.dat:466:      for (n = 0; p < lim; ++n)
../inputs/grep1.dat:467:	{
../inputs/grep1.dat:468:	  if ((nl = memchr(p, '\n', lim - p)) != 0)
../inputs/grep1.dat:469:	    ++nl;
../inputs/grep1.dat:470:	  else
../inputs/grep1.dat:471:	    nl = lim;
../inputs/grep1.dat:472:	  if (!out_quiet)
../inputs/grep1.dat:473:	    prline(p, nl, ':');
../inputs/grep1.dat:474:	  p = nl;
../inputs/grep1.dat:475:	}
../inputs/grep1.dat:476:      *nlinesp = n;
../inputs/grep1.dat:477:    }
../inputs/grep1.dat:478:  else
../inputs/grep1.dat:479:    if (!out_quiet)
../inputs/grep1.dat:480:      prline(beg, lim, ':');
../inputs/grep1.dat:481:
../inputs/grep1.dat:482:  pending = out_after;
../inputs/grep1.dat:483:  used = 1;
../inputs/grep1.dat:484:}
../inputs/grep1.dat:485:
../inputs/grep1.dat:486:/* Scan the specified portion of the buffer, matching lines (or
../inputs/grep1.dat:487:   between matching lines if OUT_INVERT is true).  Return a count of
../inputs/grep1.dat:488:   lines printed. */
../inputs/grep1.dat:489:static int
../inputs/grep1.dat:490:grepbuf(beg, lim)
../inputs/grep1.dat:491:     char *beg;
../inputs/grep1.dat:492:     char *lim;
../inputs/grep1.dat:493:{
../inputs/grep1.dat:494:  int nlines, n;
../inputs/grep1.dat:495:  register char *p, *b;
../inputs/grep1.dat:496:  char *endp;
../inputs/grep1.dat:497:
../inputs/grep1.dat:498:  nlines = 0;
../inputs/grep1.dat:499:  p = beg;
../inputs/grep1.dat:500:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
../inputs/grep1.dat:501:    {
../inputs/grep1.dat:502:      /* Avoid matching the empty line at the end of the buffer. */
../inputs/grep1.dat:503:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
../inputs/grep1.dat:504:	break;
../inputs/grep1.dat:505:      if (!out_invert)
../inputs/grep1.dat:506:	{
../inputs/grep1.dat:507:	  prtext(b, endp, (int *) 0);
../inputs/grep1.dat:508:	  nlines += 1;
../inputs/grep1.dat:509:	}
../inputs/grep1.dat:510:      else if (p < b)
../inputs/grep1.dat:511:	{
../inputs/grep1.dat:512:	  prtext(p, b, &n);
../inputs/grep1.dat:513:	  nlines += n;
../inputs/grep1.dat:514:	}
../inputs/grep1.dat:515:      p = endp;
../inputs/grep1.dat:516:    }
../inputs/grep1.dat:517:  if (out_invert && p < lim)
../inputs/grep1.dat:518:    {
../inputs/grep1.dat:519:      prtext(p, lim, &n);
../inputs/grep1.dat:520:      nlines += n;
../inputs/grep1.dat:521:    }
../inputs/grep1.dat:522:  return nlines;
../inputs/grep1.dat:523:}
../inputs/grep1.dat:524:
../inputs/grep1.dat:525:/* Search a given file.  Return a count of lines printed. */
../inputs/grep1.dat:526:static int
../inputs/grep1.dat:527:grep(fd)
../inputs/grep1.dat:528:     int fd;
../inputs/grep1.dat:529:{
../inputs/grep1.dat:530:  int nlines, i;
../inputs/grep1.dat:531:  size_t residue, save;
../inputs/grep1.dat:532:  char *beg, *lim;
../inputs/grep1.dat:533:
../inputs/grep1.dat:534:  reset(fd);
../inputs/grep1.dat:535:
../inputs/grep1.dat:536:  totalcc = 0;
../inputs/grep1.dat:537:  lastout = 0;
../inputs/grep1.dat:538:  totalnl = 0;
../inputs/grep1.dat:539:  pending = 0;
../inputs/grep1.dat:540:
../inputs/grep1.dat:541:  nlines = 0;
../inputs/grep1.dat:542:  residue = 0;
../inputs/grep1.dat:543:  save = 0;
../inputs/grep1.dat:544:
../inputs/grep1.dat:545:  for (;;)
../inputs/grep1.dat:546:    {
../inputs/grep1.dat:547:      if (fillbuf(save) < 0)
../inputs/grep1.dat:548:	{
../inputs/grep1.dat:549:	  error(filename, errno);
../inputs/grep1.dat:550:	  return nlines;
../inputs/grep1.dat:551:	}
../inputs/grep1.dat:552:      lastnl = bufbeg;
../inputs/grep1.dat:553:      if (lastout)
../inputs/grep1.dat:554:	lastout = bufbeg;
../inputs/grep1.dat:555:      if (buflim - bufbeg == save)
../inputs/grep1.dat:556:	break;
../inputs/grep1.dat:557:      beg = bufbeg + save - residue;
../inputs/grep1.dat:558:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
../inputs/grep1.dat:559:	;
../inputs/grep1.dat:560:      residue = buflim - lim;
../inputs/grep1.dat:561:      if (beg < lim)
../inputs/grep1.dat:562:	{
../inputs/grep1.dat:563:	  nlines += grepbuf(beg, lim);
../inputs/grep1.dat:564:	  if (pending)
../inputs/grep1.dat:565:	    prpending(lim);
../inputs/grep1.dat:566:	}
../inputs/grep1.dat:567:      i = 0;
../inputs/grep1.dat:568:      beg = lim;
../inputs/grep1.dat:569:      while (i < out_before && beg > bufbeg && beg != lastout)
../inputs/grep1.dat:570:	{
../inputs/grep1.dat:571:	  ++i;
../inputs/grep1.dat:572:	  do
../inputs/grep1.dat:573:	    --beg;
../inputs/grep1.dat:574:	  while (beg > bufbeg && beg[-1] != '\n');
../inputs/grep1.dat:575:	}
../inputs/grep1.dat:576:      if (beg != lastout)
../inputs/grep1.dat:577:	lastout = 0;
../inputs/grep1.dat:578:      save = residue + lim - beg;
../inputs/grep1.dat:579:      totalcc += buflim - bufbeg - save;
../inputs/grep1.dat:580:      if (out_line)
../inputs/grep1.dat:581:	nlscan(beg);
../inputs/grep1.dat:582:    }
../inputs/grep1.dat:583:  if (residue)
../inputs/grep1.dat:584:    {
../inputs/grep1.dat:585:      nlines += grepbuf(bufbeg + save - residue, buflim);
../inputs/grep1.dat:586:      if (pending)
../inputs/grep1.dat:587:	prpending(buflim);
../inputs/grep1.dat:588:    }
../inputs/grep1.dat:589:  return nlines;
../inputs/grep1.dat:590:}
../inputs/grep1.dat:591:
../inputs/grep1.dat:592:static char version[] = "GNU grep version 2.0";
../inputs/grep1.dat:593:
../inputs/grep1.dat:594:#define USAGE \
../inputs/grep1.dat:595:  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
../inputs/grep1.dat:596:
../inputs/grep1.dat:597:static void
../inputs/grep1.dat:598:usage()
../inputs/grep1.dat:599:{
../inputs/grep1.dat:600:  fprintf(stderr, USAGE, prog);
../inputs/grep1.dat:601:  exit(2);
../inputs/grep1.dat:602:}
../inputs/grep1.dat:603:
../inputs/grep1.dat:604:/* Go through the matchers vector and look for the specified matcher.
../inputs/grep1.dat:605:   If we find it, install it in compile and execute, and return 1.  */
../inputs/grep1.dat:606:int
../inputs/grep1.dat:607:setmatcher(name)
../inputs/grep1.dat:608:     char *name;
../inputs/grep1.dat:609:{
../inputs/grep1.dat:610:  int i;
../inputs/grep1.dat:611:
../inputs/grep1.dat:612:  for (i = 0; matchers[i].name; ++i)
../inputs/grep1.dat:613:    if (strcmp(name, matchers[i].name) == 0)
../inputs/grep1.dat:614:      {
../inputs/grep1.dat:615:	compile = matchers[i].compile;
../inputs/grep1.dat:616:	execute = matchers[i].execute;
../inputs/grep1.dat:617:	return 1;
../inputs/grep1.dat:618:      }
../inputs/grep1.dat:619:  return 0;
../inputs/grep1.dat:620:}  
../inputs/grep1.dat:621:
../inputs/grep1.dat:622:int
../inputs/grep1.dat:623:main(argc, argv)
../inputs/grep1.dat:624:     int argc;
../inputs/grep1.dat:625:     char *argv[];
../inputs/grep1.dat:626:{
../inputs/grep1.dat:627:  char *keys;
../inputs/grep1.dat:628:  size_t keycc, oldcc, keyalloc;
../inputs/grep1.dat:629:  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
../inputs/grep1.dat:630:  int opt, cc, desc, count, status;
../inputs/grep1.dat:631:  FILE *fp;
../inputs/grep1.dat:632:  extern char *optarg;
../inputs/grep1.dat:633:  extern int optind;
../inputs/grep1.dat:634:
../inputs/grep1.dat:635:  prog = argv[0];
../inputs/grep1.dat:636:  if (prog && strrchr(prog, '/'))
../inputs/grep1.dat:637:    prog = strrchr(prog, '/') + 1;
../inputs/grep1.dat:638:
../inputs/grep1.dat:639:  keys = NULL;
../inputs/grep1.dat:640:  keycc = 0;
../inputs/grep1.dat:641:  keyfound = 0;
../inputs/grep1.dat:642:  count_matches = 0;
../inputs/grep1.dat:643:  no_filenames = 0;
../inputs/grep1.dat:644:  list_files = 0;
../inputs/grep1.dat:645:  suppress_errors = 0;
../inputs/grep1.dat:646:  matcher = NULL;
../inputs/grep1.dat:647:
../inputs/grep1.dat:648:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
../inputs/grep1.dat:649:	 != EOF)
../inputs/grep1.dat:650:    switch (opt)
../inputs/grep1.dat:651:      {
../inputs/grep1.dat:652:      case '0':
../inputs/grep1.dat:653:      case '1':
../inputs/grep1.dat:654:      case '2':
../inputs/grep1.dat:655:      case '3':
../inputs/grep1.dat:656:      case '4':
../inputs/grep1.dat:657:      case '5':
../inputs/grep1.dat:658:      case '6':
../inputs/grep1.dat:659:      case '7':
../inputs/grep1.dat:660:      case '8':
../inputs/grep1.dat:661:      case '9':
../inputs/grep1.dat:662:	out_before = 10 * out_before + opt - '0';
../inputs/grep1.dat:663:	out_after = 10 * out_after + opt - '0';
../inputs/grep1.dat:664:	break;
../inputs/grep1.dat:665:      case 'A':
../inputs/grep1.dat:666:	out_after = atoi(optarg);
../inputs/grep1.dat:667:	if (out_after < 0)
../inputs/grep1.dat:668:	  usage();
../inputs/grep1.dat:669:	break;
../inputs/grep1.dat:670:      case 'B':
../inputs/grep1.dat:671:	out_before = atoi(optarg);
../inputs/grep1.dat:672:	if (out_before < 0)
../inputs/grep1.dat:673:	  usage();
../inputs/grep1.dat:674:	break;
../inputs/grep1.dat:675:      case 'C':
../inputs/grep1.dat:676:	out_before = out_after = 2;
../inputs/grep1.dat:677:	break;
../inputs/grep1.dat:678:      case 'E':
../inputs/grep1.dat:679:	if (matcher && strcmp(matcher, "egrep") != 0)
../inputs/grep1.dat:680:	  fatal("you may specify only one of -E, -F, or -G", 0);
../inputs/grep1.dat:681:	matcher = "posix-egrep";
../inputs/grep1.dat:682:	break;
../inputs/grep1.dat:683:      case 'F':
../inputs/grep1.dat:684:	if (matcher && strcmp(matcher, "fgrep") != 0)
../inputs/grep1.dat:685:	  fatal("you may specify only one of -E, -F, or -G", 0);;
../inputs/grep1.dat:686:	matcher = "fgrep";
../inputs/grep1.dat:687:	break;
../inputs/grep1.dat:688:      case 'G':
../inputs/grep1.dat:689:	if (matcher && strcmp(matcher, "grep") != 0)
../inputs/grep1.dat:690:	  fatal("you may specify only one of -E, -F, or -G", 0);
../inputs/grep1.dat:691:	matcher = "grep";
../inputs/grep1.dat:692:	break;
../inputs/grep1.dat:693:      case 'V':
../inputs/grep1.dat:694:	fprintf(stderr, "%s\n", version);
../inputs/grep1.dat:695:	break;
../inputs/grep1.dat:696:      case 'X':
../inputs/grep1.dat:697:	if (matcher)
../inputs/grep1.dat:698:	  fatal("matcher already specified", 0);
../inputs/grep1.dat:699:	matcher = optarg;
../inputs/grep1.dat:700:	break;
../inputs/grep1.dat:701:      case 'b':
../inputs/grep1.dat:702:	out_byte = 1;
../inputs/grep1.dat:703:	break;
../inputs/grep1.dat:704:      case 'c':
../inputs/grep1.dat:705:	out_quiet = 1;
../inputs/grep1.dat:706:	count_matches = 1;
../inputs/grep1.dat:707:	break;
../inputs/grep1.dat:708:      case 'e':
../inputs/grep1.dat:709:	cc = strlen(optarg);
../inputs/grep1.dat:710:	keys = xrealloc(keys, keycc + cc + 1);
../inputs/grep1.dat:711:	if (keyfound)
../inputs/grep1.dat:712:	  keys[keycc++] = '\n';
../inputs/grep1.dat:713:	strcpy(&keys[keycc], optarg);
../inputs/grep1.dat:714:	keycc += cc;
../inputs/grep1.dat:715:	keyfound = 1;
../inputs/grep1.dat:716:	break;
../inputs/grep1.dat:717:      case 'f':
../inputs/grep1.dat:718:	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
../inputs/grep1.dat:719:	if (!fp)
../inputs/grep1.dat:720:	  fatal(optarg, errno);
../inputs/grep1.dat:721:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
../inputs/grep1.dat:722:	  ;
../inputs/grep1.dat:723:	keys = xrealloc(keys, keyalloc);
../inputs/grep1.dat:724:	oldcc = keycc;
../inputs/grep1.dat:725:	if (keyfound)
../inputs/grep1.dat:726:	  keys[keycc++] = '\n';
../inputs/grep1.dat:727:	while (!feof(fp)
../inputs/grep1.dat:728:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
../inputs/grep1.dat:729:	  {
../inputs/grep1.dat:730:	    keycc += cc;
../inputs/grep1.dat:731:	    if (keycc == keyalloc)
../inputs/grep1.dat:732:	      keys = xrealloc(keys, keyalloc *= 2);
../inputs/grep1.dat:733:	  }
../inputs/grep1.dat:734:	if (fp != stdin)
../inputs/grep1.dat:735:	  fclose(fp);
../inputs/grep1.dat:736:	/* Nuke the final newline to avoid matching a null string. */
../inputs/grep1.dat:737:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
../inputs/grep1.dat:738:	  --keycc;
../inputs/grep1.dat:739:	keyfound = 1;
../inputs/grep1.dat:740:	break;
../inputs/grep1.dat:741:      case 'h':
../inputs/grep1.dat:742:	no_filenames = 1;
../inputs/grep1.dat:743:	break;
../inputs/grep1.dat:744:      case 'i':
../inputs/grep1.dat:745:      case 'y':			/* For old-timers . . . */
../inputs/grep1.dat:746:	match_icase = 1;
../inputs/grep1.dat:747:	break;
../inputs/grep1.dat:748:      case 'L':
../inputs/grep1.dat:749:	/* Like -l, except list files that don't contain matches.
../inputs/grep1.dat:750:	   Inspired by the same option in Hume's gre. */
../inputs/grep1.dat:751:	out_quiet = 1;
../inputs/grep1.dat:752:	list_files = -1;
../inputs/grep1.dat:753:	break;
../inputs/grep1.dat:754:      case 'l':
../inputs/grep1.dat:755:	out_quiet = 1;
../inputs/grep1.dat:756:	list_files = 1;
../inputs/grep1.dat:757:	break;
../inputs/grep1.dat:758:      case 'n':
../inputs/grep1.dat:759:	out_line = 1;
../inputs/grep1.dat:760:	break;
../inputs/grep1.dat:761:      case 'q':
../inputs/grep1.dat:762:	out_quiet = 1;
../inputs/grep1.dat:763:	break;
../inputs/grep1.dat:764:      case 's':
../inputs/grep1.dat:765:	suppress_errors = 1;
../inputs/grep1.dat:766:	break;
../inputs/grep1.dat:767:      case 'v':
../inputs/grep1.dat:768:	out_invert = 1;
../inputs/grep1.dat:769:	break;
../inputs/grep1.dat:770:      case 'w':
../inputs/grep1.dat:771:	match_words = 1;
../inputs/grep1.dat:772:	break;
../inputs/grep1.dat:773:      case 'x':
../inputs/grep1.dat:774:	match_lines = 1;
../inputs/grep1.dat:775:	break;
../inputs/grep1.dat:776:      default:
../inputs/grep1.dat:777:	usage();
../inputs/grep1.dat:778:	break;
../inputs/grep1.dat:779:      }
../inputs/grep1.dat:780:
../inputs/grep1.dat:781:  if (!keyfound)
../inputs/grep1.dat:782:    if (optind < argc)
../inputs/grep1.dat:783:      {
../inputs/grep1.dat:784:	keys = argv[optind++];
../inputs/grep1.dat:785:	keycc = strlen(keys);
../inputs/grep1.dat:786:      }
../inputs/grep1.dat:787:    else
../inputs/grep1.dat:788:      usage();
../inputs/grep1.dat:789:
../inputs/grep1.dat:790:  if (!matcher)
../inputs/grep1.dat:791:    matcher = prog;
../inputs/grep1.dat:792:
../inputs/grep1.dat:793:  if (!setmatcher(matcher) && !setmatcher("default"))
../inputs/grep1.dat:794:    abort();
../inputs/grep1.dat:795:
../inputs/grep1.dat:796:  (*compile)(keys, keycc);
../inputs/grep1.dat:797:
../inputs/grep1.dat:798:  if (argc - optind > 1 && !no_filenames)
../inputs/grep1.dat:799:    out_file = 1;
../inputs/grep1.dat:800:
../inputs/grep1.dat:801:  status = 1;
../inputs/grep1.dat:802:
../inputs/grep1.dat:803:  if (optind < argc)
../inputs/grep1.dat:804:    while (optind < argc)
../inputs/grep1.dat:805:      {
../inputs/grep1.dat:806:	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
../inputs/grep1.dat:807:	if (desc < 0)
../inputs/grep1.dat:808:	  {
../inputs/grep1.dat:809:	    if (!suppress_errors)
../inputs/grep1.dat:810:	      error(argv[optind], errno);
../inputs/grep1.dat:811:	  }
../inputs/grep1.dat:812:	else
../inputs/grep1.dat:813:	  {
../inputs/grep1.dat:814:	    filename = desc == 0 ? "(standard input)" : argv[optind];
../inputs/grep1.dat:815:	    count = grep(desc);
../inputs/grep1.dat:816:	    if (count_matches)
../inputs/grep1.dat:817:	      {
../inputs/grep1.dat:818:		if (out_file)
../inputs/grep1.dat:819:		  printf("%s:", filename);
../inputs/grep1.dat:820:		printf("%d\n", count);
../inputs/grep1.dat:821:	      }
../inputs/grep1.dat:822:	    if (count)
../inputs/grep1.dat:823:	      {
../inputs/grep1.dat:824:		status = 0;
../inputs/grep1.dat:825:		if (list_files == 1)
../inputs/grep1.dat:826:		  printf("%s\n", filename);
../inputs/grep1.dat:827:	      }
../inputs/grep1.dat:828:	    else if (list_files == -1)
../inputs/grep1.dat:829:	      printf("%s\n", filename);
../inputs/grep1.dat:830:	  }
../inputs/grep1.dat:831:	if (desc != 0)
../inputs/grep1.dat:832:	  close(desc);
../inputs/grep1.dat:833:	++optind;
../inputs/grep1.dat:834:      }
../inputs/grep1.dat:835:  else
../inputs/grep1.dat:836:    {
../inputs/grep1.dat:837:      filename = "(standard input)";
../inputs/grep1.dat:838:      count = grep(0);
../inputs/grep1.dat:839:      if (count_matches)
../inputs/grep1.dat:840:	printf("%d\n", count);
../inputs/grep1.dat:841:      if (count)
../inputs/grep1.dat:842:	{
../inputs/grep1.dat:843:	  status = 0;
../inputs/grep1.dat:844:	  if (list_files == 1)
../inputs/grep1.dat:845:	    printf("(standard input)\n");
../inputs/grep1.dat:846:	}
../inputs/grep1.dat:847:      else if (list_files == -1)
../inputs/grep1.dat:848:	printf("(standard input)\n");
../inputs/grep1.dat:849:    }
../inputs/grep1.dat:850:
../inputs/grep1.dat:851:  exit(errseen ? 2 : status);
../inputs/grep1.dat:852:}
../inputs/grep1.dat:853:/* Getopt for GNU.
../inputs/grep1.dat:854:   NOTE: getopt is now part of the C library, so if you don't know what
../inputs/grep1.dat:855:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
../inputs/grep1.dat:856:   before changing it!
../inputs/grep1.dat:857:
../inputs/grep1.dat:858:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
../inputs/grep1.dat:859:   	Free Software Foundation, Inc.
../inputs/grep1.dat:860:
../inputs/grep1.dat:861:   This program is free software; you can redistribute it and/or modify it
../inputs/grep1.dat:862:   under the terms of the GNU General Public License as published by the
../inputs/grep1.dat:863:   Free Software Foundation; either version 2, or (at your option) any
../inputs/grep1.dat:864:   later version.
../inputs/grep1.dat:865:
../inputs/grep1.dat:866:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:867:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:868:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:869:   GNU General Public License for more details.
../inputs/grep1.dat:870:
../inputs/grep1.dat:871:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:872:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:873:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:874:
../inputs/grep1.dat:875:/* NOTE!!!  AIX requires this to be the first thing in the file.
../inputs/grep1.dat:876:   Do not put ANYTHING before it!  */
../inputs/grep1.dat:877:#if !defined (__GNUC__) && defined (_AIX)
../inputs/grep1.dat:878: #pragma alloca
../inputs/grep1.dat:879:#endif
../inputs/grep1.dat:880:
../inputs/grep1.dat:881:#ifdef HAVE_CONFIG_H
../inputs/grep1.dat:883:#define flag_config 1
../inputs/grep1.dat:884:#endif
../inputs/grep1.dat:885:
../inputs/grep1.dat:886:#ifdef __GNUC__
../inputs/grep1.dat:887:#define alloca __builtin_alloca
../inputs/grep1.dat:888:#else /* not __GNUC__ */
../inputs/grep1.dat:889:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
../inputs/grep1.dat:891:#define flag_alloca 1
../inputs/grep1.dat:892:#else
../inputs/grep1.dat:893:#ifndef _AIX
../inputs/grep1.dat:894:char *alloca ();
../inputs/grep1.dat:895:#endif
../inputs/grep1.dat:896:#endif /* alloca.h */
../inputs/grep1.dat:897:#endif /* not __GNUC__ */
../inputs/grep1.dat:898:
../inputs/grep1.dat:899:#if !__STDC__ && !defined(const) && IN_GCC
../inputs/grep1.dat:900:#define const
../inputs/grep1.dat:901:#endif
../inputs/grep1.dat:902:
../inputs/grep1.dat:903:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
../inputs/grep1.dat:904:#ifndef _NO_PROTO
../inputs/grep1.dat:905:#define _NO_PROTO
../inputs/grep1.dat:906:#endif
../inputs/grep1.dat:907:
../inputs/grep1.dat:909:
../inputs/grep1.dat:910:/* Comment out all this code if we are using the GNU C Library, and are not
../inputs/grep1.dat:911:   actually compiling the library itself.  This code is part of the GNU C
../inputs/grep1.dat:913:   and linking in this code is a waste when using the GNU C library
../inputs/grep1.dat:914:   (especially if it is a shared library).  Rather than having every GNU
../inputs/grep1.dat:915:   program understand `configure --with-gnu-libc' and omit the object files,
../inputs/grep1.dat:916:   it is simpler to just do this in the source for each such file.  */
../inputs/grep1.dat:917:
../inputs/grep1.dat:918:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
../inputs/grep1.dat:919:
../inputs/grep1.dat:920:
../inputs/grep1.dat:922:   to get __GNU_LIBRARY__ defined.  */
../inputs/grep1.dat:923:#ifdef	__GNU_LIBRARY__
../inputs/grep1.dat:924:#undef	alloca
../inputs/grep1.dat:926:   contain conflicting prototypes for getopt.  */
../inputs/grep1.dat:927:#if flag_stdlib==0   
../inputs/grep1.dat:929:#define flag_stdlib 1
../inputs/grep1.dat:930:#endif
../inputs/grep1.dat:931:#else	/* Not GNU C library.  */
../inputs/grep1.dat:932:#define	__alloca	alloca
../inputs/grep1.dat:933:#endif	/* GNU C library.  */
../inputs/grep1.dat:934:
../inputs/grep1.dat:935:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
../inputs/grep1.dat:936:   long-named option.  Because this is not POSIX.2 compliant, it is
../inputs/grep1.dat:937:   being phased out.  */
../inputs/grep1.dat:938:/* #define GETOPT_COMPAT */
../inputs/grep1.dat:939:
../inputs/grep1.dat:940:/* This version of `getopt' appears to the caller like standard Unix `getopt'
../inputs/grep1.dat:941:   but it behaves differently for the user, since it allows the user
../inputs/grep1.dat:942:   to intersperse the options with the other arguments.
../inputs/grep1.dat:943:
../inputs/grep1.dat:944:   As `getopt' works, it permutes the elements of ARGV so that,
../inputs/grep1.dat:945:   when it is done, all the options precede everything else.  Thus
../inputs/grep1.dat:946:   all application programs are extended to handle flexible argument order.
../inputs/grep1.dat:947:
../inputs/grep1.dat:948:   Setting the environment variable POSIXLY_CORRECT disables permutation.
../inputs/grep1.dat:949:   Then the behavior is completely standard.
../inputs/grep1.dat:950:
../inputs/grep1.dat:951:   GNU application programs can use a third alternative mode in which
../inputs/grep1.dat:952:   they can distinguish the relative order of options and other arguments.  */
../inputs/grep1.dat:953:
../inputs/grep1.dat:955:
../inputs/grep1.dat:956:/* For communication from `getopt' to the caller.
../inputs/grep1.dat:957:   When `getopt' finds an option that takes an argument,
../inputs/grep1.dat:958:   the argument value is returned here.
../inputs/grep1.dat:959:   Also, when `ordering' is RETURN_IN_ORDER,
../inputs/grep1.dat:960:   each non-option ARGV-element is returned here.  */
../inputs/grep1.dat:961:
../inputs/grep1.dat:962:char *optarg = 0;
../inputs/grep1.dat:963:
../inputs/grep1.dat:964:/* Index in ARGV of the next element to be scanned.
../inputs/grep1.dat:965:   This is used for communication to and from the caller
../inputs/grep1.dat:966:   and for communication between successive calls to `getopt'.
../inputs/grep1.dat:967:
../inputs/grep1.dat:968:   On entry to `getopt', zero means this is the first call; initialize.
../inputs/grep1.dat:969:
../inputs/grep1.dat:970:   When `getopt' returns EOF, this is the index of the first of the
../inputs/grep1.dat:971:   non-option elements that the caller should itself scan.
../inputs/grep1.dat:972:
../inputs/grep1.dat:973:   Otherwise, `optind' communicates from one call to the next
../inputs/grep1.dat:974:   how much of ARGV has been scanned so far.  */
../inputs/grep1.dat:975:
../inputs/grep1.dat:976:/* XXX 1003.2 says this must be 1 before any call.  */
../inputs/grep1.dat:977:int optind = 0;
../inputs/grep1.dat:978:
../inputs/grep1.dat:979:/* The next char to be scanned in the option-element
../inputs/grep1.dat:980:   in which the last option character we returned was found.
../inputs/grep1.dat:981:   This allows us to pick up the scan where we left off.
../inputs/grep1.dat:982:
../inputs/grep1.dat:983:   If this is zero, or a null string, it means resume the scan
../inputs/grep1.dat:984:   by advancing to the next ARGV-element.  */
../inputs/grep1.dat:985:
../inputs/grep1.dat:986:static char *nextchar;
../inputs/grep1.dat:987:
../inputs/grep1.dat:988:/* Callers store zero here to inhibit the error message
../inputs/grep1.dat:989:   for unrecognized options.  */
../inputs/grep1.dat:990:
../inputs/grep1.dat:991:int opterr = 1;
../inputs/grep1.dat:992:
../inputs/grep1.dat:993:/* Set to an option character which was unrecognized.
../inputs/grep1.dat:994:   This must be initialized on some systems to avoid linking in the
../inputs/grep1.dat:995:   system's own getopt implementation.  */
../inputs/grep1.dat:996:
../inputs/grep1.dat:997:int optopt = '?';
../inputs/grep1.dat:998:
../inputs/grep1.dat:999:/* Describe how to deal with options that follow non-option ARGV-elements.
../inputs/grep1.dat:1000:
../inputs/grep1.dat:1001:   If the caller did not specify anything,
../inputs/grep1.dat:1002:   the default is REQUIRE_ORDER if the environment variable
../inputs/grep1.dat:1003:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
../inputs/grep1.dat:1004:
../inputs/grep1.dat:1005:   REQUIRE_ORDER means don't recognize them as options;
../inputs/grep1.dat:1006:   stop option processing when the first non-option is seen.
../inputs/grep1.dat:1007:   This is what Unix does.
../inputs/grep1.dat:1008:   This mode of operation is selected by either setting the environment
../inputs/grep1.dat:1009:   variable POSIXLY_CORRECT, or using `+' as the first character
../inputs/grep1.dat:1010:   of the list of option characters.
../inputs/grep1.dat:1011:
../inputs/grep1.dat:1012:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
../inputs/grep1.dat:1013:   so that eventually all the non-options are at the end.  This allows options
../inputs/grep1.dat:1014:   to be given in any order, even with programs that were not written to
../inputs/grep1.dat:1015:   expect this.
../inputs/grep1.dat:1016:
../inputs/grep1.dat:1017:   RETURN_IN_ORDER is an option available to programs that were written
../inputs/grep1.dat:1018:   to expect options and other ARGV-elements in any order and that care about
../inputs/grep1.dat:1019:   the ordering of the two.  We describe each non-option ARGV-element
../inputs/grep1.dat:1020:   as if it were the argument of an option with character code 1.
../inputs/grep1.dat:1021:   Using `-' as the first character of the list of option characters
../inputs/grep1.dat:1022:   selects this mode of operation.
../inputs/grep1.dat:1023:
../inputs/grep1.dat:1024:   The special argument `--' forces an end of option-scanning regardless
../inputs/grep1.dat:1025:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
../inputs/grep1.dat:1026:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
../inputs/grep1.dat:1027:
../inputs/grep1.dat:1028:static enum
../inputs/grep1.dat:1029:{
../inputs/grep1.dat:1030:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
../inputs/grep1.dat:1031:} ordering;
../inputs/grep1.dat:1032:
../inputs/grep1.dat:1033:#ifdef	__GNU_LIBRARY__
../inputs/grep1.dat:1034:/* We want to avoid inclusion of string.h with non-GNU libraries
../inputs/grep1.dat:1035:   because there are many ways it can cause trouble.
../inputs/grep1.dat:1036:   On some systems, it contains special magic macros that don't work
../inputs/grep1.dat:1037:   in GCC.  */
../inputs/grep1.dat:1038:#if flag_string==0   
../inputs/grep1.dat:1040:#define flag_string 1
../inputs/grep1.dat:1041:#endif
../inputs/grep1.dat:1042:#define	my_index	strchr
../inputs/grep1.dat:1043:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
../inputs/grep1.dat:1044:#else
../inputs/grep1.dat:1045:
../inputs/grep1.dat:1046:/* Avoid depending on library functions or files
../inputs/grep1.dat:1047:   whose names are inconsistent.  */
../inputs/grep1.dat:1048:
../inputs/grep1.dat:1049:char *getenv ();
../inputs/grep1.dat:1050:
../inputs/grep1.dat:1051:static char *
../inputs/grep1.dat:1052:my_index (str, chr)
../inputs/grep1.dat:1053:     const char *str;
../inputs/grep1.dat:1054:     int chr;
../inputs/grep1.dat:1055:{
../inputs/grep1.dat:1056:  while (*str)
../inputs/grep1.dat:1057:    {
../inputs/grep1.dat:1058:      if (*str == chr)
../inputs/grep1.dat:1059:	return (char *) str;
../inputs/grep1.dat:1060:      str++;
../inputs/grep1.dat:1061:    }
../inputs/grep1.dat:1062:  return 0;
../inputs/grep1.dat:1063:}
../inputs/grep1.dat:1064:
../inputs/grep1.dat:1065:static void
../inputs/grep1.dat:1066:my_bcopy (from, to, size)
../inputs/grep1.dat:1067:     const char *from;
../inputs/grep1.dat:1068:     char *to;
../inputs/grep1.dat:1069:     int size;
../inputs/grep1.dat:1070:{
../inputs/grep1.dat:1071:  int i;
../inputs/grep1.dat:1072:  for (i = 0; i < size; i++)
../inputs/grep1.dat:1073:    to[i] = from[i];
../inputs/grep1.dat:1074:}
../inputs/grep1.dat:1075:#endif				/* GNU C library.  */
../inputs/grep1.dat:1076:
../inputs/grep1.dat:1077:/* Handle permutation of arguments.  */
../inputs/grep1.dat:1078:
../inputs/grep1.dat:1079:/* Describe the part of ARGV that contains non-options that have
../inputs/grep1.dat:1080:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
../inputs/grep1.dat:1081:   `last_nonopt' is the index after the last of them.  */
../inputs/grep1.dat:1082:
../inputs/grep1.dat:1083:static int first_nonopt;
../inputs/grep1.dat:1084:static int last_nonopt;
../inputs/grep1.dat:1085:
../inputs/grep1.dat:1086:/* Exchange two adjacent subsequences of ARGV.
../inputs/grep1.dat:1087:   One subsequence is elements [first_nonopt,last_nonopt)
../inputs/grep1.dat:1088:   which contains all the non-options that have been skipped so far.
../inputs/grep1.dat:1089:   The other is elements [last_nonopt,optind), which contains all
../inputs/grep1.dat:1090:   the options processed since those non-options were skipped.
../inputs/grep1.dat:1091:
../inputs/grep1.dat:1092:   `first_nonopt' and `last_nonopt' are relocated so that they describe
../inputs/grep1.dat:1093:   the new indices of the non-options in ARGV after they are moved.  */
../inputs/grep1.dat:1094:
../inputs/grep1.dat:1095:static void
../inputs/grep1.dat:1096:exchange (argv)
../inputs/grep1.dat:1097:     char **argv;
../inputs/grep1.dat:1098:{
../inputs/grep1.dat:1099:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
../inputs/grep1.dat:1100:  char **temp = (char **) __alloca (nonopts_size);
../inputs/grep1.dat:1101:
../inputs/grep1.dat:1102:  /* Interchange the two blocks of data in ARGV.  */
../inputs/grep1.dat:1103:
../inputs/grep1.dat:1104:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
../inputs/grep1.dat:1105:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
../inputs/grep1.dat:1106:	    (optind - last_nonopt) * sizeof (char *));
../inputs/grep1.dat:1107:  my_bcopy ((char *) temp,
../inputs/grep1.dat:1108:	    (char *) &argv[first_nonopt + optind - last_nonopt],
../inputs/grep1.dat:1109:	    nonopts_size);
../inputs/grep1.dat:1110:
../inputs/grep1.dat:1111:  /* Update records for the slots the non-options now occupy.  */
../inputs/grep1.dat:1112:
../inputs/grep1.dat:1113:  first_nonopt += (optind - last_nonopt);
../inputs/grep1.dat:1114:  last_nonopt = optind;
../inputs/grep1.dat:1115:}
../inputs/grep1.dat:1116:
../inputs/grep1.dat:1117:/* Scan elements of ARGV (whose length is ARGC) for option characters
../inputs/grep1.dat:1118:   given in OPTSTRING.
../inputs/grep1.dat:1119:
../inputs/grep1.dat:1120:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
../inputs/grep1.dat:1121:   then it is an option element.  The characters of this element
../inputs/grep1.dat:1122:   (aside from the initial '-') are option characters.  If `getopt'
../inputs/grep1.dat:1123:   is called repeatedly, it returns successively each of the option characters
../inputs/grep1.dat:1124:   from each of the option elements.
../inputs/grep1.dat:1125:
../inputs/grep1.dat:1126:   If `getopt' finds another option character, it returns that character,
../inputs/grep1.dat:1127:   updating `optind' and `nextchar' so that the next call to `getopt' can
../inputs/grep1.dat:1128:   resume the scan with the following option character or ARGV-element.
../inputs/grep1.dat:1129:
../inputs/grep1.dat:1130:   If there are no more option characters, `getopt' returns `EOF'.
../inputs/grep1.dat:1131:   Then `optind' is the index in ARGV of the first ARGV-element
../inputs/grep1.dat:1132:   that is not an option.  (The ARGV-elements have been permuted
../inputs/grep1.dat:1133:   so that those that are not options now come last.)
../inputs/grep1.dat:1134:
../inputs/grep1.dat:1135:   OPTSTRING is a string containing the legitimate option characters.
../inputs/grep1.dat:1136:   If an option character is seen that is not listed in OPTSTRING,
../inputs/grep1.dat:1137:   return '?' after printing an error message.  If you set `opterr' to
../inputs/grep1.dat:1138:   zero, the error message is suppressed but we still return '?'.
../inputs/grep1.dat:1139:
../inputs/grep1.dat:1140:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
../inputs/grep1.dat:1141:   so the following text in the same ARGV-element, or the text of the following
../inputs/grep1.dat:1142:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
../inputs/grep1.dat:1143:   wants an optional arg; if there is text in the current ARGV-element,
../inputs/grep1.dat:1144:   it is returned in `optarg', otherwise `optarg' is set to zero.
../inputs/grep1.dat:1145:
../inputs/grep1.dat:1146:   If OPTSTRING starts with `-' or `+', it requests different methods of
../inputs/grep1.dat:1147:   handling the non-option ARGV-elements.
../inputs/grep1.dat:1148:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
../inputs/grep1.dat:1149:
../inputs/grep1.dat:1150:   Long-named options begin with `--' instead of `-'.
../inputs/grep1.dat:1151:   Their names may be abbreviated as long as the abbreviation is unique
../inputs/grep1.dat:1152:   or is an exact match for some defined option.  If they have an
../inputs/grep1.dat:1153:   argument, it follows the option name in the same ARGV-element, separated
../inputs/grep1.dat:1154:   from the option name by a `=', or else the in next ARGV-element.
../inputs/grep1.dat:1155:   When `getopt' finds a long-named option, it returns 0 if that option's
../inputs/grep1.dat:1156:   `flag' field is nonzero, the value of the option's `val' field
../inputs/grep1.dat:1157:   if the `flag' field is zero.
../inputs/grep1.dat:1158:
../inputs/grep1.dat:1159:   The elements of ARGV aren't really const, because we permute them.
../inputs/grep1.dat:1160:   But we pretend they're const in the prototype to be compatible
../inputs/grep1.dat:1161:   with other systems.
../inputs/grep1.dat:1162:
../inputs/grep1.dat:1163:   LONGOPTS is a vector of `struct option' terminated by an
../inputs/grep1.dat:1164:   element containing a name which is zero.
../inputs/grep1.dat:1165:
../inputs/grep1.dat:1166:   LONGIND returns the index in LONGOPT of the long-named option found.
../inputs/grep1.dat:1167:   It is only valid when a long-named option has been found by the most
../inputs/grep1.dat:1168:   recent call.
../inputs/grep1.dat:1169:
../inputs/grep1.dat:1170:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
../inputs/grep1.dat:1171:   long-named options.  */
../inputs/grep1.dat:1172:
../inputs/grep1.dat:1173:int
../inputs/grep1.dat:1174:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
../inputs/grep1.dat:1175:     int argc;
../inputs/grep1.dat:1176:     char *const *argv;
../inputs/grep1.dat:1177:     const char *optstring;
../inputs/grep1.dat:1178:     const struct option *longopts;
../inputs/grep1.dat:1179:     int *longind;
../inputs/grep1.dat:1180:     int long_only;
../inputs/grep1.dat:1181:{
../inputs/grep1.dat:1182:  int option_index;
../inputs/grep1.dat:1183:
../inputs/grep1.dat:1184:  optarg = 0;
../inputs/grep1.dat:1185:
../inputs/grep1.dat:1186:  /* Initialize the internal data when the first call is made.
../inputs/grep1.dat:1187:     Start processing options with ARGV-element 1 (since ARGV-element 0
../inputs/grep1.dat:1188:     is the program name); the sequence of previously skipped
../inputs/grep1.dat:1189:     non-option ARGV-elements is empty.  */
../inputs/grep1.dat:1190:
../inputs/grep1.dat:1191:  if (optind == 0)
../inputs/grep1.dat:1192:    {
../inputs/grep1.dat:1193:      first_nonopt = last_nonopt = optind = 1;
../inputs/grep1.dat:1194:
../inputs/grep1.dat:1195:      nextchar = NULL;
../inputs/grep1.dat:1196:
../inputs/grep1.dat:1197:      /* Determine how to handle the ordering of options and nonoptions.  */
../inputs/grep1.dat:1198:
../inputs/grep1.dat:1199:      if (optstring[0] == '-')
../inputs/grep1.dat:1200:	{
../inputs/grep1.dat:1201:	  ordering = RETURN_IN_ORDER;
../inputs/grep1.dat:1202:	  ++optstring;
../inputs/grep1.dat:1203:	}
../inputs/grep1.dat:1204:      else if (optstring[0] == '+')
../inputs/grep1.dat:1205:	{
../inputs/grep1.dat:1206:	  ordering = REQUIRE_ORDER;
../inputs/grep1.dat:1207:	  ++optstring;
../inputs/grep1.dat:1208:	}
../inputs/grep1.dat:1209:      else if (getenv ("POSIXLY_CORRECT") != NULL)
../inputs/grep1.dat:1210:	ordering = REQUIRE_ORDER;
../inputs/grep1.dat:1211:      else
../inputs/grep1.dat:1212:	ordering = PERMUTE;
../inputs/grep1.dat:1213:    }
../inputs/grep1.dat:1214:
../inputs/grep1.dat:1215:  if (nextchar == NULL || *nextchar == '\0')
../inputs/grep1.dat:1216:    {
../inputs/grep1.dat:1217:      if (ordering == PERMUTE)
../inputs/grep1.dat:1218:	{
../inputs/grep1.dat:1219:	  /* If we have just processed some options following some non-options,
../inputs/grep1.dat:1220:	     exchange them so that the options come first.  */
../inputs/grep1.dat:1221:
../inputs/grep1.dat:1222:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
../inputs/grep1.dat:1223:	    exchange ((char **) argv);
../inputs/grep1.dat:1224:	  else if (last_nonopt != optind)
../inputs/grep1.dat:1225:	    first_nonopt = optind;
../inputs/grep1.dat:1226:
../inputs/grep1.dat:1227:	  /* Now skip any additional non-options
../inputs/grep1.dat:1228:	     and extend the range of non-options previously skipped.  */
../inputs/grep1.dat:1229:
../inputs/grep1.dat:1230:	  while (optind < argc
../inputs/grep1.dat:1231:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
../inputs/grep1.dat:1232:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:1233:		 && (longopts == NULL
../inputs/grep1.dat:1234:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
../inputs/grep1.dat:1235:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:1236:		 )
../inputs/grep1.dat:1237:	    optind++;
../inputs/grep1.dat:1238:	  last_nonopt = optind;
../inputs/grep1.dat:1239:	}
../inputs/grep1.dat:1240:
../inputs/grep1.dat:1241:      /* Special ARGV-element `--' means premature end of options.
../inputs/grep1.dat:1242:	 Skip it like a null option,
../inputs/grep1.dat:1243:	 then exchange with previous non-options as if it were an option,
../inputs/grep1.dat:1244:	 then skip everything else like a non-option.  */
../inputs/grep1.dat:1245:
../inputs/grep1.dat:1246:      if (optind != argc && !strcmp (argv[optind], "--"))
../inputs/grep1.dat:1247:	{
../inputs/grep1.dat:1248:	  optind++;
../inputs/grep1.dat:1249:
../inputs/grep1.dat:1250:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
../inputs/grep1.dat:1251:	    exchange ((char **) argv);
../inputs/grep1.dat:1252:	  else if (first_nonopt == last_nonopt)
../inputs/grep1.dat:1253:	    first_nonopt = optind;
../inputs/grep1.dat:1254:	  last_nonopt = argc;
../inputs/grep1.dat:1255:
../inputs/grep1.dat:1256:	  optind = argc;
../inputs/grep1.dat:1257:	}
../inputs/grep1.dat:1258:
../inputs/grep1.dat:1259:      /* If we have done all the ARGV-elements, stop the scan
../inputs/grep1.dat:1260:	 and back over any non-options that we skipped and permuted.  */
../inputs/grep1.dat:1261:
../inputs/grep1.dat:1262:      if (optind == argc)
../inputs/grep1.dat:1263:	{
../inputs/grep1.dat:1264:	  /* Set the next-arg-index to point at the non-options
../inputs/grep1.dat:1265:	     that we previously skipped, so the caller will digest them.  */
../inputs/grep1.dat:1266:	  if (first_nonopt != last_nonopt)
../inputs/grep1.dat:1267:	    optind = first_nonopt;
../inputs/grep1.dat:1268:	  return EOF;
../inputs/grep1.dat:1269:	}
../inputs/grep1.dat:1270:
../inputs/grep1.dat:1271:      /* If we have come to a non-option and did not permute it,
../inputs/grep1.dat:1272:	 either stop the scan or describe it to the caller and pass it by.  */
../inputs/grep1.dat:1273:
../inputs/grep1.dat:1274:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
../inputs/grep1.dat:1275:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:1276:	  && (longopts == NULL
../inputs/grep1.dat:1277:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
../inputs/grep1.dat:1278:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:1279:	  )
../inputs/grep1.dat:1280:	{
../inputs/grep1.dat:1281:	  if (ordering == REQUIRE_ORDER)
../inputs/grep1.dat:1282:	    return EOF;
../inputs/grep1.dat:1283:	  optarg = argv[optind++];
../inputs/grep1.dat:1284:	  return 1;
../inputs/grep1.dat:1285:	}
../inputs/grep1.dat:1286:
../inputs/grep1.dat:1287:      /* We have found another option-ARGV-element.
../inputs/grep1.dat:1288:	 Start decoding its characters.  */
../inputs/grep1.dat:1289:
../inputs/grep1.dat:1290:      nextchar = (argv[optind] + 1
../inputs/grep1.dat:1291:		  + (longopts != NULL && argv[optind][1] == '-'));
../inputs/grep1.dat:1292:    }
../inputs/grep1.dat:1293:
../inputs/grep1.dat:1294:  if (longopts != NULL
../inputs/grep1.dat:1295:      && ((argv[optind][0] == '-'
../inputs/grep1.dat:1296:	   && (argv[optind][1] == '-' || long_only))
../inputs/grep1.dat:1297:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:1298:	  || argv[optind][0] == '+'
../inputs/grep1.dat:1299:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:1300:	  ))
../inputs/grep1.dat:1301:    {
../inputs/grep1.dat:1302:      const struct option *p;
../inputs/grep1.dat:1303:      char *s = nextchar;
../inputs/grep1.dat:1304:      int exact = 0;
../inputs/grep1.dat:1305:      int ambig = 0;
../inputs/grep1.dat:1306:      const struct option *pfound = NULL;
../inputs/grep1.dat:1307:      int indfound;
../inputs/grep1.dat:1308:
../inputs/grep1.dat:1309:      while (*s && *s != '=')
../inputs/grep1.dat:1310:	s++;
../inputs/grep1.dat:1311:
../inputs/grep1.dat:1312:      /* Test all options for either exact match or abbreviated matches.  */
../inputs/grep1.dat:1313:      for (p = longopts, option_index = 0; p->name;
../inputs/grep1.dat:1314:	   p++, option_index++)
../inputs/grep1.dat:1315:	if (!strncmp (p->name, nextchar, s - nextchar))
../inputs/grep1.dat:1316:	  {
../inputs/grep1.dat:1317:	    if (s - nextchar == strlen (p->name))
../inputs/grep1.dat:1318:	      {
../inputs/grep1.dat:1319:		/* Exact match found.  */
../inputs/grep1.dat:1320:		pfound = p;
../inputs/grep1.dat:1321:		indfound = option_index;
../inputs/grep1.dat:1322:		exact = 1;
../inputs/grep1.dat:1323:		break;
../inputs/grep1.dat:1324:	      }
../inputs/grep1.dat:1325:	    else if (pfound == NULL)
../inputs/grep1.dat:1326:	      {
../inputs/grep1.dat:1327:		/* First nonexact match found.  */
../inputs/grep1.dat:1328:		pfound = p;
../inputs/grep1.dat:1329:		indfound = option_index;
../inputs/grep1.dat:1330:	      }
../inputs/grep1.dat:1331:	    else
../inputs/grep1.dat:1332:	      /* Second nonexact match found.  */
../inputs/grep1.dat:1333:	      ambig = 1;
../inputs/grep1.dat:1334:	  }
../inputs/grep1.dat:1335:
../inputs/grep1.dat:1336:      if (ambig && !exact)
../inputs/grep1.dat:1337:	{
../inputs/grep1.dat:1338:	  if (opterr)
../inputs/grep1.dat:1339:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
../inputs/grep1.dat:1340:		     argv[0], argv[optind]);
../inputs/grep1.dat:1341:	  nextchar += strlen (nextchar);
../inputs/grep1.dat:1342:	  optind++;
../inputs/grep1.dat:1343:	  return '?';
../inputs/grep1.dat:1344:	}
../inputs/grep1.dat:1345:
../inputs/grep1.dat:1346:      if (pfound != NULL)
../inputs/grep1.dat:1347:	{
../inputs/grep1.dat:1348:	  option_index = indfound;
../inputs/grep1.dat:1349:	  optind++;
../inputs/grep1.dat:1350:	  if (*s)
../inputs/grep1.dat:1351:	    {
../inputs/grep1.dat:1352:	      /* Don't test has_arg with >, because some C compilers don't
../inputs/grep1.dat:1353:		 allow it to be used on enums.  */
../inputs/grep1.dat:1354:	      if (pfound->has_arg)
../inputs/grep1.dat:1355:		optarg = s + 1;
../inputs/grep1.dat:1356:	      else
../inputs/grep1.dat:1357:		{
../inputs/grep1.dat:1358:		  if (opterr)
../inputs/grep1.dat:1359:		    {
../inputs/grep1.dat:1360:		      if (argv[optind - 1][1] == '-')
../inputs/grep1.dat:1361:			/* --option */
../inputs/grep1.dat:1362:			fprintf (stderr,
../inputs/grep1.dat:1363:				 "%s: option `--%s' doesn't allow an argument\n",
../inputs/grep1.dat:1364:				 argv[0], pfound->name);
../inputs/grep1.dat:1365:		      else
../inputs/grep1.dat:1366:			/* +option or -option */
../inputs/grep1.dat:1367:			fprintf (stderr,
../inputs/grep1.dat:1368:			     "%s: option `%c%s' doesn't allow an argument\n",
../inputs/grep1.dat:1369:			     argv[0], argv[optind - 1][0], pfound->name);
../inputs/grep1.dat:1370:		    }
../inputs/grep1.dat:1371:		  nextchar += strlen (nextchar);
../inputs/grep1.dat:1372:		  return '?';
../inputs/grep1.dat:1373:		}
../inputs/grep1.dat:1374:	    }
../inputs/grep1.dat:1375:	  else if (pfound->has_arg == 1)
../inputs/grep1.dat:1376:	    {
../inputs/grep1.dat:1377:	      if (optind < argc)
../inputs/grep1.dat:1378:		optarg = argv[optind++];
../inputs/grep1.dat:1379:	      else
../inputs/grep1.dat:1380:		{
../inputs/grep1.dat:1381:		  if (opterr)
../inputs/grep1.dat:1382:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
../inputs/grep1.dat:1383:			     argv[0], argv[optind - 1]);
../inputs/grep1.dat:1384:		  nextchar += strlen (nextchar);
../inputs/grep1.dat:1385:		  return optstring[0] == ':' ? ':' : '?';
../inputs/grep1.dat:1386:		}
../inputs/grep1.dat:1387:	    }
../inputs/grep1.dat:1388:	  nextchar += strlen (nextchar);
../inputs/grep1.dat:1389:	  if (longind != NULL)
../inputs/grep1.dat:1390:	    *longind = option_index;
../inputs/grep1.dat:1391:	  if (pfound->flag)
../inputs/grep1.dat:1392:	    {
../inputs/grep1.dat:1393:	      *(pfound->flag) = pfound->val;
../inputs/grep1.dat:1394:	      return 0;
../inputs/grep1.dat:1395:	    }
../inputs/grep1.dat:1396:	  return pfound->val;
../inputs/grep1.dat:1397:	}
../inputs/grep1.dat:1398:      /* Can't find it as a long option.  If this is not getopt_long_only,
../inputs/grep1.dat:1399:	 or the option starts with '--' or is not a valid short
../inputs/grep1.dat:1400:	 option, then it's an error.
../inputs/grep1.dat:1401:	 Otherwise interpret it as a short option.  */
../inputs/grep1.dat:1402:      if (!long_only || argv[optind][1] == '-'
../inputs/grep1.dat:1403:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:1404:	  || argv[optind][0] == '+'
../inputs/grep1.dat:1405:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:1406:	  || my_index (optstring, *nextchar) == NULL)
../inputs/grep1.dat:1407:	{
../inputs/grep1.dat:1408:	  if (opterr)
../inputs/grep1.dat:1409:	    {
../inputs/grep1.dat:1410:	      if (argv[optind][1] == '-')
../inputs/grep1.dat:1411:		/* --option */
../inputs/grep1.dat:1412:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
../inputs/grep1.dat:1413:			 argv[0], nextchar);
../inputs/grep1.dat:1414:	      else
../inputs/grep1.dat:1415:		/* +option or -option */
../inputs/grep1.dat:1416:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
../inputs/grep1.dat:1417:			 argv[0], argv[optind][0], nextchar);
../inputs/grep1.dat:1418:	    }
../inputs/grep1.dat:1419:	  nextchar = (char *) "";
../inputs/grep1.dat:1420:	  optind++;
../inputs/grep1.dat:1421:	  return '?';
../inputs/grep1.dat:1422:	}
../inputs/grep1.dat:1423:    }
../inputs/grep1.dat:1424:
../inputs/grep1.dat:1425:  /* Look at and handle the next option-character.  */
../inputs/grep1.dat:1426:
../inputs/grep1.dat:1427:  {
../inputs/grep1.dat:1428:    char c = *nextchar++;
../inputs/grep1.dat:1429:    char *temp = my_index (optstring, c);
../inputs/grep1.dat:1430:
../inputs/grep1.dat:1431:    /* Increment `optind' when we start to process its last character.  */
../inputs/grep1.dat:1432:    if (*nextchar == '\0')
../inputs/grep1.dat:1433:      ++optind;
../inputs/grep1.dat:1434:
../inputs/grep1.dat:1435:    if (temp == NULL || c == ':')
../inputs/grep1.dat:1436:      {
../inputs/grep1.dat:1437:	if (opterr)
../inputs/grep1.dat:1438:	  {
../inputs/grep1.dat:1439:#if 0
../inputs/grep1.dat:1440:	    if (c < 040 || c >= 0177)
../inputs/grep1.dat:1441:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
../inputs/grep1.dat:1442:		       argv[0], c);
../inputs/grep1.dat:1443:	    else
../inputs/grep1.dat:1444:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
../inputs/grep1.dat:1445:#else
../inputs/grep1.dat:1446:	    /* 1003.2 specifies the format of this message.  */
../inputs/grep1.dat:1447:	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
../inputs/grep1.dat:1448:#endif
../inputs/grep1.dat:1449:	  }
../inputs/grep1.dat:1450:	optopt = c;
../inputs/grep1.dat:1451:	return '?';
../inputs/grep1.dat:1452:      }
../inputs/grep1.dat:1453:    if (temp[1] == ':')
../inputs/grep1.dat:1454:      {
../inputs/grep1.dat:1455:	if (temp[2] == ':')
../inputs/grep1.dat:1456:	  {
../inputs/grep1.dat:1457:	    /* This is an option that accepts an argument optionally.  */
../inputs/grep1.dat:1458:	    if (*nextchar != '\0')
../inputs/grep1.dat:1459:	      {
../inputs/grep1.dat:1460:		optarg = nextchar;
../inputs/grep1.dat:1461:		optind++;
../inputs/grep1.dat:1462:	      }
../inputs/grep1.dat:1463:	    else
../inputs/grep1.dat:1464:	      optarg = 0;
../inputs/grep1.dat:1465:	    nextchar = NULL;
../inputs/grep1.dat:1466:	  }
../inputs/grep1.dat:1467:	else
../inputs/grep1.dat:1468:	  {
../inputs/grep1.dat:1469:	    /* This is an option that requires an argument.  */
../inputs/grep1.dat:1470:	    if (*nextchar != '\0')
../inputs/grep1.dat:1471:	      {
../inputs/grep1.dat:1472:		optarg = nextchar;
../inputs/grep1.dat:1473:		/* If we end this ARGV-element by taking the rest as an arg,
../inputs/grep1.dat:1474:		   we must advance to the next element now.  */
../inputs/grep1.dat:1475:		optind++;
../inputs/grep1.dat:1476:	      }
../inputs/grep1.dat:1477:	    else if (optind == argc)
../inputs/grep1.dat:1478:	      {
../inputs/grep1.dat:1479:		if (opterr)
../inputs/grep1.dat:1480:		  {
../inputs/grep1.dat:1481:#if 0
../inputs/grep1.dat:1482:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
../inputs/grep1.dat:1483:			     argv[0], c);
../inputs/grep1.dat:1484:#else
../inputs/grep1.dat:1485:		    /* 1003.2 specifies the format of this message.  */
../inputs/grep1.dat:1486:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
../inputs/grep1.dat:1487:			     argv[0], c);
../inputs/grep1.dat:1488:#endif
../inputs/grep1.dat:1489:		  }
../inputs/grep1.dat:1490:		optopt = c;
../inputs/grep1.dat:1491:		if (optstring[0] == ':')
../inputs/grep1.dat:1492:		  c = ':';
../inputs/grep1.dat:1493:		else
../inputs/grep1.dat:1494:		  c = '?';
../inputs/grep1.dat:1495:	      }
../inputs/grep1.dat:1496:	    else
../inputs/grep1.dat:1497:	      /* We already incremented `optind' once;
../inputs/grep1.dat:1498:		 increment it again when taking next ARGV-elt as argument.  */
../inputs/grep1.dat:1499:	      optarg = argv[optind++];
../inputs/grep1.dat:1500:	    nextchar = NULL;
../inputs/grep1.dat:1501:	  }
../inputs/grep1.dat:1502:      }
../inputs/grep1.dat:1503:    return c;
../inputs/grep1.dat:1504:  }
../inputs/grep1.dat:1505:}
../inputs/grep1.dat:1506:
../inputs/grep1.dat:1507:int
../inputs/grep1.dat:1508:getopt (argc, argv, optstring)
../inputs/grep1.dat:1509:     int argc;
../inputs/grep1.dat:1510:     char *const *argv;
../inputs/grep1.dat:1511:     const char *optstring;
../inputs/grep1.dat:1512:{
../inputs/grep1.dat:1513:  return _getopt_internal (argc, argv, optstring,
../inputs/grep1.dat:1514:			   (const struct option *) 0,
../inputs/grep1.dat:1515:			   (int *) 0,
../inputs/grep1.dat:1516:			   0);
../inputs/grep1.dat:1517:}
../inputs/grep1.dat:1518:
../inputs/grep1.dat:1519:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
../inputs/grep1.dat:1520:
../inputs/grep1.dat:1521:#ifdef TEST
../inputs/grep1.dat:1522:
../inputs/grep1.dat:1523:/* Compile with -DTEST to make an executable for use in testing
../inputs/grep1.dat:1524:   the above definition of `getopt'.  */
../inputs/grep1.dat:1525:
../inputs/grep1.dat:1526:int
../inputs/grep1.dat:1527:main (argc, argv)
../inputs/grep1.dat:1528:     int argc;
../inputs/grep1.dat:1529:     char **argv;
../inputs/grep1.dat:1530:{
../inputs/grep1.dat:1531:  int c;
../inputs/grep1.dat:1532:  int digit_optind = 0;
../inputs/grep1.dat:1533:
../inputs/grep1.dat:1534:  while (1)
../inputs/grep1.dat:1535:    {
../inputs/grep1.dat:1536:      int this_option_optind = optind ? optind : 1;
../inputs/grep1.dat:1537:
../inputs/grep1.dat:1538:      c = getopt (argc, argv, "abc:d:0123456789");
../inputs/grep1.dat:1539:      if (c == EOF)
../inputs/grep1.dat:1540:	break;
../inputs/grep1.dat:1541:
../inputs/grep1.dat:1542:      switch (c)
../inputs/grep1.dat:1543:	{
../inputs/grep1.dat:1544:	case '0':
../inputs/grep1.dat:1545:	case '1':
../inputs/grep1.dat:1546:	case '2':
../inputs/grep1.dat:1547:	case '3':
../inputs/grep1.dat:1548:	case '4':
../inputs/grep1.dat:1549:	case '5':
../inputs/grep1.dat:1550:	case '6':
../inputs/grep1.dat:1551:	case '7':
../inputs/grep1.dat:1552:	case '8':
../inputs/grep1.dat:1553:	case '9':
../inputs/grep1.dat:1554:	  if (digit_optind != 0 && digit_optind != this_option_optind)
../inputs/grep1.dat:1555:	    printf ("digits occur in two different argv-elements.\n");
../inputs/grep1.dat:1556:	  digit_optind = this_option_optind;
../inputs/grep1.dat:1557:	  printf ("option %c\n", c);
../inputs/grep1.dat:1558:	  break;
../inputs/grep1.dat:1559:
../inputs/grep1.dat:1560:	case 'a':
../inputs/grep1.dat:1561:	  printf ("option a\n");
../inputs/grep1.dat:1562:	  break;
../inputs/grep1.dat:1563:
../inputs/grep1.dat:1564:	case 'b':
../inputs/grep1.dat:1565:	  printf ("option b\n");
../inputs/grep1.dat:1566:	  break;
../inputs/grep1.dat:1567:
../inputs/grep1.dat:1568:	case 'c':
../inputs/grep1.dat:1569:	  printf ("option c with value `%s'\n", optarg);
../inputs/grep1.dat:1570:	  break;
../inputs/grep1.dat:1571:
../inputs/grep1.dat:1572:	case '?':
../inputs/grep1.dat:1573:	  break;
../inputs/grep1.dat:1574:
../inputs/grep1.dat:1575:	default:
../inputs/grep1.dat:1576:	  printf ("?? getopt returned character code 0%o ??\n", c);
../inputs/grep1.dat:1577:	}
../inputs/grep1.dat:1578:    }
../inputs/grep1.dat:1579:
../inputs/grep1.dat:1580:  if (optind < argc)
../inputs/grep1.dat:1581:    {
../inputs/grep1.dat:1582:      printf ("non-option ARGV-elements: ");
../inputs/grep1.dat:1583:      while (optind < argc)
../inputs/grep1.dat:1584:	printf ("%s ", argv[optind++]);
../inputs/grep1.dat:1585:      printf ("\n");
../inputs/grep1.dat:1586:    }
../inputs/grep1.dat:1587:
../inputs/grep1.dat:1588:  exit (0);
../inputs/grep1.dat:1589:}
../inputs/grep1.dat:1590:
../inputs/grep1.dat:1591:#endif /* TEST */
../inputs/grep1.dat:1592:/* Extended regular expression matching and search library,
../inputs/grep1.dat:1593:   version 0.12.
../inputs/grep1.dat:1594:   (Implements POSIX draft P10003.2/D11.2, except for
../inputs/grep1.dat:1595:   internationalization features.)
../inputs/grep1.dat:1596:
../inputs/grep1.dat:1597:   Copyright (C) 1993 Free Software Foundation, Inc.
../inputs/grep1.dat:1598:
../inputs/grep1.dat:1599:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:1600:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:1601:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:1602:   any later version.
../inputs/grep1.dat:1603:
../inputs/grep1.dat:1604:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:1605:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:1606:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:1607:   GNU General Public License for more details.
../inputs/grep1.dat:1608:
../inputs/grep1.dat:1609:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:1610:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:1611:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:1612:
../inputs/grep1.dat:1613:/* AIX requires this to be the first thing in the file. */
../inputs/grep1.dat:1614:#if defined (_AIX) && !defined (REGEX_MALLOC)
../inputs/grep1.dat:1615:  #pragma alloca
../inputs/grep1.dat:1616:#endif
../inputs/grep1.dat:1617:
../inputs/grep1.dat:1618:#define _GNU_SOURCE
../inputs/grep1.dat:1619:
../inputs/grep1.dat:1621:#if flag_systypes==0
../inputs/grep1.dat:1623:#define flag_systypes 1
../inputs/grep1.dat:1624:#endif
../inputs/grep1.dat:1625:
../inputs/grep1.dat:1626:#ifdef HAVE_CONFIG_H
../inputs/grep1.dat:1627:#if flag_config==0
../inputs/grep1.dat:1629:#define flag_config 1
../inputs/grep1.dat:1630:#endif
../inputs/grep1.dat:1631:#endif
../inputs/grep1.dat:1632:
../inputs/grep1.dat:1633:/* The `emacs' switch turns on certain matching commands
../inputs/grep1.dat:1634:   that make sense only in Emacs. */
../inputs/grep1.dat:1635:#ifdef emacs
../inputs/grep1.dat:1636:
../inputs/grep1.dat:1640:
../inputs/grep1.dat:1641:/* Emacs uses `NULL' as a predicate.  */
../inputs/grep1.dat:1642:#undef NULL
../inputs/grep1.dat:1643:
../inputs/grep1.dat:1644:#else  /* not emacs */
../inputs/grep1.dat:1645:
../inputs/grep1.dat:1646:/* We used to test for `BSTRING' here, but only GCC and Emacs define
../inputs/grep1.dat:1647:   `BSTRING', as far as I know, and neither of them use this code.  */
../inputs/grep1.dat:1648:#if HAVE_STRING_H || STDC_HEADERS
../inputs/grep1.dat:1649:#if flag_string==0
../inputs/grep1.dat:1651:#define flag_string 1
../inputs/grep1.dat:1652:#endif
../inputs/grep1.dat:1653:#ifndef bcmp
../inputs/grep1.dat:1654:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
../inputs/grep1.dat:1655:#endif
../inputs/grep1.dat:1656:#ifndef bcopy
../inputs/grep1.dat:1657:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
../inputs/grep1.dat:1658:#endif
../inputs/grep1.dat:1659:#ifndef bzero
../inputs/grep1.dat:1660:#define bzero(s, n)	memset ((s), 0, (n))
../inputs/grep1.dat:1661:#endif
../inputs/grep1.dat:1662:#else
../inputs/grep1.dat:1663:#if flag_strings==0
../inputs/grep1.dat:1665:#define flag_strings 1
../inputs/grep1.dat:1666:#endif
../inputs/grep1.dat:1667:#endif
../inputs/grep1.dat:1668:
../inputs/grep1.dat:1669:#ifdef STDC_HEADERS
../inputs/grep1.dat:1670:#if flag_stdlib==0 
../inputs/grep1.dat:1672:#define flag_stdlib 1
../inputs/grep1.dat:1673:#endif
../inputs/grep1.dat:1674:#else
../inputs/grep1.dat:1675:char *malloc ();
../inputs/grep1.dat:1676:char *realloc ();
../inputs/grep1.dat:1677:#endif
../inputs/grep1.dat:1678:
../inputs/grep1.dat:1679:
../inputs/grep1.dat:1680:/* Define the syntax stuff for \<, \>, etc.  */
../inputs/grep1.dat:1681:
../inputs/grep1.dat:1682:/* This must be nonzero for the wordchar and notwordchar pattern
../inputs/grep1.dat:1683:   commands in re_match_2.  */
../inputs/grep1.dat:1684:#ifndef Sword 
../inputs/grep1.dat:1685:#define Sword 1
../inputs/grep1.dat:1686:#endif
../inputs/grep1.dat:1687:
../inputs/grep1.dat:1688:#ifdef SYNTAX_TABLE
../inputs/grep1.dat:1689:
../inputs/grep1.dat:1690:extern char *re_syntax_table;
../inputs/grep1.dat:1691:
../inputs/grep1.dat:1692:#else /* not SYNTAX_TABLE */
../inputs/grep1.dat:1693:
../inputs/grep1.dat:1694:/* How many characters in the character set.  */
../inputs/grep1.dat:1695:#define CHAR_SET_SIZE 256
../inputs/grep1.dat:1696:
../inputs/grep1.dat:1697:static char re_syntax_table[CHAR_SET_SIZE];
../inputs/grep1.dat:1698:
../inputs/grep1.dat:1699:static void
../inputs/grep1.dat:1700:init_syntax_once ()
../inputs/grep1.dat:1701:{
../inputs/grep1.dat:1702:   register int c;
../inputs/grep1.dat:1703:   static int done = 0;
../inputs/grep1.dat:1704:
../inputs/grep1.dat:1705:   if (done)
../inputs/grep1.dat:1706:     return;
../inputs/grep1.dat:1707:
../inputs/grep1.dat:1708:   bzero (re_syntax_table, sizeof re_syntax_table);
../inputs/grep1.dat:1709:
../inputs/grep1.dat:1710:   for (c = 'a'; c <= 'z'; c++)
../inputs/grep1.dat:1711:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:1712:
../inputs/grep1.dat:1713:   for (c = 'A'; c <= 'Z'; c++)
../inputs/grep1.dat:1714:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:1715:
../inputs/grep1.dat:1716:   for (c = '0'; c <= '9'; c++)
../inputs/grep1.dat:1717:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:1718:
../inputs/grep1.dat:1719:   re_syntax_table['_'] = Sword;
../inputs/grep1.dat:1720:
../inputs/grep1.dat:1721:   done = 1;
../inputs/grep1.dat:1722:}
../inputs/grep1.dat:1723:
../inputs/grep1.dat:1724:#endif /* not SYNTAX_TABLE */
../inputs/grep1.dat:1725:
../inputs/grep1.dat:1726:#define SYNTAX(c) re_syntax_table[c]
../inputs/grep1.dat:1727:
../inputs/grep1.dat:1728:#endif /* not emacs */
../inputs/grep1.dat:1729:
../inputs/grep1.dat:1730:/* Get the interface, including the syntax bits.  */
../inputs/grep1.dat:1732:
../inputs/grep1.dat:1733:/* isalpha etc. are used for the character classes.  */
../inputs/grep1.dat:1735:
../inputs/grep1.dat:1736:/* Jim Meyering writes:
../inputs/grep1.dat:1737:
../inputs/grep1.dat:1738:   "... Some ctype macros are valid only for character codes that
../inputs/grep1.dat:1739:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
../inputs/grep1.dat:1740:   using /bin/cc or gcc but without giving an ansi option).  So, all
../inputs/grep1.dat:1741:   ctype uses should be through macros like ISPRINT...  If
../inputs/grep1.dat:1742:   STDC_HEADERS is defined, then autoconf has verified that the ctype
../inputs/grep1.dat:1743:   macros don't need to be guarded with references to isascii. ...
../inputs/grep1.dat:1744:   Defining isascii to 1 should let any compiler worth its salt
../inputs/grep1.dat:1745:   eliminate the && through constant folding."  */
../inputs/grep1.dat:1746:#if ! defined (isascii) || defined (STDC_HEADERS)
../inputs/grep1.dat:1747:#undef isascii
../inputs/grep1.dat:1748:#define isascii(c) 1
../inputs/grep1.dat:1749:#endif
../inputs/grep1.dat:1750:
../inputs/grep1.dat:1751:#ifdef isblank
../inputs/grep1.dat:1752:#define ISBLANK(c) (isascii (c) && isblank (c))
../inputs/grep1.dat:1753:#else
../inputs/grep1.dat:1754:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
../inputs/grep1.dat:1755:#endif
../inputs/grep1.dat:1756:#ifdef isgraph
../inputs/grep1.dat:1757:#define ISGRAPH(c) (isascii (c) && isgraph (c))
../inputs/grep1.dat:1758:#else
../inputs/grep1.dat:1759:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
../inputs/grep1.dat:1760:#endif
../inputs/grep1.dat:1761:
../inputs/grep1.dat:1762:#define ISPRINT(c) (isascii (c) && isprint (c))
../inputs/grep1.dat:1763:#define ISDIGIT(c) (isascii (c) && isdigit (c))
../inputs/grep1.dat:1764:#define ISALNUM(c) (isascii (c) && isalnum (c))
../inputs/grep1.dat:1765:#define ISALPHA(c) (isascii (c) && isalpha (c))
../inputs/grep1.dat:1766:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
../inputs/grep1.dat:1767:#define ISLOWER(c) (isascii (c) && islower (c))
../inputs/grep1.dat:1768:#define ISPUNCT(c) (isascii (c) && ispunct (c))
../inputs/grep1.dat:1769:#define ISSPACE(c) (isascii (c) && isspace (c))
../inputs/grep1.dat:1770:#define ISUPPER(c) (isascii (c) && isupper (c))
../inputs/grep1.dat:1771:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
../inputs/grep1.dat:1772:
../inputs/grep1.dat:1773:#ifndef NULL
../inputs/grep1.dat:1774:#define NULL 0
../inputs/grep1.dat:1775:#endif
../inputs/grep1.dat:1776:
../inputs/grep1.dat:1777:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
../inputs/grep1.dat:1778:   since ours (we hope) works properly with all combinations of
../inputs/grep1.dat:1779:   machines, compilers, `char' and `unsigned char' argument types.
../inputs/grep1.dat:1780:   (Per Bothner suggested the basic approach.)  */
../inputs/grep1.dat:1781:#undef SIGN_EXTEND_CHAR
../inputs/grep1.dat:1782:#if __STDC__
../inputs/grep1.dat:1783:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
../inputs/grep1.dat:1784:#else  /* not __STDC__ */
../inputs/grep1.dat:1785:/* As in Harbison and Steele.  */
../inputs/grep1.dat:1786:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
../inputs/grep1.dat:1787:#endif
../inputs/grep1.dat:1788:
../inputs/grep1.dat:1789:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
../inputs/grep1.dat:1790:   use `alloca' instead of `malloc'.  This is because using malloc in
../inputs/grep1.dat:1791:   re_search* or re_match* could cause memory leaks when C-g is used in
../inputs/grep1.dat:1792:   Emacs; also, malloc is slower and causes storage fragmentation.  On
../inputs/grep1.dat:1793:   the other hand, malloc is more portable, and easier to debug.  
../inputs/grep1.dat:1794:   
../inputs/grep1.dat:1795:   Because we sometimes use alloca, some routines have to be macros,
../inputs/grep1.dat:1796:   not functions -- `alloca'-allocated space disappears at the end of the
../inputs/grep1.dat:1797:   function it is called in.  */
../inputs/grep1.dat:1798:
../inputs/grep1.dat:1799:#ifdef REGEX_MALLOC
../inputs/grep1.dat:1800:
../inputs/grep1.dat:1801:#define REGEX_ALLOCATE malloc
../inputs/grep1.dat:1802:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
../inputs/grep1.dat:1803:
../inputs/grep1.dat:1804:#else /* not REGEX_MALLOC  */
../inputs/grep1.dat:1805:
../inputs/grep1.dat:1806:/* Emacs already defines alloca, sometimes.  */
../inputs/grep1.dat:1807:#ifndef alloca
../inputs/grep1.dat:1808:
../inputs/grep1.dat:1809:/* Make alloca work the best possible way.  */
../inputs/grep1.dat:1810:#ifdef __GNUC__
../inputs/grep1.dat:1811:#define alloca __builtin_alloca
../inputs/grep1.dat:1812:#else /* not __GNUC__ */
../inputs/grep1.dat:1813:#if HAVE_ALLOCA_H
../inputs/grep1.dat:1814:#if flag_alloca==0
../inputs/grep1.dat:1816:#define flag_alloca 1
../inputs/grep1.dat:1817:#endif 
../inputs/grep1.dat:1818:#else /* not __GNUC__ or HAVE_ALLOCA_H */
../inputs/grep1.dat:1819:#ifndef _AIX /* Already did AIX, up at the top.  */
../inputs/grep1.dat:1820:char *alloca ();
../inputs/grep1.dat:1821:#endif /* not _AIX */
../inputs/grep1.dat:1822:#endif /* not HAVE_ALLOCA_H */ 
../inputs/grep1.dat:1823:#endif /* not __GNUC__ */
../inputs/grep1.dat:1824:
../inputs/grep1.dat:1825:#endif /* not alloca */
../inputs/grep1.dat:1826:
../inputs/grep1.dat:1827:#define REGEX_ALLOCATE alloca
../inputs/grep1.dat:1828:
../inputs/grep1.dat:1829:/* Assumes a `char *destination' variable.  */
../inputs/grep1.dat:1830:#define REGEX_REALLOCATE(source, osize, nsize)				\
../inputs/grep1.dat:1831:  (destination = (char *) alloca (nsize),				\
../inputs/grep1.dat:1832:   bcopy (source, destination, osize),					\
../inputs/grep1.dat:1833:   destination)
../inputs/grep1.dat:1834:
../inputs/grep1.dat:1835:#endif /* not REGEX_MALLOC */
../inputs/grep1.dat:1836:
../inputs/grep1.dat:1837:
../inputs/grep1.dat:1838:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
../inputs/grep1.dat:1839:   `string1' or just past its end.  This works if PTR is NULL, which is
../inputs/grep1.dat:1840:   a good thing.  */
../inputs/grep1.dat:1841:#define FIRST_STRING_P(ptr) 					\
../inputs/grep1.dat:1842:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
../inputs/grep1.dat:1843:
../inputs/grep1.dat:1844:/* (Re)Allocate N items of type T using malloc, or fail.  */
../inputs/grep1.dat:1845:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
../inputs/grep1.dat:1846:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
../inputs/grep1.dat:1847:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
../inputs/grep1.dat:1848:
../inputs/grep1.dat:1849:#define BYTEWIDTH 8 /* In bits.  */
../inputs/grep1.dat:1850:
../inputs/grep1.dat:1851:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
../inputs/grep1.dat:1852:
../inputs/grep1.dat:1853:#undef MAX               /****** added later *******/
../inputs/grep1.dat:1854:#define MAX(a, b) ((a) > (b) ? (a) : (b))
../inputs/grep1.dat:1855:#define MIN(a, b) ((a) < (b) ? (a) : (b))
../inputs/grep1.dat:1856:
../inputs/grep1.dat:1857:typedef char boolean;
../inputs/grep1.dat:1858:#define false 0
../inputs/grep1.dat:1859:#define true 1
../inputs/grep1.dat:1860:
../inputs/grep1.dat:1861:/* These are the command codes that appear in compiled regular
../inputs/grep1.dat:1862:   expressions.  Some opcodes are followed by argument bytes.  A
../inputs/grep1.dat:1863:   command code can specify any interpretation whatsoever for its
../inputs/grep1.dat:1864:   arguments.  Zero bytes may appear in the compiled regular expression.
../inputs/grep1.dat:1865:
../inputs/grep1.dat:1866:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
../inputs/grep1.dat:1867:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
../inputs/grep1.dat:1868:   `exactn' we use here must also be 1.  */
../inputs/grep1.dat:1869:
../inputs/grep1.dat:1870:typedef enum
../inputs/grep1.dat:1871:{
../inputs/grep1.dat:1872:  no_op = 0,
../inputs/grep1.dat:1873:
../inputs/grep1.dat:1874:        /* Followed by one byte giving n, then by n literal bytes.  */
../inputs/grep1.dat:1875:  exactn = 1,
../inputs/grep1.dat:1876:
../inputs/grep1.dat:1877:        /* Matches any (more or less) character.  */
../inputs/grep1.dat:1878:  anychar,
../inputs/grep1.dat:1879:
../inputs/grep1.dat:1880:        /* Matches any one char belonging to specified set.  First
../inputs/grep1.dat:1881:           following byte is number of bitmap bytes.  Then come bytes
../inputs/grep1.dat:1882:           for a bitmap saying which chars are in.  Bits in each byte
../inputs/grep1.dat:1883:           are ordered low-bit-first.  A character is in the set if its
../inputs/grep1.dat:1884:           bit is 1.  A character too large to have a bit in the map is
../inputs/grep1.dat:1885:           automatically not in the set.  */
../inputs/grep1.dat:1886:  charset,
../inputs/grep1.dat:1887:
../inputs/grep1.dat:1888:        /* Same parameters as charset, but match any character that is
../inputs/grep1.dat:1889:           not one of those specified.  */
../inputs/grep1.dat:1890:  charset_not,
../inputs/grep1.dat:1891:
../inputs/grep1.dat:1892:        /* Start remembering the text that is matched, for storing in a
../inputs/grep1.dat:1893:           register.  Followed by one byte with the register number, in
../inputs/grep1.dat:1894:           the range 0 to one less than the pattern buffer's re_nsub
../inputs/grep1.dat:1895:           field.  Then followed by one byte with the number of groups
../inputs/grep1.dat:1896:           inner to this one.  (This last has to be part of the
../inputs/grep1.dat:1897:           start_memory only because we need it in the on_failure_jump
../inputs/grep1.dat:1898:           of re_match_2.)  */
../inputs/grep1.dat:1899:  start_memory,
../inputs/grep1.dat:1900:
../inputs/grep1.dat:1901:        /* Stop remembering the text that is matched and store it in a
../inputs/grep1.dat:1902:           memory register.  Followed by one byte with the register
../inputs/grep1.dat:1903:           number, in the range 0 to one less than `re_nsub' in the
../inputs/grep1.dat:1904:           pattern buffer, and one byte with the number of inner groups,
../inputs/grep1.dat:1905:           just like `start_memory'.  (We need the number of inner
../inputs/grep1.dat:1906:           groups here because we don't have any easy way of finding the
../inputs/grep1.dat:1907:           corresponding start_memory when we're at a stop_memory.)  */
../inputs/grep1.dat:1908:  stop_memory,
../inputs/grep1.dat:1909:
../inputs/grep1.dat:1910:        /* Match a duplicate of something remembered. Followed by one
../inputs/grep1.dat:1911:           byte containing the register number.  */
../inputs/grep1.dat:1912:  duplicate,
../inputs/grep1.dat:1913:
../inputs/grep1.dat:1914:        /* Fail unless at beginning of line.  */
../inputs/grep1.dat:1915:  begline,
../inputs/grep1.dat:1916:
../inputs/grep1.dat:1917:        /* Fail unless at end of line.  */
../inputs/grep1.dat:1918:  endline,
../inputs/grep1.dat:1919:
../inputs/grep1.dat:1920:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
../inputs/grep1.dat:1921:           of string to be matched (if not).  */
../inputs/grep1.dat:1922:  begbuf,
../inputs/grep1.dat:1923:
../inputs/grep1.dat:1924:        /* Analogously, for end of buffer/string.  */
../inputs/grep1.dat:1925:  endbuf,
../inputs/grep1.dat:1926: 
../inputs/grep1.dat:1927:        /* Followed by two byte relative address to which to jump.  */
../inputs/grep1.dat:1928:  jump, 
../inputs/grep1.dat:1929:
../inputs/grep1.dat:1930:	/* Same as jump, but marks the end of an alternative.  */
../inputs/grep1.dat:1931:  jump_past_alt,
../inputs/grep1.dat:1932:
../inputs/grep1.dat:1933:        /* Followed by two-byte relative address of place to resume at
../inputs/grep1.dat:1934:           in case of failure.  */
../inputs/grep1.dat:1935:  on_failure_jump,
../inputs/grep1.dat:1936:	
../inputs/grep1.dat:1937:        /* Like on_failure_jump, but pushes a placeholder instead of the
../inputs/grep1.dat:1938:           current string position when executed.  */
../inputs/grep1.dat:1939:  on_failure_keep_string_jump,
../inputs/grep1.dat:1940:  
../inputs/grep1.dat:1941:        /* Throw away latest failure point and then jump to following
../inputs/grep1.dat:1942:           two-byte relative address.  */
../inputs/grep1.dat:1943:  pop_failure_jump,
../inputs/grep1.dat:1944:
../inputs/grep1.dat:1945:        /* Change to pop_failure_jump if know won't have to backtrack to
../inputs/grep1.dat:1946:           match; otherwise change to jump.  This is used to jump
../inputs/grep1.dat:1947:           back to the beginning of a repeat.  If what follows this jump
../inputs/grep1.dat:1948:           clearly won't match what the repeat does, such that we can be
../inputs/grep1.dat:1949:           sure that there is no use backtracking out of repetitions
../inputs/grep1.dat:1950:           already matched, then we change it to a pop_failure_jump.
../inputs/grep1.dat:1951:           Followed by two-byte address.  */
../inputs/grep1.dat:1952:  maybe_pop_jump,
../inputs/grep1.dat:1953:
../inputs/grep1.dat:1954:        /* Jump to following two-byte address, and push a dummy failure
../inputs/grep1.dat:1955:           point. This failure point will be thrown away if an attempt
../inputs/grep1.dat:1956:           is made to use it for a failure.  A `+' construct makes this
../inputs/grep1.dat:1957:           before the first repeat.  Also used as an intermediary kind
../inputs/grep1.dat:1958:           of jump when compiling an alternative.  */
../inputs/grep1.dat:1959:  dummy_failure_jump,
../inputs/grep1.dat:1960:
../inputs/grep1.dat:1961:	/* Push a dummy failure point and continue.  Used at the end of
../inputs/grep1.dat:1962:	   alternatives.  */
../inputs/grep1.dat:1963:  push_dummy_failure,
../inputs/grep1.dat:1964:
../inputs/grep1.dat:1965:        /* Followed by two-byte relative address and two-byte number n.
../inputs/grep1.dat:1966:           After matching N times, jump to the address upon failure.  */
../inputs/grep1.dat:1967:  succeed_n,
../inputs/grep1.dat:1968:
../inputs/grep1.dat:1969:        /* Followed by two-byte relative address, and two-byte number n.
../inputs/grep1.dat:1970:           Jump to the address N times, then fail.  */
../inputs/grep1.dat:1971:  jump_n,
../inputs/grep1.dat:1972:
../inputs/grep1.dat:1973:        /* Set the following two-byte relative address to the
../inputs/grep1.dat:1975:           bytes of number.  */
../inputs/grep1.dat:1976:  set_number_at,
../inputs/grep1.dat:1977:
../inputs/grep1.dat:1978:  wordchar,	/* Matches any word-constituent character.  */
../inputs/grep1.dat:1979:  notwordchar,	/* Matches any char that is not a word-constituent.  */
../inputs/grep1.dat:1980:
../inputs/grep1.dat:1981:  wordbeg,	/* Succeeds if at word beginning.  */
../inputs/grep1.dat:1982:  wordend,	/* Succeeds if at word end.  */
../inputs/grep1.dat:1983:
../inputs/grep1.dat:1984:  wordbound,	/* Succeeds if at a word boundary.  */
../inputs/grep1.dat:1985:  notwordbound	/* Succeeds if not at a word boundary.  */
../inputs/grep1.dat:1986:
../inputs/grep1.dat:1987:#ifdef emacs
../inputs/grep1.dat:1988:  ,before_dot,	/* Succeeds if before point.  */
../inputs/grep1.dat:1989:  at_dot,	/* Succeeds if at point.  */
../inputs/grep1.dat:1990:  after_dot,	/* Succeeds if after point.  */
../inputs/grep1.dat:1991:
../inputs/grep1.dat:1992:	/* Matches any character whose syntax is specified.  Followed by
../inputs/grep1.dat:1993:           a byte which contains a syntax code, e.g., Sword.  */
../inputs/grep1.dat:1994:  syntaxspec,
../inputs/grep1.dat:1995:
../inputs/grep1.dat:1996:	/* Matches any character whose syntax is not that specified.  */
../inputs/grep1.dat:1997:  notsyntaxspec
../inputs/grep1.dat:1998:#endif /* emacs */
../inputs/grep1.dat:1999:} re_opcode_t;
../inputs/grep1.dat:2000:
../inputs/grep1.dat:2001:/* Common operations on the compiled pattern.  */
../inputs/grep1.dat:2002:
../inputs/grep1.dat:2003:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
../inputs/grep1.dat:2004:
../inputs/grep1.dat:2005:#define STORE_NUMBER(destination, number)				\
../inputs/grep1.dat:2006:  do {									\
../inputs/grep1.dat:2007:    (destination)[0] = (number) & 0377;					\
../inputs/grep1.dat:2008:    (destination)[1] = (number) >> 8;					\
../inputs/grep1.dat:2009:  } while (0)
../inputs/grep1.dat:2010:
../inputs/grep1.dat:2011:/* Same as STORE_NUMBER, except increment DESTINATION to
../inputs/grep1.dat:2012:   the byte after where the number is stored.  Therefore, DESTINATION
../inputs/grep1.dat:2013:   must be an lvalue.  */
../inputs/grep1.dat:2014:
../inputs/grep1.dat:2015:#define STORE_NUMBER_AND_INCR(destination, number)			\
../inputs/grep1.dat:2016:  do {									\
../inputs/grep1.dat:2017:    STORE_NUMBER (destination, number);					\
../inputs/grep1.dat:2018:    (destination) += 2;							\
../inputs/grep1.dat:2019:  } while (0)
../inputs/grep1.dat:2020:
../inputs/grep1.dat:2021:/* Put into DESTINATION a number stored in two contiguous bytes starting
../inputs/grep1.dat:2022:   at SOURCE.  */
../inputs/grep1.dat:2023:
../inputs/grep1.dat:2024:#define EXTRACT_NUMBER(destination, source)				\
../inputs/grep1.dat:2025:  do {									\
../inputs/grep1.dat:2026:    (destination) = *(source) & 0377;					\
../inputs/grep1.dat:2027:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
../inputs/grep1.dat:2028:  } while (0)
../inputs/grep1.dat:2029:
../inputs/grep1.dat:2030:#ifdef DEBUG
../inputs/grep1.dat:2031:static void
../inputs/grep1.dat:2032:extract_number (dest, source)
../inputs/grep1.dat:2033:    int *dest;
../inputs/grep1.dat:2034:    unsigned char *source;
../inputs/grep1.dat:2035:{
../inputs/grep1.dat:2036:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
../inputs/grep1.dat:2037:  *dest = *source & 0377;
../inputs/grep1.dat:2038:  *dest += temp << 8;
../inputs/grep1.dat:2039:}
../inputs/grep1.dat:2040:
../inputs/grep1.dat:2041:#ifndef EXTRACT_MACROS /* To debug the macros.  */
../inputs/grep1.dat:2042:#undef EXTRACT_NUMBER
../inputs/grep1.dat:2043:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
../inputs/grep1.dat:2044:#endif /* not EXTRACT_MACROS */
../inputs/grep1.dat:2045:
../inputs/grep1.dat:2046:#endif /* DEBUG */
../inputs/grep1.dat:2047:
../inputs/grep1.dat:2048:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
../inputs/grep1.dat:2049:   SOURCE must be an lvalue.  */
../inputs/grep1.dat:2050:
../inputs/grep1.dat:2051:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
../inputs/grep1.dat:2052:  do {									\
../inputs/grep1.dat:2053:    EXTRACT_NUMBER (destination, source);				\
../inputs/grep1.dat:2054:    (source) += 2; 							\
../inputs/grep1.dat:2055:  } while (0)
../inputs/grep1.dat:2056:
../inputs/grep1.dat:2057:#ifdef DEBUG
../inputs/grep1.dat:2058:static void
../inputs/grep1.dat:2059:extract_number_and_incr (destination, source)
../inputs/grep1.dat:2060:    int *destination;
../inputs/grep1.dat:2061:    unsigned char **source;
../inputs/grep1.dat:2062:{ 
../inputs/grep1.dat:2063:  extract_number (destination, *source);
../inputs/grep1.dat:2064:  *source += 2;
../inputs/grep1.dat:2065:}
../inputs/grep1.dat:2066:
../inputs/grep1.dat:2067:#ifndef EXTRACT_MACROS
../inputs/grep1.dat:2068:#undef EXTRACT_NUMBER_AND_INCR
../inputs/grep1.dat:2069:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
../inputs/grep1.dat:2070:  extract_number_and_incr (&dest, &src)
../inputs/grep1.dat:2071:#endif /* not EXTRACT_MACROS */
../inputs/grep1.dat:2072:
../inputs/grep1.dat:2073:#endif /* DEBUG */
../inputs/grep1.dat:2074:
../inputs/grep1.dat:2075:/* If DEBUG is defined, Regex prints many voluminous messages about what
../inputs/grep1.dat:2076:   it is doing (if the variable `debug' is nonzero).  If linked with the
../inputs/grep1.dat:2077:   main program in `iregex.c', you can enter patterns and strings
../inputs/grep1.dat:2078:   interactively.  And if linked with the main program in `main.c' and
../inputs/grep1.dat:2079:   the other test files, you can run the already-written tests.  */
../inputs/grep1.dat:2080:
../inputs/grep1.dat:2081:#ifdef DEBUG
../inputs/grep1.dat:2082:
../inputs/grep1.dat:2083:/* We use standard I/O for debugging.  */
../inputs/grep1.dat:2085:
../inputs/grep1.dat:2086:/* It is useful to test things that ``must'' be true when debugging.  */
../inputs/grep1.dat:2088:
../inputs/grep1.dat:2089:static int debug = 0;
../inputs/grep1.dat:2090:
../inputs/grep1.dat:2091:#define DEBUG_STATEMENT(e) e
../inputs/grep1.dat:2092:#define DEBUG_PRINT1(x) if (debug) printf (x)
../inputs/grep1.dat:2093:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
../inputs/grep1.dat:2094:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
../inputs/grep1.dat:2095:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
../inputs/grep1.dat:2096:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
../inputs/grep1.dat:2097:  if (debug) print_partial_compiled_pattern (s, e)
../inputs/grep1.dat:2098:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
../inputs/grep1.dat:2099:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
../inputs/grep1.dat:2100:
../inputs/grep1.dat:2101:
../inputs/grep1.dat:2102:extern void printchar ();
../inputs/grep1.dat:2103:
../inputs/grep1.dat:2104:/* Print the fastmap in human-readable form.  */
../inputs/grep1.dat:2105:
../inputs/grep1.dat:2106:void
../inputs/grep1.dat:2107:print_fastmap (fastmap)
../inputs/grep1.dat:2108:    char *fastmap;
../inputs/grep1.dat:2109:{
../inputs/grep1.dat:2110:  unsigned was_a_range = 0;
../inputs/grep1.dat:2111:  unsigned i = 0;  
../inputs/grep1.dat:2112:  
../inputs/grep1.dat:2113:  while (i < (1 << BYTEWIDTH))
../inputs/grep1.dat:2114:    {
../inputs/grep1.dat:2115:      if (fastmap[i++])
../inputs/grep1.dat:2116:	{
../inputs/grep1.dat:2117:	  was_a_range = 0;
../inputs/grep1.dat:2118:          printchar (i - 1);
../inputs/grep1.dat:2119:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
../inputs/grep1.dat:2120:            {
../inputs/grep1.dat:2121:              was_a_range = 1;
../inputs/grep1.dat:2122:              i++;
../inputs/grep1.dat:2123:            }
../inputs/grep1.dat:2124:	  if (was_a_range)
../inputs/grep1.dat:2125:            {
../inputs/grep1.dat:2126:              printf ("-");
../inputs/grep1.dat:2127:              printchar (i - 1);
../inputs/grep1.dat:2128:            }
../inputs/grep1.dat:2129:        }
../inputs/grep1.dat:2130:    }
../inputs/grep1.dat:2131:  putchar ('\n'); 
../inputs/grep1.dat:2132:}
../inputs/grep1.dat:2133:
../inputs/grep1.dat:2134:
../inputs/grep1.dat:2135:/* Print a compiled pattern string in human-readable form, starting at
../inputs/grep1.dat:2136:   the START pointer into it and ending just before the pointer END.  */
../inputs/grep1.dat:2137:
../inputs/grep1.dat:2138:void
../inputs/grep1.dat:2139:print_partial_compiled_pattern (start, end)
../inputs/grep1.dat:2140:    unsigned char *start;
../inputs/grep1.dat:2141:    unsigned char *end;
../inputs/grep1.dat:2142:{
../inputs/grep1.dat:2143:  int mcnt, mcnt2;
../inputs/grep1.dat:2144:  unsigned char *p = start;
../inputs/grep1.dat:2145:  unsigned char *pend = end;
../inputs/grep1.dat:2146:
../inputs/grep1.dat:2147:  if (start == NULL)
../inputs/grep1.dat:2148:    {
../inputs/grep1.dat:2149:      printf ("(null)\n");
../inputs/grep1.dat:2150:      return;
../inputs/grep1.dat:2151:    }
../inputs/grep1.dat:2152:    
../inputs/grep1.dat:2153:  /* Loop over pattern commands.  */
../inputs/grep1.dat:2154:  while (p < pend)
../inputs/grep1.dat:2155:    {
../inputs/grep1.dat:2156:      printf ("%d:\t", p - start);
../inputs/grep1.dat:2157:
../inputs/grep1.dat:2158:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:2159:	{
../inputs/grep1.dat:2160:        case no_op:
../inputs/grep1.dat:2161:          printf ("/no_op");
../inputs/grep1.dat:2162:          break;
../inputs/grep1.dat:2163:
../inputs/grep1.dat:2164:	case exactn:
../inputs/grep1.dat:2165:	  mcnt = *p++;
../inputs/grep1.dat:2166:          printf ("/exactn/%d", mcnt);
../inputs/grep1.dat:2167:          do
../inputs/grep1.dat:2168:	    {
../inputs/grep1.dat:2169:              putchar ('/');
../inputs/grep1.dat:2170:	      printchar (*p++);
../inputs/grep1.dat:2171:            }
../inputs/grep1.dat:2172:          while (--mcnt);
../inputs/grep1.dat:2173:          break;
../inputs/grep1.dat:2174:
../inputs/grep1.dat:2175:	case start_memory:
../inputs/grep1.dat:2176:          mcnt = *p++;
../inputs/grep1.dat:2177:          printf ("/start_memory/%d/%d", mcnt, *p++);
../inputs/grep1.dat:2178:          break;
../inputs/grep1.dat:2179:
../inputs/grep1.dat:2180:	case stop_memory:
../inputs/grep1.dat:2181:          mcnt = *p++;
../inputs/grep1.dat:2182:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
../inputs/grep1.dat:2183:          break;
../inputs/grep1.dat:2184:
../inputs/grep1.dat:2185:	case duplicate:
../inputs/grep1.dat:2186:	  printf ("/duplicate/%d", *p++);
../inputs/grep1.dat:2187:	  break;
../inputs/grep1.dat:2188:
../inputs/grep1.dat:2189:	case anychar:
../inputs/grep1.dat:2190:	  printf ("/anychar");
../inputs/grep1.dat:2191:	  break;
../inputs/grep1.dat:2192:
../inputs/grep1.dat:2193:	case charset:
../inputs/grep1.dat:2194:        case charset_not:
../inputs/grep1.dat:2195:          {
../inputs/grep1.dat:2196:            register int c, last = -100;
../inputs/grep1.dat:2197:	    register int in_range = 0;
../inputs/grep1.dat:2198:
../inputs/grep1.dat:2199:	    printf ("/charset [%s",
../inputs/grep1.dat:2200:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
../inputs/grep1.dat:2201:            
../inputs/grep1.dat:2202:            assert (p + *p < pend);
../inputs/grep1.dat:2203:
../inputs/grep1.dat:2204:            for (c = 0; c < 256; c++)
../inputs/grep1.dat:2205:	      if (c / 8 < *p
../inputs/grep1.dat:2206:		  && (p[1 + (c/8)] & (1 << (c % 8))))
../inputs/grep1.dat:2207:		{
../inputs/grep1.dat:2208:		  /* Are we starting a range?  */
../inputs/grep1.dat:2209:		  if (last + 1 == c && ! in_range)
../inputs/grep1.dat:2210:		    {
../inputs/grep1.dat:2211:		      putchar ('-');
../inputs/grep1.dat:2212:		      in_range = 1;
../inputs/grep1.dat:2213:		    }
../inputs/grep1.dat:2214:		  /* Have we broken a range?  */
../inputs/grep1.dat:2215:		  else if (last + 1 != c && in_range)
../inputs/grep1.dat:2216:              {
../inputs/grep1.dat:2217:		      printchar (last);
../inputs/grep1.dat:2218:		      in_range = 0;
../inputs/grep1.dat:2219:		    }
../inputs/grep1.dat:2220:                
../inputs/grep1.dat:2221:		  if (! in_range)
../inputs/grep1.dat:2222:		    printchar (c);
../inputs/grep1.dat:2223:
../inputs/grep1.dat:2224:		  last = c;
../inputs/grep1.dat:2225:              }
../inputs/grep1.dat:2226:
../inputs/grep1.dat:2227:	    if (in_range)
../inputs/grep1.dat:2228:	      printchar (last);
../inputs/grep1.dat:2229:
../inputs/grep1.dat:2230:	    putchar (']');
../inputs/grep1.dat:2231:
../inputs/grep1.dat:2232:	    p += 1 + *p;
../inputs/grep1.dat:2233:	  }
../inputs/grep1.dat:2234:	  break;
../inputs/grep1.dat:2235:
../inputs/grep1.dat:2236:	case begline:
../inputs/grep1.dat:2237:	  printf ("/begline");
../inputs/grep1.dat:2238:          break;
../inputs/grep1.dat:2239:
../inputs/grep1.dat:2240:	case endline:
../inputs/grep1.dat:2241:          printf ("/endline");
../inputs/grep1.dat:2242:          break;
../inputs/grep1.dat:2243:
../inputs/grep1.dat:2244:	case on_failure_jump:
../inputs/grep1.dat:2245:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2246:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:2247:          break;
../inputs/grep1.dat:2248:
../inputs/grep1.dat:2249:	case on_failure_keep_string_jump:
../inputs/grep1.dat:2250:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2251:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
../inputs/grep1.dat:2252:          break;
../inputs/grep1.dat:2253:
../inputs/grep1.dat:2254:	case dummy_failure_jump:
../inputs/grep1.dat:2255:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2256:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:2257:          break;
../inputs/grep1.dat:2258:
../inputs/grep1.dat:2259:	case push_dummy_failure:
../inputs/grep1.dat:2260:          printf ("/push_dummy_failure");
../inputs/grep1.dat:2261:          break;
../inputs/grep1.dat:2262:          
../inputs/grep1.dat:2263:        case maybe_pop_jump:
../inputs/grep1.dat:2264:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2265:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
../inputs/grep1.dat:2266:	  break;
../inputs/grep1.dat:2267:
../inputs/grep1.dat:2268:        case pop_failure_jump:
../inputs/grep1.dat:2269:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2270:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:2271:	  break;          
../inputs/grep1.dat:2272:          
../inputs/grep1.dat:2273:        case jump_past_alt:
../inputs/grep1.dat:2274:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2275:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
../inputs/grep1.dat:2276:	  break;          
../inputs/grep1.dat:2277:          
../inputs/grep1.dat:2278:        case jump:
../inputs/grep1.dat:2279:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2280:  	  printf ("/jump to %d", p + mcnt - start);
../inputs/grep1.dat:2281:	  break;
../inputs/grep1.dat:2282:
../inputs/grep1.dat:2283:        case succeed_n: 
../inputs/grep1.dat:2284:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2285:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:2286:	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
../inputs/grep1.dat:2287:          break;
../inputs/grep1.dat:2288:        
../inputs/grep1.dat:2289:        case jump_n: 
../inputs/grep1.dat:2290:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2291:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:2292:	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
../inputs/grep1.dat:2293:          break;
../inputs/grep1.dat:2294:        
../inputs/grep1.dat:2295:        case set_number_at: 
../inputs/grep1.dat:2296:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:2297:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:2298:	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
../inputs/grep1.dat:2299:          break;
../inputs/grep1.dat:2300:        
../inputs/grep1.dat:2301:        case wordbound:
../inputs/grep1.dat:2302:	  printf ("/wordbound");
../inputs/grep1.dat:2303:	  break;
../inputs/grep1.dat:2304:
../inputs/grep1.dat:2305:	case notwordbound:
../inputs/grep1.dat:2306:	  printf ("/notwordbound");
../inputs/grep1.dat:2307:          break;
../inputs/grep1.dat:2308:
../inputs/grep1.dat:2309:	case wordbeg:
../inputs/grep1.dat:2310:	  printf ("/wordbeg");
../inputs/grep1.dat:2311:	  break;
../inputs/grep1.dat:2312:          
../inputs/grep1.dat:2313:	case wordend:
../inputs/grep1.dat:2314:	  printf ("/wordend");
../inputs/grep1.dat:2315:          
../inputs/grep1.dat:2316:#ifdef emacs
../inputs/grep1.dat:2317:	case before_dot:
../inputs/grep1.dat:2318:	  printf ("/before_dot");
../inputs/grep1.dat:2319:          break;
../inputs/grep1.dat:2320:
../inputs/grep1.dat:2321:	case at_dot:
../inputs/grep1.dat:2322:	  printf ("/at_dot");
../inputs/grep1.dat:2323:          break;
../inputs/grep1.dat:2324:
../inputs/grep1.dat:2325:	case after_dot:
../inputs/grep1.dat:2326:	  printf ("/after_dot");
../inputs/grep1.dat:2327:          break;
../inputs/grep1.dat:2328:
../inputs/grep1.dat:2329:	case syntaxspec:
../inputs/grep1.dat:2330:          printf ("/syntaxspec");
../inputs/grep1.dat:2331:	  mcnt = *p++;
../inputs/grep1.dat:2332:	  printf ("/%d", mcnt);
../inputs/grep1.dat:2333:          break;
../inputs/grep1.dat:2334:	  
../inputs/grep1.dat:2335:	case notsyntaxspec:
../inputs/grep1.dat:2336:          printf ("/notsyntaxspec");
../inputs/grep1.dat:2337:	  mcnt = *p++;
../inputs/grep1.dat:2338:	  printf ("/%d", mcnt);
../inputs/grep1.dat:2339:	  break;
../inputs/grep1.dat:2340:#endif /* emacs */
../inputs/grep1.dat:2341:
../inputs/grep1.dat:2342:	case wordchar:
../inputs/grep1.dat:2343:	  printf ("/wordchar");
../inputs/grep1.dat:2344:          break;
../inputs/grep1.dat:2345:	  
../inputs/grep1.dat:2346:	case notwordchar:
../inputs/grep1.dat:2347:	  printf ("/notwordchar");
../inputs/grep1.dat:2348:          break;
../inputs/grep1.dat:2349:
../inputs/grep1.dat:2350:	case begbuf:
../inputs/grep1.dat:2351:	  printf ("/begbuf");
../inputs/grep1.dat:2352:          break;
../inputs/grep1.dat:2353:
../inputs/grep1.dat:2354:	case endbuf:
../inputs/grep1.dat:2355:	  printf ("/endbuf");
../inputs/grep1.dat:2356:          break;
../inputs/grep1.dat:2357:
../inputs/grep1.dat:2358:        default:
../inputs/grep1.dat:2359:          printf ("?%d", *(p-1));
../inputs/grep1.dat:2360:	}
../inputs/grep1.dat:2361:
../inputs/grep1.dat:2362:      putchar ('\n');
../inputs/grep1.dat:2363:    }
../inputs/grep1.dat:2364:
../inputs/grep1.dat:2365:  printf ("%d:\tend of pattern.\n", p - start);
../inputs/grep1.dat:2366:}
../inputs/grep1.dat:2367:
../inputs/grep1.dat:2368:
../inputs/grep1.dat:2369:void
../inputs/grep1.dat:2370:print_compiled_pattern (bufp)
../inputs/grep1.dat:2371:    struct re_pattern_buffer *bufp;
../inputs/grep1.dat:2372:{
../inputs/grep1.dat:2373:  unsigned char *buffer = bufp->buffer;
../inputs/grep1.dat:2374:
../inputs/grep1.dat:2375:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
../inputs/grep1.dat:2376:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
../inputs/grep1.dat:2377:
../inputs/grep1.dat:2378:  if (bufp->fastmap_accurate && bufp->fastmap)
../inputs/grep1.dat:2379:    {
../inputs/grep1.dat:2380:      printf ("fastmap: ");
../inputs/grep1.dat:2381:      print_fastmap (bufp->fastmap);
../inputs/grep1.dat:2382:    }
../inputs/grep1.dat:2383:
../inputs/grep1.dat:2384:  printf ("re_nsub: %d\t", bufp->re_nsub);
../inputs/grep1.dat:2385:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
../inputs/grep1.dat:2386:  printf ("can_be_null: %d\t", bufp->can_be_null);
../inputs/grep1.dat:2387:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
../inputs/grep1.dat:2388:  printf ("no_sub: %d\t", bufp->no_sub);
../inputs/grep1.dat:2389:  printf ("not_bol: %d\t", bufp->not_bol);
../inputs/grep1.dat:2390:  printf ("not_eol: %d\t", bufp->not_eol);
../inputs/grep1.dat:2391:  printf ("syntax: %d\n", bufp->syntax);
../inputs/grep1.dat:2392:  /* Perhaps we should print the translate table?  */
../inputs/grep1.dat:2393:}
../inputs/grep1.dat:2394:
../inputs/grep1.dat:2395:
../inputs/grep1.dat:2396:void
../inputs/grep1.dat:2397:print_double_string (where, string1, size1, string2, size2)
../inputs/grep1.dat:2398:    const char *where;
../inputs/grep1.dat:2399:    const char *string1;
../inputs/grep1.dat:2400:    const char *string2;
../inputs/grep1.dat:2401:    int size1;
../inputs/grep1.dat:2402:    int size2;
../inputs/grep1.dat:2403:{
../inputs/grep1.dat:2404:  unsigned this_char;
../inputs/grep1.dat:2405:  
../inputs/grep1.dat:2406:  if (where == NULL)
../inputs/grep1.dat:2407:    printf ("(null)");
../inputs/grep1.dat:2408:  else
../inputs/grep1.dat:2409:    {
../inputs/grep1.dat:2410:      if (FIRST_STRING_P (where))
../inputs/grep1.dat:2411:        {
../inputs/grep1.dat:2412:          for (this_char = where - string1; this_char < size1; this_char++)
../inputs/grep1.dat:2413:            printchar (string1[this_char]);
../inputs/grep1.dat:2414:
../inputs/grep1.dat:2415:          where = string2;    
../inputs/grep1.dat:2416:        }
../inputs/grep1.dat:2417:
../inputs/grep1.dat:2418:      for (this_char = where - string2; this_char < size2; this_char++)
../inputs/grep1.dat:2419:        printchar (string2[this_char]);
../inputs/grep1.dat:2420:    }
../inputs/grep1.dat:2421:}
../inputs/grep1.dat:2422:
../inputs/grep1.dat:2423:#else /* not DEBUG */
../inputs/grep1.dat:2424:
../inputs/grep1.dat:2425:#undef assert
../inputs/grep1.dat:2426:#define assert(e)
../inputs/grep1.dat:2427:
../inputs/grep1.dat:2428:#define DEBUG_STATEMENT(e)
../inputs/grep1.dat:2429:#define DEBUG_PRINT1(x)
../inputs/grep1.dat:2430:#define DEBUG_PRINT2(x1, x2)
../inputs/grep1.dat:2431:#define DEBUG_PRINT3(x1, x2, x3)
../inputs/grep1.dat:2432:#define DEBUG_PRINT4(x1, x2, x3, x4)
../inputs/grep1.dat:2433:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
../inputs/grep1.dat:2434:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
../inputs/grep1.dat:2435:
../inputs/grep1.dat:2436:#endif /* not DEBUG */
../inputs/grep1.dat:2437:
../inputs/grep1.dat:2438:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
../inputs/grep1.dat:2439:   also be assigned to arbitrarily: each pattern buffer stores its own
../inputs/grep1.dat:2440:   syntax, so it can be changed between regex compilations.  */
../inputs/grep1.dat:2441:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
../inputs/grep1.dat:2442:
../inputs/grep1.dat:2443:
../inputs/grep1.dat:2444:/* Specify the precise syntax of regexps for compilation.  This provides
../inputs/grep1.dat:2445:   for compatibility for various utilities which historically have
../inputs/grep1.dat:2446:   different, incompatible syntaxes.
../inputs/grep1.dat:2447:
../inputs/grep1.dat:2448:   The argument SYNTAX is a bit mask comprised of the various bits
../inputs/grep1.dat:2449:   defined in regex.h.  We return the old syntax.  */
../inputs/grep1.dat:2450:
../inputs/grep1.dat:2451:reg_syntax_t
../inputs/grep1.dat:2452:re_set_syntax (syntax)
../inputs/grep1.dat:2453:    reg_syntax_t syntax;
../inputs/grep1.dat:2454:{
../inputs/grep1.dat:2455:  reg_syntax_t ret = re_syntax_options;
../inputs/grep1.dat:2456:  
../inputs/grep1.dat:2457:  re_syntax_options = syntax;
../inputs/grep1.dat:2458:  return ret;
../inputs/grep1.dat:2459:}
../inputs/grep1.dat:2460:
../inputs/grep1.dat:2461:/* This table gives an error message for each of the error codes listed
../inputs/grep1.dat:2462:   in regex.h.  Obviously the order here has to be same as there.  */
../inputs/grep1.dat:2463:
../inputs/grep1.dat:2464:static const char *re_error_msg[] =
../inputs/grep1.dat:2465:  { NULL,					/* REG_NOERROR */
../inputs/grep1.dat:2466:    "No match",					/* REG_NOMATCH */
../inputs/grep1.dat:2467:    "Invalid regular expression",		/* REG_BADPAT */
../inputs/grep1.dat:2468:    "Invalid collation character",		/* REG_ECOLLATE */
../inputs/grep1.dat:2469:    "Invalid character class name",		/* REG_ECTYPE */
../inputs/grep1.dat:2470:    "Trailing backslash",			/* REG_EESCAPE */
../inputs/grep1.dat:2471:    "Invalid back reference",			/* REG_ESUBREG */
../inputs/grep1.dat:2472:    "Unmatched [ or [^",			/* REG_EBRACK */
../inputs/grep1.dat:2473:    "Unmatched ( or \\(",			/* REG_EPAREN */
../inputs/grep1.dat:2474:    "Unmatched \\{",				/* REG_EBRACE */
../inputs/grep1.dat:2475:    "Invalid content of \\{\\}",		/* REG_BADBR */
../inputs/grep1.dat:2476:    "Invalid range end",			/* REG_ERANGE */
../inputs/grep1.dat:2477:    "Memory exhausted",				/* REG_ESPACE */
../inputs/grep1.dat:2478:    "Invalid preceding regular expression",	/* REG_BADRPT */
../inputs/grep1.dat:2479:    "Premature end of regular expression",	/* REG_EEND */
../inputs/grep1.dat:2480:    "Regular expression too big",		/* REG_ESIZE */
../inputs/grep1.dat:2481:    "Unmatched ) or \\)",			/* REG_ERPAREN */
../inputs/grep1.dat:2482:  };
../inputs/grep1.dat:2483:
../inputs/grep1.dat:2484:/* Subroutine declarations and macros for regex_compile.  */
../inputs/grep1.dat:2485:
../inputs/grep1.dat:2486:static void store_op1 (), store_op2 ();
../inputs/grep1.dat:2487:static void insert_op1 (), insert_op2 ();
../inputs/grep1.dat:2488:static boolean at_begline_loc_p (), at_endline_loc_p ();
../inputs/grep1.dat:2489:static boolean group_in_compile_stack ();
../inputs/grep1.dat:2490:static reg_errcode_t compile_range ();
../inputs/grep1.dat:2491:
../inputs/grep1.dat:2492:/* Fetch the next character in the uncompiled pattern---translating it 
../inputs/grep1.dat:2493:   if necessary.  Also cast from a signed character in the constant
../inputs/grep1.dat:2494:   string passed to us by the user to an unsigned char that we can use
../inputs/grep1.dat:2495:   as an array index (in, e.g., `translate').  */
../inputs/grep1.dat:2496:#define PATFETCH(c)							\
../inputs/grep1.dat:2497:  do {if (p == pend) return REG_EEND;					\
../inputs/grep1.dat:2498:    c = (unsigned char) *p++;						\
../inputs/grep1.dat:2499:    if (translate) c = translate[c]; 					\
../inputs/grep1.dat:2500:  } while (0)
../inputs/grep1.dat:2501:
../inputs/grep1.dat:2502:/* Fetch the next character in the uncompiled pattern, with no
../inputs/grep1.dat:2503:   translation.  */
../inputs/grep1.dat:2504:#define PATFETCH_RAW(c)							\
../inputs/grep1.dat:2505:  do {if (p == pend) return REG_EEND;					\
../inputs/grep1.dat:2506:    c = (unsigned char) *p++; 						\
../inputs/grep1.dat:2507:  } while (0)
../inputs/grep1.dat:2508:
../inputs/grep1.dat:2509:/* Go backwards one character in the pattern.  */
../inputs/grep1.dat:2510:#define PATUNFETCH p--
../inputs/grep1.dat:2511:
../inputs/grep1.dat:2512:
../inputs/grep1.dat:2513:/* If `translate' is non-null, return translate[D], else just D.  We
../inputs/grep1.dat:2514:   cast the subscript to translate because some data is declared as
../inputs/grep1.dat:2515:   `char *', to avoid warnings when a string constant is passed.  But
../inputs/grep1.dat:2516:   when we use a character as a subscript we must make it unsigned.  */
../inputs/grep1.dat:2517:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
../inputs/grep1.dat:2518:
../inputs/grep1.dat:2519:
../inputs/grep1.dat:2520:/* Macros for outputting the compiled pattern into `buffer'.  */
../inputs/grep1.dat:2521:
../inputs/grep1.dat:2522:/* If the buffer isn't allocated when it comes in, use this.  */
../inputs/grep1.dat:2523:#define INIT_BUF_SIZE  32
../inputs/grep1.dat:2524:
../inputs/grep1.dat:2525:/* Make sure we have at least N more bytes of space in buffer.  */
../inputs/grep1.dat:2526:#define GET_BUFFER_SPACE(n)						\
../inputs/grep1.dat:2527:    while (b - bufp->buffer + (n) > bufp->allocated)			\
../inputs/grep1.dat:2528:      EXTEND_BUFFER ()
../inputs/grep1.dat:2529:
../inputs/grep1.dat:2530:/* Make sure we have one more byte of buffer space and then add C to it.  */
../inputs/grep1.dat:2531:#define BUF_PUSH(c)							\
../inputs/grep1.dat:2532:  do {									\
../inputs/grep1.dat:2533:    GET_BUFFER_SPACE (1);						\
../inputs/grep1.dat:2534:    *b++ = (unsigned char) (c);						\
../inputs/grep1.dat:2535:  } while (0)
../inputs/grep1.dat:2536:
../inputs/grep1.dat:2537:
../inputs/grep1.dat:2538:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
../inputs/grep1.dat:2539:#define BUF_PUSH_2(c1, c2)						\
../inputs/grep1.dat:2540:  do {									\
../inputs/grep1.dat:2541:    GET_BUFFER_SPACE (2);						\
../inputs/grep1.dat:2542:    *b++ = (unsigned char) (c1);					\
../inputs/grep1.dat:2543:    *b++ = (unsigned char) (c2);					\
../inputs/grep1.dat:2544:  } while (0)
../inputs/grep1.dat:2545:
../inputs/grep1.dat:2546:
../inputs/grep1.dat:2547:/* As with BUF_PUSH_2, except for three bytes.  */
../inputs/grep1.dat:2548:#define BUF_PUSH_3(c1, c2, c3)						\
../inputs/grep1.dat:2549:  do {									\
../inputs/grep1.dat:2550:    GET_BUFFER_SPACE (3);						\
../inputs/grep1.dat:2551:    *b++ = (unsigned char) (c1);					\
../inputs/grep1.dat:2552:    *b++ = (unsigned char) (c2);					\
../inputs/grep1.dat:2553:    *b++ = (unsigned char) (c3);					\
../inputs/grep1.dat:2554:  } while (0)
../inputs/grep1.dat:2555:
../inputs/grep1.dat:2556:
../inputs/grep1.dat:2557:/* Store a jump with opcode OP at LOC to location TO.  We store a
../inputs/grep1.dat:2558:   relative address offset by the three bytes the jump itself occupies.  */
../inputs/grep1.dat:2559:#define STORE_JUMP(op, loc, to) \
../inputs/grep1.dat:2560:  store_op1 (op, loc, (to) - (loc) - 3)
../inputs/grep1.dat:2561:
../inputs/grep1.dat:2562:/* Likewise, for a two-argument jump.  */
../inputs/grep1.dat:2563:#define STORE_JUMP2(op, loc, to, arg) \
../inputs/grep1.dat:2564:  store_op2 (op, loc, (to) - (loc) - 3, arg)
../inputs/grep1.dat:2565:
../inputs/grep1.dat:2566:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
../inputs/grep1.dat:2567:#define INSERT_JUMP(op, loc, to) \
../inputs/grep1.dat:2568:  insert_op1 (op, loc, (to) - (loc) - 3, b)
../inputs/grep1.dat:2569:
../inputs/grep1.dat:2570:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
../inputs/grep1.dat:2571:#define INSERT_JUMP2(op, loc, to, arg) \
../inputs/grep1.dat:2572:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
../inputs/grep1.dat:2573:
../inputs/grep1.dat:2574:
../inputs/grep1.dat:2575:/* This is not an arbitrary limit: the arguments which represent offsets
../inputs/grep1.dat:2576:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
../inputs/grep1.dat:2577:   be too small, many things would have to change.  */
../inputs/grep1.dat:2578:#define MAX_BUF_SIZE (1L << 16)
../inputs/grep1.dat:2579:
../inputs/grep1.dat:2580:
../inputs/grep1.dat:2581:/* Extend the buffer by twice its current size via realloc and
../inputs/grep1.dat:2582:   reset the pointers that pointed into the old block to point to the
../inputs/grep1.dat:2583:   correct places in the new one.  If extending the buffer results in it
../inputs/grep1.dat:2584:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
../inputs/grep1.dat:2585:#define EXTEND_BUFFER()							\
../inputs/grep1.dat:2586:  do { 									\
../inputs/grep1.dat:2587:    unsigned char *old_buffer = bufp->buffer;				\
../inputs/grep1.dat:2588:    if (bufp->allocated == MAX_BUF_SIZE) 				\
../inputs/grep1.dat:2589:      return REG_ESIZE;							\
../inputs/grep1.dat:2590:    bufp->allocated <<= 1;						\
../inputs/grep1.dat:2591:    if (bufp->allocated > MAX_BUF_SIZE)					\
../inputs/grep1.dat:2592:      bufp->allocated = MAX_BUF_SIZE; 					\
../inputs/grep1.dat:2593:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
../inputs/grep1.dat:2594:    if (bufp->buffer == NULL)						\
../inputs/grep1.dat:2595:      return REG_ESPACE;						\
../inputs/grep1.dat:2596:    /* If the buffer moved, move all the pointers into it.  */		\
../inputs/grep1.dat:2597:    if (old_buffer != bufp->buffer)					\
../inputs/grep1.dat:2598:      {									\
../inputs/grep1.dat:2599:        b = (b - old_buffer) + bufp->buffer;				\
../inputs/grep1.dat:2600:        begalt = (begalt - old_buffer) + bufp->buffer;			\
../inputs/grep1.dat:2601:        if (fixup_alt_jump)						\
../inputs/grep1.dat:2602:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
../inputs/grep1.dat:2603:        if (laststart)							\
../inputs/grep1.dat:2604:          laststart = (laststart - old_buffer) + bufp->buffer;		\
../inputs/grep1.dat:2605:        if (pending_exact)						\
../inputs/grep1.dat:2606:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
../inputs/grep1.dat:2607:      }									\
../inputs/grep1.dat:2608:  } while (0)
../inputs/grep1.dat:2609:
../inputs/grep1.dat:2610:
../inputs/grep1.dat:2611:/* Since we have one byte reserved for the register number argument to
../inputs/grep1.dat:2612:   {start,stop}_memory, the maximum number of groups we can report
../inputs/grep1.dat:2613:   things about is what fits in that byte.  */
../inputs/grep1.dat:2614:#define MAX_REGNUM 255
../inputs/grep1.dat:2615:
../inputs/grep1.dat:2616:/* But patterns can have more than `MAX_REGNUM' registers.  We just
../inputs/grep1.dat:2617:   ignore the excess.  */
../inputs/grep1.dat:2618:typedef unsigned regnum_t;
../inputs/grep1.dat:2619:
../inputs/grep1.dat:2620:
../inputs/grep1.dat:2621:/* Macros for the compile stack.  */
../inputs/grep1.dat:2622:
../inputs/grep1.dat:2623:/* Since offsets can go either forwards or backwards, this type needs to
../inputs/grep1.dat:2624:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
../inputs/grep1.dat:2625:typedef int pattern_offset_t;
../inputs/grep1.dat:2626:
../inputs/grep1.dat:2627:typedef struct
../inputs/grep1.dat:2628:{
../inputs/grep1.dat:2629:  pattern_offset_t begalt_offset;
../inputs/grep1.dat:2630:  pattern_offset_t fixup_alt_jump;
../inputs/grep1.dat:2631:  pattern_offset_t inner_group_offset;
../inputs/grep1.dat:2632:  pattern_offset_t laststart_offset;  
../inputs/grep1.dat:2633:  regnum_t regnum;
../inputs/grep1.dat:2634:} compile_stack_elt_t;
../inputs/grep1.dat:2635:
../inputs/grep1.dat:2636:
../inputs/grep1.dat:2637:typedef struct
../inputs/grep1.dat:2638:{
../inputs/grep1.dat:2639:  compile_stack_elt_t *stack;
../inputs/grep1.dat:2640:  unsigned size;
../inputs/grep1.dat:2641:  unsigned avail;			/* Offset of next open position.  */
../inputs/grep1.dat:2642:} compile_stack_type;
../inputs/grep1.dat:2643:
../inputs/grep1.dat:2644:
../inputs/grep1.dat:2645:#define INIT_COMPILE_STACK_SIZE 32
../inputs/grep1.dat:2646:
../inputs/grep1.dat:2647:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
../inputs/grep1.dat:2648:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
../inputs/grep1.dat:2649:
../inputs/grep1.dat:2650:/* The next available element.  */
../inputs/grep1.dat:2651:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
../inputs/grep1.dat:2652:
../inputs/grep1.dat:2653:
../inputs/grep1.dat:2654:/* Set the bit for character C in a list.  */
../inputs/grep1.dat:2655:#define SET_LIST_BIT(c)                               \
../inputs/grep1.dat:2656:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
../inputs/grep1.dat:2657:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
../inputs/grep1.dat:2658:
../inputs/grep1.dat:2659:
../inputs/grep1.dat:2660:/* Get the next unsigned number in the uncompiled pattern.  */
../inputs/grep1.dat:2661:#define GET_UNSIGNED_NUMBER(num) 					\
../inputs/grep1.dat:2662:  { if (p != pend)							\
../inputs/grep1.dat:2663:     {									\
../inputs/grep1.dat:2664:       PATFETCH (c); 							\
../inputs/grep1.dat:2665:       while (ISDIGIT (c)) 						\
../inputs/grep1.dat:2666:         { 								\
../inputs/grep1.dat:2667:           if (num < 0)							\
../inputs/grep1.dat:2668:              num = 0;							\
../inputs/grep1.dat:2669:           num = num * 10 + c - '0'; 					\
../inputs/grep1.dat:2670:           if (p == pend) 						\
../inputs/grep1.dat:2671:              break; 							\
../inputs/grep1.dat:2672:           PATFETCH (c);						\
../inputs/grep1.dat:2673:         } 								\
../inputs/grep1.dat:2674:       } 								\
../inputs/grep1.dat:2675:    }		
../inputs/grep1.dat:2676:
../inputs/grep1.dat:2677:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
../inputs/grep1.dat:2678:
../inputs/grep1.dat:2679:#define IS_CHAR_CLASS(string)						\
../inputs/grep1.dat:2680:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
../inputs/grep1.dat:2681:    || STREQ (string, "lower") || STREQ (string, "digit")		\
../inputs/grep1.dat:2682:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
../inputs/grep1.dat:2683:    || STREQ (string, "space") || STREQ (string, "print")		\
../inputs/grep1.dat:2684:    || STREQ (string, "punct") || STREQ (string, "graph")		\
../inputs/grep1.dat:2685:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
../inputs/grep1.dat:2686:
../inputs/grep1.dat:2687:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
../inputs/grep1.dat:2688:   Returns one of error codes defined in `regex.h', or zero for success.
../inputs/grep1.dat:2689:
../inputs/grep1.dat:2690:   Assumes the `allocated' (and perhaps `buffer') and `translate'
../inputs/grep1.dat:2691:   fields are set in BUFP on entry.
../inputs/grep1.dat:2692:
../inputs/grep1.dat:2693:   If it succeeds, results are put in BUFP (if it returns an error, the
../inputs/grep1.dat:2694:   contents of BUFP are undefined):
../inputs/grep1.dat:2695:     `buffer' is the compiled pattern;
../inputs/grep1.dat:2696:     `syntax' is set to SYNTAX;
../inputs/grep1.dat:2697:     `used' is set to the length of the compiled pattern;
../inputs/grep1.dat:2698:     `fastmap_accurate' is zero;
../inputs/grep1.dat:2699:     `re_nsub' is the number of subexpressions in PATTERN;
../inputs/grep1.dat:2700:     `not_bol' and `not_eol' are zero;
../inputs/grep1.dat:2701:   
../inputs/grep1.dat:2702:   The `fastmap' and `newline_anchor' fields are neither
../inputs/grep1.dat:2703:   examined nor set.  */
../inputs/grep1.dat:2704:
../inputs/grep1.dat:2705:static reg_errcode_t
../inputs/grep1.dat:2706:regex_compile (pattern, size, syntax, bufp)
../inputs/grep1.dat:2707:     const char *pattern;
../inputs/grep1.dat:2708:     int size;
../inputs/grep1.dat:2709:     reg_syntax_t syntax;
../inputs/grep1.dat:2710:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:2711:{
../inputs/grep1.dat:2712:  /* We fetch characters from PATTERN here.  Even though PATTERN is
../inputs/grep1.dat:2713:     `char *' (i.e., signed), we declare these variables as unsigned, so
../inputs/grep1.dat:2714:     they can be reliably used as array indices.  */
../inputs/grep1.dat:2715:  register unsigned char c, c1;
../inputs/grep1.dat:2716:  
../inputs/grep1.dat:2717:  /* A random tempory spot in PATTERN.  */
../inputs/grep1.dat:2718:  const char *p1;
../inputs/grep1.dat:2719:
../inputs/grep1.dat:2720:  /* Points to the end of the buffer, where we should append.  */
../inputs/grep1.dat:2721:  register unsigned char *b;
../inputs/grep1.dat:2722:  
../inputs/grep1.dat:2723:  /* Keeps track of unclosed groups.  */
../inputs/grep1.dat:2724:  compile_stack_type compile_stack;
../inputs/grep1.dat:2725:
../inputs/grep1.dat:2726:  /* Points to the current (ending) position in the pattern.  */
../inputs/grep1.dat:2727:  const char *p = pattern;
../inputs/grep1.dat:2728:  const char *pend = pattern + size;
../inputs/grep1.dat:2729:  
../inputs/grep1.dat:2730:  /* How to translate the characters in the pattern.  */
../inputs/grep1.dat:2731:  char *translate = bufp->translate;
../inputs/grep1.dat:2732:
../inputs/grep1.dat:2733:  /* Address of the count-byte of the most recently inserted `exactn'
../inputs/grep1.dat:2734:     command.  This makes it possible to tell if a new exact-match
../inputs/grep1.dat:2735:     character can be added to that command or if the character requires
../inputs/grep1.dat:2736:     a new `exactn' command.  */
../inputs/grep1.dat:2737:  unsigned char *pending_exact = 0;
../inputs/grep1.dat:2738:
../inputs/grep1.dat:2739:  /* Address of start of the most recently finished expression.
../inputs/grep1.dat:2740:     This tells, e.g., postfix * where to find the start of its
../inputs/grep1.dat:2741:     operand.  Reset at the beginning of groups and alternatives.  */
../inputs/grep1.dat:2742:  unsigned char *laststart = 0;
../inputs/grep1.dat:2743:
../inputs/grep1.dat:2744:  /* Address of beginning of regexp, or inside of last group.  */
../inputs/grep1.dat:2745:  unsigned char *begalt;
../inputs/grep1.dat:2746:
../inputs/grep1.dat:2747:  /* Place in the uncompiled pattern (i.e., the {) to
../inputs/grep1.dat:2748:     which to go back if the interval is invalid.  */
../inputs/grep1.dat:2749:  const char *beg_interval;
../inputs/grep1.dat:2750:                
../inputs/grep1.dat:2751:  /* Address of the place where a forward jump should go to the end of
../inputs/grep1.dat:2752:     the containing expression.  Each alternative of an `or' -- except the
../inputs/grep1.dat:2753:     last -- ends with a forward jump of this sort.  */
../inputs/grep1.dat:2754:  unsigned char *fixup_alt_jump = 0;
../inputs/grep1.dat:2755:
../inputs/grep1.dat:2756:  /* Counts open-groups as they are encountered.  Remembered for the
../inputs/grep1.dat:2757:     matching close-group on the compile stack, so the same register
../inputs/grep1.dat:2758:     number is put in the stop_memory as the start_memory.  */
../inputs/grep1.dat:2759:  regnum_t regnum = 0;
../inputs/grep1.dat:2760:
../inputs/grep1.dat:2761:#ifdef DEBUG
../inputs/grep1.dat:2762:  DEBUG_PRINT1 ("\nCompiling pattern: ");
../inputs/grep1.dat:2763:  if (debug)
../inputs/grep1.dat:2764:    {
../inputs/grep1.dat:2765:      unsigned debug_count;
../inputs/grep1.dat:2766:      
../inputs/grep1.dat:2767:      for (debug_count = 0; debug_count < size; debug_count++)
../inputs/grep1.dat:2768:        printchar (pattern[debug_count]);
../inputs/grep1.dat:2769:      putchar ('\n');
../inputs/grep1.dat:2770:    }
../inputs/grep1.dat:2771:#endif /* DEBUG */
../inputs/grep1.dat:2772:
../inputs/grep1.dat:2773:  /* Initialize the compile stack.  */
../inputs/grep1.dat:2774:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
../inputs/grep1.dat:2775:  if (compile_stack.stack == NULL)
../inputs/grep1.dat:2776:    return REG_ESPACE;
../inputs/grep1.dat:2777:
../inputs/grep1.dat:2778:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
../inputs/grep1.dat:2779:  compile_stack.avail = 0;
../inputs/grep1.dat:2780:
../inputs/grep1.dat:2781:  /* Initialize the pattern buffer.  */
../inputs/grep1.dat:2782:  bufp->syntax = syntax;
../inputs/grep1.dat:2783:  bufp->fastmap_accurate = 0;
../inputs/grep1.dat:2784:  bufp->not_bol = bufp->not_eol = 0;
../inputs/grep1.dat:2785:
../inputs/grep1.dat:2786:  /* Set `used' to zero, so that if we return an error, the pattern
../inputs/grep1.dat:2787:     printer (for debugging) will think there's no pattern.  We reset it
../inputs/grep1.dat:2788:     at the end.  */
../inputs/grep1.dat:2789:  bufp->used = 0;
../inputs/grep1.dat:2790:  
../inputs/grep1.dat:2791:  /* Always count groups, whether or not bufp->no_sub is set.  */
../inputs/grep1.dat:2792:  bufp->re_nsub = 0;				
../inputs/grep1.dat:2793:
../inputs/grep1.dat:2794:#if !defined (emacs) && !defined (SYNTAX_TABLE)
../inputs/grep1.dat:2795:  /* Initialize the syntax table.  */
../inputs/grep1.dat:2796:   init_syntax_once ();
../inputs/grep1.dat:2797:#endif
../inputs/grep1.dat:2798:
../inputs/grep1.dat:2799:  if (bufp->allocated == 0)
../inputs/grep1.dat:2800:    {
../inputs/grep1.dat:2801:      if (bufp->buffer)
../inputs/grep1.dat:2802:	{ /* If zero allocated, but buffer is non-null, try to realloc
../inputs/grep1.dat:2803:             enough space.  This loses if buffer's address is bogus, but
../inputs/grep1.dat:2804:             that is the user's responsibility.  */
../inputs/grep1.dat:2805:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
../inputs/grep1.dat:2806:        }
../inputs/grep1.dat:2807:      else
../inputs/grep1.dat:2808:        { /* Caller did not allocate a buffer.  Do it for them.  */
../inputs/grep1.dat:2809:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
../inputs/grep1.dat:2810:        }
../inputs/grep1.dat:2811:      if (!bufp->buffer) return REG_ESPACE;
../inputs/grep1.dat:2812:
../inputs/grep1.dat:2813:      bufp->allocated = INIT_BUF_SIZE;
../inputs/grep1.dat:2814:    }
../inputs/grep1.dat:2815:
../inputs/grep1.dat:2816:  begalt = b = bufp->buffer;
../inputs/grep1.dat:2817:
../inputs/grep1.dat:2818:  /* Loop through the uncompiled pattern until we're at the end.  */
../inputs/grep1.dat:2819:  while (p != pend)
../inputs/grep1.dat:2820:    {
../inputs/grep1.dat:2821:      PATFETCH (c);
../inputs/grep1.dat:2822:
../inputs/grep1.dat:2823:      switch (c)
../inputs/grep1.dat:2824:        {
../inputs/grep1.dat:2825:        case '^':
../inputs/grep1.dat:2826:          {
../inputs/grep1.dat:2827:            if (   /* If at start of pattern, it's an operator.  */
../inputs/grep1.dat:2828:                   p == pattern + 1
../inputs/grep1.dat:2829:                   /* If context independent, it's an operator.  */
../inputs/grep1.dat:2830:                || syntax & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:2831:                   /* Otherwise, depends on what's come before.  */
../inputs/grep1.dat:2832:                || at_begline_loc_p (pattern, p, syntax))
../inputs/grep1.dat:2833:              BUF_PUSH (begline);
../inputs/grep1.dat:2834:            else
../inputs/grep1.dat:2835:              goto normal_char;
../inputs/grep1.dat:2836:          }
../inputs/grep1.dat:2837:          break;
../inputs/grep1.dat:2838:
../inputs/grep1.dat:2839:
../inputs/grep1.dat:2840:        case '$':
../inputs/grep1.dat:2841:          {
../inputs/grep1.dat:2842:            if (   /* If at end of pattern, it's an operator.  */
../inputs/grep1.dat:2843:                   p == pend 
../inputs/grep1.dat:2844:                   /* If context independent, it's an operator.  */
../inputs/grep1.dat:2845:                || syntax & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:2846:                   /* Otherwise, depends on what's next.  */
../inputs/grep1.dat:2847:                || at_endline_loc_p (p, pend, syntax))
../inputs/grep1.dat:2848:               BUF_PUSH (endline);
../inputs/grep1.dat:2849:             else
../inputs/grep1.dat:2850:               goto normal_char;
../inputs/grep1.dat:2851:           }
../inputs/grep1.dat:2852:           break;
../inputs/grep1.dat:2853:
../inputs/grep1.dat:2854:
../inputs/grep1.dat:2855:	case '+':
../inputs/grep1.dat:2856:        case '?':
../inputs/grep1.dat:2857:          if ((syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:2858:              || (syntax & RE_LIMITED_OPS))
../inputs/grep1.dat:2859:            goto normal_char;
../inputs/grep1.dat:2860:        handle_plus:
../inputs/grep1.dat:2861:        case '*':
../inputs/grep1.dat:2862:          /* If there is no previous pattern... */
../inputs/grep1.dat:2863:          if (!laststart)
../inputs/grep1.dat:2864:            {
../inputs/grep1.dat:2865:              if (syntax & RE_CONTEXT_INVALID_OPS)
../inputs/grep1.dat:2866:                return REG_BADRPT;
../inputs/grep1.dat:2867:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
../inputs/grep1.dat:2868:                goto normal_char;
../inputs/grep1.dat:2869:            }
../inputs/grep1.dat:2870:
../inputs/grep1.dat:2871:          {
../inputs/grep1.dat:2872:            /* Are we optimizing this jump?  */
../inputs/grep1.dat:2873:            boolean keep_string_p = false;
../inputs/grep1.dat:2874:            
../inputs/grep1.dat:2875:            /* 1 means zero (many) matches is allowed.  */
../inputs/grep1.dat:2876:            char zero_times_ok = 0, many_times_ok = 0;
../inputs/grep1.dat:2877:
../inputs/grep1.dat:2878:            /* If there is a sequence of repetition chars, collapse it
../inputs/grep1.dat:2879:               down to just one (the right one).  We can't combine
../inputs/grep1.dat:2880:               interval operators with these because of, e.g., `a{2}*',
../inputs/grep1.dat:2881:               which should only match an even number of `a's.  */
../inputs/grep1.dat:2882:
../inputs/grep1.dat:2883:            for (;;)
../inputs/grep1.dat:2884:              {
../inputs/grep1.dat:2885:                zero_times_ok |= c != '+';
../inputs/grep1.dat:2886:                many_times_ok |= c != '?';
../inputs/grep1.dat:2887:
../inputs/grep1.dat:2888:                if (p == pend)
../inputs/grep1.dat:2889:                  break;
../inputs/grep1.dat:2890:
../inputs/grep1.dat:2891:                PATFETCH (c);
../inputs/grep1.dat:2892:
../inputs/grep1.dat:2893:                if (c == '*'
../inputs/grep1.dat:2894:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
../inputs/grep1.dat:2895:                  ;
../inputs/grep1.dat:2896:
../inputs/grep1.dat:2897:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
../inputs/grep1.dat:2898:                  {
../inputs/grep1.dat:2899:                    if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:2900:
../inputs/grep1.dat:2901:                    PATFETCH (c1);
../inputs/grep1.dat:2902:                    if (!(c1 == '+' || c1 == '?'))
../inputs/grep1.dat:2903:                      {
../inputs/grep1.dat:2904:                        PATUNFETCH;
../inputs/grep1.dat:2905:                        PATUNFETCH;
../inputs/grep1.dat:2906:                        break;
../inputs/grep1.dat:2907:                      }
../inputs/grep1.dat:2908:
../inputs/grep1.dat:2909:                    c = c1;
../inputs/grep1.dat:2910:                  }
../inputs/grep1.dat:2911:                else
../inputs/grep1.dat:2912:                  {
../inputs/grep1.dat:2913:                    PATUNFETCH;
../inputs/grep1.dat:2914:                    break;
../inputs/grep1.dat:2915:                  }
../inputs/grep1.dat:2916:
../inputs/grep1.dat:2917:                /* If we get here, we found another repeat character.  */
../inputs/grep1.dat:2918:               }
../inputs/grep1.dat:2919:
../inputs/grep1.dat:2920:            /* Star, etc. applied to an empty pattern is equivalent
../inputs/grep1.dat:2921:               to an empty pattern.  */
../inputs/grep1.dat:2922:            if (!laststart)  
../inputs/grep1.dat:2923:              break;
../inputs/grep1.dat:2924:
../inputs/grep1.dat:2925:            /* Now we know whether or not zero matches is allowed
../inputs/grep1.dat:2926:               and also whether or not two or more matches is allowed.  */
../inputs/grep1.dat:2927:            if (many_times_ok)
../inputs/grep1.dat:2928:              { /* More than one repetition is allowed, so put in at the
../inputs/grep1.dat:2929:                   end a backward relative jump from `b' to before the next
../inputs/grep1.dat:2930:                   jump we're going to put in below (which jumps from
../inputs/grep1.dat:2931:                   laststart to after this jump).  
../inputs/grep1.dat:2932:
../inputs/grep1.dat:2933:                   But if we are at the `*' in the exact sequence `.*\n',
../inputs/grep1.dat:2934:                   insert an unconditional jump backwards to the .,
../inputs/grep1.dat:2935:                   instead of the beginning of the loop.  This way we only
../inputs/grep1.dat:2936:                   push a failure point once, instead of every time
../inputs/grep1.dat:2937:                   through the loop.  */
../inputs/grep1.dat:2938:                assert (p - 1 > pattern);
../inputs/grep1.dat:2939:
../inputs/grep1.dat:2940:                /* Allocate the space for the jump.  */
../inputs/grep1.dat:2941:                GET_BUFFER_SPACE (3);
../inputs/grep1.dat:2942:
../inputs/grep1.dat:2943:                /* We know we are not at the first character of the pattern,
../inputs/grep1.dat:2944:                   because laststart was nonzero.  And we've already
../inputs/grep1.dat:2945:                   incremented `p', by the way, to be the character after
../inputs/grep1.dat:2946:                   the `*'.  Do we have to do something analogous here
../inputs/grep1.dat:2947:                   for null bytes, because of RE_DOT_NOT_NULL?  */
../inputs/grep1.dat:2948:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
../inputs/grep1.dat:2949:		    && zero_times_ok
../inputs/grep1.dat:2950:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
../inputs/grep1.dat:2951:                    && !(syntax & RE_DOT_NEWLINE))
../inputs/grep1.dat:2952:                  { /* We have .*\n.  */
../inputs/grep1.dat:2953:                    STORE_JUMP (jump, b, laststart);
../inputs/grep1.dat:2954:                    keep_string_p = true;
../inputs/grep1.dat:2955:                  }
../inputs/grep1.dat:2956:                else
../inputs/grep1.dat:2957:                  /* Anything else.  */
../inputs/grep1.dat:2958:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
../inputs/grep1.dat:2959:
../inputs/grep1.dat:2960:                /* We've added more stuff to the buffer.  */
../inputs/grep1.dat:2961:                b += 3;
../inputs/grep1.dat:2962:              }
../inputs/grep1.dat:2963:
../inputs/grep1.dat:2964:            /* On failure, jump from laststart to b + 3, which will be the
../inputs/grep1.dat:2965:               end of the buffer after this jump is inserted.  */
../inputs/grep1.dat:2966:            GET_BUFFER_SPACE (3);
../inputs/grep1.dat:2967:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
../inputs/grep1.dat:2968:                                       : on_failure_jump,
../inputs/grep1.dat:2969:                         laststart, b + 3);
../inputs/grep1.dat:2970:            pending_exact = 0;
../inputs/grep1.dat:2971:            b += 3;
../inputs/grep1.dat:2972:
../inputs/grep1.dat:2973:            if (!zero_times_ok)
../inputs/grep1.dat:2974:              {
../inputs/grep1.dat:2975:                /* At least one repetition is required, so insert a
../inputs/grep1.dat:2976:                   `dummy_failure_jump' before the initial
../inputs/grep1.dat:2977:                   `on_failure_jump' instruction of the loop. This
../inputs/grep1.dat:2978:                   effects a skip over that instruction the first time
../inputs/grep1.dat:2979:                   we hit that loop.  */
../inputs/grep1.dat:2980:                GET_BUFFER_SPACE (3);
../inputs/grep1.dat:2981:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
../inputs/grep1.dat:2982:                b += 3;
../inputs/grep1.dat:2983:              }
../inputs/grep1.dat:2984:            }
../inputs/grep1.dat:2985:	  break;
../inputs/grep1.dat:2986:
../inputs/grep1.dat:2987:
../inputs/grep1.dat:2988:	case '.':
../inputs/grep1.dat:2989:          laststart = b;
../inputs/grep1.dat:2990:          BUF_PUSH (anychar);
../inputs/grep1.dat:2991:          break;
../inputs/grep1.dat:2992:
../inputs/grep1.dat:2993:
../inputs/grep1.dat:2994:        case '[':
../inputs/grep1.dat:2995:          {
../inputs/grep1.dat:2996:            boolean had_char_class = false;
../inputs/grep1.dat:2997:
../inputs/grep1.dat:2998:            if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:2999:
../inputs/grep1.dat:3000:            /* Ensure that we have enough space to push a charset: the
../inputs/grep1.dat:3001:               opcode, the length count, and the bitset; 34 bytes in all.  */
../inputs/grep1.dat:3002:	    GET_BUFFER_SPACE (34);
../inputs/grep1.dat:3003:
../inputs/grep1.dat:3004:            laststart = b;
../inputs/grep1.dat:3005:
../inputs/grep1.dat:3006:            /* We test `*p == '^' twice, instead of using an if
../inputs/grep1.dat:3007:               statement, so we only need one BUF_PUSH.  */
../inputs/grep1.dat:3008:            BUF_PUSH (*p == '^' ? charset_not : charset); 
../inputs/grep1.dat:3009:            if (*p == '^')
../inputs/grep1.dat:3010:              p++;
../inputs/grep1.dat:3011:
../inputs/grep1.dat:3012:            /* Remember the first position in the bracket expression.  */
../inputs/grep1.dat:3013:            p1 = p;
../inputs/grep1.dat:3014:
../inputs/grep1.dat:3015:            /* Push the number of bytes in the bitmap.  */
../inputs/grep1.dat:3016:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
../inputs/grep1.dat:3017:
../inputs/grep1.dat:3018:            /* Clear the whole map.  */
../inputs/grep1.dat:3019:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
../inputs/grep1.dat:3020:
../inputs/grep1.dat:3021:            /* charset_not matches newline according to a syntax bit.  */
../inputs/grep1.dat:3022:            if ((re_opcode_t) b[-2] == charset_not
../inputs/grep1.dat:3023:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
../inputs/grep1.dat:3024:              SET_LIST_BIT ('\n');
../inputs/grep1.dat:3025:
../inputs/grep1.dat:3026:            /* Read in characters and ranges, setting map bits.  */
../inputs/grep1.dat:3027:            for (;;)
../inputs/grep1.dat:3028:              {
../inputs/grep1.dat:3029:                if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:3030:
../inputs/grep1.dat:3031:                PATFETCH (c);
../inputs/grep1.dat:3032:
../inputs/grep1.dat:3033:                /* \ might escape characters inside [...] and [^...].  */
../inputs/grep1.dat:3034:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
../inputs/grep1.dat:3035:                  {
../inputs/grep1.dat:3036:                    if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:3037:
../inputs/grep1.dat:3038:                    PATFETCH (c1);
../inputs/grep1.dat:3039:                    SET_LIST_BIT (c1);
../inputs/grep1.dat:3040:                    continue;
../inputs/grep1.dat:3041:                  }
../inputs/grep1.dat:3042:
../inputs/grep1.dat:3043:                /* Could be the end of the bracket expression.  If it's
../inputs/grep1.dat:3044:                   not (i.e., when the bracket expression is `[]' so
../inputs/grep1.dat:3045:                   far), the ']' character bit gets set way below.  */
../inputs/grep1.dat:3046:                if (c == ']' && p != p1 + 1)
../inputs/grep1.dat:3047:                  break;
../inputs/grep1.dat:3048:
../inputs/grep1.dat:3049:                /* Look ahead to see if it's a range when the last thing
../inputs/grep1.dat:3050:                   was a character class.  */
../inputs/grep1.dat:3051:                if (had_char_class && c == '-' && *p != ']')
../inputs/grep1.dat:3052:                  return REG_ERANGE;
../inputs/grep1.dat:3053:
../inputs/grep1.dat:3054:                /* Look ahead to see if it's a range when the last thing
../inputs/grep1.dat:3055:                   was a character: if this is a hyphen not at the
../inputs/grep1.dat:3056:                   beginning or the end of a list, then it's the range
../inputs/grep1.dat:3057:                   operator.  */
../inputs/grep1.dat:3058:                if (c == '-' 
../inputs/grep1.dat:3059:                    && !(p - 2 >= pattern && p[-2] == '[') 
../inputs/grep1.dat:3060:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
../inputs/grep1.dat:3061:                    && *p != ']')
../inputs/grep1.dat:3062:                  {
../inputs/grep1.dat:3063:                    reg_errcode_t ret
../inputs/grep1.dat:3064:                      = compile_range (&p, pend, translate, syntax, b);
../inputs/grep1.dat:3065:                    if (ret != REG_NOERROR) return ret;
../inputs/grep1.dat:3066:                  }
../inputs/grep1.dat:3067:
../inputs/grep1.dat:3068:                else if (p[0] == '-' && p[1] != ']')
../inputs/grep1.dat:3069:                  { /* This handles ranges made up of characters only.  */
../inputs/grep1.dat:3070:                    reg_errcode_t ret;
../inputs/grep1.dat:3071:
../inputs/grep1.dat:3072:		    /* Move past the `-'.  */
../inputs/grep1.dat:3073:                    PATFETCH (c1);
../inputs/grep1.dat:3074:                    
../inputs/grep1.dat:3075:                    ret = compile_range (&p, pend, translate, syntax, b);
../inputs/grep1.dat:3076:                    if (ret != REG_NOERROR) return ret;
../inputs/grep1.dat:3077:                  }
../inputs/grep1.dat:3078:
../inputs/grep1.dat:3079:                /* See if we're at the beginning of a possible character
../inputs/grep1.dat:3080:                   class.  */
../inputs/grep1.dat:3081:
../inputs/grep1.dat:3082:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
../inputs/grep1.dat:3083:                  { /* Leave room for the null.  */
../inputs/grep1.dat:3084:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
../inputs/grep1.dat:3085:
../inputs/grep1.dat:3086:                    PATFETCH (c);
../inputs/grep1.dat:3087:                    c1 = 0;
../inputs/grep1.dat:3088:
../inputs/grep1.dat:3089:                    /* If pattern is `[[:'.  */
../inputs/grep1.dat:3090:                    if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:3091:
../inputs/grep1.dat:3092:                    for (;;)
../inputs/grep1.dat:3093:                      {
../inputs/grep1.dat:3094:                        PATFETCH (c);
../inputs/grep1.dat:3095:                        if (c == ':' || c == ']' || p == pend
../inputs/grep1.dat:3096:                            || c1 == CHAR_CLASS_MAX_LENGTH)
../inputs/grep1.dat:3097:                          break;
../inputs/grep1.dat:3098:                        str[c1++] = c;
../inputs/grep1.dat:3099:                      }
../inputs/grep1.dat:3100:                    str[c1] = '\0';
../inputs/grep1.dat:3101:
../inputs/grep1.dat:3102:                    /* If isn't a word bracketed by `[:' and:`]':
../inputs/grep1.dat:3103:                       undo the ending character, the letters, and leave 
../inputs/grep1.dat:3104:                       the leading `:' and `[' (but set bits for them).  */
../inputs/grep1.dat:3105:                    if (c == ':' && *p == ']')
../inputs/grep1.dat:3106:                      {
../inputs/grep1.dat:3107:                        int ch;
../inputs/grep1.dat:3108:                        boolean is_alnum = STREQ (str, "alnum");
../inputs/grep1.dat:3109:                        boolean is_alpha = STREQ (str, "alpha");
../inputs/grep1.dat:3110:                        boolean is_blank = STREQ (str, "blank");
../inputs/grep1.dat:3111:                        boolean is_cntrl = STREQ (str, "cntrl");
../inputs/grep1.dat:3112:                        boolean is_digit = STREQ (str, "digit");
../inputs/grep1.dat:3113:                        boolean is_graph = STREQ (str, "graph");
../inputs/grep1.dat:3114:                        boolean is_lower = STREQ (str, "lower");
../inputs/grep1.dat:3115:                        boolean is_print = STREQ (str, "print");
../inputs/grep1.dat:3116:                        boolean is_punct = STREQ (str, "punct");
../inputs/grep1.dat:3117:                        boolean is_space = STREQ (str, "space");
../inputs/grep1.dat:3118:                        boolean is_upper = STREQ (str, "upper");
../inputs/grep1.dat:3119:                        boolean is_xdigit = STREQ (str, "xdigit");
../inputs/grep1.dat:3120:                        
../inputs/grep1.dat:3121:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
../inputs/grep1.dat:3122:
../inputs/grep1.dat:3123:                        /* Throw away the ] at the end of the character
../inputs/grep1.dat:3124:                           class.  */
../inputs/grep1.dat:3125:                        PATFETCH (c);					
../inputs/grep1.dat:3126:
../inputs/grep1.dat:3127:                        if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:3128:
../inputs/grep1.dat:3129:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
../inputs/grep1.dat:3130:                          {
../inputs/grep1.dat:3131:                            if (   (is_alnum  && ISALNUM (ch))
../inputs/grep1.dat:3132:                                || (is_alpha  && ISALPHA (ch))
../inputs/grep1.dat:3133:                                || (is_blank  && ISBLANK (ch))
../inputs/grep1.dat:3134:                                || (is_cntrl  && ISCNTRL (ch))
../inputs/grep1.dat:3135:                                || (is_digit  && ISDIGIT (ch))
../inputs/grep1.dat:3136:                                || (is_graph  && ISGRAPH (ch))
../inputs/grep1.dat:3137:                                || (is_lower  && ISLOWER (ch))
../inputs/grep1.dat:3138:                                || (is_print  && ISPRINT (ch))
../inputs/grep1.dat:3139:                                || (is_punct  && ISPUNCT (ch))
../inputs/grep1.dat:3140:                                || (is_space  && ISSPACE (ch))
../inputs/grep1.dat:3141:                                || (is_upper  && ISUPPER (ch))
../inputs/grep1.dat:3142:                                || (is_xdigit && ISXDIGIT (ch)))
../inputs/grep1.dat:3143:                            SET_LIST_BIT (ch);
../inputs/grep1.dat:3144:                          }
../inputs/grep1.dat:3145:                        had_char_class = true;
../inputs/grep1.dat:3146:                      }
../inputs/grep1.dat:3147:                    else
../inputs/grep1.dat:3148:                      {
../inputs/grep1.dat:3149:                        c1++;
../inputs/grep1.dat:3150:                        while (c1--)    
../inputs/grep1.dat:3151:                          PATUNFETCH;
../inputs/grep1.dat:3152:                        SET_LIST_BIT ('[');
../inputs/grep1.dat:3153:                        SET_LIST_BIT (':');
../inputs/grep1.dat:3154:                        had_char_class = false;
../inputs/grep1.dat:3155:                      }
../inputs/grep1.dat:3156:                  }
../inputs/grep1.dat:3157:                else
../inputs/grep1.dat:3158:                  {
../inputs/grep1.dat:3159:                    had_char_class = false;
../inputs/grep1.dat:3160:                    SET_LIST_BIT (c);
../inputs/grep1.dat:3161:                  }
../inputs/grep1.dat:3162:              }
../inputs/grep1.dat:3163:
../inputs/grep1.dat:3164:            /* Discard any (non)matching list bytes that are all 0 at the
../inputs/grep1.dat:3165:               end of the map.  Decrease the map-length byte too.  */
../inputs/grep1.dat:3166:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
../inputs/grep1.dat:3167:              b[-1]--; 
../inputs/grep1.dat:3168:            b += b[-1];
../inputs/grep1.dat:3169:          }
../inputs/grep1.dat:3170:          break;
../inputs/grep1.dat:3171:
../inputs/grep1.dat:3172:
../inputs/grep1.dat:3173:	case '(':
../inputs/grep1.dat:3174:          if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:3175:            goto handle_open;
../inputs/grep1.dat:3176:          else
../inputs/grep1.dat:3177:            goto normal_char;
../inputs/grep1.dat:3178:
../inputs/grep1.dat:3179:
../inputs/grep1.dat:3180:        case ')':
../inputs/grep1.dat:3181:          if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:3182:            goto handle_close;
../inputs/grep1.dat:3183:          else
../inputs/grep1.dat:3184:            goto normal_char;
../inputs/grep1.dat:3185:
../inputs/grep1.dat:3186:
../inputs/grep1.dat:3187:        case '\n':
../inputs/grep1.dat:3188:          if (syntax & RE_NEWLINE_ALT)
../inputs/grep1.dat:3189:            goto handle_alt;
../inputs/grep1.dat:3190:          else
../inputs/grep1.dat:3191:            goto normal_char;
../inputs/grep1.dat:3192:
../inputs/grep1.dat:3193:
../inputs/grep1.dat:3194:	case '|':
../inputs/grep1.dat:3195:          if (syntax & RE_NO_BK_VBAR)
../inputs/grep1.dat:3196:            goto handle_alt;
../inputs/grep1.dat:3197:          else
../inputs/grep1.dat:3198:            goto normal_char;
../inputs/grep1.dat:3199:
../inputs/grep1.dat:3200:
../inputs/grep1.dat:3201:        case '{':
../inputs/grep1.dat:3202:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:3203:             goto handle_interval;
../inputs/grep1.dat:3204:           else
../inputs/grep1.dat:3205:             goto normal_char;
../inputs/grep1.dat:3206:
../inputs/grep1.dat:3207:
../inputs/grep1.dat:3208:        case '\\':
../inputs/grep1.dat:3209:          if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:3210:
../inputs/grep1.dat:3211:          /* Do not translate the character after the \, so that we can
../inputs/grep1.dat:3212:             distinguish, e.g., \B from \b, even if we normally would
../inputs/grep1.dat:3213:             translate, e.g., B to b.  */
../inputs/grep1.dat:3214:          PATFETCH_RAW (c);
../inputs/grep1.dat:3215:
../inputs/grep1.dat:3216:          switch (c)
../inputs/grep1.dat:3217:            {
../inputs/grep1.dat:3218:            case '(':
../inputs/grep1.dat:3219:              if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:3220:                goto normal_backslash;
../inputs/grep1.dat:3221:
../inputs/grep1.dat:3222:            handle_open:
../inputs/grep1.dat:3223:              bufp->re_nsub++;
../inputs/grep1.dat:3224:              regnum++;
../inputs/grep1.dat:3225:
../inputs/grep1.dat:3226:              if (COMPILE_STACK_FULL)
../inputs/grep1.dat:3227:                { 
../inputs/grep1.dat:3228:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
../inputs/grep1.dat:3229:                            compile_stack_elt_t);
../inputs/grep1.dat:3230:                  if (compile_stack.stack == NULL) return REG_ESPACE;
../inputs/grep1.dat:3231:
../inputs/grep1.dat:3232:                  compile_stack.size <<= 1;
../inputs/grep1.dat:3233:                }
../inputs/grep1.dat:3234:
../inputs/grep1.dat:3235:              /* These are the values to restore when we hit end of this
../inputs/grep1.dat:3236:                 group.  They are all relative offsets, so that if the
../inputs/grep1.dat:3237:                 whole pattern moves because of realloc, they will still
../inputs/grep1.dat:3238:                 be valid.  */
../inputs/grep1.dat:3239:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
../inputs/grep1.dat:3240:              COMPILE_STACK_TOP.fixup_alt_jump 
../inputs/grep1.dat:3241:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
../inputs/grep1.dat:3242:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
../inputs/grep1.dat:3243:              COMPILE_STACK_TOP.regnum = regnum;
../inputs/grep1.dat:3244:
../inputs/grep1.dat:3245:              /* We will eventually replace the 0 with the number of
../inputs/grep1.dat:3246:                 groups inner to this one.  But do not push a
../inputs/grep1.dat:3247:                 start_memory for groups beyond the last one we can
../inputs/grep1.dat:3248:                 represent in the compiled pattern.  */
../inputs/grep1.dat:3249:              if (regnum <= MAX_REGNUM)
../inputs/grep1.dat:3250:                {
../inputs/grep1.dat:3251:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
../inputs/grep1.dat:3252:                  BUF_PUSH_3 (start_memory, regnum, 0);
../inputs/grep1.dat:3253:                }
../inputs/grep1.dat:3254:                
../inputs/grep1.dat:3255:              compile_stack.avail++;
../inputs/grep1.dat:3256:
../inputs/grep1.dat:3257:              fixup_alt_jump = 0;
../inputs/grep1.dat:3258:              laststart = 0;
../inputs/grep1.dat:3259:              begalt = b;
../inputs/grep1.dat:3260:	      /* If we've reached MAX_REGNUM groups, then this open
../inputs/grep1.dat:3261:		 won't actually generate any code, so we'll have to
../inputs/grep1.dat:3262:		 clear pending_exact explicitly.  */
../inputs/grep1.dat:3263:	      pending_exact = 0;
../inputs/grep1.dat:3264:              break;
../inputs/grep1.dat:3265:
../inputs/grep1.dat:3266:
../inputs/grep1.dat:3267:            case ')':
../inputs/grep1.dat:3268:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
../inputs/grep1.dat:3269:
../inputs/grep1.dat:3270:              if (COMPILE_STACK_EMPTY)
../inputs/grep1.dat:3271:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:3272:                  goto normal_backslash;
../inputs/grep1.dat:3273:                else
../inputs/grep1.dat:3274:                  return REG_ERPAREN;
../inputs/grep1.dat:3275:
../inputs/grep1.dat:3276:            handle_close:
../inputs/grep1.dat:3277:              if (fixup_alt_jump)
../inputs/grep1.dat:3278:                { /* Push a dummy failure point at the end of the
../inputs/grep1.dat:3279:                     alternative for a possible future
../inputs/grep1.dat:3280:                     `pop_failure_jump' to pop.  See comments at
../inputs/grep1.dat:3281:                     `push_dummy_failure' in `re_match_2'.  */
../inputs/grep1.dat:3282:                  BUF_PUSH (push_dummy_failure);
../inputs/grep1.dat:3283:                  
../inputs/grep1.dat:3284:                  /* We allocated space for this jump when we assigned
../inputs/grep1.dat:3285:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
../inputs/grep1.dat:3286:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
../inputs/grep1.dat:3287:                }
../inputs/grep1.dat:3288:
../inputs/grep1.dat:3289:              /* See similar code for backslashed left paren above.  */
../inputs/grep1.dat:3290:              if (COMPILE_STACK_EMPTY)
../inputs/grep1.dat:3291:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:3292:                  goto normal_char;
../inputs/grep1.dat:3293:                else
../inputs/grep1.dat:3294:                  return REG_ERPAREN;
../inputs/grep1.dat:3295:
../inputs/grep1.dat:3296:              /* Since we just checked for an empty stack above, this
../inputs/grep1.dat:3297:                 ``can't happen''.  */
../inputs/grep1.dat:3298:              assert (compile_stack.avail != 0);
../inputs/grep1.dat:3299:              {
../inputs/grep1.dat:3300:                /* We don't just want to restore into `regnum', because
../inputs/grep1.dat:3301:                   later groups should continue to be numbered higher,
../inputs/grep1.dat:3302:                   as in `(ab)c(de)' -- the second group is #2.  */
../inputs/grep1.dat:3303:                regnum_t this_group_regnum;
../inputs/grep1.dat:3304:
../inputs/grep1.dat:3305:                compile_stack.avail--;		
../inputs/grep1.dat:3306:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
../inputs/grep1.dat:3307:                fixup_alt_jump
../inputs/grep1.dat:3308:                  = COMPILE_STACK_TOP.fixup_alt_jump
../inputs/grep1.dat:3309:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
../inputs/grep1.dat:3310:                    : 0;
../inputs/grep1.dat:3311:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
../inputs/grep1.dat:3312:                this_group_regnum = COMPILE_STACK_TOP.regnum;
../inputs/grep1.dat:3313:		/* If we've reached MAX_REGNUM groups, then this open
../inputs/grep1.dat:3314:		   won't actually generate any code, so we'll have to
../inputs/grep1.dat:3315:		   clear pending_exact explicitly.  */
../inputs/grep1.dat:3316:		pending_exact = 0;
../inputs/grep1.dat:3317:
../inputs/grep1.dat:3318:                /* We're at the end of the group, so now we know how many
../inputs/grep1.dat:3319:                   groups were inside this one.  */
../inputs/grep1.dat:3320:                if (this_group_regnum <= MAX_REGNUM)
../inputs/grep1.dat:3321:                  {
../inputs/grep1.dat:3322:                    unsigned char *inner_group_loc
../inputs/grep1.dat:3323:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
../inputs/grep1.dat:3324:                    
../inputs/grep1.dat:3325:                    *inner_group_loc = regnum - this_group_regnum;
../inputs/grep1.dat:3326:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
../inputs/grep1.dat:3327:                                regnum - this_group_regnum);
../inputs/grep1.dat:3328:                  }
../inputs/grep1.dat:3329:              }
../inputs/grep1.dat:3330:              break;
../inputs/grep1.dat:3331:
../inputs/grep1.dat:3332:
../inputs/grep1.dat:3333:            case '|':					/* `\|'.  */
../inputs/grep1.dat:3334:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
../inputs/grep1.dat:3335:                goto normal_backslash;
../inputs/grep1.dat:3336:            handle_alt:
../inputs/grep1.dat:3337:              if (syntax & RE_LIMITED_OPS)
../inputs/grep1.dat:3338:                goto normal_char;
../inputs/grep1.dat:3339:
../inputs/grep1.dat:3340:              /* Insert before the previous alternative a jump which
../inputs/grep1.dat:3341:                 jumps to this alternative if the former fails.  */
../inputs/grep1.dat:3342:              GET_BUFFER_SPACE (3);
../inputs/grep1.dat:3343:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
../inputs/grep1.dat:3344:              pending_exact = 0;
../inputs/grep1.dat:3345:              b += 3;
../inputs/grep1.dat:3346:
../inputs/grep1.dat:3347:              /* The alternative before this one has a jump after it
../inputs/grep1.dat:3348:                 which gets executed if it gets matched.  Adjust that
../inputs/grep1.dat:3349:                 jump so it will jump to this alternative's analogous
../inputs/grep1.dat:3350:                 jump (put in below, which in turn will jump to the next
../inputs/grep1.dat:3351:                 (if any) alternative's such jump, etc.).  The last such
../inputs/grep1.dat:3352:                 jump jumps to the correct final destination.  A picture:
../inputs/grep1.dat:3353:                          _____ _____ 
../inputs/grep1.dat:3354:                          |   | |   |   
../inputs/grep1.dat:3355:                          |   v |   v 
../inputs/grep1.dat:3356:                         a | b   | c   
../inputs/grep1.dat:3357:
../inputs/grep1.dat:3358:                 If we are at `b', then fixup_alt_jump right now points to a
../inputs/grep1.dat:3359:                 three-byte space after `a'.  We'll put in the jump, set
../inputs/grep1.dat:3360:                 fixup_alt_jump to right after `b', and leave behind three
../inputs/grep1.dat:3361:                 bytes which we'll fill in when we get to after `c'.  */
../inputs/grep1.dat:3362:
../inputs/grep1.dat:3363:              if (fixup_alt_jump)
../inputs/grep1.dat:3364:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
../inputs/grep1.dat:3365:
../inputs/grep1.dat:3366:              /* Mark and leave space for a jump after this alternative,
../inputs/grep1.dat:3367:                 to be filled in later either by next alternative or
../inputs/grep1.dat:3368:                 when know we're at the end of a series of alternatives.  */
../inputs/grep1.dat:3369:              fixup_alt_jump = b;
../inputs/grep1.dat:3370:              GET_BUFFER_SPACE (3);
../inputs/grep1.dat:3371:              b += 3;
../inputs/grep1.dat:3372:
../inputs/grep1.dat:3373:              laststart = 0;
../inputs/grep1.dat:3374:              begalt = b;
../inputs/grep1.dat:3375:              break;
../inputs/grep1.dat:3376:
../inputs/grep1.dat:3377:
../inputs/grep1.dat:3378:            case '{': 
../inputs/grep1.dat:3379:              /* If \{ is a literal.  */
../inputs/grep1.dat:3380:              if (!(syntax & RE_INTERVALS)
../inputs/grep1.dat:3381:                     /* If we're at `\{' and it's not the open-interval 
../inputs/grep1.dat:3382:                        operator.  */
../inputs/grep1.dat:3383:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
../inputs/grep1.dat:3384:                  || (p - 2 == pattern  &&  p == pend))
../inputs/grep1.dat:3385:                goto normal_backslash;
../inputs/grep1.dat:3386:
../inputs/grep1.dat:3387:            handle_interval:
../inputs/grep1.dat:3388:              {
../inputs/grep1.dat:3389:                /* If got here, then the syntax allows intervals.  */
../inputs/grep1.dat:3390:
../inputs/grep1.dat:3391:                /* At least (most) this many matches must be made.  */
../inputs/grep1.dat:3392:                int lower_bound = -1, upper_bound = -1;
../inputs/grep1.dat:3393:
../inputs/grep1.dat:3394:                beg_interval = p - 1;
../inputs/grep1.dat:3395:
../inputs/grep1.dat:3396:                if (p == pend)
../inputs/grep1.dat:3397:                  {
../inputs/grep1.dat:3398:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:3399:                      goto unfetch_interval;
../inputs/grep1.dat:3400:                    else
../inputs/grep1.dat:3401:                      return REG_EBRACE;
../inputs/grep1.dat:3402:                  }
../inputs/grep1.dat:3403:
../inputs/grep1.dat:3404:                GET_UNSIGNED_NUMBER (lower_bound);
../inputs/grep1.dat:3405:
../inputs/grep1.dat:3406:                if (c == ',')
../inputs/grep1.dat:3407:                  {
../inputs/grep1.dat:3408:                    GET_UNSIGNED_NUMBER (upper_bound);
../inputs/grep1.dat:3409:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
../inputs/grep1.dat:3410:                  }
../inputs/grep1.dat:3411:                else
../inputs/grep1.dat:3412:                  /* Interval such as `{1}' => match exactly once. */
../inputs/grep1.dat:3413:                  upper_bound = lower_bound;
../inputs/grep1.dat:3414:
../inputs/grep1.dat:3415:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
../inputs/grep1.dat:3416:                    || lower_bound > upper_bound)
../inputs/grep1.dat:3417:                  {
../inputs/grep1.dat:3418:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:3419:                      goto unfetch_interval;
../inputs/grep1.dat:3420:                    else 
../inputs/grep1.dat:3421:                      return REG_BADBR;
../inputs/grep1.dat:3422:                  }
../inputs/grep1.dat:3423:
../inputs/grep1.dat:3424:                if (!(syntax & RE_NO_BK_BRACES)) 
../inputs/grep1.dat:3425:                  {
../inputs/grep1.dat:3426:                    if (c != '\\') return REG_EBRACE;
../inputs/grep1.dat:3427:
../inputs/grep1.dat:3428:                    PATFETCH (c);
../inputs/grep1.dat:3429:                  }
../inputs/grep1.dat:3430:
../inputs/grep1.dat:3431:                if (c != '}')
../inputs/grep1.dat:3432:                  {
../inputs/grep1.dat:3433:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:3434:                      goto unfetch_interval;
../inputs/grep1.dat:3435:                    else 
../inputs/grep1.dat:3436:                      return REG_BADBR;
../inputs/grep1.dat:3437:                  }
../inputs/grep1.dat:3438:
../inputs/grep1.dat:3439:                /* We just parsed a valid interval.  */
../inputs/grep1.dat:3440:
../inputs/grep1.dat:3441:                /* If it's invalid to have no preceding re.  */
../inputs/grep1.dat:3442:                if (!laststart)
../inputs/grep1.dat:3443:                  {
../inputs/grep1.dat:3444:                    if (syntax & RE_CONTEXT_INVALID_OPS)
../inputs/grep1.dat:3445:                      return REG_BADRPT;
../inputs/grep1.dat:3446:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
../inputs/grep1.dat:3447:                      laststart = b;
../inputs/grep1.dat:3448:                    else
../inputs/grep1.dat:3449:                      goto unfetch_interval;
../inputs/grep1.dat:3450:                  }
../inputs/grep1.dat:3451:
../inputs/grep1.dat:3452:                /* If the upper bound is zero, don't want to succeed at
../inputs/grep1.dat:3453:                   all; jump from `laststart' to `b + 3', which will be
../inputs/grep1.dat:3454:                   the end of the buffer after we insert the jump.  */
../inputs/grep1.dat:3455:                 if (upper_bound == 0)
../inputs/grep1.dat:3456:                   {
../inputs/grep1.dat:3457:                     GET_BUFFER_SPACE (3);
../inputs/grep1.dat:3458:                     INSERT_JUMP (jump, laststart, b + 3);
../inputs/grep1.dat:3459:                     b += 3;
../inputs/grep1.dat:3460:                   }
../inputs/grep1.dat:3461:
../inputs/grep1.dat:3462:                 /* Otherwise, we have a nontrivial interval.  When
../inputs/grep1.dat:3463:                    we're all done, the pattern will look like:
../inputs/grep1.dat:3464:                      set_number_at <jump count> <upper bound>
../inputs/grep1.dat:3465:                      set_number_at <succeed_n count> <lower bound>
../inputs/grep1.dat:3466:                      succeed_n <after jump addr> <succed_n count>
../inputs/grep1.dat:3467:                      <body of loop>
../inputs/grep1.dat:3468:                      jump_n <succeed_n addr> <jump count>
../inputs/grep1.dat:3469:                    (The upper bound and `jump_n' are omitted if
../inputs/grep1.dat:3470:                    `upper_bound' is 1, though.)  */
../inputs/grep1.dat:3471:                 else 
../inputs/grep1.dat:3472:                   { /* If the upper bound is > 1, we need to insert
../inputs/grep1.dat:3473:                        more at the end of the loop.  */
../inputs/grep1.dat:3474:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
../inputs/grep1.dat:3475:
../inputs/grep1.dat:3476:                     GET_BUFFER_SPACE (nbytes);
../inputs/grep1.dat:3477:
../inputs/grep1.dat:3478:                     /* Initialize lower bound of the `succeed_n', even
../inputs/grep1.dat:3479:                        though it will be set during matching by its
../inputs/grep1.dat:3480:                        attendant `set_number_at' (inserted next),
../inputs/grep1.dat:3481:                        because `re_compile_fastmap' needs to know.
../inputs/grep1.dat:3482:                        Jump to the `jump_n' we might insert below.  */
../inputs/grep1.dat:3483:                     INSERT_JUMP2 (succeed_n, laststart,
../inputs/grep1.dat:3484:                                   b + 5 + (upper_bound > 1) * 5,
../inputs/grep1.dat:3485:                                   lower_bound);
../inputs/grep1.dat:3486:                     b += 5;
../inputs/grep1.dat:3487:
../inputs/grep1.dat:3488:                     /* Code to initialize the lower bound.  Insert 
../inputs/grep1.dat:3489:                        before the `succeed_n'.  The `5' is the last two
../inputs/grep1.dat:3490:                        bytes of this `set_number_at', plus 3 bytes of
../inputs/grep1.dat:3491:                        the following `succeed_n'.  */
../inputs/grep1.dat:3492:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
../inputs/grep1.dat:3493:                     b += 5;
../inputs/grep1.dat:3494:
../inputs/grep1.dat:3495:                     if (upper_bound > 1)
../inputs/grep1.dat:3496:                       { /* More than one repetition is allowed, so
../inputs/grep1.dat:3497:                            append a backward jump to the `succeed_n'
../inputs/grep1.dat:3498:                            that starts this interval.
../inputs/grep1.dat:3499:                            
../inputs/grep1.dat:3500:                            When we've reached this during matching,
../inputs/grep1.dat:3501:                            we'll have matched the interval once, so
../inputs/grep1.dat:3502:                            jump back only `upper_bound - 1' times.  */
../inputs/grep1.dat:3503:                         STORE_JUMP2 (jump_n, b, laststart + 5,
../inputs/grep1.dat:3504:                                      upper_bound - 1);
../inputs/grep1.dat:3505:                         b += 5;
../inputs/grep1.dat:3506:
../inputs/grep1.dat:3507:                         /* The location we want to set is the second
../inputs/grep1.dat:3508:                            parameter of the `jump_n'; that is `b-2' as
../inputs/grep1.dat:3509:                            an absolute address.  `laststart' will be
../inputs/grep1.dat:3510:                            the `set_number_at' we're about to insert;
../inputs/grep1.dat:3511:                            `laststart+3' the number to set, the source
../inputs/grep1.dat:3512:                            for the relative address.  But we are
../inputs/grep1.dat:3513:                            inserting into the middle of the pattern --
../inputs/grep1.dat:3514:                            so everything is getting moved up by 5.
../inputs/grep1.dat:3515:                            Conclusion: (b - 2) - (laststart + 3) + 5,
../inputs/grep1.dat:3516:                            i.e., b - laststart.
../inputs/grep1.dat:3517:                            
../inputs/grep1.dat:3518:                            We insert this at the beginning of the loop
../inputs/grep1.dat:3519:                            so that if we fail during matching, we'll
../inputs/grep1.dat:3520:                            reinitialize the bounds.  */
../inputs/grep1.dat:3521:                         insert_op2 (set_number_at, laststart, b - laststart,
../inputs/grep1.dat:3522:                                     upper_bound - 1, b);
../inputs/grep1.dat:3523:                         b += 5;
../inputs/grep1.dat:3524:                       }
../inputs/grep1.dat:3525:                   }
../inputs/grep1.dat:3526:                pending_exact = 0;
../inputs/grep1.dat:3527:                beg_interval = NULL;
../inputs/grep1.dat:3528:              }
../inputs/grep1.dat:3529:              break;
../inputs/grep1.dat:3530:
../inputs/grep1.dat:3531:            unfetch_interval:
../inputs/grep1.dat:3532:              /* If an invalid interval, match the characters as literals.  */
../inputs/grep1.dat:3533:               assert (beg_interval);
../inputs/grep1.dat:3534:               p = beg_interval;
../inputs/grep1.dat:3535:               beg_interval = NULL;
../inputs/grep1.dat:3536:
../inputs/grep1.dat:3537:               /* normal_char and normal_backslash need `c'.  */
../inputs/grep1.dat:3538:               PATFETCH (c);	
../inputs/grep1.dat:3539:
../inputs/grep1.dat:3540:               if (!(syntax & RE_NO_BK_BRACES))
../inputs/grep1.dat:3541:                 {
../inputs/grep1.dat:3542:                   if (p > pattern  &&  p[-1] == '\\')
../inputs/grep1.dat:3543:                     goto normal_backslash;
../inputs/grep1.dat:3544:                 }
../inputs/grep1.dat:3545:               goto normal_char;
../inputs/grep1.dat:3546:
../inputs/grep1.dat:3547:#ifdef emacs
../inputs/grep1.dat:3548:            /* There is no way to specify the before_dot and after_dot
../inputs/grep1.dat:3549:               operators.  rms says this is ok.  --karl  */
../inputs/grep1.dat:3550:            case '=':
../inputs/grep1.dat:3551:              BUF_PUSH (at_dot);
../inputs/grep1.dat:3552:              break;
../inputs/grep1.dat:3553:
../inputs/grep1.dat:3554:            case 's':	
../inputs/grep1.dat:3555:              laststart = b;
../inputs/grep1.dat:3556:              PATFETCH (c);
../inputs/grep1.dat:3557:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
../inputs/grep1.dat:3558:              break;
../inputs/grep1.dat:3559:
../inputs/grep1.dat:3560:            case 'S':
../inputs/grep1.dat:3561:              laststart = b;
../inputs/grep1.dat:3562:              PATFETCH (c);
../inputs/grep1.dat:3563:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
../inputs/grep1.dat:3564:              break;
../inputs/grep1.dat:3565:#endif /* emacs */
../inputs/grep1.dat:3566:
../inputs/grep1.dat:3567:
../inputs/grep1.dat:3568:            case 'w':
../inputs/grep1.dat:3569:              laststart = b;
../inputs/grep1.dat:3570:              BUF_PUSH (wordchar);
../inputs/grep1.dat:3571:              break;
../inputs/grep1.dat:3572:
../inputs/grep1.dat:3573:
../inputs/grep1.dat:3574:            case 'W':
../inputs/grep1.dat:3575:              laststart = b;
../inputs/grep1.dat:3576:              BUF_PUSH (notwordchar);
../inputs/grep1.dat:3577:              break;
../inputs/grep1.dat:3578:
../inputs/grep1.dat:3579:
../inputs/grep1.dat:3580:            case '<':
../inputs/grep1.dat:3581:              BUF_PUSH (wordbeg);
../inputs/grep1.dat:3582:              break;
../inputs/grep1.dat:3583:
../inputs/grep1.dat:3584:            case '>':
../inputs/grep1.dat:3585:              BUF_PUSH (wordend);
../inputs/grep1.dat:3586:              break;
../inputs/grep1.dat:3587:
../inputs/grep1.dat:3588:            case 'b':
../inputs/grep1.dat:3589:              BUF_PUSH (wordbound);
../inputs/grep1.dat:3590:              break;
../inputs/grep1.dat:3591:
../inputs/grep1.dat:3592:            case 'B':
../inputs/grep1.dat:3593:              BUF_PUSH (notwordbound);
../inputs/grep1.dat:3594:              break;
../inputs/grep1.dat:3595:
../inputs/grep1.dat:3596:            case '`':
../inputs/grep1.dat:3597:              BUF_PUSH (begbuf);
../inputs/grep1.dat:3598:              break;
../inputs/grep1.dat:3599:
../inputs/grep1.dat:3600:            case '\'':
../inputs/grep1.dat:3601:              BUF_PUSH (endbuf);
../inputs/grep1.dat:3602:              break;
../inputs/grep1.dat:3603:
../inputs/grep1.dat:3604:            case '1': case '2': case '3': case '4': case '5':
../inputs/grep1.dat:3605:            case '6': case '7': case '8': case '9':
../inputs/grep1.dat:3606:              if (syntax & RE_NO_BK_REFS)
../inputs/grep1.dat:3607:                goto normal_char;
../inputs/grep1.dat:3608:
../inputs/grep1.dat:3609:              c1 = c - '0';
../inputs/grep1.dat:3610:
../inputs/grep1.dat:3611:              if (c1 > regnum)
../inputs/grep1.dat:3612:                return REG_ESUBREG;
../inputs/grep1.dat:3613:
../inputs/grep1.dat:3614:              /* Can't back reference to a subexpression if inside of it.  */
../inputs/grep1.dat:3615:              if (group_in_compile_stack (compile_stack, c1))
../inputs/grep1.dat:3616:                goto normal_char;
../inputs/grep1.dat:3617:
../inputs/grep1.dat:3618:              laststart = b;
../inputs/grep1.dat:3619:              BUF_PUSH_2 (duplicate, c1);
../inputs/grep1.dat:3620:              break;
../inputs/grep1.dat:3621:
../inputs/grep1.dat:3622:
../inputs/grep1.dat:3623:            case '+':
../inputs/grep1.dat:3624:            case '?':
../inputs/grep1.dat:3625:              if (syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:3626:                goto handle_plus;
../inputs/grep1.dat:3627:              else
../inputs/grep1.dat:3628:                goto normal_backslash;
../inputs/grep1.dat:3629:
../inputs/grep1.dat:3630:            default:
../inputs/grep1.dat:3631:            normal_backslash:
../inputs/grep1.dat:3632:              /* You might think it would be useful for \ to mean
../inputs/grep1.dat:3633:                 not to translate; but if we don't translate it
../inputs/grep1.dat:3634:                 it will never match anything.  */
../inputs/grep1.dat:3635:              c = TRANSLATE (c);
../inputs/grep1.dat:3636:              goto normal_char;
../inputs/grep1.dat:3637:            }
../inputs/grep1.dat:3638:          break;
../inputs/grep1.dat:3639:
../inputs/grep1.dat:3640:
../inputs/grep1.dat:3641:	default:
../inputs/grep1.dat:3642:        /* Expects the character in `c'.  */
../inputs/grep1.dat:3643:	normal_char:
../inputs/grep1.dat:3644:	      /* If no exactn currently being built.  */
../inputs/grep1.dat:3645:          if (!pending_exact 
../inputs/grep1.dat:3646:
../inputs/grep1.dat:3647:              /* If last exactn not at current position.  */
../inputs/grep1.dat:3648:              || pending_exact + *pending_exact + 1 != b
../inputs/grep1.dat:3649:              
../inputs/grep1.dat:3650:              /* We have only one byte following the exactn for the count.  */
../inputs/grep1.dat:3651:	      || *pending_exact == (1 << BYTEWIDTH) - 1
../inputs/grep1.dat:3652:
../inputs/grep1.dat:3653:              /* If followed by a repetition operator.  */
../inputs/grep1.dat:3654:              || *p == '*' || *p == '^'
../inputs/grep1.dat:3655:	      || ((syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:3656:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
../inputs/grep1.dat:3657:		  : (*p == '+' || *p == '?'))
../inputs/grep1.dat:3658:	      || ((syntax & RE_INTERVALS)
../inputs/grep1.dat:3659:                  && ((syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:3660:		      ? *p == '{'
../inputs/grep1.dat:3661:                      : (p[0] == '\\' && p[1] == '{'))))
../inputs/grep1.dat:3662:	    {
../inputs/grep1.dat:3663:	      /* Start building a new exactn.  */
../inputs/grep1.dat:3664:              
../inputs/grep1.dat:3665:              laststart = b;
../inputs/grep1.dat:3666:
../inputs/grep1.dat:3667:	      BUF_PUSH_2 (exactn, 0);
../inputs/grep1.dat:3668:	      pending_exact = b - 1;
../inputs/grep1.dat:3669:            }
../inputs/grep1.dat:3670:            
../inputs/grep1.dat:3671:	  BUF_PUSH (c);
../inputs/grep1.dat:3672:          (*pending_exact)++;
../inputs/grep1.dat:3673:	  break;
../inputs/grep1.dat:3674:        } /* switch (c) */
../inputs/grep1.dat:3675:    } /* while p != pend */
../inputs/grep1.dat:3676:
../inputs/grep1.dat:3677:  
../inputs/grep1.dat:3678:  /* Through the pattern now.  */
../inputs/grep1.dat:3679:  
../inputs/grep1.dat:3680:  if (fixup_alt_jump)
../inputs/grep1.dat:3681:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
../inputs/grep1.dat:3682:
../inputs/grep1.dat:3683:  if (!COMPILE_STACK_EMPTY) 
../inputs/grep1.dat:3684:    return REG_EPAREN;
../inputs/grep1.dat:3685:
../inputs/grep1.dat:3686:  free (compile_stack.stack);
../inputs/grep1.dat:3687:
../inputs/grep1.dat:3688:  /* We have succeeded; set the length of the buffer.  */
../inputs/grep1.dat:3689:  bufp->used = b - bufp->buffer;
../inputs/grep1.dat:3690:
../inputs/grep1.dat:3691:#ifdef DEBUG
../inputs/grep1.dat:3692:  if (debug)
../inputs/grep1.dat:3693:    {
../inputs/grep1.dat:3694:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
../inputs/grep1.dat:3695:      print_compiled_pattern (bufp);
../inputs/grep1.dat:3696:    }
../inputs/grep1.dat:3697:#endif /* DEBUG */
../inputs/grep1.dat:3698:
../inputs/grep1.dat:3699:  return REG_NOERROR;
../inputs/grep1.dat:3700:} /* regex_compile */
../inputs/grep1.dat:3701:
../inputs/grep1.dat:3702:/* Subroutines for `regex_compile'.  */
../inputs/grep1.dat:3703:
../inputs/grep1.dat:3704:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
../inputs/grep1.dat:3705:
../inputs/grep1.dat:3706:static void
../inputs/grep1.dat:3707:store_op1 (op, loc, arg)
../inputs/grep1.dat:3708:    re_opcode_t op;
../inputs/grep1.dat:3709:    unsigned char *loc;
../inputs/grep1.dat:3710:    int arg;
../inputs/grep1.dat:3711:{
../inputs/grep1.dat:3712:  *loc = (unsigned char) op;
../inputs/grep1.dat:3713:  STORE_NUMBER (loc + 1, arg);
../inputs/grep1.dat:3714:}
../inputs/grep1.dat:3715:
../inputs/grep1.dat:3716:
../inputs/grep1.dat:3717:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
../inputs/grep1.dat:3718:
../inputs/grep1.dat:3719:static void
../inputs/grep1.dat:3720:store_op2 (op, loc, arg1, arg2)
../inputs/grep1.dat:3721:    re_opcode_t op;
../inputs/grep1.dat:3722:    unsigned char *loc;
../inputs/grep1.dat:3723:    int arg1, arg2;
../inputs/grep1.dat:3724:{
../inputs/grep1.dat:3725:  *loc = (unsigned char) op;
../inputs/grep1.dat:3726:  STORE_NUMBER (loc + 1, arg1);
../inputs/grep1.dat:3727:  STORE_NUMBER (loc + 3, arg2);
../inputs/grep1.dat:3728:}
../inputs/grep1.dat:3729:
../inputs/grep1.dat:3730:
../inputs/grep1.dat:3731:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
../inputs/grep1.dat:3732:   for OP followed by two-byte integer parameter ARG.  */
../inputs/grep1.dat:3733:
../inputs/grep1.dat:3734:static void
../inputs/grep1.dat:3735:insert_op1 (op, loc, arg, end)
../inputs/grep1.dat:3736:    re_opcode_t op;
../inputs/grep1.dat:3737:    unsigned char *loc;
../inputs/grep1.dat:3738:    int arg;
../inputs/grep1.dat:3739:    unsigned char *end;    
../inputs/grep1.dat:3740:{
../inputs/grep1.dat:3741:  register unsigned char *pfrom = end;
../inputs/grep1.dat:3742:  register unsigned char *pto = end + 3;
../inputs/grep1.dat:3743:
../inputs/grep1.dat:3744:  while (pfrom != loc)
../inputs/grep1.dat:3745:    *--pto = *--pfrom;
../inputs/grep1.dat:3746:    
../inputs/grep1.dat:3747:  store_op1 (op, loc, arg);
../inputs/grep1.dat:3748:}
../inputs/grep1.dat:3749:
../inputs/grep1.dat:3750:
../inputs/grep1.dat:3751:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
../inputs/grep1.dat:3752:
../inputs/grep1.dat:3753:static void
../inputs/grep1.dat:3754:insert_op2 (op, loc, arg1, arg2, end)
../inputs/grep1.dat:3755:    re_opcode_t op;
../inputs/grep1.dat:3756:    unsigned char *loc;
../inputs/grep1.dat:3757:    int arg1, arg2;
../inputs/grep1.dat:3758:    unsigned char *end;    
../inputs/grep1.dat:3759:{
../inputs/grep1.dat:3760:  register unsigned char *pfrom = end;
../inputs/grep1.dat:3761:  register unsigned char *pto = end + 5;
../inputs/grep1.dat:3762:
../inputs/grep1.dat:3763:  while (pfrom != loc)
../inputs/grep1.dat:3764:    *--pto = *--pfrom;
../inputs/grep1.dat:3765:    
../inputs/grep1.dat:3766:  store_op2 (op, loc, arg1, arg2);
../inputs/grep1.dat:3767:}
../inputs/grep1.dat:3768:
../inputs/grep1.dat:3769:
../inputs/grep1.dat:3770:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
../inputs/grep1.dat:3771:   after an alternative or a begin-subexpression.  We assume there is at
../inputs/grep1.dat:3772:   least one character before the ^.  */
../inputs/grep1.dat:3773:
../inputs/grep1.dat:3774:static boolean
../inputs/grep1.dat:3775:at_begline_loc_p (pattern, p, syntax)
../inputs/grep1.dat:3776:    const char *pattern, *p;
../inputs/grep1.dat:3777:    reg_syntax_t syntax;
../inputs/grep1.dat:3778:{
../inputs/grep1.dat:3779:  const char *prev = p - 2;
../inputs/grep1.dat:3780:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
../inputs/grep1.dat:3781:  
../inputs/grep1.dat:3782:  return
../inputs/grep1.dat:3783:       /* After a subexpression?  */
../inputs/grep1.dat:3784:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
../inputs/grep1.dat:3785:       /* After an alternative?  */
../inputs/grep1.dat:3786:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
../inputs/grep1.dat:3787:}
../inputs/grep1.dat:3788:
../inputs/grep1.dat:3789:
../inputs/grep1.dat:3790:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
../inputs/grep1.dat:3791:   at least one character after the $, i.e., `P < PEND'.  */
../inputs/grep1.dat:3792:
../inputs/grep1.dat:3793:static boolean
../inputs/grep1.dat:3794:at_endline_loc_p (p, pend, syntax)
../inputs/grep1.dat:3795:    const char *p, *pend;
../inputs/grep1.dat:3796:    int syntax;
../inputs/grep1.dat:3797:{
../inputs/grep1.dat:3798:  const char *next = p;
../inputs/grep1.dat:3799:  boolean next_backslash = *next == '\\';
../inputs/grep1.dat:3800:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
../inputs/grep1.dat:3801:  
../inputs/grep1.dat:3802:  return
../inputs/grep1.dat:3803:       /* Before a subexpression?  */
../inputs/grep1.dat:3804:       (syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep1.dat:3805:        : next_backslash && next_next && *next_next == ')')
../inputs/grep1.dat:3806:       /* Before an alternative?  */
../inputs/grep1.dat:3807:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
../inputs/grep1.dat:3808:        : next_backslash && next_next && *next_next == '|');
../inputs/grep1.dat:3809:}
../inputs/grep1.dat:3810:
../inputs/grep1.dat:3811:
../inputs/grep1.dat:3812:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
../inputs/grep1.dat:3813:   false if it's not.  */
../inputs/grep1.dat:3814:
../inputs/grep1.dat:3815:static boolean
../inputs/grep1.dat:3816:group_in_compile_stack (compile_stack, regnum)
../inputs/grep1.dat:3817:    compile_stack_type compile_stack;
../inputs/grep1.dat:3818:    regnum_t regnum;
../inputs/grep1.dat:3819:{
../inputs/grep1.dat:3820:  int this_element;
../inputs/grep1.dat:3821:
../inputs/grep1.dat:3822:  for (this_element = compile_stack.avail - 1;  
../inputs/grep1.dat:3823:       this_element >= 0; 
../inputs/grep1.dat:3824:       this_element--)
../inputs/grep1.dat:3825:    if (compile_stack.stack[this_element].regnum == regnum)
../inputs/grep1.dat:3826:      return true;
../inputs/grep1.dat:3827:
../inputs/grep1.dat:3828:  return false;
../inputs/grep1.dat:3829:}
../inputs/grep1.dat:3830:
../inputs/grep1.dat:3831:
../inputs/grep1.dat:3832:/* Read the ending character of a range (in a bracket expression) from the
../inputs/grep1.dat:3833:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
../inputs/grep1.dat:3834:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
../inputs/grep1.dat:3835:   Then we set the translation of all bits between the starting and
../inputs/grep1.dat:3836:   ending characters (inclusive) in the compiled pattern B.
../inputs/grep1.dat:3837:   
../inputs/grep1.dat:3838:   Return an error code.
../inputs/grep1.dat:3839:   
../inputs/grep1.dat:3840:   We use these short variable names so we can use the same macros as
../inputs/grep1.dat:3841:   `regex_compile' itself.  */
../inputs/grep1.dat:3842:
../inputs/grep1.dat:3843:static reg_errcode_t
../inputs/grep1.dat:3844:compile_range (p_ptr, pend, translate, syntax, b)
../inputs/grep1.dat:3845:    const char **p_ptr, *pend;
../inputs/grep1.dat:3846:    char *translate;
../inputs/grep1.dat:3847:    reg_syntax_t syntax;
../inputs/grep1.dat:3848:    unsigned char *b;
../inputs/grep1.dat:3849:{
../inputs/grep1.dat:3850:  unsigned this_char;
../inputs/grep1.dat:3851:
../inputs/grep1.dat:3852:  const char *p = *p_ptr;
../inputs/grep1.dat:3853:  int range_start, range_end;
../inputs/grep1.dat:3854:  
../inputs/grep1.dat:3855:  if (p == pend)
../inputs/grep1.dat:3856:    return REG_ERANGE;
../inputs/grep1.dat:3857:
../inputs/grep1.dat:3858:  /* Even though the pattern is a signed `char *', we need to fetch
../inputs/grep1.dat:3859:     with unsigned char *'s; if the high bit of the pattern character
../inputs/grep1.dat:3860:     is set, the range endpoints will be negative if we fetch using a
../inputs/grep1.dat:3861:     signed char *.
../inputs/grep1.dat:3862:
../inputs/grep1.dat:3863:     We also want to fetch the endpoints without translating them; the 
../inputs/grep1.dat:3864:     appropriate translation is done in the bit-setting loop below.  */
../inputs/grep1.dat:3865:  range_start = ((unsigned char *) p)[-2];
../inputs/grep1.dat:3866:  range_end   = ((unsigned char *) p)[0];
../inputs/grep1.dat:3867:
../inputs/grep1.dat:3868:  /* Have to increment the pointer into the pattern string, so the
../inputs/grep1.dat:3869:     caller isn't still at the ending character.  */
../inputs/grep1.dat:3870:  (*p_ptr)++;
../inputs/grep1.dat:3871:
../inputs/grep1.dat:3872:  /* If the start is after the end, the range is empty.  */
../inputs/grep1.dat:3873:  if (range_start > range_end)
../inputs/grep1.dat:3874:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
../inputs/grep1.dat:3875:
../inputs/grep1.dat:3876:  /* Here we see why `this_char' has to be larger than an `unsigned
../inputs/grep1.dat:3877:     char' -- the range is inclusive, so if `range_end' == 0xff
../inputs/grep1.dat:3878:     (assuming 8-bit characters), we would otherwise go into an infinite
../inputs/grep1.dat:3879:     loop, since all characters <= 0xff.  */
../inputs/grep1.dat:3880:  for (this_char = range_start; this_char <= range_end; this_char++)
../inputs/grep1.dat:3881:    {
../inputs/grep1.dat:3882:      SET_LIST_BIT (TRANSLATE (this_char));
../inputs/grep1.dat:3883:    }
../inputs/grep1.dat:3884:  
../inputs/grep1.dat:3885:  return REG_NOERROR;
../inputs/grep1.dat:3886:}
../inputs/grep1.dat:3887:
../inputs/grep1.dat:3888:/* Failure stack declarations and macros; both re_compile_fastmap and
../inputs/grep1.dat:3889:   re_match_2 use a failure stack.  These have to be macros because of
../inputs/grep1.dat:3890:   REGEX_ALLOCATE.  */
../inputs/grep1.dat:3891:   
../inputs/grep1.dat:3892:
../inputs/grep1.dat:3893:/* Number of failure points for which to initially allocate space
../inputs/grep1.dat:3894:   when matching.  If this number is exceeded, we allocate more
../inputs/grep1.dat:3895:   space, so it is not a hard limit.  */
../inputs/grep1.dat:3896:#ifndef INIT_FAILURE_ALLOC
../inputs/grep1.dat:3897:#define INIT_FAILURE_ALLOC 5
../inputs/grep1.dat:3898:#endif
../inputs/grep1.dat:3899:
../inputs/grep1.dat:3900:/* Roughly the maximum number of failure points on the stack.  Would be
../inputs/grep1.dat:3901:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
../inputs/grep1.dat:3902:   This is a variable only so users of regex can assign to it; we never
../inputs/grep1.dat:3903:   change it ourselves.  */
../inputs/grep1.dat:3904:int re_max_failures = 2000;
../inputs/grep1.dat:3905:
../inputs/grep1.dat:3906:typedef const unsigned char *fail_stack_elt_t;
../inputs/grep1.dat:3907:
../inputs/grep1.dat:3908:typedef struct
../inputs/grep1.dat:3909:{
../inputs/grep1.dat:3910:  fail_stack_elt_t *stack;
../inputs/grep1.dat:3911:  unsigned size;
../inputs/grep1.dat:3912:  unsigned avail;			/* Offset of next open position.  */
../inputs/grep1.dat:3913:} fail_stack_type;
../inputs/grep1.dat:3914:
../inputs/grep1.dat:3915:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
../inputs/grep1.dat:3916:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
../inputs/grep1.dat:3917:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
../inputs/grep1.dat:3918:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
../inputs/grep1.dat:3919:
../inputs/grep1.dat:3920:
../inputs/grep1.dat:3921:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
../inputs/grep1.dat:3922:
../inputs/grep1.dat:3923:#define INIT_FAIL_STACK()						\
../inputs/grep1.dat:3924:  do {									\
../inputs/grep1.dat:3925:    fail_stack.stack = (fail_stack_elt_t *)				\
../inputs/grep1.dat:3926:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
../inputs/grep1.dat:3927:									\
../inputs/grep1.dat:3928:    if (fail_stack.stack == NULL)					\
../inputs/grep1.dat:3929:      return -2;							\
../inputs/grep1.dat:3930:									\
../inputs/grep1.dat:3931:    fail_stack.size = INIT_FAILURE_ALLOC;				\
../inputs/grep1.dat:3932:    fail_stack.avail = 0;						\
../inputs/grep1.dat:3933:  } while (0)
../inputs/grep1.dat:3934:
../inputs/grep1.dat:3935:
../inputs/grep1.dat:3936:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
../inputs/grep1.dat:3937:
../inputs/grep1.dat:3938:   Return 1 if succeeds, and 0 if either ran out of memory
../inputs/grep1.dat:3939:   allocating space for it or it was already too large.  
../inputs/grep1.dat:3940:   
../inputs/grep1.dat:3941:   REGEX_REALLOCATE requires `destination' be declared.   */
../inputs/grep1.dat:3942:
../inputs/grep1.dat:3943:#define DOUBLE_FAIL_STACK(fail_stack)					\
../inputs/grep1.dat:3944:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
../inputs/grep1.dat:3945:   ? 0									\
../inputs/grep1.dat:3946:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
../inputs/grep1.dat:3947:        REGEX_REALLOCATE ((fail_stack).stack, 				\
../inputs/grep1.dat:3948:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
../inputs/grep1.dat:3949:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
../inputs/grep1.dat:3950:									\
../inputs/grep1.dat:3951:      (fail_stack).stack == NULL					\
../inputs/grep1.dat:3952:      ? 0								\
../inputs/grep1.dat:3953:      : ((fail_stack).size <<= 1, 					\
../inputs/grep1.dat:3954:         1)))
../inputs/grep1.dat:3955:
../inputs/grep1.dat:3956:
../inputs/grep1.dat:3957:/* Push PATTERN_OP on FAIL_STACK. 
../inputs/grep1.dat:3958:
../inputs/grep1.dat:3959:   Return 1 if was able to do so and 0 if ran out of memory allocating
../inputs/grep1.dat:3960:   space to do so.  */
../inputs/grep1.dat:3961:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
../inputs/grep1.dat:3962:  ((FAIL_STACK_FULL ()							\
../inputs/grep1.dat:3963:    && !DOUBLE_FAIL_STACK (fail_stack))					\
../inputs/grep1.dat:3964:    ? 0									\
../inputs/grep1.dat:3965:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
../inputs/grep1.dat:3966:       1))
../inputs/grep1.dat:3967:
../inputs/grep1.dat:3968:/* This pushes an item onto the failure stack.  Must be a four-byte
../inputs/grep1.dat:3969:   value.  Assumes the variable `fail_stack'.  Probably should only
../inputs/grep1.dat:3970:   be called from within `PUSH_FAILURE_POINT'.  */
../inputs/grep1.dat:3971:#define PUSH_FAILURE_ITEM(item)						\
../inputs/grep1.dat:3972:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
../inputs/grep1.dat:3973:
../inputs/grep1.dat:3974:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
../inputs/grep1.dat:3975:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
../inputs/grep1.dat:3976:
../inputs/grep1.dat:3977:/* Used to omit pushing failure point id's when we're not debugging.  */
../inputs/grep1.dat:3978:#ifdef DEBUG
../inputs/grep1.dat:3979:#define DEBUG_PUSH PUSH_FAILURE_ITEM
../inputs/grep1.dat:3980:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
../inputs/grep1.dat:3981:#else
../inputs/grep1.dat:3982:#define DEBUG_PUSH(item)
../inputs/grep1.dat:3983:#define DEBUG_POP(item_addr)
../inputs/grep1.dat:3984:#endif
../inputs/grep1.dat:3985:
../inputs/grep1.dat:3986:
../inputs/grep1.dat:3987:/* Push the information about the state we will need
../inputs/grep1.dat:3988:   if we ever fail back to it.  
../inputs/grep1.dat:3989:   
../inputs/grep1.dat:3990:   Requires variables fail_stack, regstart, regend, reg_info, and
../inputs/grep1.dat:3991:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
../inputs/grep1.dat:3992:   declared.
../inputs/grep1.dat:3993:   
../inputs/grep1.dat:3994:   Does `return FAILURE_CODE' if runs out of memory.  */
../inputs/grep1.dat:3995:
../inputs/grep1.dat:3996:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
../inputs/grep1.dat:3997:  do {									\
../inputs/grep1.dat:3998:    char *destination;							\
../inputs/grep1.dat:3999:    /* Must be int, so when we don't save any registers, the arithmetic	\
../inputs/grep1.dat:4000:       of 0 + -1 isn't done as unsigned.  */				\
../inputs/grep1.dat:4001:    int this_reg;							\
../inputs/grep1.dat:4002:    									\
../inputs/grep1.dat:4003:    DEBUG_STATEMENT (failure_id++);					\
../inputs/grep1.dat:4004:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
../inputs/grep1.dat:4005:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
../inputs/grep1.dat:4006:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
../inputs/grep1.dat:4007:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
../inputs/grep1.dat:4008:									\
../inputs/grep1.dat:4009:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
../inputs/grep1.dat:4010:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
../inputs/grep1.dat:4011:									\
../inputs/grep1.dat:4012:    /* Ensure we have enough space allocated for what we will push.  */	\
../inputs/grep1.dat:4013:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
../inputs/grep1.dat:4014:      {									\
../inputs/grep1.dat:4015:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
../inputs/grep1.dat:4016:          return failure_code;						\
../inputs/grep1.dat:4017:									\
../inputs/grep1.dat:4018:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
../inputs/grep1.dat:4019:		       (fail_stack).size);				\
../inputs/grep1.dat:4020:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
../inputs/grep1.dat:4021:      }									\
../inputs/grep1.dat:4022:									\
../inputs/grep1.dat:4023:    /* Push the info, starting with the registers.  */			\
../inputs/grep1.dat:4024:    DEBUG_PRINT1 ("\n");						\
../inputs/grep1.dat:4025:									\
../inputs/grep1.dat:4026:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
../inputs/grep1.dat:4027:         this_reg++)							\
../inputs/grep1.dat:4028:      {									\
../inputs/grep1.dat:4029:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
../inputs/grep1.dat:4030:        DEBUG_STATEMENT (num_regs_pushed++);				\
../inputs/grep1.dat:4031:									\
../inputs/grep1.dat:4032:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
../inputs/grep1.dat:4033:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
../inputs/grep1.dat:4034:                                                                        \
../inputs/grep1.dat:4035:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
../inputs/grep1.dat:4036:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
../inputs/grep1.dat:4037:									\
../inputs/grep1.dat:4038:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
../inputs/grep1.dat:4039:        DEBUG_PRINT2 (" match_null=%d",					\
../inputs/grep1.dat:4040:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
../inputs/grep1.dat:4041:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
../inputs/grep1.dat:4042:        DEBUG_PRINT2 (" matched_something=%d",				\
../inputs/grep1.dat:4043:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
../inputs/grep1.dat:4044:        DEBUG_PRINT2 (" ever_matched=%d",				\
../inputs/grep1.dat:4045:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
../inputs/grep1.dat:4046:	DEBUG_PRINT1 ("\n");						\
../inputs/grep1.dat:4047:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
../inputs/grep1.dat:4048:      }									\
../inputs/grep1.dat:4049:									\
../inputs/grep1.dat:4050:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
../inputs/grep1.dat:4051:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
../inputs/grep1.dat:4052:									\
../inputs/grep1.dat:4053:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
../inputs/grep1.dat:4054:    PUSH_FAILURE_ITEM (highest_active_reg);				\
../inputs/grep1.dat:4055:									\
../inputs/grep1.dat:4056:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
../inputs/grep1.dat:4057:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
../inputs/grep1.dat:4058:    PUSH_FAILURE_ITEM (pattern_place);					\
../inputs/grep1.dat:4059:									\
../inputs/grep1.dat:4060:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
../inputs/grep1.dat:4061:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
../inputs/grep1.dat:4062:				 size2);				\
../inputs/grep1.dat:4063:    DEBUG_PRINT1 ("'\n");						\
../inputs/grep1.dat:4064:    PUSH_FAILURE_ITEM (string_place);					\
../inputs/grep1.dat:4065:									\
../inputs/grep1.dat:4066:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
../inputs/grep1.dat:4067:    DEBUG_PUSH (failure_id);						\
../inputs/grep1.dat:4068:  } while (0)
../inputs/grep1.dat:4069:
../inputs/grep1.dat:4070:/* This is the number of items that are pushed and popped on the stack
../inputs/grep1.dat:4071:   for each register.  */
../inputs/grep1.dat:4072:#define NUM_REG_ITEMS  3
../inputs/grep1.dat:4073:
../inputs/grep1.dat:4074:/* Individual items aside from the registers.  */
../inputs/grep1.dat:4075:#ifdef DEBUG
../inputs/grep1.dat:4077:#else
../inputs/grep1.dat:4078:#define NUM_NONREG_ITEMS 4
../inputs/grep1.dat:4079:#endif
../inputs/grep1.dat:4080:
../inputs/grep1.dat:4081:/* We push at most this many items on the stack.  */
../inputs/grep1.dat:4082:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
../inputs/grep1.dat:4083:
../inputs/grep1.dat:4084:/* We actually push this many items.  */
../inputs/grep1.dat:4085:#define NUM_FAILURE_ITEMS						\
../inputs/grep1.dat:4086:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
../inputs/grep1.dat:4087:    + NUM_NONREG_ITEMS)
../inputs/grep1.dat:4088:
../inputs/grep1.dat:4089:/* How many items can still be added to the stack without overflowing it.  */
../inputs/grep1.dat:4090:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
../inputs/grep1.dat:4091:
../inputs/grep1.dat:4092:
../inputs/grep1.dat:4093:/* Pops what PUSH_FAIL_STACK pushes.
../inputs/grep1.dat:4094:
../inputs/grep1.dat:4095:   We restore into the parameters, all of which should be lvalues:
../inputs/grep1.dat:4096:     STR -- the saved data position.
../inputs/grep1.dat:4097:     PAT -- the saved pattern position.
../inputs/grep1.dat:4098:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
../inputs/grep1.dat:4099:     REGSTART, REGEND -- arrays of string positions.
../inputs/grep1.dat:4100:     REG_INFO -- array of information about each subexpression.
../inputs/grep1.dat:4101:   
../inputs/grep1.dat:4102:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
../inputs/grep1.dat:4103:   `pend', `string1', `size1', `string2', and `size2'.  */
../inputs/grep1.dat:4104:
../inputs/grep1.dat:4105:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
../inputs/grep1.dat:4106:{									\
../inputs/grep1.dat:4107:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
../inputs/grep1.dat:4108:  int this_reg;								\
../inputs/grep1.dat:4109:  const unsigned char *string_temp;					\
../inputs/grep1.dat:4110:									\
../inputs/grep1.dat:4111:  assert (!FAIL_STACK_EMPTY ());					\
../inputs/grep1.dat:4112:									\
../inputs/grep1.dat:4113:  /* Remove failure points and point to how many regs pushed.  */	\
../inputs/grep1.dat:4114:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
../inputs/grep1.dat:4115:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
../inputs/grep1.dat:4116:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
../inputs/grep1.dat:4117:									\
../inputs/grep1.dat:4118:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
../inputs/grep1.dat:4119:									\
../inputs/grep1.dat:4120:  DEBUG_POP (&failure_id);						\
../inputs/grep1.dat:4121:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
../inputs/grep1.dat:4122:									\
../inputs/grep1.dat:4123:  /* If the saved string location is NULL, it came from an		\
../inputs/grep1.dat:4124:     on_failure_keep_string_jump opcode, and we want to throw away the	\
../inputs/grep1.dat:4125:     saved NULL, thus retaining our current position in the string.  */	\
../inputs/grep1.dat:4126:  string_temp = POP_FAILURE_ITEM ();					\
../inputs/grep1.dat:4127:  if (string_temp != NULL)						\
../inputs/grep1.dat:4128:    str = (const char *) string_temp;					\
../inputs/grep1.dat:4129:									\
../inputs/grep1.dat:4130:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
../inputs/grep1.dat:4131:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
../inputs/grep1.dat:4132:  DEBUG_PRINT1 ("'\n");							\
../inputs/grep1.dat:4133:									\
../inputs/grep1.dat:4134:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:4135:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
../inputs/grep1.dat:4136:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
../inputs/grep1.dat:4137:									\
../inputs/grep1.dat:4138:  /* Restore register info.  */						\
../inputs/grep1.dat:4139:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:4140:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
../inputs/grep1.dat:4141:									\
../inputs/grep1.dat:4142:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:4143:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
../inputs/grep1.dat:4144:									\
../inputs/grep1.dat:4145:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
../inputs/grep1.dat:4146:    {									\
../inputs/grep1.dat:4147:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
../inputs/grep1.dat:4148:									\
../inputs/grep1.dat:4149:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
../inputs/grep1.dat:4150:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
../inputs/grep1.dat:4151:									\
../inputs/grep1.dat:4152:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
../inputs/grep1.dat:4153:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
../inputs/grep1.dat:4154:									\
../inputs/grep1.dat:4155:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
../inputs/grep1.dat:4156:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
../inputs/grep1.dat:4157:    }									\
../inputs/grep1.dat:4158:									\
../inputs/grep1.dat:4159:  DEBUG_STATEMENT (nfailure_points_popped++);				\
../inputs/grep1.dat:4160:} /* POP_FAILURE_POINT */
../inputs/grep1.dat:4161:
../inputs/grep1.dat:4162:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
../inputs/grep1.dat:4163:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
../inputs/grep1.dat:4164:   characters can start a string that matches the pattern.  This fastmap
../inputs/grep1.dat:4165:   is used by re_search to skip quickly over impossible starting points.
../inputs/grep1.dat:4166:
../inputs/grep1.dat:4167:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
../inputs/grep1.dat:4168:   area as BUFP->fastmap.
../inputs/grep1.dat:4169:   
../inputs/grep1.dat:4170:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
../inputs/grep1.dat:4171:   the pattern buffer.
../inputs/grep1.dat:4172:
../inputs/grep1.dat:4173:   Returns 0 if we succeed, -2 if an internal error.   */
../inputs/grep1.dat:4174:
../inputs/grep1.dat:4175:int
../inputs/grep1.dat:4176:re_compile_fastmap (bufp)
../inputs/grep1.dat:4177:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4178:{
../inputs/grep1.dat:4179:  int j, k;
../inputs/grep1.dat:4180:  fail_stack_type fail_stack;
../inputs/grep1.dat:4181:#ifndef REGEX_MALLOC
../inputs/grep1.dat:4182:  char *destination;
../inputs/grep1.dat:4183:#endif
../inputs/grep1.dat:4184:  /* We don't push any register information onto the failure stack.  */
../inputs/grep1.dat:4185:  unsigned num_regs = 0;
../inputs/grep1.dat:4186:  
../inputs/grep1.dat:4187:  register char *fastmap = bufp->fastmap;
../inputs/grep1.dat:4188:  unsigned char *pattern = bufp->buffer;
../inputs/grep1.dat:4189:  unsigned long size = bufp->used;
../inputs/grep1.dat:4190:  const unsigned char *p = pattern;
../inputs/grep1.dat:4191:  register unsigned char *pend = pattern + size;
../inputs/grep1.dat:4192:
../inputs/grep1.dat:4193:  /* Assume that each path through the pattern can be null until
../inputs/grep1.dat:4194:     proven otherwise.  We set this false at the bottom of switch
../inputs/grep1.dat:4195:     statement, to which we get only if a particular path doesn't
../inputs/grep1.dat:4196:     match the empty string.  */
../inputs/grep1.dat:4197:  boolean path_can_be_null = true;
../inputs/grep1.dat:4198:
../inputs/grep1.dat:4199:  /* We aren't doing a `succeed_n' to begin with.  */
../inputs/grep1.dat:4200:  boolean succeed_n_p = false;
../inputs/grep1.dat:4201:
../inputs/grep1.dat:4202:  assert (fastmap != NULL && p != NULL);
../inputs/grep1.dat:4203:  
../inputs/grep1.dat:4204:  INIT_FAIL_STACK ();
../inputs/grep1.dat:4205:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
../inputs/grep1.dat:4206:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
../inputs/grep1.dat:4207:  bufp->can_be_null = 0;
../inputs/grep1.dat:4208:      
../inputs/grep1.dat:4209:  while (p != pend || !FAIL_STACK_EMPTY ())
../inputs/grep1.dat:4210:    {
../inputs/grep1.dat:4211:      if (p == pend)
../inputs/grep1.dat:4212:        {
../inputs/grep1.dat:4213:          bufp->can_be_null |= path_can_be_null;
../inputs/grep1.dat:4214:          
../inputs/grep1.dat:4215:          /* Reset for next path.  */
../inputs/grep1.dat:4216:          path_can_be_null = true;
../inputs/grep1.dat:4217:          
../inputs/grep1.dat:4218:          p = fail_stack.stack[--fail_stack.avail];
../inputs/grep1.dat:4219:	}
../inputs/grep1.dat:4220:
../inputs/grep1.dat:4221:      /* We should never be about to go beyond the end of the pattern.  */
../inputs/grep1.dat:4222:      assert (p < pend);
../inputs/grep1.dat:4223:      
../inputs/grep1.dat:4224:#ifdef SWITCH_ENUM_BUG
../inputs/grep1.dat:4225:      switch ((int) ((re_opcode_t) *p++))
../inputs/grep1.dat:4226:#else
../inputs/grep1.dat:4227:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:4228:#endif
../inputs/grep1.dat:4229:	{
../inputs/grep1.dat:4230:
../inputs/grep1.dat:4231:        /* I guess the idea here is to simply not bother with a fastmap
../inputs/grep1.dat:4232:           if a backreference is used, since it's too hard to figure out
../inputs/grep1.dat:4233:           the fastmap for the corresponding group.  Setting
../inputs/grep1.dat:4234:           `can_be_null' stops `re_search_2' from using the fastmap, so
../inputs/grep1.dat:4235:           that is all we do.  */
../inputs/grep1.dat:4236:	case duplicate:
../inputs/grep1.dat:4237:	  bufp->can_be_null = 1;
../inputs/grep1.dat:4238:          return 0;
../inputs/grep1.dat:4239:
../inputs/grep1.dat:4240:
../inputs/grep1.dat:4241:      /* Following are the cases which match a character.  These end
../inputs/grep1.dat:4242:         with `break'.  */
../inputs/grep1.dat:4243:
../inputs/grep1.dat:4244:	case exactn:
../inputs/grep1.dat:4245:          fastmap[p[1]] = 1;
../inputs/grep1.dat:4246:	  break;
../inputs/grep1.dat:4247:
../inputs/grep1.dat:4248:
../inputs/grep1.dat:4249:        case charset:
../inputs/grep1.dat:4250:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
../inputs/grep1.dat:4251:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
../inputs/grep1.dat:4252:              fastmap[j] = 1;
../inputs/grep1.dat:4253:	  break;
../inputs/grep1.dat:4254:
../inputs/grep1.dat:4255:
../inputs/grep1.dat:4256:	case charset_not:
../inputs/grep1.dat:4257:	  /* Chars beyond end of map must be allowed.  */
../inputs/grep1.dat:4258:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4259:            fastmap[j] = 1;
../inputs/grep1.dat:4260:
../inputs/grep1.dat:4261:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
../inputs/grep1.dat:4262:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
../inputs/grep1.dat:4263:              fastmap[j] = 1;
../inputs/grep1.dat:4264:          break;
../inputs/grep1.dat:4265:
../inputs/grep1.dat:4266:
../inputs/grep1.dat:4267:	case wordchar:
../inputs/grep1.dat:4268:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4269:	    if (SYNTAX (j) == Sword)
../inputs/grep1.dat:4270:	      fastmap[j] = 1;
../inputs/grep1.dat:4271:	  break;
../inputs/grep1.dat:4272:
../inputs/grep1.dat:4273:
../inputs/grep1.dat:4274:	case notwordchar:
../inputs/grep1.dat:4275:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4276:	    if (SYNTAX (j) != Sword)
../inputs/grep1.dat:4277:	      fastmap[j] = 1;
../inputs/grep1.dat:4278:	  break;
../inputs/grep1.dat:4279:
../inputs/grep1.dat:4280:
../inputs/grep1.dat:4281:        case anychar:
../inputs/grep1.dat:4282:          /* `.' matches anything ...  */
../inputs/grep1.dat:4283:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4284:            fastmap[j] = 1;
../inputs/grep1.dat:4285:
../inputs/grep1.dat:4286:          /* ... except perhaps newline.  */
../inputs/grep1.dat:4287:          if (!(bufp->syntax & RE_DOT_NEWLINE))
../inputs/grep1.dat:4288:            fastmap['\n'] = 0;
../inputs/grep1.dat:4289:
../inputs/grep1.dat:4290:          /* Return if we have already set `can_be_null'; if we have,
../inputs/grep1.dat:4291:             then the fastmap is irrelevant.  Something's wrong here.  */
../inputs/grep1.dat:4292:	  else if (bufp->can_be_null)
../inputs/grep1.dat:4293:	    return 0;
../inputs/grep1.dat:4294:
../inputs/grep1.dat:4295:          /* Otherwise, have to check alternative paths.  */
../inputs/grep1.dat:4296:	  break;
../inputs/grep1.dat:4297:
../inputs/grep1.dat:4298:
../inputs/grep1.dat:4299:#ifdef emacs
../inputs/grep1.dat:4300:        case syntaxspec:
../inputs/grep1.dat:4301:	  k = *p++;
../inputs/grep1.dat:4302:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4303:	    if (SYNTAX (j) == (enum syntaxcode) k)
../inputs/grep1.dat:4304:	      fastmap[j] = 1;
../inputs/grep1.dat:4305:	  break;
../inputs/grep1.dat:4306:
../inputs/grep1.dat:4307:
../inputs/grep1.dat:4308:	case notsyntaxspec:
../inputs/grep1.dat:4309:	  k = *p++;
../inputs/grep1.dat:4310:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:4311:	    if (SYNTAX (j) != (enum syntaxcode) k)
../inputs/grep1.dat:4312:	      fastmap[j] = 1;
../inputs/grep1.dat:4313:	  break;
../inputs/grep1.dat:4314:
../inputs/grep1.dat:4315:
../inputs/grep1.dat:4316:      /* All cases after this match the empty string.  These end with
../inputs/grep1.dat:4317:         `continue'.  */
../inputs/grep1.dat:4318:
../inputs/grep1.dat:4319:
../inputs/grep1.dat:4320:	case before_dot:
../inputs/grep1.dat:4321:	case at_dot:
../inputs/grep1.dat:4322:	case after_dot:
../inputs/grep1.dat:4323:          continue;
../inputs/grep1.dat:4324:#endif /* not emacs */
../inputs/grep1.dat:4325:
../inputs/grep1.dat:4326:
../inputs/grep1.dat:4327:        case no_op:
../inputs/grep1.dat:4328:        case begline:
../inputs/grep1.dat:4329:        case endline:
../inputs/grep1.dat:4330:	case begbuf:
../inputs/grep1.dat:4331:	case endbuf:
../inputs/grep1.dat:4332:	case wordbound:
../inputs/grep1.dat:4333:	case notwordbound:
../inputs/grep1.dat:4334:	case wordbeg:
../inputs/grep1.dat:4335:	case wordend:
../inputs/grep1.dat:4336:        case push_dummy_failure:
../inputs/grep1.dat:4337:          continue;
../inputs/grep1.dat:4338:
../inputs/grep1.dat:4339:
../inputs/grep1.dat:4340:	case jump_n:
../inputs/grep1.dat:4341:        case pop_failure_jump:
../inputs/grep1.dat:4342:	case maybe_pop_jump:
../inputs/grep1.dat:4343:	case jump:
../inputs/grep1.dat:4344:        case jump_past_alt:
../inputs/grep1.dat:4345:	case dummy_failure_jump:
../inputs/grep1.dat:4346:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:4347:	  p += j;	
../inputs/grep1.dat:4348:	  if (j > 0)
../inputs/grep1.dat:4349:	    continue;
../inputs/grep1.dat:4350:            
../inputs/grep1.dat:4351:          /* Jump backward implies we just went through the body of a
../inputs/grep1.dat:4352:             loop and matched nothing.  Opcode jumped to should be
../inputs/grep1.dat:4353:             `on_failure_jump' or `succeed_n'.  Just treat it like an
../inputs/grep1.dat:4354:             ordinary jump.  For a * loop, it has pushed its failure
../inputs/grep1.dat:4355:             point already; if so, discard that as redundant.  */
../inputs/grep1.dat:4356:          if ((re_opcode_t) *p != on_failure_jump
../inputs/grep1.dat:4357:	      && (re_opcode_t) *p != succeed_n)
../inputs/grep1.dat:4358:	    continue;
../inputs/grep1.dat:4359:
../inputs/grep1.dat:4360:          p++;
../inputs/grep1.dat:4361:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:4362:          p += j;		
../inputs/grep1.dat:4363:	  
../inputs/grep1.dat:4364:          /* If what's on the stack is where we are now, pop it.  */
../inputs/grep1.dat:4365:          if (!FAIL_STACK_EMPTY () 
../inputs/grep1.dat:4366:	      && fail_stack.stack[fail_stack.avail - 1] == p)
../inputs/grep1.dat:4367:            fail_stack.avail--;
../inputs/grep1.dat:4368:
../inputs/grep1.dat:4369:          continue;
../inputs/grep1.dat:4370:
../inputs/grep1.dat:4371:
../inputs/grep1.dat:4372:        case on_failure_jump:
../inputs/grep1.dat:4373:        case on_failure_keep_string_jump:
../inputs/grep1.dat:4374:	handle_on_failure_jump:
../inputs/grep1.dat:4375:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:4376:
../inputs/grep1.dat:4377:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
../inputs/grep1.dat:4378:             end of the pattern.  We don't want to push such a point,
../inputs/grep1.dat:4379:             since when we restore it above, entering the switch will
../inputs/grep1.dat:4380:             increment `p' past the end of the pattern.  We don't need
../inputs/grep1.dat:4381:             to push such a point since we obviously won't find any more
../inputs/grep1.dat:4382:             fastmap entries beyond `pend'.  Such a pattern can match
../inputs/grep1.dat:4383:             the null string, though.  */
../inputs/grep1.dat:4384:          if (p + j < pend)
../inputs/grep1.dat:4385:            {
../inputs/grep1.dat:4386:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
../inputs/grep1.dat:4387:                return -2;
../inputs/grep1.dat:4388:            }
../inputs/grep1.dat:4389:          else
../inputs/grep1.dat:4390:            bufp->can_be_null = 1;
../inputs/grep1.dat:4391:
../inputs/grep1.dat:4392:          if (succeed_n_p)
../inputs/grep1.dat:4393:            {
../inputs/grep1.dat:4394:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
../inputs/grep1.dat:4395:              succeed_n_p = false;
../inputs/grep1.dat:4396:	    }
../inputs/grep1.dat:4397:
../inputs/grep1.dat:4398:          continue;
../inputs/grep1.dat:4399:
../inputs/grep1.dat:4400:
../inputs/grep1.dat:4401:	case succeed_n:
../inputs/grep1.dat:4402:          /* Get to the number of times to succeed.  */
../inputs/grep1.dat:4403:          p += 2;		
../inputs/grep1.dat:4404:
../inputs/grep1.dat:4405:          /* Increment p past the n for when k != 0.  */
../inputs/grep1.dat:4406:          EXTRACT_NUMBER_AND_INCR (k, p);
../inputs/grep1.dat:4407:          if (k == 0)
../inputs/grep1.dat:4408:	    {
../inputs/grep1.dat:4409:              p -= 4;
../inputs/grep1.dat:4410:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
../inputs/grep1.dat:4411:              goto handle_on_failure_jump;
../inputs/grep1.dat:4412:            }
../inputs/grep1.dat:4413:          continue;
../inputs/grep1.dat:4414:
../inputs/grep1.dat:4415:
../inputs/grep1.dat:4416:	case set_number_at:
../inputs/grep1.dat:4417:          p += 4;
../inputs/grep1.dat:4418:          continue;
../inputs/grep1.dat:4419:
../inputs/grep1.dat:4420:
../inputs/grep1.dat:4421:	case start_memory:
../inputs/grep1.dat:4422:        case stop_memory:
../inputs/grep1.dat:4423:	  p += 2;
../inputs/grep1.dat:4424:	  continue;
../inputs/grep1.dat:4425:
../inputs/grep1.dat:4426:
../inputs/grep1.dat:4427:	default:
../inputs/grep1.dat:4428:          abort (); /* We have listed all the cases.  */
../inputs/grep1.dat:4429:        } /* switch *p++ */
../inputs/grep1.dat:4430:
../inputs/grep1.dat:4431:      /* Getting here means we have found the possible starting
../inputs/grep1.dat:4432:         characters for one path of the pattern -- and that the empty
../inputs/grep1.dat:4433:         string does not match.  We need not follow this path further.
../inputs/grep1.dat:4434:         Instead, look at the next alternative (remembered on the
../inputs/grep1.dat:4435:         stack), or quit if no more.  The test at the top of the loop
../inputs/grep1.dat:4436:         does these things.  */
../inputs/grep1.dat:4437:      path_can_be_null = false;
../inputs/grep1.dat:4438:      p = pend;
../inputs/grep1.dat:4439:    } /* while p */
../inputs/grep1.dat:4440:
../inputs/grep1.dat:4441:  /* Set `can_be_null' for the last path (also the first path, if the
../inputs/grep1.dat:4442:     pattern is empty).  */
../inputs/grep1.dat:4443:  bufp->can_be_null |= path_can_be_null;
../inputs/grep1.dat:4444:  return 0;
../inputs/grep1.dat:4445:} /* re_compile_fastmap */
../inputs/grep1.dat:4446:
../inputs/grep1.dat:4447:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
../inputs/grep1.dat:4448:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
../inputs/grep1.dat:4449:   this memory for recording register information.  STARTS and ENDS
../inputs/grep1.dat:4450:   must be allocated using the malloc library routine, and must each
../inputs/grep1.dat:4451:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
../inputs/grep1.dat:4452:
../inputs/grep1.dat:4453:   If NUM_REGS == 0, then subsequent matches should allocate their own
../inputs/grep1.dat:4454:   register data.
../inputs/grep1.dat:4455:
../inputs/grep1.dat:4456:   Unless this function is called, the first search or match using
../inputs/grep1.dat:4457:   PATTERN_BUFFER will allocate its own register data, without
../inputs/grep1.dat:4458:   freeing the old data.  */
../inputs/grep1.dat:4459:
../inputs/grep1.dat:4460:void
../inputs/grep1.dat:4461:re_set_registers (bufp, regs, num_regs, starts, ends)
../inputs/grep1.dat:4462:    struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4463:    struct re_registers *regs;
../inputs/grep1.dat:4464:    unsigned num_regs;
../inputs/grep1.dat:4465:    regoff_t *starts, *ends;
../inputs/grep1.dat:4466:{
../inputs/grep1.dat:4467:  if (num_regs)
../inputs/grep1.dat:4468:    {
../inputs/grep1.dat:4469:      bufp->regs_allocated = REGS_REALLOCATE;
../inputs/grep1.dat:4470:      regs->num_regs = num_regs;
../inputs/grep1.dat:4471:      regs->start = starts;
../inputs/grep1.dat:4472:      regs->end = ends;
../inputs/grep1.dat:4473:    }
../inputs/grep1.dat:4474:  else
../inputs/grep1.dat:4475:    {
../inputs/grep1.dat:4476:      bufp->regs_allocated = REGS_UNALLOCATED;
../inputs/grep1.dat:4477:      regs->num_regs = 0;
../inputs/grep1.dat:4478:      regs->start = regs->end = (regoff_t) 0;
../inputs/grep1.dat:4479:    }
../inputs/grep1.dat:4480:}
../inputs/grep1.dat:4481:
../inputs/grep1.dat:4482:/* Searching routines.  */
../inputs/grep1.dat:4483:
../inputs/grep1.dat:4484:/* Like re_search_2, below, but only one string is specified, and
../inputs/grep1.dat:4485:   doesn't let you say where to stop matching. */
../inputs/grep1.dat:4486:
../inputs/grep1.dat:4487:int
../inputs/grep1.dat:4488:re_search (bufp, string, size, startpos, range, regs)
../inputs/grep1.dat:4489:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4490:     const char *string;
../inputs/grep1.dat:4491:     int size, startpos, range;
../inputs/grep1.dat:4492:     struct re_registers *regs;
../inputs/grep1.dat:4493:{
../inputs/grep1.dat:4494:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
../inputs/grep1.dat:4495:		      regs, size);
../inputs/grep1.dat:4496:}
../inputs/grep1.dat:4497:
../inputs/grep1.dat:4498:
../inputs/grep1.dat:4499:/* Using the compiled pattern in BUFP->buffer, first tries to match the
../inputs/grep1.dat:4500:   virtual concatenation of STRING1 and STRING2, starting first at index
../inputs/grep1.dat:4501:   STARTPOS, then at STARTPOS + 1, and so on.
../inputs/grep1.dat:4502:   
../inputs/grep1.dat:4503:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
../inputs/grep1.dat:4504:   
../inputs/grep1.dat:4505:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
../inputs/grep1.dat:4506:   only at STARTPOS; in general, the last start tried is STARTPOS +
../inputs/grep1.dat:4507:   RANGE.
../inputs/grep1.dat:4508:   
../inputs/grep1.dat:4509:   In REGS, return the indices of the virtual concatenation of STRING1
../inputs/grep1.dat:4510:   and STRING2 that matched the entire BUFP->buffer and its contained
../inputs/grep1.dat:4511:   subexpressions.
../inputs/grep1.dat:4512:   
../inputs/grep1.dat:4513:   Do not consider matching one past the index STOP in the virtual
../inputs/grep1.dat:4514:   concatenation of STRING1 and STRING2.
../inputs/grep1.dat:4515:
../inputs/grep1.dat:4516:   We return either the position in the strings at which the match was
../inputs/grep1.dat:4517:   found, -1 if no match, or -2 if error (such as failure
../inputs/grep1.dat:4518:   stack overflow).  */
../inputs/grep1.dat:4519:
../inputs/grep1.dat:4520:int
../inputs/grep1.dat:4521:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
../inputs/grep1.dat:4522:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4523:     const char *string1, *string2;
../inputs/grep1.dat:4524:     int size1, size2;
../inputs/grep1.dat:4525:     int startpos;
../inputs/grep1.dat:4526:     int range;
../inputs/grep1.dat:4527:     struct re_registers *regs;
../inputs/grep1.dat:4528:     int stop;
../inputs/grep1.dat:4529:{
../inputs/grep1.dat:4530:  int val;
../inputs/grep1.dat:4531:  register char *fastmap = bufp->fastmap;
../inputs/grep1.dat:4532:  register char *translate = bufp->translate;
../inputs/grep1.dat:4533:  int total_size = size1 + size2;
../inputs/grep1.dat:4534:  int endpos = startpos + range;
../inputs/grep1.dat:4535:
../inputs/grep1.dat:4536:  /* Check for out-of-range STARTPOS.  */
../inputs/grep1.dat:4537:  if (startpos < 0 || startpos > total_size)
../inputs/grep1.dat:4538:    return -1;
../inputs/grep1.dat:4539:    
../inputs/grep1.dat:4540:  /* Fix up RANGE if it might eventually take us outside
../inputs/grep1.dat:4541:     the virtual concatenation of STRING1 and STRING2.  */
../inputs/grep1.dat:4542:  if (endpos < -1)
../inputs/grep1.dat:4543:    range = -1 - startpos;
../inputs/grep1.dat:4544:  else if (endpos > total_size)
../inputs/grep1.dat:4545:    range = total_size - startpos;
../inputs/grep1.dat:4546:
../inputs/grep1.dat:4547:  /* If the search isn't to be a backwards one, don't waste time in a
../inputs/grep1.dat:4548:     search for a pattern that must be anchored.  */
../inputs/grep1.dat:4549:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
../inputs/grep1.dat:4550:    {
../inputs/grep1.dat:4551:      if (startpos > 0)
../inputs/grep1.dat:4552:	return -1;
../inputs/grep1.dat:4553:      else
../inputs/grep1.dat:4554:	range = 1;
../inputs/grep1.dat:4555:    }
../inputs/grep1.dat:4556:
../inputs/grep1.dat:4557:  /* Update the fastmap now if not correct already.  */
../inputs/grep1.dat:4558:  if (fastmap && !bufp->fastmap_accurate)
../inputs/grep1.dat:4559:    if (re_compile_fastmap (bufp) == -2)
../inputs/grep1.dat:4560:      return -2;
../inputs/grep1.dat:4561:  
../inputs/grep1.dat:4562:  /* Loop through the string, looking for a place to start matching.  */
../inputs/grep1.dat:4563:  for (;;)
../inputs/grep1.dat:4564:    { 
../inputs/grep1.dat:4565:      /* If a fastmap is supplied, skip quickly over characters that
../inputs/grep1.dat:4566:         cannot be the start of a match.  If the pattern can match the
../inputs/grep1.dat:4567:         null string, however, we don't need to skip characters; we want
../inputs/grep1.dat:4568:         the first null string.  */
../inputs/grep1.dat:4569:      if (fastmap && startpos < total_size && !bufp->can_be_null)
../inputs/grep1.dat:4570:	{
../inputs/grep1.dat:4571:	  if (range > 0)	/* Searching forwards.  */
../inputs/grep1.dat:4572:	    {
../inputs/grep1.dat:4573:	      register const char *d;
../inputs/grep1.dat:4574:	      register int lim = 0;
../inputs/grep1.dat:4575:	      int irange = range;
../inputs/grep1.dat:4576:
../inputs/grep1.dat:4577:              if (startpos < size1 && startpos + range >= size1)
../inputs/grep1.dat:4578:                lim = range - (size1 - startpos);
../inputs/grep1.dat:4579:
../inputs/grep1.dat:4580:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
../inputs/grep1.dat:4581:   
../inputs/grep1.dat:4582:              /* Written out as an if-else to avoid testing `translate'
../inputs/grep1.dat:4583:                 inside the loop.  */
../inputs/grep1.dat:4584:	      if (translate)
../inputs/grep1.dat:4585:                while (range > lim
../inputs/grep1.dat:4586:                       && !fastmap[(unsigned char)
../inputs/grep1.dat:4587:				   translate[(unsigned char) *d++]])
../inputs/grep1.dat:4588:                  range--;
../inputs/grep1.dat:4589:	      else
../inputs/grep1.dat:4590:                while (range > lim && !fastmap[(unsigned char) *d++])
../inputs/grep1.dat:4591:                  range--;
../inputs/grep1.dat:4592:
../inputs/grep1.dat:4593:	      startpos += irange - range;
../inputs/grep1.dat:4594:	    }
../inputs/grep1.dat:4595:	  else				/* Searching backwards.  */
../inputs/grep1.dat:4596:	    {
../inputs/grep1.dat:4597:	      register char c = (size1 == 0 || startpos >= size1
../inputs/grep1.dat:4598:                                 ? string2[startpos - size1] 
../inputs/grep1.dat:4599:                                 : string1[startpos]);
../inputs/grep1.dat:4600:
../inputs/grep1.dat:4601:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
../inputs/grep1.dat:4602:		goto advance;
../inputs/grep1.dat:4603:	    }
../inputs/grep1.dat:4604:	}
../inputs/grep1.dat:4605:
../inputs/grep1.dat:4606:      /* If can't match the null string, and that's all we have left, fail.  */
../inputs/grep1.dat:4607:      if (range >= 0 && startpos == total_size && fastmap
../inputs/grep1.dat:4608:          && !bufp->can_be_null)
../inputs/grep1.dat:4609:	return -1;
../inputs/grep1.dat:4610:
../inputs/grep1.dat:4611:      val = re_match_2 (bufp, string1, size1, string2, size2,
../inputs/grep1.dat:4612:	                startpos, regs, stop);
../inputs/grep1.dat:4613:      if (val >= 0)
../inputs/grep1.dat:4614:	return startpos;
../inputs/grep1.dat:4615:        
../inputs/grep1.dat:4616:      if (val == -2)
../inputs/grep1.dat:4617:	return -2;
../inputs/grep1.dat:4618:
../inputs/grep1.dat:4619:    advance:
../inputs/grep1.dat:4620:      if (!range) 
../inputs/grep1.dat:4621:        break;
../inputs/grep1.dat:4622:      else if (range > 0) 
../inputs/grep1.dat:4623:        {
../inputs/grep1.dat:4624:          range--; 
../inputs/grep1.dat:4625:          startpos++;
../inputs/grep1.dat:4626:        }
../inputs/grep1.dat:4627:      else
../inputs/grep1.dat:4628:        {
../inputs/grep1.dat:4629:          range++; 
../inputs/grep1.dat:4630:          startpos--;
../inputs/grep1.dat:4631:        }
../inputs/grep1.dat:4632:    }
../inputs/grep1.dat:4633:  return -1;
../inputs/grep1.dat:4634:} /* re_search_2 */
../inputs/grep1.dat:4635:
../inputs/grep1.dat:4636:/* Declarations and macros for re_match_2.  */
../inputs/grep1.dat:4637:
../inputs/grep1.dat:4638:static int bcmp_translate ();
../inputs/grep1.dat:4639:static boolean alt_match_null_string_p (),
../inputs/grep1.dat:4640:               common_op_match_null_string_p (),
../inputs/grep1.dat:4641:               group_match_null_string_p ();
../inputs/grep1.dat:4642:
../inputs/grep1.dat:4643:/* Structure for per-register (a.k.a. per-group) information.
../inputs/grep1.dat:4644:   This must not be longer than one word, because we push this value
../inputs/grep1.dat:4645:   onto the failure stack.  Other register information, such as the
../inputs/grep1.dat:4646:   starting and ending positions (which are addresses), and the list of
../inputs/grep1.dat:4647:   inner groups (which is a bits list) are maintained in separate
../inputs/grep1.dat:4648:   variables.  
../inputs/grep1.dat:4649:   
../inputs/grep1.dat:4650:   We are making a (strictly speaking) nonportable assumption here: that
../inputs/grep1.dat:4651:   the compiler will pack our bit fields into something that fits into
../inputs/grep1.dat:4652:   the type of `word', i.e., is something that fits into one item on the
../inputs/grep1.dat:4653:   failure stack.  */
../inputs/grep1.dat:4654:typedef union
../inputs/grep1.dat:4655:{
../inputs/grep1.dat:4656:  fail_stack_elt_t word;
../inputs/grep1.dat:4657:  struct
../inputs/grep1.dat:4658:  {
../inputs/grep1.dat:4659:      /* This field is one if this group can match the empty string,
../inputs/grep1.dat:4660:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
../inputs/grep1.dat:4661:#define MATCH_NULL_UNSET_VALUE 3
../inputs/grep1.dat:4662:    unsigned match_null_string_p : 2;
../inputs/grep1.dat:4663:    unsigned is_active : 1;
../inputs/grep1.dat:4664:    unsigned matched_something : 1;
../inputs/grep1.dat:4665:    unsigned ever_matched_something : 1;
../inputs/grep1.dat:4666:  } bits;
../inputs/grep1.dat:4667:} register_info_type;
../inputs/grep1.dat:4668:
../inputs/grep1.dat:4669:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
../inputs/grep1.dat:4670:#define IS_ACTIVE(R)  ((R).bits.is_active)
../inputs/grep1.dat:4671:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
../inputs/grep1.dat:4672:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
../inputs/grep1.dat:4673:
../inputs/grep1.dat:4674:
../inputs/grep1.dat:4675:/* Call this when have matched a real character; it sets `matched' flags
../inputs/grep1.dat:4676:   for the subexpressions which we are currently inside.  Also records
../inputs/grep1.dat:4677:   that those subexprs have matched.  */
../inputs/grep1.dat:4678:#define SET_REGS_MATCHED()						\
../inputs/grep1.dat:4679:  do									\
../inputs/grep1.dat:4680:    {									\
../inputs/grep1.dat:4681:      unsigned r;							\
../inputs/grep1.dat:4682:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
../inputs/grep1.dat:4683:        {								\
../inputs/grep1.dat:4684:          MATCHED_SOMETHING (reg_info[r])				\
../inputs/grep1.dat:4685:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
../inputs/grep1.dat:4686:            = 1;							\
../inputs/grep1.dat:4687:        }								\
../inputs/grep1.dat:4688:    }									\
../inputs/grep1.dat:4689:  while (0)
../inputs/grep1.dat:4690:
../inputs/grep1.dat:4691:
../inputs/grep1.dat:4692:/* This converts PTR, a pointer into one of the search strings `string1'
../inputs/grep1.dat:4693:   and `string2' into an offset from the beginning of that string.  */
../inputs/grep1.dat:4694:#define POINTER_TO_OFFSET(ptr)						\
../inputs/grep1.dat:4695:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
../inputs/grep1.dat:4696:
../inputs/grep1.dat:4697:/* Registers are set to a sentinel when they haven't yet matched.  */
../inputs/grep1.dat:4698:#define REG_UNSET_VALUE ((char *) -1)
../inputs/grep1.dat:4699:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
../inputs/grep1.dat:4700:
../inputs/grep1.dat:4701:
../inputs/grep1.dat:4702:/* Macros for dealing with the split strings in re_match_2.  */
../inputs/grep1.dat:4703:
../inputs/grep1.dat:4704:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
../inputs/grep1.dat:4705:
../inputs/grep1.dat:4706:/* Call before fetching a character with *d.  This switches over to
../inputs/grep1.dat:4707:   string2 if necessary.  */
../inputs/grep1.dat:4708:#define PREFETCH()							\
../inputs/grep1.dat:4709:  while (d == dend)						    	\
../inputs/grep1.dat:4710:    {									\
../inputs/grep1.dat:4711:      /* End of string2 => fail.  */					\
../inputs/grep1.dat:4712:      if (dend == end_match_2) 						\
../inputs/grep1.dat:4713:        goto fail;							\
../inputs/grep1.dat:4714:      /* End of string1 => advance to string2.  */ 			\
../inputs/grep1.dat:4715:      d = string2;						        \
../inputs/grep1.dat:4716:      dend = end_match_2;						\
../inputs/grep1.dat:4717:    }
../inputs/grep1.dat:4718:
../inputs/grep1.dat:4719:
../inputs/grep1.dat:4720:/* Test if at very beginning or at very end of the virtual concatenation
../inputs/grep1.dat:4721:   of `string1' and `string2'.  If only one string, it's `string2'.  */
../inputs/grep1.dat:4722:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
../inputs/grep1.dat:4723:#define AT_STRINGS_END(d) ((d) == end2)	
../inputs/grep1.dat:4724:
../inputs/grep1.dat:4725:
../inputs/grep1.dat:4726:/* Test if D points to a character which is word-constituent.  We have
../inputs/grep1.dat:4727:   two special cases to check for: if past the end of string1, look at
../inputs/grep1.dat:4728:   the first character in string2; and if before the beginning of
../inputs/grep1.dat:4729:   string2, look at the last character in string1.  */
../inputs/grep1.dat:4730:#define WORDCHAR_P(d)							\
../inputs/grep1.dat:4731:  (SYNTAX ((d) == end1 ? *string2					\
../inputs/grep1.dat:4732:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
../inputs/grep1.dat:4733:   == Sword)
../inputs/grep1.dat:4734:
../inputs/grep1.dat:4735:/* Test if the character before D and the one at D differ with respect
../inputs/grep1.dat:4736:   to being word-constituent.  */
../inputs/grep1.dat:4737:#define AT_WORD_BOUNDARY(d)						\
../inputs/grep1.dat:4738:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
../inputs/grep1.dat:4739:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
../inputs/grep1.dat:4740:
../inputs/grep1.dat:4741:
../inputs/grep1.dat:4742:/* Free everything we malloc.  */
../inputs/grep1.dat:4743:#ifdef REGEX_MALLOC
../inputs/grep1.dat:4744:#define FREE_VAR(var) if (var) free (var); var = NULL
../inputs/grep1.dat:4745:#define FREE_VARIABLES()						\
../inputs/grep1.dat:4746:  do {									\
../inputs/grep1.dat:4747:    FREE_VAR (fail_stack.stack);					\
../inputs/grep1.dat:4748:    FREE_VAR (regstart);						\
../inputs/grep1.dat:4749:    FREE_VAR (regend);							\
../inputs/grep1.dat:4750:    FREE_VAR (old_regstart);						\
../inputs/grep1.dat:4751:    FREE_VAR (old_regend);						\
../inputs/grep1.dat:4752:    FREE_VAR (best_regstart);						\
../inputs/grep1.dat:4753:    FREE_VAR (best_regend);						\
../inputs/grep1.dat:4754:    FREE_VAR (reg_info);						\
../inputs/grep1.dat:4755:    FREE_VAR (reg_dummy);						\
../inputs/grep1.dat:4756:    FREE_VAR (reg_info_dummy);						\
../inputs/grep1.dat:4757:  } while (0)
../inputs/grep1.dat:4758:#else /* not REGEX_MALLOC */
../inputs/grep1.dat:4759:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
../inputs/grep1.dat:4760:#define FREE_VARIABLES() alloca (0)
../inputs/grep1.dat:4761:#endif /* not REGEX_MALLOC */
../inputs/grep1.dat:4762:
../inputs/grep1.dat:4763:
../inputs/grep1.dat:4764:/* These values must meet several constraints.  They must not be valid
../inputs/grep1.dat:4765:   register values; since we have a limit of 255 registers (because
../inputs/grep1.dat:4766:   we use only one byte in the pattern for the register number), we can
../inputs/grep1.dat:4767:   use numbers larger than 255.  They must differ by 1, because of
../inputs/grep1.dat:4768:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
../inputs/grep1.dat:4769:   be larger than the value for the highest register, so we do not try
../inputs/grep1.dat:4770:   to actually save any registers when none are active.  */
../inputs/grep1.dat:4771:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
../inputs/grep1.dat:4772:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
../inputs/grep1.dat:4773:
../inputs/grep1.dat:4774:/* Matching routines.  */
../inputs/grep1.dat:4775:
../inputs/grep1.dat:4776:#ifndef emacs   /* Emacs never uses this.  */
../inputs/grep1.dat:4777:/* re_match is like re_match_2 except it takes only a single string.  */
../inputs/grep1.dat:4778:
../inputs/grep1.dat:4779:int
../inputs/grep1.dat:4780:re_match (bufp, string, size, pos, regs)
../inputs/grep1.dat:4781:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4782:     const char *string;
../inputs/grep1.dat:4783:     int size, pos;
../inputs/grep1.dat:4784:     struct re_registers *regs;
../inputs/grep1.dat:4785: {
../inputs/grep1.dat:4786:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
../inputs/grep1.dat:4787:}
../inputs/grep1.dat:4788:#endif /* not emacs */
../inputs/grep1.dat:4789:
../inputs/grep1.dat:4790:
../inputs/grep1.dat:4791:/* re_match_2 matches the compiled pattern in BUFP against the
../inputs/grep1.dat:4792:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
../inputs/grep1.dat:4793:   and SIZE2, respectively).  We start matching at POS, and stop
../inputs/grep1.dat:4794:   matching at STOP.
../inputs/grep1.dat:4795:   
../inputs/grep1.dat:4796:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
../inputs/grep1.dat:4797:   store offsets for the substring each group matched in REGS.  See the
../inputs/grep1.dat:4798:   documentation for exactly how many groups we fill.
../inputs/grep1.dat:4799:
../inputs/grep1.dat:4800:   We return -1 if no match, -2 if an internal error (such as the
../inputs/grep1.dat:4801:   failure stack overflowing).  Otherwise, we return the length of the
../inputs/grep1.dat:4802:   matched substring.  */
../inputs/grep1.dat:4803:
../inputs/grep1.dat:4804:int
../inputs/grep1.dat:4805:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
../inputs/grep1.dat:4806:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:4807:     const char *string1, *string2;
../inputs/grep1.dat:4808:     int size1, size2;
../inputs/grep1.dat:4809:     int pos;
../inputs/grep1.dat:4810:     struct re_registers *regs;
../inputs/grep1.dat:4811:     int stop;
../inputs/grep1.dat:4812:{
../inputs/grep1.dat:4813:  /* General temporaries.  */
../inputs/grep1.dat:4814:  int mcnt;
../inputs/grep1.dat:4815:  unsigned char *p1;
../inputs/grep1.dat:4816:
../inputs/grep1.dat:4817:  /* Just past the end of the corresponding string.  */
../inputs/grep1.dat:4818:  const char *end1, *end2;
../inputs/grep1.dat:4819:
../inputs/grep1.dat:4820:  /* Pointers into string1 and string2, just past the last characters in
../inputs/grep1.dat:4821:     each to consider matching.  */
../inputs/grep1.dat:4822:  const char *end_match_1, *end_match_2;
../inputs/grep1.dat:4823:
../inputs/grep1.dat:4824:  /* Where we are in the data, and the end of the current string.  */
../inputs/grep1.dat:4825:  const char *d, *dend;
../inputs/grep1.dat:4826:  
../inputs/grep1.dat:4827:  /* Where we are in the pattern, and the end of the pattern.  */
../inputs/grep1.dat:4828:  unsigned char *p = bufp->buffer;
../inputs/grep1.dat:4829:  register unsigned char *pend = p + bufp->used;
../inputs/grep1.dat:4830:
../inputs/grep1.dat:4831:  /* We use this to map every character in the string.  */
../inputs/grep1.dat:4832:  char *translate = bufp->translate;
../inputs/grep1.dat:4833:
../inputs/grep1.dat:4834:  /* Failure point stack.  Each place that can handle a failure further
../inputs/grep1.dat:4835:     down the line pushes a failure point on this stack.  It consists of
../inputs/grep1.dat:4836:     restart, regend, and reg_info for all registers corresponding to
../inputs/grep1.dat:4837:     the subexpressions we're currently inside, plus the number of such
../inputs/grep1.dat:4838:     registers, and, finally, two char *'s.  The first char * is where
../inputs/grep1.dat:4839:     to resume scanning the pattern; the second one is where to resume
../inputs/grep1.dat:4840:     scanning the strings.  If the latter is zero, the failure point is
../inputs/grep1.dat:4841:     a ``dummy''; if a failure happens and the failure point is a dummy,
../inputs/grep1.dat:4842:     it gets discarded and the next next one is tried.  */
../inputs/grep1.dat:4843:  fail_stack_type fail_stack;
../inputs/grep1.dat:4844:#ifdef DEBUG
../inputs/grep1.dat:4845:  static unsigned failure_id = 0;
../inputs/grep1.dat:4846:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
../inputs/grep1.dat:4847:#endif
../inputs/grep1.dat:4848:
../inputs/grep1.dat:4849:  /* We fill all the registers internally, independent of what we
../inputs/grep1.dat:4851:     an element for register zero.  */
../inputs/grep1.dat:4852:  unsigned num_regs = bufp->re_nsub + 1;
../inputs/grep1.dat:4853:  
../inputs/grep1.dat:4854:  /* The currently active registers.  */
../inputs/grep1.dat:4855:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:4856:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:4857:
../inputs/grep1.dat:4858:  /* Information on the contents of registers. These are pointers into
../inputs/grep1.dat:4859:     the input strings; they record just what was matched (on this
../inputs/grep1.dat:4860:     attempt) by a subexpression part of the pattern, that is, the
../inputs/grep1.dat:4861:     regnum-th regstart pointer points to where in the pattern we began
../inputs/grep1.dat:4862:     matching and the regnum-th regend points to right after where we
../inputs/grep1.dat:4863:     stopped matching the regnum-th subexpression.  (The zeroth register
../inputs/grep1.dat:4864:     keeps track of what the whole pattern matches.)  */
../inputs/grep1.dat:4865:  const char **regstart, **regend;
../inputs/grep1.dat:4866:
../inputs/grep1.dat:4867:  /* If a group that's operated upon by a repetition operator fails to
../inputs/grep1.dat:4868:     match anything, then the register for its start will need to be
../inputs/grep1.dat:4869:     restored because it will have been set to wherever in the string we
../inputs/grep1.dat:4870:     are when we last see its open-group operator.  Similarly for a
../inputs/grep1.dat:4871:     register's end.  */
../inputs/grep1.dat:4872:  const char **old_regstart, **old_regend;
../inputs/grep1.dat:4873:
../inputs/grep1.dat:4874:  /* The is_active field of reg_info helps us keep track of which (possibly
../inputs/grep1.dat:4875:     nested) subexpressions we are currently in. The matched_something
../inputs/grep1.dat:4876:     field of reg_info[reg_num] helps us tell whether or not we have
../inputs/grep1.dat:4877:     matched any of the pattern so far this time through the reg_num-th
../inputs/grep1.dat:4878:     subexpression.  These two fields get reset each time through any
../inputs/grep1.dat:4879:     loop their register is in.  */
../inputs/grep1.dat:4880:  register_info_type *reg_info; 
../inputs/grep1.dat:4881:
../inputs/grep1.dat:4882:  /* The following record the register info as found in the above
../inputs/grep1.dat:4883:     variables when we find a match better than any we've seen before. 
../inputs/grep1.dat:4884:     This happens as we backtrack through the failure points, which in
../inputs/grep1.dat:4885:     turn happens only if we have not yet matched the entire string. */
../inputs/grep1.dat:4886:  unsigned best_regs_set = false;
../inputs/grep1.dat:4887:  const char **best_regstart, **best_regend;
../inputs/grep1.dat:4888:  
../inputs/grep1.dat:4889:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
../inputs/grep1.dat:4890:     allocate space for that if we're not allocating space for anything
../inputs/grep1.dat:4891:     else (see below).  Also, we never need info about register 0 for
../inputs/grep1.dat:4892:     any of the other register vectors, and it seems rather a kludge to
../inputs/grep1.dat:4893:     treat `best_regend' differently than the rest.  So we keep track of
../inputs/grep1.dat:4894:     the end of the best match so far in a separate variable.  We
../inputs/grep1.dat:4895:     initialize this to NULL so that when we backtrack the first time
../inputs/grep1.dat:4896:     and need to test it, it's not garbage.  */
../inputs/grep1.dat:4897:  const char *match_end = NULL;
../inputs/grep1.dat:4898:
../inputs/grep1.dat:4899:  /* Used when we pop values we don't care about.  */
../inputs/grep1.dat:4900:  const char **reg_dummy;
../inputs/grep1.dat:4901:  register_info_type *reg_info_dummy;
../inputs/grep1.dat:4902:
../inputs/grep1.dat:4903:#ifdef DEBUG
../inputs/grep1.dat:4904:  /* Counts the total number of registers pushed.  */
../inputs/grep1.dat:4905:  unsigned num_regs_pushed = 0; 	
../inputs/grep1.dat:4906:#endif
../inputs/grep1.dat:4907:
../inputs/grep1.dat:4908:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
../inputs/grep1.dat:4909:  
../inputs/grep1.dat:4910:  INIT_FAIL_STACK ();
../inputs/grep1.dat:4911:  
../inputs/grep1.dat:4912:  /* Do not bother to initialize all the register variables if there are
../inputs/grep1.dat:4913:     no groups in the pattern, as it takes a fair amount of time.  If
../inputs/grep1.dat:4915:     pattern), even though we never use it, since it simplifies the
../inputs/grep1.dat:4916:     array indexing.  We should fix this.  */
../inputs/grep1.dat:4917:  if (bufp->re_nsub)
../inputs/grep1.dat:4918:    {
../inputs/grep1.dat:4919:      regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4920:      regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4921:      old_regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4922:      old_regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4923:      best_regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4924:      best_regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4925:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
../inputs/grep1.dat:4926:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:4927:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
../inputs/grep1.dat:4928:
../inputs/grep1.dat:4929:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
../inputs/grep1.dat:4930:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
../inputs/grep1.dat:4931:        {
../inputs/grep1.dat:4932:          FREE_VARIABLES ();
../inputs/grep1.dat:4933:          return -2;
../inputs/grep1.dat:4934:        }
../inputs/grep1.dat:4935:    }
../inputs/grep1.dat:4936:#ifdef REGEX_MALLOC
../inputs/grep1.dat:4937:  else
../inputs/grep1.dat:4938:    {
../inputs/grep1.dat:4939:      /* We must initialize all our variables to NULL, so that
../inputs/grep1.dat:4940:         `FREE_VARIABLES' doesn't try to free them.  */
../inputs/grep1.dat:4941:      regstart = regend = old_regstart = old_regend = best_regstart
../inputs/grep1.dat:4942:        = best_regend = reg_dummy = NULL;
../inputs/grep1.dat:4943:      reg_info = reg_info_dummy = (register_info_type *) NULL;
../inputs/grep1.dat:4944:    }
../inputs/grep1.dat:4945:#endif /* REGEX_MALLOC */
../inputs/grep1.dat:4946:
../inputs/grep1.dat:4947:  /* The starting position is bogus.  */
../inputs/grep1.dat:4948:  if (pos < 0 || pos > size1 + size2)
../inputs/grep1.dat:4949:    {
../inputs/grep1.dat:4950:      FREE_VARIABLES ();
../inputs/grep1.dat:4951:      return -1;
../inputs/grep1.dat:4952:    }
../inputs/grep1.dat:4953:    
../inputs/grep1.dat:4954:  /* Initialize subexpression text positions to -1 to mark ones that no
../inputs/grep1.dat:4955:     start_memory/stop_memory has been seen for. Also initialize the
../inputs/grep1.dat:4956:     register information struct.  */
../inputs/grep1.dat:4957:  for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:4958:    {
../inputs/grep1.dat:4959:      regstart[mcnt] = regend[mcnt] 
../inputs/grep1.dat:4960:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
../inputs/grep1.dat:4961:        
../inputs/grep1.dat:4962:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
../inputs/grep1.dat:4963:      IS_ACTIVE (reg_info[mcnt]) = 0;
../inputs/grep1.dat:4964:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
../inputs/grep1.dat:4965:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
../inputs/grep1.dat:4966:    }
../inputs/grep1.dat:4967:  
../inputs/grep1.dat:4968:  /* We move `string1' into `string2' if the latter's empty -- but not if
../inputs/grep1.dat:4969:     `string1' is null.  */
../inputs/grep1.dat:4970:  if (size2 == 0 && string1 != NULL)
../inputs/grep1.dat:4971:    {
../inputs/grep1.dat:4972:      string2 = string1;
../inputs/grep1.dat:4973:      size2 = size1;
../inputs/grep1.dat:4974:      string1 = 0;
../inputs/grep1.dat:4975:      size1 = 0;
../inputs/grep1.dat:4976:    }
../inputs/grep1.dat:4977:  end1 = string1 + size1;
../inputs/grep1.dat:4978:  end2 = string2 + size2;
../inputs/grep1.dat:4979:
../inputs/grep1.dat:4980:  /* Compute where to stop matching, within the two strings.  */
../inputs/grep1.dat:4981:  if (stop <= size1)
../inputs/grep1.dat:4982:    {
../inputs/grep1.dat:4983:      end_match_1 = string1 + stop;
../inputs/grep1.dat:4984:      end_match_2 = string2;
../inputs/grep1.dat:4985:    }
../inputs/grep1.dat:4986:  else
../inputs/grep1.dat:4987:    {
../inputs/grep1.dat:4988:      end_match_1 = end1;
../inputs/grep1.dat:4989:      end_match_2 = string2 + stop - size1;
../inputs/grep1.dat:4990:    }
../inputs/grep1.dat:4991:
../inputs/grep1.dat:4992:  /* `p' scans through the pattern as `d' scans through the data. 
../inputs/grep1.dat:4993:     `dend' is the end of the input string that `d' points within.  `d'
../inputs/grep1.dat:4994:     is advanced into the following input string whenever necessary, but
../inputs/grep1.dat:4995:     this happens before fetching; therefore, at the beginning of the
../inputs/grep1.dat:4996:     loop, `d' can be pointing at the end of a string, but it cannot
../inputs/grep1.dat:4997:     equal `string2'.  */
../inputs/grep1.dat:4998:  if (size1 > 0 && pos <= size1)
../inputs/grep1.dat:4999:    {
../inputs/grep1.dat:5000:      d = string1 + pos;
../inputs/grep1.dat:5001:      dend = end_match_1;
../inputs/grep1.dat:5002:    }
../inputs/grep1.dat:5003:  else
../inputs/grep1.dat:5004:    {
../inputs/grep1.dat:5005:      d = string2 + pos - size1;
../inputs/grep1.dat:5006:      dend = end_match_2;
../inputs/grep1.dat:5007:    }
../inputs/grep1.dat:5008:
../inputs/grep1.dat:5009:  DEBUG_PRINT1 ("The compiled pattern is: ");
../inputs/grep1.dat:5010:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
../inputs/grep1.dat:5011:  DEBUG_PRINT1 ("The string to match is: `");
../inputs/grep1.dat:5012:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
../inputs/grep1.dat:5013:  DEBUG_PRINT1 ("'\n");
../inputs/grep1.dat:5014:  
../inputs/grep1.dat:5015:  /* This loops over pattern commands.  It exits by returning from the
../inputs/grep1.dat:5016:     function if the match is complete, or it drops through if the match
../inputs/grep1.dat:5017:     fails at this starting point in the input data.  */
../inputs/grep1.dat:5018:  for (;;)
../inputs/grep1.dat:5019:    {
../inputs/grep1.dat:5020:      DEBUG_PRINT2 ("\n0x%x: ", p);
../inputs/grep1.dat:5021:
../inputs/grep1.dat:5022:      if (p == pend)
../inputs/grep1.dat:5023:	{ /* End of pattern means we might have succeeded.  */
../inputs/grep1.dat:5024:          DEBUG_PRINT1 ("end of pattern ... ");
../inputs/grep1.dat:5025:          
../inputs/grep1.dat:5026:	  /* If we haven't matched the entire string, and we want the
../inputs/grep1.dat:5027:             longest match, try backtracking.  */
../inputs/grep1.dat:5028:          if (d != end_match_2)
../inputs/grep1.dat:5029:	    {
../inputs/grep1.dat:5030:              DEBUG_PRINT1 ("backtracking.\n");
../inputs/grep1.dat:5031:              
../inputs/grep1.dat:5032:              if (!FAIL_STACK_EMPTY ())
../inputs/grep1.dat:5033:                { /* More failure points to try.  */
../inputs/grep1.dat:5034:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
../inputs/grep1.dat:5035:	        	                == MATCHING_IN_FIRST_STRING);
../inputs/grep1.dat:5036:
../inputs/grep1.dat:5037:                  /* If exceeds best match so far, save it.  */
../inputs/grep1.dat:5038:                  if (!best_regs_set
../inputs/grep1.dat:5039:                      || (same_str_p && d > match_end)
../inputs/grep1.dat:5040:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
../inputs/grep1.dat:5041:                    {
../inputs/grep1.dat:5042:                      best_regs_set = true;
../inputs/grep1.dat:5043:                      match_end = d;
../inputs/grep1.dat:5044:                      
../inputs/grep1.dat:5045:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
../inputs/grep1.dat:5046:                      
../inputs/grep1.dat:5047:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:5048:                        {
../inputs/grep1.dat:5049:                          best_regstart[mcnt] = regstart[mcnt];
../inputs/grep1.dat:5050:                          best_regend[mcnt] = regend[mcnt];
../inputs/grep1.dat:5051:                        }
../inputs/grep1.dat:5052:                    }
../inputs/grep1.dat:5053:                  goto fail;	       
../inputs/grep1.dat:5054:                }
../inputs/grep1.dat:5055:
../inputs/grep1.dat:5056:              /* If no failure points, don't restore garbage.  */
../inputs/grep1.dat:5057:              else if (best_regs_set)   
../inputs/grep1.dat:5058:                {
../inputs/grep1.dat:5059:  	        restore_best_regs:
../inputs/grep1.dat:5060:                  /* Restore best match.  It may happen that `dend ==
../inputs/grep1.dat:5061:                     end_match_1' while the restored d is in string2.
../inputs/grep1.dat:5062:                     For example, the pattern `x.*y.*z' against the
../inputs/grep1.dat:5063:                     strings `x-' and `y-z-', if the two strings are
../inputs/grep1.dat:5064:                     not consecutive in memory.  */
../inputs/grep1.dat:5065:                  DEBUG_PRINT1 ("Restoring best registers.\n");
../inputs/grep1.dat:5066:                  
../inputs/grep1.dat:5067:                  d = match_end;
../inputs/grep1.dat:5068:                  dend = ((d >= string1 && d <= end1)
../inputs/grep1.dat:5069:		           ? end_match_1 : end_match_2);
../inputs/grep1.dat:5070:
../inputs/grep1.dat:5071:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:5072:		    {
../inputs/grep1.dat:5073:		      regstart[mcnt] = best_regstart[mcnt];
../inputs/grep1.dat:5074:		      regend[mcnt] = best_regend[mcnt];
../inputs/grep1.dat:5075:		    }
../inputs/grep1.dat:5076:                }
../inputs/grep1.dat:5077:            } /* d != end_match_2 */
../inputs/grep1.dat:5078:
../inputs/grep1.dat:5079:          DEBUG_PRINT1 ("Accepting match.\n");
../inputs/grep1.dat:5080:
../inputs/grep1.dat:5081:          /* If caller wants register contents data back, do it.  */
../inputs/grep1.dat:5082:          if (regs && !bufp->no_sub)
../inputs/grep1.dat:5083:	    {
../inputs/grep1.dat:5084:              /* Have the register data arrays been allocated?  */
../inputs/grep1.dat:5085:              if (bufp->regs_allocated == REGS_UNALLOCATED)
../inputs/grep1.dat:5086:                { /* No.  So allocate them with malloc.  We need one
../inputs/grep1.dat:5087:                     extra element beyond `num_regs' for the `-1' marker
../inputs/grep1.dat:5088:                     GNU code uses.  */
../inputs/grep1.dat:5089:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
../inputs/grep1.dat:5090:                  regs->start = TALLOC (regs->num_regs, regoff_t);
../inputs/grep1.dat:5091:                  regs->end = TALLOC (regs->num_regs, regoff_t);
../inputs/grep1.dat:5092:                  if (regs->start == NULL || regs->end == NULL)
../inputs/grep1.dat:5093:                    return -2;
../inputs/grep1.dat:5094:                  bufp->regs_allocated = REGS_REALLOCATE;
../inputs/grep1.dat:5095:                }
../inputs/grep1.dat:5096:              else if (bufp->regs_allocated == REGS_REALLOCATE)
../inputs/grep1.dat:5097:                { /* Yes.  If we need more elements than were already
../inputs/grep1.dat:5098:                     allocated, reallocate them.  If we need fewer, just
../inputs/grep1.dat:5099:                     leave it alone.  */
../inputs/grep1.dat:5100:                  if (regs->num_regs < num_regs + 1)
../inputs/grep1.dat:5101:                    {
../inputs/grep1.dat:5102:                      regs->num_regs = num_regs + 1;
../inputs/grep1.dat:5103:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
../inputs/grep1.dat:5104:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
../inputs/grep1.dat:5105:                      if (regs->start == NULL || regs->end == NULL)
../inputs/grep1.dat:5106:                        return -2;
../inputs/grep1.dat:5107:                    }
../inputs/grep1.dat:5108:                }
../inputs/grep1.dat:5109:              else
../inputs/grep1.dat:5110:		{
../inputs/grep1.dat:5111:		  /* These braces fend off a "empty body in an else-statement"
../inputs/grep1.dat:5112:		     warning under GCC when assert expands to nothing.  */
../inputs/grep1.dat:5113:		  assert (bufp->regs_allocated == REGS_FIXED);
../inputs/grep1.dat:5114:		}
../inputs/grep1.dat:5115:
../inputs/grep1.dat:5116:              /* Convert the pointer data in `regstart' and `regend' to
../inputs/grep1.dat:5117:                 indices.  Register zero has to be set differently,
../inputs/grep1.dat:5118:                 since we haven't kept track of any info for it.  */
../inputs/grep1.dat:5119:              if (regs->num_regs > 0)
../inputs/grep1.dat:5120:                {
../inputs/grep1.dat:5121:                  regs->start[0] = pos;
../inputs/grep1.dat:5122:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
../inputs/grep1.dat:5123:			          : d - string2 + size1);
../inputs/grep1.dat:5124:                }
../inputs/grep1.dat:5125:              
../inputs/grep1.dat:5126:              /* Go through the first `min (num_regs, regs->num_regs)'
../inputs/grep1.dat:5127:                 registers, since that is all we initialized.  */
../inputs/grep1.dat:5128:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
../inputs/grep1.dat:5129:		{
../inputs/grep1.dat:5130:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
../inputs/grep1.dat:5131:                    regs->start[mcnt] = regs->end[mcnt] = -1;
../inputs/grep1.dat:5132:                  else
../inputs/grep1.dat:5133:                    {
../inputs/grep1.dat:5134:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
../inputs/grep1.dat:5135:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
../inputs/grep1.dat:5136:                    }
../inputs/grep1.dat:5137:		}
../inputs/grep1.dat:5138:              
../inputs/grep1.dat:5139:              /* If the regs structure we return has more elements than
../inputs/grep1.dat:5140:                 were in the pattern, set the extra elements to -1.  If
../inputs/grep1.dat:5141:                 we (re)allocated the registers, this is the case,
../inputs/grep1.dat:5142:                 because we always allocate enough to have at least one
../inputs/grep1.dat:5143:                 -1 at the end.  */
../inputs/grep1.dat:5144:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
../inputs/grep1.dat:5145:                regs->start[mcnt] = regs->end[mcnt] = -1;
../inputs/grep1.dat:5146:	    } /* regs && !bufp->no_sub */
../inputs/grep1.dat:5147:
../inputs/grep1.dat:5148:          FREE_VARIABLES ();
../inputs/grep1.dat:5149:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
../inputs/grep1.dat:5150:                        nfailure_points_pushed, nfailure_points_popped,
../inputs/grep1.dat:5151:                        nfailure_points_pushed - nfailure_points_popped);
../inputs/grep1.dat:5152:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
../inputs/grep1.dat:5153:
../inputs/grep1.dat:5154:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
../inputs/grep1.dat:5155:			    ? string1 
../inputs/grep1.dat:5156:			    : string2 - size1);
../inputs/grep1.dat:5157:
../inputs/grep1.dat:5158:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
../inputs/grep1.dat:5159:
../inputs/grep1.dat:5160:          return mcnt;
../inputs/grep1.dat:5161:        }
../inputs/grep1.dat:5162:
../inputs/grep1.dat:5163:      /* Otherwise match next pattern command.  */
../inputs/grep1.dat:5164:#ifdef SWITCH_ENUM_BUG
../inputs/grep1.dat:5165:      switch ((int) ((re_opcode_t) *p++))
../inputs/grep1.dat:5166:#else
../inputs/grep1.dat:5167:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:5168:#endif
../inputs/grep1.dat:5169:	{
../inputs/grep1.dat:5170:        /* Ignore these.  Used to ignore the n of succeed_n's which
../inputs/grep1.dat:5171:           currently have n == 0.  */
../inputs/grep1.dat:5172:        case no_op:
../inputs/grep1.dat:5173:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
../inputs/grep1.dat:5174:          break;
../inputs/grep1.dat:5175:
../inputs/grep1.dat:5176:
../inputs/grep1.dat:5177:        /* Match the next n pattern characters exactly.  The following
../inputs/grep1.dat:5178:           byte in the pattern defines n, and the n bytes after that
../inputs/grep1.dat:5179:           are the characters to match.  */
../inputs/grep1.dat:5180:	case exactn:
../inputs/grep1.dat:5181:	  mcnt = *p++;
../inputs/grep1.dat:5182:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
../inputs/grep1.dat:5183:
../inputs/grep1.dat:5184:          /* This is written out as an if-else so we don't waste time
../inputs/grep1.dat:5185:             testing `translate' inside the loop.  */
../inputs/grep1.dat:5186:          if (translate)
../inputs/grep1.dat:5187:	    {
../inputs/grep1.dat:5188:	      do
../inputs/grep1.dat:5189:		{
../inputs/grep1.dat:5190:		  PREFETCH ();
../inputs/grep1.dat:5191:		  if (translate[(unsigned char) *d++] != (char) *p++)
../inputs/grep1.dat:5192:                    goto fail;
../inputs/grep1.dat:5193:		}
../inputs/grep1.dat:5194:	      while (--mcnt);
../inputs/grep1.dat:5195:	    }
../inputs/grep1.dat:5196:	  else
../inputs/grep1.dat:5197:	    {
../inputs/grep1.dat:5198:	      do
../inputs/grep1.dat:5199:		{
../inputs/grep1.dat:5200:		  PREFETCH ();
../inputs/grep1.dat:5201:		  if (*d++ != (char) *p++) goto fail;
../inputs/grep1.dat:5202:		}
../inputs/grep1.dat:5203:	      while (--mcnt);
../inputs/grep1.dat:5204:	    }
../inputs/grep1.dat:5205:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:5206:          break;
../inputs/grep1.dat:5207:
../inputs/grep1.dat:5208:
../inputs/grep1.dat:5209:        /* Match any character except possibly a newline or a null.  */
../inputs/grep1.dat:5210:	case anychar:
../inputs/grep1.dat:5211:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
../inputs/grep1.dat:5212:
../inputs/grep1.dat:5213:          PREFETCH ();
../inputs/grep1.dat:5214:
../inputs/grep1.dat:5215:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
../inputs/grep1.dat:5216:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
../inputs/grep1.dat:5217:	    goto fail;
../inputs/grep1.dat:5218:
../inputs/grep1.dat:5219:          SET_REGS_MATCHED ();
../inputs/grep1.dat:5220:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
../inputs/grep1.dat:5221:          d++;
../inputs/grep1.dat:5222:	  break;
../inputs/grep1.dat:5223:
../inputs/grep1.dat:5224:
../inputs/grep1.dat:5225:	case charset:
../inputs/grep1.dat:5226:	case charset_not:
../inputs/grep1.dat:5227:	  {
../inputs/grep1.dat:5228:	    register unsigned char c;
../inputs/grep1.dat:5229:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
../inputs/grep1.dat:5230:
../inputs/grep1.dat:5231:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
../inputs/grep1.dat:5232:
../inputs/grep1.dat:5233:	    PREFETCH ();
../inputs/grep1.dat:5234:	    c = TRANSLATE (*d); /* The character to match.  */
../inputs/grep1.dat:5235:
../inputs/grep1.dat:5236:            /* Cast to `unsigned' instead of `unsigned char' in case the
../inputs/grep1.dat:5237:               bit list is a full 32 bytes long.  */
../inputs/grep1.dat:5238:	    if (c < (unsigned) (*p * BYTEWIDTH)
../inputs/grep1.dat:5239:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
../inputs/grep1.dat:5240:	      not = !not;
../inputs/grep1.dat:5241:
../inputs/grep1.dat:5242:	    p += 1 + *p;
../inputs/grep1.dat:5243:
../inputs/grep1.dat:5244:	    if (!not) goto fail;
../inputs/grep1.dat:5245:            
../inputs/grep1.dat:5246:	    SET_REGS_MATCHED ();
../inputs/grep1.dat:5247:            d++;
../inputs/grep1.dat:5248:	    break;
../inputs/grep1.dat:5249:	  }
../inputs/grep1.dat:5250:
../inputs/grep1.dat:5251:
../inputs/grep1.dat:5252:        /* The beginning of a group is represented by start_memory.
../inputs/grep1.dat:5253:           The arguments are the register number in the next byte, and the
../inputs/grep1.dat:5254:           number of groups inner to this one in the next.  The text
../inputs/grep1.dat:5255:           matched within the group is recorded (in the internal
../inputs/grep1.dat:5256:           registers data structure) under the register number.  */
../inputs/grep1.dat:5257:        case start_memory:
../inputs/grep1.dat:5258:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
../inputs/grep1.dat:5259:
../inputs/grep1.dat:5260:          /* Find out if this group can match the empty string.  */
../inputs/grep1.dat:5261:	  p1 = p;		/* To send to group_match_null_string_p.  */
../inputs/grep1.dat:5262:          
../inputs/grep1.dat:5263:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
../inputs/grep1.dat:5264:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
../inputs/grep1.dat:5265:              = group_match_null_string_p (&p1, pend, reg_info);
../inputs/grep1.dat:5266:
../inputs/grep1.dat:5267:          /* Save the position in the string where we were the last time
../inputs/grep1.dat:5268:             we were at this open-group operator in case the group is
../inputs/grep1.dat:5269:             operated upon by a repetition operator, e.g., with `(a*)*b'
../inputs/grep1.dat:5270:             against `ab'; then we want to ignore where we are now in
../inputs/grep1.dat:5271:             the string in case this attempt to match fails.  */
../inputs/grep1.dat:5272:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
../inputs/grep1.dat:5273:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
../inputs/grep1.dat:5274:                             : regstart[*p];
../inputs/grep1.dat:5275:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
../inputs/grep1.dat:5276:			 POINTER_TO_OFFSET (old_regstart[*p]));
../inputs/grep1.dat:5277:
../inputs/grep1.dat:5278:          regstart[*p] = d;
../inputs/grep1.dat:5279:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
../inputs/grep1.dat:5280:
../inputs/grep1.dat:5281:          IS_ACTIVE (reg_info[*p]) = 1;
../inputs/grep1.dat:5282:          MATCHED_SOMETHING (reg_info[*p]) = 0;
../inputs/grep1.dat:5283:          
../inputs/grep1.dat:5284:          /* This is the new highest active register.  */
../inputs/grep1.dat:5285:          highest_active_reg = *p;
../inputs/grep1.dat:5286:          
../inputs/grep1.dat:5287:          /* If nothing was active before, this is the new lowest active
../inputs/grep1.dat:5288:             register.  */
../inputs/grep1.dat:5289:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
../inputs/grep1.dat:5290:            lowest_active_reg = *p;
../inputs/grep1.dat:5291:
../inputs/grep1.dat:5292:          /* Move past the register number and inner group count.  */
../inputs/grep1.dat:5293:          p += 2;
../inputs/grep1.dat:5294:          break;
../inputs/grep1.dat:5295:
../inputs/grep1.dat:5296:
../inputs/grep1.dat:5297:        /* The stop_memory opcode represents the end of a group.  Its
../inputs/grep1.dat:5298:           arguments are the same as start_memory's: the register
../inputs/grep1.dat:5299:           number, and the number of inner groups.  */
../inputs/grep1.dat:5300:	case stop_memory:
../inputs/grep1.dat:5301:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
../inputs/grep1.dat:5302:             
../inputs/grep1.dat:5303:          /* We need to save the string position the last time we were at
../inputs/grep1.dat:5304:             this close-group operator in case the group is operated
../inputs/grep1.dat:5305:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
../inputs/grep1.dat:5306:             against `aba'; then we want to ignore where we are now in
../inputs/grep1.dat:5307:             the string in case this attempt to match fails.  */
../inputs/grep1.dat:5308:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
../inputs/grep1.dat:5309:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
../inputs/grep1.dat:5310:			   : regend[*p];
../inputs/grep1.dat:5311:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
../inputs/grep1.dat:5312:			 POINTER_TO_OFFSET (old_regend[*p]));
../inputs/grep1.dat:5313:
../inputs/grep1.dat:5314:          regend[*p] = d;
../inputs/grep1.dat:5315:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
../inputs/grep1.dat:5316:
../inputs/grep1.dat:5317:          /* This register isn't active anymore.  */
../inputs/grep1.dat:5318:          IS_ACTIVE (reg_info[*p]) = 0;
../inputs/grep1.dat:5319:          
../inputs/grep1.dat:5320:          /* If this was the only register active, nothing is active
../inputs/grep1.dat:5321:             anymore.  */
../inputs/grep1.dat:5322:          if (lowest_active_reg == highest_active_reg)
../inputs/grep1.dat:5323:            {
../inputs/grep1.dat:5324:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:5325:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:5326:            }
../inputs/grep1.dat:5327:          else
../inputs/grep1.dat:5328:            { /* We must scan for the new highest active register, since
../inputs/grep1.dat:5329:                 it isn't necessarily one less than now: consider
../inputs/grep1.dat:5330:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
../inputs/grep1.dat:5331:                 new highest active register is 1.  */
../inputs/grep1.dat:5332:              unsigned char r = *p - 1;
../inputs/grep1.dat:5333:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
../inputs/grep1.dat:5334:                r--;
../inputs/grep1.dat:5335:              
../inputs/grep1.dat:5336:              /* If we end up at register zero, that means that we saved
../inputs/grep1.dat:5337:                 the registers as the result of an `on_failure_jump', not
../inputs/grep1.dat:5338:                 a `start_memory', and we jumped to past the innermost
../inputs/grep1.dat:5339:                 `stop_memory'.  For example, in ((.)*) we save
../inputs/grep1.dat:5340:                 registers 1 and 2 as a result of the *, but when we pop
../inputs/grep1.dat:5341:                 back to the second ), we are at the stop_memory 1.
../inputs/grep1.dat:5342:                 Thus, nothing is active.  */
../inputs/grep1.dat:5343:	      if (r == 0)
../inputs/grep1.dat:5344:                {
../inputs/grep1.dat:5345:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:5346:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:5347:                }
../inputs/grep1.dat:5348:              else
../inputs/grep1.dat:5349:                highest_active_reg = r;
../inputs/grep1.dat:5350:            }
../inputs/grep1.dat:5351:          
../inputs/grep1.dat:5352:          /* If just failed to match something this time around with a
../inputs/grep1.dat:5353:             group that's operated on by a repetition operator, try to
../inputs/grep1.dat:5354:             force exit from the ``loop'', and restore the register
../inputs/grep1.dat:5355:             information for this group that we had before trying this
../inputs/grep1.dat:5356:             last match.  */
../inputs/grep1.dat:5357:          if ((!MATCHED_SOMETHING (reg_info[*p])
../inputs/grep1.dat:5358:               || (re_opcode_t) p[-3] == start_memory)
../inputs/grep1.dat:5359:	      && (p + 2) < pend)              
../inputs/grep1.dat:5360:            {
../inputs/grep1.dat:5361:              boolean is_a_jump_n = false;
../inputs/grep1.dat:5362:              
../inputs/grep1.dat:5363:              p1 = p + 2;
../inputs/grep1.dat:5364:              mcnt = 0;
../inputs/grep1.dat:5365:              switch ((re_opcode_t) *p1++)
../inputs/grep1.dat:5366:                {
../inputs/grep1.dat:5367:                  case jump_n:
../inputs/grep1.dat:5368:		    is_a_jump_n = true;
../inputs/grep1.dat:5369:                  case pop_failure_jump:
../inputs/grep1.dat:5370:		  case maybe_pop_jump:
../inputs/grep1.dat:5371:		  case jump:
../inputs/grep1.dat:5372:		  case dummy_failure_jump:
../inputs/grep1.dat:5373:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:5374:		    if (is_a_jump_n)
../inputs/grep1.dat:5375:		      p1 += 2;
../inputs/grep1.dat:5376:                    break;
../inputs/grep1.dat:5377:                  
../inputs/grep1.dat:5378:                  default:
../inputs/grep1.dat:5379:                    /* do nothing */ ;
../inputs/grep1.dat:5380:                }
../inputs/grep1.dat:5381:	      p1 += mcnt;
../inputs/grep1.dat:5382:        
../inputs/grep1.dat:5383:              /* If the next operation is a jump backwards in the pattern
../inputs/grep1.dat:5384:	         to an on_failure_jump right before the start_memory
../inputs/grep1.dat:5385:                 corresponding to this stop_memory, exit from the loop
../inputs/grep1.dat:5386:                 by forcing a failure after pushing on the stack the
../inputs/grep1.dat:5387:                 on_failure_jump's jump in the pattern, and d.  */
../inputs/grep1.dat:5388:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
../inputs/grep1.dat:5389:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
../inputs/grep1.dat:5390:		{
../inputs/grep1.dat:5391:                  /* If this group ever matched anything, then restore
../inputs/grep1.dat:5392:                     what its registers were before trying this last
../inputs/grep1.dat:5393:                     failed match, e.g., with `(a*)*b' against `ab' for
../inputs/grep1.dat:5394:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
../inputs/grep1.dat:5395:                     against `aba' for regend[3].
../inputs/grep1.dat:5396:                     
../inputs/grep1.dat:5397:                     Also restore the registers for inner groups for,
../inputs/grep1.dat:5398:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
../inputs/grep1.dat:5399:                     otherwise get trashed).  */
../inputs/grep1.dat:5400:                     
../inputs/grep1.dat:5401:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
../inputs/grep1.dat:5402:		    {
../inputs/grep1.dat:5403:		      unsigned r; 
../inputs/grep1.dat:5404:        
../inputs/grep1.dat:5405:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
../inputs/grep1.dat:5406:                      
../inputs/grep1.dat:5407:		      /* Restore this and inner groups' (if any) registers.  */
../inputs/grep1.dat:5408:                      for (r = *p; r < *p + *(p + 1); r++)
../inputs/grep1.dat:5409:                        {
../inputs/grep1.dat:5410:                          regstart[r] = old_regstart[r];
../inputs/grep1.dat:5411:
../inputs/grep1.dat:5412:                          /* xx why this test?  */
../inputs/grep1.dat:5413:                          if ((int) old_regend[r] >= (int) regstart[r])
../inputs/grep1.dat:5414:                            regend[r] = old_regend[r];
../inputs/grep1.dat:5415:                        }     
../inputs/grep1.dat:5416:                    }
../inputs/grep1.dat:5417:		  p1++;
../inputs/grep1.dat:5418:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:5419:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
../inputs/grep1.dat:5420:
../inputs/grep1.dat:5421:                  goto fail;
../inputs/grep1.dat:5422:                }
../inputs/grep1.dat:5423:            }
../inputs/grep1.dat:5424:          
../inputs/grep1.dat:5425:          /* Move past the register number and the inner group count.  */
../inputs/grep1.dat:5426:          p += 2;
../inputs/grep1.dat:5427:          break;
../inputs/grep1.dat:5428:
../inputs/grep1.dat:5429:
../inputs/grep1.dat:5430:	/* \<digit> has been turned into a `duplicate' command which is
../inputs/grep1.dat:5431:           followed by the numeric value of <digit> as the register number.  */
../inputs/grep1.dat:5432:        case duplicate:
../inputs/grep1.dat:5433:	  {
../inputs/grep1.dat:5434:	    register const char *d2, *dend2;
../inputs/grep1.dat:5435:	    int regno = *p++;   /* Get which register to match against.  */
../inputs/grep1.dat:5436:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
../inputs/grep1.dat:5437:
../inputs/grep1.dat:5438:	    /* Can't back reference a group which we've never matched.  */
../inputs/grep1.dat:5439:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
../inputs/grep1.dat:5440:              goto fail;
../inputs/grep1.dat:5441:              
../inputs/grep1.dat:5442:            /* Where in input to try to start matching.  */
../inputs/grep1.dat:5443:            d2 = regstart[regno];
../inputs/grep1.dat:5444:            
../inputs/grep1.dat:5445:            /* Where to stop matching; if both the place to start and
../inputs/grep1.dat:5446:               the place to stop matching are in the same string, then
../inputs/grep1.dat:5447:               set to the place to stop, otherwise, for now have to use
../inputs/grep1.dat:5448:               the end of the first string.  */
../inputs/grep1.dat:5449:
../inputs/grep1.dat:5450:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
../inputs/grep1.dat:5451:		      == FIRST_STRING_P (regend[regno]))
../inputs/grep1.dat:5452:		     ? regend[regno] : end_match_1);
../inputs/grep1.dat:5453:	    for (;;)
../inputs/grep1.dat:5454:	      {
../inputs/grep1.dat:5455:		/* If necessary, advance to next segment in register
../inputs/grep1.dat:5456:                   contents.  */
../inputs/grep1.dat:5457:		while (d2 == dend2)
../inputs/grep1.dat:5458:		  {
../inputs/grep1.dat:5459:		    if (dend2 == end_match_2) break;
../inputs/grep1.dat:5460:		    if (dend2 == regend[regno]) break;
../inputs/grep1.dat:5461:
../inputs/grep1.dat:5462:                    /* End of string1 => advance to string2. */
../inputs/grep1.dat:5463:                    d2 = string2;
../inputs/grep1.dat:5464:                    dend2 = regend[regno];
../inputs/grep1.dat:5465:		  }
../inputs/grep1.dat:5466:		/* At end of register contents => success */
../inputs/grep1.dat:5467:		if (d2 == dend2) break;
../inputs/grep1.dat:5468:
../inputs/grep1.dat:5469:		/* If necessary, advance to next segment in data.  */
../inputs/grep1.dat:5470:		PREFETCH ();
../inputs/grep1.dat:5471:
../inputs/grep1.dat:5472:		/* How many characters left in this segment to match.  */
../inputs/grep1.dat:5473:		mcnt = dend - d;
../inputs/grep1.dat:5474:                
../inputs/grep1.dat:5475:		/* Want how many consecutive characters we can match in
../inputs/grep1.dat:5476:                   one shot, so, if necessary, adjust the count.  */
../inputs/grep1.dat:5477:                if (mcnt > dend2 - d2)
../inputs/grep1.dat:5478:		  mcnt = dend2 - d2;
../inputs/grep1.dat:5479:                  
../inputs/grep1.dat:5480:		/* Compare that many; failure if mismatch, else move
../inputs/grep1.dat:5481:                   past them.  */
../inputs/grep1.dat:5482:		if (translate 
../inputs/grep1.dat:5483:                    ? bcmp_translate (d, d2, mcnt, translate) 
../inputs/grep1.dat:5484:                    : bcmp (d, d2, mcnt))
../inputs/grep1.dat:5485:		  goto fail;
../inputs/grep1.dat:5486:		d += mcnt, d2 += mcnt;
../inputs/grep1.dat:5487:	      }
../inputs/grep1.dat:5488:	  }
../inputs/grep1.dat:5489:	  break;
../inputs/grep1.dat:5490:
../inputs/grep1.dat:5491:
../inputs/grep1.dat:5492:        /* begline matches the empty string at the beginning of the string
../inputs/grep1.dat:5493:           (unless `not_bol' is set in `bufp'), and, if
../inputs/grep1.dat:5494:           `newline_anchor' is set, after newlines.  */
../inputs/grep1.dat:5495:	case begline:
../inputs/grep1.dat:5496:          DEBUG_PRINT1 ("EXECUTING begline.\n");
../inputs/grep1.dat:5497:          
../inputs/grep1.dat:5498:          if (AT_STRINGS_BEG (d))
../inputs/grep1.dat:5499:            {
../inputs/grep1.dat:5500:              if (!bufp->not_bol) break;
../inputs/grep1.dat:5501:            }
../inputs/grep1.dat:5502:          else if (d[-1] == '\n' && bufp->newline_anchor)
../inputs/grep1.dat:5503:            {
../inputs/grep1.dat:5504:              break;
../inputs/grep1.dat:5505:            }
../inputs/grep1.dat:5506:          /* In all other cases, we fail.  */
../inputs/grep1.dat:5507:          goto fail;
../inputs/grep1.dat:5508:
../inputs/grep1.dat:5509:
../inputs/grep1.dat:5510:        /* endline is the dual of begline.  */
../inputs/grep1.dat:5511:	case endline:
../inputs/grep1.dat:5512:          DEBUG_PRINT1 ("EXECUTING endline.\n");
../inputs/grep1.dat:5513:
../inputs/grep1.dat:5514:          if (AT_STRINGS_END (d))
../inputs/grep1.dat:5515:            {
../inputs/grep1.dat:5516:              if (!bufp->not_eol) break;
../inputs/grep1.dat:5517:            }
../inputs/grep1.dat:5518:          
../inputs/grep1.dat:5519:          /* We have to ``prefetch'' the next character.  */
../inputs/grep1.dat:5520:          else if ((d == end1 ? *string2 : *d) == '\n'
../inputs/grep1.dat:5521:                   && bufp->newline_anchor)
../inputs/grep1.dat:5522:            {
../inputs/grep1.dat:5523:              break;
../inputs/grep1.dat:5524:            }
../inputs/grep1.dat:5525:          goto fail;
../inputs/grep1.dat:5526:
../inputs/grep1.dat:5527:
../inputs/grep1.dat:5528:	/* Match at the very beginning of the data.  */
../inputs/grep1.dat:5529:        case begbuf:
../inputs/grep1.dat:5530:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
../inputs/grep1.dat:5531:          if (AT_STRINGS_BEG (d))
../inputs/grep1.dat:5532:            break;
../inputs/grep1.dat:5533:          goto fail;
../inputs/grep1.dat:5534:
../inputs/grep1.dat:5535:
../inputs/grep1.dat:5536:	/* Match at the very end of the data.  */
../inputs/grep1.dat:5537:        case endbuf:
../inputs/grep1.dat:5538:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
../inputs/grep1.dat:5539:	  if (AT_STRINGS_END (d))
../inputs/grep1.dat:5540:	    break;
../inputs/grep1.dat:5541:          goto fail;
../inputs/grep1.dat:5542:
../inputs/grep1.dat:5543:
../inputs/grep1.dat:5544:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
../inputs/grep1.dat:5545:           pushes NULL as the value for the string on the stack.  Then
../inputs/grep1.dat:5546:           `pop_failure_point' will keep the current value for the
../inputs/grep1.dat:5547:           string, instead of restoring it.  To see why, consider
../inputs/grep1.dat:5548:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
../inputs/grep1.dat:5549:           then the . fails against the \n.  But the next thing we want
../inputs/grep1.dat:5550:           to do is match the \n against the \n; if we restored the
../inputs/grep1.dat:5551:           string value, we would be back at the foo.
../inputs/grep1.dat:5552:           
../inputs/grep1.dat:5553:           Because this is used only in specific cases, we don't need to
../inputs/grep1.dat:5554:           check all the things that `on_failure_jump' does, to make
../inputs/grep1.dat:5555:           sure the right things get saved on the stack.  Hence we don't
../inputs/grep1.dat:5556:           share its code.  The only reason to push anything on the
../inputs/grep1.dat:5557:           stack at all is that otherwise we would have to change
../inputs/grep1.dat:5558:           `anychar's code to do something besides goto fail in this
../inputs/grep1.dat:5559:           case; that seems worse than this.  */
../inputs/grep1.dat:5560:        case on_failure_keep_string_jump:
../inputs/grep1.dat:5561:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
../inputs/grep1.dat:5562:          
../inputs/grep1.dat:5563:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:5564:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
../inputs/grep1.dat:5565:
../inputs/grep1.dat:5566:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
../inputs/grep1.dat:5567:          break;
../inputs/grep1.dat:5568:
../inputs/grep1.dat:5569:
../inputs/grep1.dat:5570:	/* Uses of on_failure_jump:
../inputs/grep1.dat:5571:        
../inputs/grep1.dat:5572:           Each alternative starts with an on_failure_jump that points
../inputs/grep1.dat:5573:           to the beginning of the next alternative.  Each alternative
../inputs/grep1.dat:5574:           except the last ends with a jump that in effect jumps past
../inputs/grep1.dat:5575:           the rest of the alternatives.  (They really jump to the
../inputs/grep1.dat:5576:           ending jump of the following alternative, because tensioning
../inputs/grep1.dat:5577:           these jumps is a hassle.)
../inputs/grep1.dat:5578:
../inputs/grep1.dat:5579:           Repeats start with an on_failure_jump that points past both
../inputs/grep1.dat:5580:           the repetition text and either the following jump or
../inputs/grep1.dat:5581:           pop_failure_jump back to this on_failure_jump.  */
../inputs/grep1.dat:5582:	case on_failure_jump:
../inputs/grep1.dat:5583:        on_failure:
../inputs/grep1.dat:5584:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
../inputs/grep1.dat:5585:
../inputs/grep1.dat:5586:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:5587:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
../inputs/grep1.dat:5588:
../inputs/grep1.dat:5589:          /* If this on_failure_jump comes right before a group (i.e.,
../inputs/grep1.dat:5590:             the original * applied to a group), save the information
../inputs/grep1.dat:5591:             for that group and all inner ones, so that if we fail back
../inputs/grep1.dat:5592:             to this point, the group's information will be correct.
../inputs/grep1.dat:5593:             For example, in \(a*\)*\1, we need the preceding group,
../inputs/grep1.dat:5594:             and in \(\(a*\)b*\)\2, we need the inner group.  */
../inputs/grep1.dat:5595:
../inputs/grep1.dat:5596:          /* We can't use `p' to check ahead because we push
../inputs/grep1.dat:5597:             a failure point to `p + mcnt' after we do this.  */
../inputs/grep1.dat:5598:          p1 = p;
../inputs/grep1.dat:5599:
../inputs/grep1.dat:5600:          /* We need to skip no_op's before we look for the
../inputs/grep1.dat:5601:             start_memory in case this on_failure_jump is happening as
../inputs/grep1.dat:5602:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
../inputs/grep1.dat:5603:             against aba.  */
../inputs/grep1.dat:5604:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
../inputs/grep1.dat:5605:            p1++;
../inputs/grep1.dat:5606:
../inputs/grep1.dat:5607:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
../inputs/grep1.dat:5608:            {
../inputs/grep1.dat:5609:              /* We have a new highest active register now.  This will
../inputs/grep1.dat:5610:                 get reset at the start_memory we are about to get to,
../inputs/grep1.dat:5611:                 but we will have saved all the registers relevant to
../inputs/grep1.dat:5612:                 this repetition op, as described above.  */
../inputs/grep1.dat:5613:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
../inputs/grep1.dat:5614:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
../inputs/grep1.dat:5615:                lowest_active_reg = *(p1 + 1);
../inputs/grep1.dat:5616:            }
../inputs/grep1.dat:5617:
../inputs/grep1.dat:5618:          DEBUG_PRINT1 (":\n");
../inputs/grep1.dat:5619:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
../inputs/grep1.dat:5620:          break;
../inputs/grep1.dat:5621:
../inputs/grep1.dat:5622:
../inputs/grep1.dat:5623:        /* A smart repeat ends with `maybe_pop_jump'.
../inputs/grep1.dat:5624:	   We change it to either `pop_failure_jump' or `jump'.  */
../inputs/grep1.dat:5625:        case maybe_pop_jump:
../inputs/grep1.dat:5626:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:5627:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
../inputs/grep1.dat:5628:          {
../inputs/grep1.dat:5629:	    register unsigned char *p2 = p;
../inputs/grep1.dat:5630:
../inputs/grep1.dat:5631:            /* Compare the beginning of the repeat with what in the
../inputs/grep1.dat:5632:               pattern follows its end. If we can establish that there
../inputs/grep1.dat:5633:               is nothing that they would both match, i.e., that we
../inputs/grep1.dat:5634:               would have to backtrack because of (as in, e.g., `a*a')
../inputs/grep1.dat:5635:               then we can change to pop_failure_jump, because we'll
../inputs/grep1.dat:5636:               never have to backtrack.
../inputs/grep1.dat:5637:               
../inputs/grep1.dat:5638:               This is not true in the case of alternatives: in
../inputs/grep1.dat:5639:               `(a|ab)*' we do need to backtrack to the `ab' alternative
../inputs/grep1.dat:5640:               (e.g., if the string was `ab').  But instead of trying to
../inputs/grep1.dat:5641:               detect that here, the alternative has put on a dummy
../inputs/grep1.dat:5642:               failure point which is what we will end up popping.  */
../inputs/grep1.dat:5643:
../inputs/grep1.dat:5644:	    /* Skip over open/close-group commands.  */
../inputs/grep1.dat:5645:	    while (p2 + 2 < pend
../inputs/grep1.dat:5646:		   && ((re_opcode_t) *p2 == stop_memory
../inputs/grep1.dat:5647:		       || (re_opcode_t) *p2 == start_memory))
../inputs/grep1.dat:5648:	      p2 += 3;			/* Skip over args, too.  */
../inputs/grep1.dat:5649:
../inputs/grep1.dat:5650:            /* If we're at the end of the pattern, we can change.  */
../inputs/grep1.dat:5651:            if (p2 == pend)
../inputs/grep1.dat:5652:	      {
../inputs/grep1.dat:5653:		/* Consider what happens when matching ":\(.*\)"
../inputs/grep1.dat:5654:		   against ":/".  I don't really understand this code
../inputs/grep1.dat:5655:		   yet.  */
../inputs/grep1.dat:5656:  	        p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:5657:                DEBUG_PRINT1
../inputs/grep1.dat:5658:                  ("  End of pattern: change to `pop_failure_jump'.\n");
../inputs/grep1.dat:5659:              }
../inputs/grep1.dat:5660:
../inputs/grep1.dat:5661:            else if ((re_opcode_t) *p2 == exactn
../inputs/grep1.dat:5662:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
../inputs/grep1.dat:5663:	      {
../inputs/grep1.dat:5664:		register unsigned char c
../inputs/grep1.dat:5665:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
../inputs/grep1.dat:5666:		p1 = p + mcnt;
../inputs/grep1.dat:5667:
../inputs/grep1.dat:5668:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
../inputs/grep1.dat:5669:                   to the `maybe_finalize_jump' of this case.  Examine what 
../inputs/grep1.dat:5670:                   follows.  */
../inputs/grep1.dat:5671:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
../inputs/grep1.dat:5672:                  {
../inputs/grep1.dat:5673:  		    p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:5674:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
../inputs/grep1.dat:5675:                                  c, p1[5]);
../inputs/grep1.dat:5676:                  }
../inputs/grep1.dat:5677:                  
../inputs/grep1.dat:5678:		else if ((re_opcode_t) p1[3] == charset
../inputs/grep1.dat:5679:			 || (re_opcode_t) p1[3] == charset_not)
../inputs/grep1.dat:5680:		  {
../inputs/grep1.dat:5681:		    int not = (re_opcode_t) p1[3] == charset_not;
../inputs/grep1.dat:5682:                    
../inputs/grep1.dat:5683:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
../inputs/grep1.dat:5684:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
../inputs/grep1.dat:5685:		      not = !not;
../inputs/grep1.dat:5686:
../inputs/grep1.dat:5687:                    /* `not' is equal to 1 if c would match, which means
../inputs/grep1.dat:5688:                        that we can't change to pop_failure_jump.  */
../inputs/grep1.dat:5689:		    if (!not)
../inputs/grep1.dat:5690:                      {
../inputs/grep1.dat:5691:  		        p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:5692:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
../inputs/grep1.dat:5693:                      }
../inputs/grep1.dat:5694:		  }
../inputs/grep1.dat:5695:	      }
../inputs/grep1.dat:5696:	  }
../inputs/grep1.dat:5697:	  p -= 2;		/* Point at relative address again.  */
../inputs/grep1.dat:5698:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
../inputs/grep1.dat:5699:	    {
../inputs/grep1.dat:5700:	      p[-1] = (unsigned char) jump;
../inputs/grep1.dat:5701:              DEBUG_PRINT1 ("  Match => jump.\n");
../inputs/grep1.dat:5702:	      goto unconditional_jump;
../inputs/grep1.dat:5703:	    }
../inputs/grep1.dat:5704:        /* Note fall through.  */
../inputs/grep1.dat:5705:
../inputs/grep1.dat:5706:
../inputs/grep1.dat:5707:	/* The end of a simple repeat has a pop_failure_jump back to
../inputs/grep1.dat:5708:           its matching on_failure_jump, where the latter will push a
../inputs/grep1.dat:5709:           failure point.  The pop_failure_jump takes off failure
../inputs/grep1.dat:5710:           points put on by this pop_failure_jump's matching
../inputs/grep1.dat:5711:           on_failure_jump; we got through the pattern to here from the
../inputs/grep1.dat:5712:           matching on_failure_jump, so didn't fail.  */
../inputs/grep1.dat:5713:        case pop_failure_jump:
../inputs/grep1.dat:5714:          {
../inputs/grep1.dat:5715:            /* We need to pass separate storage for the lowest and
../inputs/grep1.dat:5716:               highest registers, even though we don't care about the
../inputs/grep1.dat:5717:               actual values.  Otherwise, we will restore only one
../inputs/grep1.dat:5718:               register from the stack, since lowest will == highest in
../inputs/grep1.dat:5719:               `pop_failure_point'.  */
../inputs/grep1.dat:5720:            unsigned dummy_low_reg, dummy_high_reg;
../inputs/grep1.dat:5721:            unsigned char *pdummy;
../inputs/grep1.dat:5722:            const char *sdummy;
../inputs/grep1.dat:5723:
../inputs/grep1.dat:5724:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
../inputs/grep1.dat:5725:            POP_FAILURE_POINT (sdummy, pdummy,
../inputs/grep1.dat:5726:                               dummy_low_reg, dummy_high_reg,
../inputs/grep1.dat:5727:                               reg_dummy, reg_dummy, reg_info_dummy);
../inputs/grep1.dat:5728:          }
../inputs/grep1.dat:5729:          /* Note fall through.  */
../inputs/grep1.dat:5730:
../inputs/grep1.dat:5731:          
../inputs/grep1.dat:5732:        /* Unconditionally jump (without popping any failure points).  */
../inputs/grep1.dat:5733:        case jump:
../inputs/grep1.dat:5734:	unconditional_jump:
../inputs/grep1.dat:5735:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
../inputs/grep1.dat:5736:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
../inputs/grep1.dat:5737:	  p += mcnt;				/* Do the jump.  */
../inputs/grep1.dat:5738:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
../inputs/grep1.dat:5739:	  break;
../inputs/grep1.dat:5740:
../inputs/grep1.dat:5741:	
../inputs/grep1.dat:5742:        /* We need this opcode so we can detect where alternatives end
../inputs/grep1.dat:5743:           in `group_match_null_string_p' et al.  */
../inputs/grep1.dat:5744:        case jump_past_alt:
../inputs/grep1.dat:5745:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
../inputs/grep1.dat:5746:          goto unconditional_jump;
../inputs/grep1.dat:5747:
../inputs/grep1.dat:5748:
../inputs/grep1.dat:5749:        /* Normally, the on_failure_jump pushes a failure point, which
../inputs/grep1.dat:5750:           then gets popped at pop_failure_jump.  We will end up at
../inputs/grep1.dat:5751:           pop_failure_jump, also, and with a pattern of, say, `a+', we
../inputs/grep1.dat:5752:           are skipping over the on_failure_jump, so we have to push
../inputs/grep1.dat:5753:           something meaningless for pop_failure_jump to pop.  */
../inputs/grep1.dat:5754:        case dummy_failure_jump:
../inputs/grep1.dat:5755:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
../inputs/grep1.dat:5756:          /* It doesn't matter what we push for the string here.  What
../inputs/grep1.dat:5757:             the code at `fail' tests is the value for the pattern.  */
../inputs/grep1.dat:5758:          PUSH_FAILURE_POINT (0, 0, -2);
../inputs/grep1.dat:5759:          goto unconditional_jump;
../inputs/grep1.dat:5760:
../inputs/grep1.dat:5761:
../inputs/grep1.dat:5762:        /* At the end of an alternative, we need to push a dummy failure
../inputs/grep1.dat:5763:           point in case we are followed by a `pop_failure_jump', because
../inputs/grep1.dat:5764:           we don't want the failure point for the alternative to be
../inputs/grep1.dat:5765:           popped.  For example, matching `(a|ab)*' against `aab'
../inputs/grep1.dat:5766:           requires that we match the `ab' alternative.  */
../inputs/grep1.dat:5767:        case push_dummy_failure:
../inputs/grep1.dat:5768:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
../inputs/grep1.dat:5769:          /* See comments just above at `dummy_failure_jump' about the
../inputs/grep1.dat:5770:             two zeroes.  */
../inputs/grep1.dat:5771:          PUSH_FAILURE_POINT (0, 0, -2);
../inputs/grep1.dat:5772:          break;
../inputs/grep1.dat:5773:
../inputs/grep1.dat:5774:        /* Have to succeed matching what follows at least n times.
../inputs/grep1.dat:5775:           After that, handle like `on_failure_jump'.  */
../inputs/grep1.dat:5776:        case succeed_n: 
../inputs/grep1.dat:5777:          EXTRACT_NUMBER (mcnt, p + 2);
../inputs/grep1.dat:5778:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
../inputs/grep1.dat:5779:
../inputs/grep1.dat:5780:          assert (mcnt >= 0);
../inputs/grep1.dat:5781:          /* Originally, this is how many times we HAVE to succeed.  */
../inputs/grep1.dat:5782:          if (mcnt > 0)
../inputs/grep1.dat:5783:            {
../inputs/grep1.dat:5784:               mcnt--;
../inputs/grep1.dat:5785:	       p += 2;
../inputs/grep1.dat:5786:               STORE_NUMBER_AND_INCR (p, mcnt);
../inputs/grep1.dat:5787:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
../inputs/grep1.dat:5788:            }
../inputs/grep1.dat:5789:	  else if (mcnt == 0)
../inputs/grep1.dat:5790:            {
../inputs/grep1.dat:5791:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
../inputs/grep1.dat:5792:	      p[2] = (unsigned char) no_op;
../inputs/grep1.dat:5793:              p[3] = (unsigned char) no_op;
../inputs/grep1.dat:5794:              goto on_failure;
../inputs/grep1.dat:5795:            }
../inputs/grep1.dat:5796:          break;
../inputs/grep1.dat:5797:        
../inputs/grep1.dat:5798:        case jump_n: 
../inputs/grep1.dat:5799:          EXTRACT_NUMBER (mcnt, p + 2);
../inputs/grep1.dat:5800:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
../inputs/grep1.dat:5801:
../inputs/grep1.dat:5802:          /* Originally, this is how many times we CAN jump.  */
../inputs/grep1.dat:5803:          if (mcnt)
../inputs/grep1.dat:5804:            {
../inputs/grep1.dat:5805:               mcnt--;
../inputs/grep1.dat:5806:               STORE_NUMBER (p + 2, mcnt);
../inputs/grep1.dat:5807:	       goto unconditional_jump;	     
../inputs/grep1.dat:5808:            }
../inputs/grep1.dat:5809:          /* If don't have to jump any more, skip over the rest of command.  */
../inputs/grep1.dat:5810:	  else      
../inputs/grep1.dat:5811:	    p += 4;		     
../inputs/grep1.dat:5812:          break;
../inputs/grep1.dat:5813:        
../inputs/grep1.dat:5814:	case set_number_at:
../inputs/grep1.dat:5815:	  {
../inputs/grep1.dat:5816:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
../inputs/grep1.dat:5817:
../inputs/grep1.dat:5818:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:5819:            p1 = p + mcnt;
../inputs/grep1.dat:5820:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:5821:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
../inputs/grep1.dat:5822:	    STORE_NUMBER (p1, mcnt);
../inputs/grep1.dat:5823:            break;
../inputs/grep1.dat:5824:          }
../inputs/grep1.dat:5825:
../inputs/grep1.dat:5826:        case wordbound:
../inputs/grep1.dat:5827:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
../inputs/grep1.dat:5828:          if (AT_WORD_BOUNDARY (d))
../inputs/grep1.dat:5829:	    break;
../inputs/grep1.dat:5830:          goto fail;
../inputs/grep1.dat:5831:
../inputs/grep1.dat:5832:	case notwordbound:
../inputs/grep1.dat:5833:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
../inputs/grep1.dat:5834:	  if (AT_WORD_BOUNDARY (d))
../inputs/grep1.dat:5835:	    goto fail;
../inputs/grep1.dat:5836:          break;
../inputs/grep1.dat:5837:
../inputs/grep1.dat:5838:	case wordbeg:
../inputs/grep1.dat:5839:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
../inputs/grep1.dat:5840:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
../inputs/grep1.dat:5841:	    break;
../inputs/grep1.dat:5842:          goto fail;
../inputs/grep1.dat:5843:
../inputs/grep1.dat:5844:	case wordend:
../inputs/grep1.dat:5845:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
../inputs/grep1.dat:5846:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
../inputs/grep1.dat:5847:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
../inputs/grep1.dat:5848:	    break;
../inputs/grep1.dat:5849:          goto fail;
../inputs/grep1.dat:5850:
../inputs/grep1.dat:5851:#ifdef emacs
../inputs/grep1.dat:5852:#ifdef emacs19
../inputs/grep1.dat:5853:  	case before_dot:
../inputs/grep1.dat:5854:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
../inputs/grep1.dat:5855: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
../inputs/grep1.dat:5856:  	    goto fail;
../inputs/grep1.dat:5857:  	  break;
../inputs/grep1.dat:5858:  
../inputs/grep1.dat:5859:  	case at_dot:
../inputs/grep1.dat:5860:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
../inputs/grep1.dat:5861: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
../inputs/grep1.dat:5862:  	    goto fail;
../inputs/grep1.dat:5863:  	  break;
../inputs/grep1.dat:5864:  
../inputs/grep1.dat:5865:  	case after_dot:
../inputs/grep1.dat:5866:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
../inputs/grep1.dat:5867:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
../inputs/grep1.dat:5868:  	    goto fail;
../inputs/grep1.dat:5869:  	  break;
../inputs/grep1.dat:5870:#else /* not emacs19 */
../inputs/grep1.dat:5871:	case at_dot:
../inputs/grep1.dat:5872:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
../inputs/grep1.dat:5873:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
../inputs/grep1.dat:5874:	    goto fail;
../inputs/grep1.dat:5875:	  break;
../inputs/grep1.dat:5876:#endif /* not emacs19 */
../inputs/grep1.dat:5877:
../inputs/grep1.dat:5878:	case syntaxspec:
../inputs/grep1.dat:5879:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
../inputs/grep1.dat:5880:	  mcnt = *p++;
../inputs/grep1.dat:5881:	  goto matchsyntax;
../inputs/grep1.dat:5882:
../inputs/grep1.dat:5883:        case wordchar:
../inputs/grep1.dat:5884:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
../inputs/grep1.dat:5885:	  mcnt = (int) Sword;
../inputs/grep1.dat:5886:        matchsyntax:
../inputs/grep1.dat:5887:	  PREFETCH ();
../inputs/grep1.dat:5888:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
../inputs/grep1.dat:5889:            goto fail;
../inputs/grep1.dat:5890:          SET_REGS_MATCHED ();
../inputs/grep1.dat:5891:	  break;
../inputs/grep1.dat:5892:
../inputs/grep1.dat:5893:	case notsyntaxspec:
../inputs/grep1.dat:5894:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
../inputs/grep1.dat:5895:	  mcnt = *p++;
../inputs/grep1.dat:5896:	  goto matchnotsyntax;
../inputs/grep1.dat:5897:
../inputs/grep1.dat:5898:        case notwordchar:
../inputs/grep1.dat:5899:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
../inputs/grep1.dat:5900:	  mcnt = (int) Sword;
../inputs/grep1.dat:5901:        matchnotsyntax:
../inputs/grep1.dat:5902:	  PREFETCH ();
../inputs/grep1.dat:5903:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
../inputs/grep1.dat:5904:            goto fail;
../inputs/grep1.dat:5905:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:5906:          break;
../inputs/grep1.dat:5907:
../inputs/grep1.dat:5908:#else /* not emacs */
../inputs/grep1.dat:5909:	case wordchar:
../inputs/grep1.dat:5910:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
../inputs/grep1.dat:5911:	  PREFETCH ();
../inputs/grep1.dat:5912:          if (!WORDCHAR_P (d))
../inputs/grep1.dat:5913:            goto fail;
../inputs/grep1.dat:5914:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:5915:          d++;
../inputs/grep1.dat:5916:	  break;
../inputs/grep1.dat:5917:	  
../inputs/grep1.dat:5918:	case notwordchar:
../inputs/grep1.dat:5919:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
../inputs/grep1.dat:5920:	  PREFETCH ();
../inputs/grep1.dat:5921:	  if (WORDCHAR_P (d))
../inputs/grep1.dat:5922:            goto fail;
../inputs/grep1.dat:5923:          SET_REGS_MATCHED ();
../inputs/grep1.dat:5924:          d++;
../inputs/grep1.dat:5925:	  break;
../inputs/grep1.dat:5926:#endif /* not emacs */
../inputs/grep1.dat:5927:          
../inputs/grep1.dat:5928:        default:
../inputs/grep1.dat:5929:          abort ();
../inputs/grep1.dat:5930:	}
../inputs/grep1.dat:5931:      continue;  /* Successfully executed one pattern command; keep going.  */
../inputs/grep1.dat:5932:
../inputs/grep1.dat:5933:
../inputs/grep1.dat:5934:    /* We goto here if a matching operation fails. */
../inputs/grep1.dat:5935:    fail:
../inputs/grep1.dat:5936:      if (!FAIL_STACK_EMPTY ())
../inputs/grep1.dat:5937:	{ /* A restart point is known.  Restore to that state.  */
../inputs/grep1.dat:5938:          DEBUG_PRINT1 ("\nFAIL:\n");
../inputs/grep1.dat:5939:          POP_FAILURE_POINT (d, p,
../inputs/grep1.dat:5940:                             lowest_active_reg, highest_active_reg,
../inputs/grep1.dat:5941:                             regstart, regend, reg_info);
../inputs/grep1.dat:5942:
../inputs/grep1.dat:5943:          /* If this failure point is a dummy, try the next one.  */
../inputs/grep1.dat:5944:          if (!p)
../inputs/grep1.dat:5945:	    goto fail;
../inputs/grep1.dat:5946:
../inputs/grep1.dat:5947:          /* If we failed to the end of the pattern, don't examine *p.  */
../inputs/grep1.dat:5948:	  assert (p <= pend);
../inputs/grep1.dat:5949:          if (p < pend)
../inputs/grep1.dat:5950:            {
../inputs/grep1.dat:5951:              boolean is_a_jump_n = false;
../inputs/grep1.dat:5952:              
../inputs/grep1.dat:5953:              /* If failed to a backwards jump that's part of a repetition
../inputs/grep1.dat:5954:                 loop, need to pop this failure point and use the next one.  */
../inputs/grep1.dat:5955:              switch ((re_opcode_t) *p)
../inputs/grep1.dat:5956:                {
../inputs/grep1.dat:5957:                case jump_n:
../inputs/grep1.dat:5958:                  is_a_jump_n = true;
../inputs/grep1.dat:5959:                case maybe_pop_jump:
../inputs/grep1.dat:5960:                case pop_failure_jump:
../inputs/grep1.dat:5961:                case jump:
../inputs/grep1.dat:5962:                  p1 = p + 1;
../inputs/grep1.dat:5963:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:5964:                  p1 += mcnt;	
../inputs/grep1.dat:5965:
../inputs/grep1.dat:5966:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
../inputs/grep1.dat:5967:                      || (!is_a_jump_n
../inputs/grep1.dat:5968:                          && (re_opcode_t) *p1 == on_failure_jump))
../inputs/grep1.dat:5969:                    goto fail;
../inputs/grep1.dat:5970:                  break;
../inputs/grep1.dat:5971:                default:
../inputs/grep1.dat:5972:                  /* do nothing */ ;
../inputs/grep1.dat:5973:                }
../inputs/grep1.dat:5974:            }
../inputs/grep1.dat:5975:
../inputs/grep1.dat:5976:          if (d >= string1 && d <= end1)
../inputs/grep1.dat:5977:	    dend = end_match_1;
../inputs/grep1.dat:5978:        }
../inputs/grep1.dat:5979:      else
../inputs/grep1.dat:5980:        break;   /* Matching at this starting point really fails.  */
../inputs/grep1.dat:5981:    } /* for (;;) */
../inputs/grep1.dat:5982:
../inputs/grep1.dat:5983:  if (best_regs_set)
../inputs/grep1.dat:5984:    goto restore_best_regs;
../inputs/grep1.dat:5985:
../inputs/grep1.dat:5986:  FREE_VARIABLES ();
../inputs/grep1.dat:5987:
../inputs/grep1.dat:5988:  return -1;         			/* Failure to match.  */
../inputs/grep1.dat:5989:} /* re_match_2 */
../inputs/grep1.dat:5990:
../inputs/grep1.dat:5991:/* Subroutine definitions for re_match_2.  */
../inputs/grep1.dat:5992:
../inputs/grep1.dat:5993:
../inputs/grep1.dat:5994:/* We are passed P pointing to a register number after a start_memory.
../inputs/grep1.dat:5995:   
../inputs/grep1.dat:5996:   Return true if the pattern up to the corresponding stop_memory can
../inputs/grep1.dat:5997:   match the empty string, and false otherwise.
../inputs/grep1.dat:5998:   
../inputs/grep1.dat:5999:   If we find the matching stop_memory, sets P to point to one past its number.
../inputs/grep1.dat:6000:   Otherwise, sets P to an undefined byte less than or equal to END.
../inputs/grep1.dat:6001:
../inputs/grep1.dat:6002:   We don't handle duplicates properly (yet).  */
../inputs/grep1.dat:6003:
../inputs/grep1.dat:6004:static boolean
../inputs/grep1.dat:6005:group_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:6006:    unsigned char **p, *end;
../inputs/grep1.dat:6007:    register_info_type *reg_info;
../inputs/grep1.dat:6008:{
../inputs/grep1.dat:6009:  int mcnt;
../inputs/grep1.dat:6010:  /* Point to after the args to the start_memory.  */
../inputs/grep1.dat:6011:  unsigned char *p1 = *p + 2;
../inputs/grep1.dat:6012:  
../inputs/grep1.dat:6013:  while (p1 < end)
../inputs/grep1.dat:6014:    {
../inputs/grep1.dat:6015:      /* Skip over opcodes that can match nothing, and return true or
../inputs/grep1.dat:6016:	 false, as appropriate, when we get to one that can't, or to the
../inputs/grep1.dat:6017:         matching stop_memory.  */
../inputs/grep1.dat:6018:      
../inputs/grep1.dat:6019:      switch ((re_opcode_t) *p1)
../inputs/grep1.dat:6020:        {
../inputs/grep1.dat:6021:        /* Could be either a loop or a series of alternatives.  */
../inputs/grep1.dat:6022:        case on_failure_jump:
../inputs/grep1.dat:6023:          p1++;
../inputs/grep1.dat:6024:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6025:          
../inputs/grep1.dat:6026:          /* If the next operation is not a jump backwards in the
../inputs/grep1.dat:6027:	     pattern.  */
../inputs/grep1.dat:6028:
../inputs/grep1.dat:6029:	  if (mcnt >= 0)
../inputs/grep1.dat:6030:	    {
../inputs/grep1.dat:6031:              /* Go through the on_failure_jumps of the alternatives,
../inputs/grep1.dat:6032:                 seeing if any of the alternatives cannot match nothing.
../inputs/grep1.dat:6033:                 The last alternative starts with only a jump,
../inputs/grep1.dat:6034:                 whereas the rest start with on_failure_jump and end
../inputs/grep1.dat:6035:                 with a jump, e.g., here is the pattern for `a|b|c':
../inputs/grep1.dat:6036:
../inputs/grep1.dat:6037:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
../inputs/grep1.dat:6038:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
../inputs/grep1.dat:6039:                 /exactn/1/c						
../inputs/grep1.dat:6040:
../inputs/grep1.dat:6041:                 So, we have to first go through the first (n-1)
../inputs/grep1.dat:6042:                 alternatives and then deal with the last one separately.  */
../inputs/grep1.dat:6043:
../inputs/grep1.dat:6044:
../inputs/grep1.dat:6045:              /* Deal with the first (n-1) alternatives, which start
../inputs/grep1.dat:6046:                 with an on_failure_jump (see above) that jumps to right
../inputs/grep1.dat:6047:                 past a jump_past_alt.  */
../inputs/grep1.dat:6048:
../inputs/grep1.dat:6049:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
../inputs/grep1.dat:6050:                {
../inputs/grep1.dat:6051:                  /* `mcnt' holds how many bytes long the alternative
../inputs/grep1.dat:6052:                     is, including the ending `jump_past_alt' and
../inputs/grep1.dat:6053:                     its number.  */
../inputs/grep1.dat:6054:
../inputs/grep1.dat:6055:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
../inputs/grep1.dat:6056:				                      reg_info))
../inputs/grep1.dat:6057:                    return false;
../inputs/grep1.dat:6058:
../inputs/grep1.dat:6059:                  /* Move to right after this alternative, including the
../inputs/grep1.dat:6060:		     jump_past_alt.  */
../inputs/grep1.dat:6061:                  p1 += mcnt;	
../inputs/grep1.dat:6062:
../inputs/grep1.dat:6063:                  /* Break if it's the beginning of an n-th alternative
../inputs/grep1.dat:6064:                     that doesn't begin with an on_failure_jump.  */
../inputs/grep1.dat:6065:                  if ((re_opcode_t) *p1 != on_failure_jump)
../inputs/grep1.dat:6066:                    break;
../inputs/grep1.dat:6067:		
../inputs/grep1.dat:6068:		  /* Still have to check that it's not an n-th
../inputs/grep1.dat:6069:		     alternative that starts with an on_failure_jump.  */
../inputs/grep1.dat:6070:		  p1++;
../inputs/grep1.dat:6071:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6072:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
../inputs/grep1.dat:6073:                    {
../inputs/grep1.dat:6074:		      /* Get to the beginning of the n-th alternative.  */
../inputs/grep1.dat:6075:                      p1 -= 3;
../inputs/grep1.dat:6076:                      break;
../inputs/grep1.dat:6077:                    }
../inputs/grep1.dat:6078:                }
../inputs/grep1.dat:6079:
../inputs/grep1.dat:6080:              /* Deal with the last alternative: go back and get number
../inputs/grep1.dat:6081:                 of the `jump_past_alt' just before it.  `mcnt' contains
../inputs/grep1.dat:6082:                 the length of the alternative.  */
../inputs/grep1.dat:6083:              EXTRACT_NUMBER (mcnt, p1 - 2);
../inputs/grep1.dat:6084:
../inputs/grep1.dat:6085:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
../inputs/grep1.dat:6086:                return false;
../inputs/grep1.dat:6087:
../inputs/grep1.dat:6088:              p1 += mcnt;	/* Get past the n-th alternative.  */
../inputs/grep1.dat:6089:            } /* if mcnt > 0 */
../inputs/grep1.dat:6090:          break;
../inputs/grep1.dat:6091:
../inputs/grep1.dat:6092:          
../inputs/grep1.dat:6093:        case stop_memory:
../inputs/grep1.dat:6094:	  assert (p1[1] == **p);
../inputs/grep1.dat:6095:          *p = p1 + 2;
../inputs/grep1.dat:6096:          return true;
../inputs/grep1.dat:6097:
../inputs/grep1.dat:6098:        
../inputs/grep1.dat:6099:        default: 
../inputs/grep1.dat:6100:          if (!common_op_match_null_string_p (&p1, end, reg_info))
../inputs/grep1.dat:6101:            return false;
../inputs/grep1.dat:6102:        }
../inputs/grep1.dat:6103:    } /* while p1 < end */
../inputs/grep1.dat:6104:
../inputs/grep1.dat:6105:  return false;
../inputs/grep1.dat:6106:} /* group_match_null_string_p */
../inputs/grep1.dat:6107:
../inputs/grep1.dat:6108:
../inputs/grep1.dat:6109:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
../inputs/grep1.dat:6110:   It expects P to be the first byte of a single alternative and END one
../inputs/grep1.dat:6111:   byte past the last. The alternative can contain groups.  */
../inputs/grep1.dat:6112:   
../inputs/grep1.dat:6113:static boolean
../inputs/grep1.dat:6114:alt_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:6115:    unsigned char *p, *end;
../inputs/grep1.dat:6116:    register_info_type *reg_info;
../inputs/grep1.dat:6117:{
../inputs/grep1.dat:6118:  int mcnt;
../inputs/grep1.dat:6119:  unsigned char *p1 = p;
../inputs/grep1.dat:6120:  
../inputs/grep1.dat:6121:  while (p1 < end)
../inputs/grep1.dat:6122:    {
../inputs/grep1.dat:6123:      /* Skip over opcodes that can match nothing, and break when we get 
../inputs/grep1.dat:6124:         to one that can't.  */
../inputs/grep1.dat:6125:      
../inputs/grep1.dat:6126:      switch ((re_opcode_t) *p1)
../inputs/grep1.dat:6127:        {
../inputs/grep1.dat:6128:	/* It's a loop.  */
../inputs/grep1.dat:6129:        case on_failure_jump:
../inputs/grep1.dat:6130:          p1++;
../inputs/grep1.dat:6131:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6132:          p1 += mcnt;
../inputs/grep1.dat:6133:          break;
../inputs/grep1.dat:6134:          
../inputs/grep1.dat:6135:	default: 
../inputs/grep1.dat:6136:          if (!common_op_match_null_string_p (&p1, end, reg_info))
../inputs/grep1.dat:6137:            return false;
../inputs/grep1.dat:6138:        }
../inputs/grep1.dat:6139:    }  /* while p1 < end */
../inputs/grep1.dat:6140:
../inputs/grep1.dat:6141:  return true;
../inputs/grep1.dat:6142:} /* alt_match_null_string_p */
../inputs/grep1.dat:6143:
../inputs/grep1.dat:6144:
../inputs/grep1.dat:6145:/* Deals with the ops common to group_match_null_string_p and
../inputs/grep1.dat:6146:   alt_match_null_string_p.  
../inputs/grep1.dat:6147:   
../inputs/grep1.dat:6148:   Sets P to one after the op and its arguments, if any.  */
../inputs/grep1.dat:6149:
../inputs/grep1.dat:6150:static boolean
../inputs/grep1.dat:6151:common_op_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:6152:    unsigned char **p, *end;
../inputs/grep1.dat:6153:    register_info_type *reg_info;
../inputs/grep1.dat:6154:{
../inputs/grep1.dat:6155:  int mcnt;
../inputs/grep1.dat:6156:  boolean ret;
../inputs/grep1.dat:6157:  int reg_no;
../inputs/grep1.dat:6158:  unsigned char *p1 = *p;
../inputs/grep1.dat:6159:
../inputs/grep1.dat:6160:  switch ((re_opcode_t) *p1++)
../inputs/grep1.dat:6161:    {
../inputs/grep1.dat:6162:    case no_op:
../inputs/grep1.dat:6163:    case begline:
../inputs/grep1.dat:6164:    case endline:
../inputs/grep1.dat:6165:    case begbuf:
../inputs/grep1.dat:6166:    case endbuf:
../inputs/grep1.dat:6167:    case wordbeg:
../inputs/grep1.dat:6168:    case wordend:
../inputs/grep1.dat:6169:    case wordbound:
../inputs/grep1.dat:6170:    case notwordbound:
../inputs/grep1.dat:6171:#ifdef emacs
../inputs/grep1.dat:6172:    case before_dot:
../inputs/grep1.dat:6173:    case at_dot:
../inputs/grep1.dat:6174:    case after_dot:
../inputs/grep1.dat:6175:#endif
../inputs/grep1.dat:6176:      break;
../inputs/grep1.dat:6177:
../inputs/grep1.dat:6178:    case start_memory:
../inputs/grep1.dat:6179:      reg_no = *p1;
../inputs/grep1.dat:6180:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
../inputs/grep1.dat:6181:      ret = group_match_null_string_p (&p1, end, reg_info);
../inputs/grep1.dat:6182:      
../inputs/grep1.dat:6183:      /* Have to set this here in case we're checking a group which
../inputs/grep1.dat:6184:         contains a group and a back reference to it.  */
../inputs/grep1.dat:6185:
../inputs/grep1.dat:6186:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
../inputs/grep1.dat:6187:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
../inputs/grep1.dat:6188:
../inputs/grep1.dat:6189:      if (!ret)
../inputs/grep1.dat:6190:        return false;
../inputs/grep1.dat:6191:      break;
../inputs/grep1.dat:6192:          
../inputs/grep1.dat:6193:    /* If this is an optimized succeed_n for zero times, make the jump.  */
../inputs/grep1.dat:6194:    case jump:
../inputs/grep1.dat:6195:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6196:      if (mcnt >= 0)
../inputs/grep1.dat:6197:        p1 += mcnt;
../inputs/grep1.dat:6198:      else
../inputs/grep1.dat:6199:        return false;
../inputs/grep1.dat:6200:      break;
../inputs/grep1.dat:6201:
../inputs/grep1.dat:6202:    case succeed_n:
../inputs/grep1.dat:6203:      /* Get to the number of times to succeed.  */
../inputs/grep1.dat:6204:      p1 += 2;		
../inputs/grep1.dat:6205:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6206:
../inputs/grep1.dat:6207:      if (mcnt == 0)
../inputs/grep1.dat:6208:        {
../inputs/grep1.dat:6209:          p1 -= 4;
../inputs/grep1.dat:6210:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:6211:          p1 += mcnt;
../inputs/grep1.dat:6212:        }
../inputs/grep1.dat:6213:      else
../inputs/grep1.dat:6214:        return false;
../inputs/grep1.dat:6215:      break;
../inputs/grep1.dat:6216:
../inputs/grep1.dat:6217:    case duplicate: 
../inputs/grep1.dat:6218:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
../inputs/grep1.dat:6219:        return false;
../inputs/grep1.dat:6220:      break;
../inputs/grep1.dat:6221:
../inputs/grep1.dat:6222:    case set_number_at:
../inputs/grep1.dat:6223:      p1 += 4;
../inputs/grep1.dat:6224:
../inputs/grep1.dat:6225:    default:
../inputs/grep1.dat:6226:      /* All other opcodes mean we cannot match the empty string.  */
../inputs/grep1.dat:6227:      return false;
../inputs/grep1.dat:6228:  }
../inputs/grep1.dat:6229:
../inputs/grep1.dat:6230:  *p = p1;
../inputs/grep1.dat:6231:  return true;
../inputs/grep1.dat:6232:} /* common_op_match_null_string_p */
../inputs/grep1.dat:6233:
../inputs/grep1.dat:6234:
../inputs/grep1.dat:6235:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
../inputs/grep1.dat:6236:   bytes; nonzero otherwise.  */
../inputs/grep1.dat:6237:   
../inputs/grep1.dat:6238:static int
../inputs/grep1.dat:6239:bcmp_translate (s1, s2, len, translate)
../inputs/grep1.dat:6240:     unsigned char *s1, *s2;
../inputs/grep1.dat:6241:     register int len;
../inputs/grep1.dat:6242:     char *translate;
../inputs/grep1.dat:6243:{
../inputs/grep1.dat:6244:  register unsigned char *p1 = s1, *p2 = s2;
../inputs/grep1.dat:6245:  while (len)
../inputs/grep1.dat:6246:    {
../inputs/grep1.dat:6247:      if (translate[*p1++] != translate[*p2++]) return 1;
../inputs/grep1.dat:6248:      len--;
../inputs/grep1.dat:6249:    }
../inputs/grep1.dat:6250:  return 0;
../inputs/grep1.dat:6251:}
../inputs/grep1.dat:6252:
../inputs/grep1.dat:6253:/* Entry points for GNU code.  */
../inputs/grep1.dat:6254:
../inputs/grep1.dat:6255:/* re_compile_pattern is the GNU regular expression compiler: it
../inputs/grep1.dat:6256:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
../inputs/grep1.dat:6257:   Returns 0 if the pattern was valid, otherwise an error string.
../inputs/grep1.dat:6258:   
../inputs/grep1.dat:6259:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
../inputs/grep1.dat:6260:   are set in BUFP on entry.
../inputs/grep1.dat:6261:   
../inputs/grep1.dat:6262:   We call regex_compile to do the actual compilation.  */
../inputs/grep1.dat:6263:
../inputs/grep1.dat:6264:const char *
../inputs/grep1.dat:6265:re_compile_pattern (pattern, length, bufp)
../inputs/grep1.dat:6266:     const char *pattern;
../inputs/grep1.dat:6267:     int length;
../inputs/grep1.dat:6268:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:6269:{
../inputs/grep1.dat:6270:  reg_errcode_t ret;
../inputs/grep1.dat:6271:  
../inputs/grep1.dat:6272:  /* GNU code is written to assume at least RE_NREGS registers will be set
../inputs/grep1.dat:6273:     (and at least one extra will be -1).  */
../inputs/grep1.dat:6274:  bufp->regs_allocated = REGS_UNALLOCATED;
../inputs/grep1.dat:6275:  
../inputs/grep1.dat:6276:  /* And GNU code determines whether or not to get register information
../inputs/grep1.dat:6277:     by passing null for the REGS argument to re_match, etc., not by
../inputs/grep1.dat:6278:     setting no_sub.  */
../inputs/grep1.dat:6279:  bufp->no_sub = 0;
../inputs/grep1.dat:6280:  
../inputs/grep1.dat:6281:  /* Match anchors at newline.  */
../inputs/grep1.dat:6282:  bufp->newline_anchor = 1;
../inputs/grep1.dat:6283:  
../inputs/grep1.dat:6284:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
../inputs/grep1.dat:6285:
../inputs/grep1.dat:6286:  return re_error_msg[(int) ret];
../inputs/grep1.dat:6287:}     
../inputs/grep1.dat:6288:
../inputs/grep1.dat:6289:/* Entry points compatible with 4.2 BSD regex library.  We don't define
../inputs/grep1.dat:6290:   them if this is an Emacs or POSIX compilation.  */
../inputs/grep1.dat:6291:
../inputs/grep1.dat:6292:#if !defined (emacs) && !defined (_POSIX_SOURCE)
../inputs/grep1.dat:6293:
../inputs/grep1.dat:6294:/* BSD has one and only one pattern buffer.  */
../inputs/grep1.dat:6295:static struct re_pattern_buffer re_comp_buf;
../inputs/grep1.dat:6296:
../inputs/grep1.dat:6297:char *
../inputs/grep1.dat:6298:re_comp (s)
../inputs/grep1.dat:6299:    const char *s;
../inputs/grep1.dat:6300:{
../inputs/grep1.dat:6301:  reg_errcode_t ret;
../inputs/grep1.dat:6302:  
../inputs/grep1.dat:6303:  if (!s)
../inputs/grep1.dat:6304:    {
../inputs/grep1.dat:6305:      if (!re_comp_buf.buffer)
../inputs/grep1.dat:6306:	return "No previous regular expression";
../inputs/grep1.dat:6307:      return 0;
../inputs/grep1.dat:6308:    }
../inputs/grep1.dat:6309:
../inputs/grep1.dat:6310:  if (!re_comp_buf.buffer)
../inputs/grep1.dat:6311:    {
../inputs/grep1.dat:6312:      re_comp_buf.buffer = (unsigned char *) malloc (200);
../inputs/grep1.dat:6313:      if (re_comp_buf.buffer == NULL)
../inputs/grep1.dat:6314:        return "Memory exhausted";
../inputs/grep1.dat:6315:      re_comp_buf.allocated = 200;
../inputs/grep1.dat:6316:
../inputs/grep1.dat:6317:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
../inputs/grep1.dat:6318:      if (re_comp_buf.fastmap == NULL)
../inputs/grep1.dat:6319:	return "Memory exhausted";
../inputs/grep1.dat:6320:    }
../inputs/grep1.dat:6321:
../inputs/grep1.dat:6322:  /* Since `re_exec' always passes NULL for the `regs' argument, we
../inputs/grep1.dat:6323:     don't need to initialize the pattern buffer fields which affect it.  */
../inputs/grep1.dat:6324:
../inputs/grep1.dat:6325:  /* Match anchors at newlines.  */
../inputs/grep1.dat:6326:  re_comp_buf.newline_anchor = 1;
../inputs/grep1.dat:6327:
../inputs/grep1.dat:6328:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
../inputs/grep1.dat:6329:  
../inputs/grep1.dat:6330:  /* Yes, we're discarding `const' here.  */
../inputs/grep1.dat:6331:  return (char *) re_error_msg[(int) ret];
../inputs/grep1.dat:6332:}
../inputs/grep1.dat:6333:
../inputs/grep1.dat:6334:
../inputs/grep1.dat:6335:int
../inputs/grep1.dat:6336:re_exec (s)
../inputs/grep1.dat:6337:    const char *s;
../inputs/grep1.dat:6338:{
../inputs/grep1.dat:6339:  const int len = strlen (s);
../inputs/grep1.dat:6340:  return
../inputs/grep1.dat:6341:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
../inputs/grep1.dat:6342:}
../inputs/grep1.dat:6343:#endif /* not emacs and not _POSIX_SOURCE */
../inputs/grep1.dat:6344:
../inputs/grep1.dat:6345:/* POSIX.2 functions.  Don't define these for Emacs.  */
../inputs/grep1.dat:6346:
../inputs/grep1.dat:6347:#ifndef emacs
../inputs/grep1.dat:6348:
../inputs/grep1.dat:6349:/* regcomp takes a regular expression as a string and compiles it.
../inputs/grep1.dat:6350:
../inputs/grep1.dat:6351:   PREG is a regex_t *.  We do not expect any fields to be initialized,
../inputs/grep1.dat:6352:   since POSIX says we shouldn't.  Thus, we set
../inputs/grep1.dat:6353:
../inputs/grep1.dat:6354:     `buffer' to the compiled pattern;
../inputs/grep1.dat:6355:     `used' to the length of the compiled pattern;
../inputs/grep1.dat:6356:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
../inputs/grep1.dat:6357:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
../inputs/grep1.dat:6358:       RE_SYNTAX_POSIX_BASIC;
../inputs/grep1.dat:6359:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
../inputs/grep1.dat:6360:     `fastmap' and `fastmap_accurate' to zero;
../inputs/grep1.dat:6361:     `re_nsub' to the number of subexpressions in PATTERN.
../inputs/grep1.dat:6362:
../inputs/grep1.dat:6363:   PATTERN is the address of the pattern string.
../inputs/grep1.dat:6364:
../inputs/grep1.dat:6365:   CFLAGS is a series of bits which affect compilation.
../inputs/grep1.dat:6366:
../inputs/grep1.dat:6367:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
../inputs/grep1.dat:6368:     use POSIX basic syntax.
../inputs/grep1.dat:6369:
../inputs/grep1.dat:6370:     If REG_NEWLINE is set, then . and [^...] don't match newline.
../inputs/grep1.dat:6371:     Also, regexec will try a match beginning after every newline.
../inputs/grep1.dat:6372:
../inputs/grep1.dat:6373:     If REG_ICASE is set, then we considers upper- and lowercase
../inputs/grep1.dat:6374:     versions of letters to be equivalent when matching.
../inputs/grep1.dat:6375:
../inputs/grep1.dat:6376:     If REG_NOSUB is set, then when PREG is passed to regexec, that
../inputs/grep1.dat:6377:     routine will report only success or failure, and nothing about the
../inputs/grep1.dat:6378:     registers.
../inputs/grep1.dat:6379:
../inputs/grep1.dat:6380:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
../inputs/grep1.dat:6381:   the return codes and their meanings.)  */
../inputs/grep1.dat:6382:
../inputs/grep1.dat:6383:int
../inputs/grep1.dat:6384:regcomp (preg, pattern, cflags)
../inputs/grep1.dat:6385:    regex_t *preg;
../inputs/grep1.dat:6386:    const char *pattern; 
../inputs/grep1.dat:6387:    int cflags;
../inputs/grep1.dat:6388:{
../inputs/grep1.dat:6389:  reg_errcode_t ret;
../inputs/grep1.dat:6390:  unsigned syntax
../inputs/grep1.dat:6391:    = (cflags & REG_EXTENDED) ?
../inputs/grep1.dat:6392:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
../inputs/grep1.dat:6393:
../inputs/grep1.dat:6394:  /* regex_compile will allocate the space for the compiled pattern.  */
../inputs/grep1.dat:6395:  preg->buffer = 0;
../inputs/grep1.dat:6396:  preg->allocated = 0;
../inputs/grep1.dat:6397:  preg->used = 0;
../inputs/grep1.dat:6398:  
../inputs/grep1.dat:6399:  /* Don't bother to use a fastmap when searching.  This simplifies the
../inputs/grep1.dat:6400:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
../inputs/grep1.dat:6401:     characters after newlines into the fastmap.  This way, we just try
../inputs/grep1.dat:6402:     every character.  */
../inputs/grep1.dat:6403:  preg->fastmap = 0;
../inputs/grep1.dat:6404:  
../inputs/grep1.dat:6405:  if (cflags & REG_ICASE)
../inputs/grep1.dat:6406:    {
../inputs/grep1.dat:6407:      unsigned i;
../inputs/grep1.dat:6408:      
../inputs/grep1.dat:6409:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
../inputs/grep1.dat:6410:      if (preg->translate == NULL)
../inputs/grep1.dat:6411:        return (int) REG_ESPACE;
../inputs/grep1.dat:6412:
../inputs/grep1.dat:6413:      /* Map uppercase characters to corresponding lowercase ones.  */
../inputs/grep1.dat:6414:      for (i = 0; i < CHAR_SET_SIZE; i++)
../inputs/grep1.dat:6415:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
../inputs/grep1.dat:6416:    }
../inputs/grep1.dat:6417:  else
../inputs/grep1.dat:6418:    preg->translate = NULL;
../inputs/grep1.dat:6419:
../inputs/grep1.dat:6420:  /* If REG_NEWLINE is set, newlines are treated differently.  */
../inputs/grep1.dat:6421:  if (cflags & REG_NEWLINE)
../inputs/grep1.dat:6422:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
../inputs/grep1.dat:6423:      syntax &= ~RE_DOT_NEWLINE;
../inputs/grep1.dat:6424:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
../inputs/grep1.dat:6425:      /* It also changes the matching behavior.  */
../inputs/grep1.dat:6426:      preg->newline_anchor = 1;
../inputs/grep1.dat:6427:    }
../inputs/grep1.dat:6428:  else
../inputs/grep1.dat:6429:    preg->newline_anchor = 0;
../inputs/grep1.dat:6430:
../inputs/grep1.dat:6431:  preg->no_sub = !!(cflags & REG_NOSUB);
../inputs/grep1.dat:6432:
../inputs/grep1.dat:6433:  /* POSIX says a null character in the pattern terminates it, so we 
../inputs/grep1.dat:6434:     can use strlen here in compiling the pattern.  */
../inputs/grep1.dat:6435:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
../inputs/grep1.dat:6436:  
../inputs/grep1.dat:6437:  /* POSIX doesn't distinguish between an unmatched open-group and an
../inputs/grep1.dat:6438:     unmatched close-group: both are REG_EPAREN.  */
../inputs/grep1.dat:6439:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
../inputs/grep1.dat:6440:  
../inputs/grep1.dat:6441:  return (int) ret;
../inputs/grep1.dat:6442:}
../inputs/grep1.dat:6443:
../inputs/grep1.dat:6444:
../inputs/grep1.dat:6445:/* regexec searches for a given pattern, specified by PREG, in the
../inputs/grep1.dat:6446:   string STRING.
../inputs/grep1.dat:6447:   
../inputs/grep1.dat:6448:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
../inputs/grep1.dat:6449:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
../inputs/grep1.dat:6450:   least NMATCH elements, and we set them to the offsets of the
../inputs/grep1.dat:6451:   corresponding matched substrings.
../inputs/grep1.dat:6452:   
../inputs/grep1.dat:6453:   EFLAGS specifies `execution flags' which affect matching: if
../inputs/grep1.dat:6454:   REG_NOTBOL is set, then ^ does not match at the beginning of the
../inputs/grep1.dat:6455:   string; if REG_NOTEOL is set, then $ does not match at the end.
../inputs/grep1.dat:6456:   
../inputs/grep1.dat:6457:   We return 0 if we find a match and REG_NOMATCH if not.  */
../inputs/grep1.dat:6458:
../inputs/grep1.dat:6459:int
../inputs/grep1.dat:6460:regexec (preg, string, nmatch, pmatch, eflags)
../inputs/grep1.dat:6461:    const regex_t *preg;
../inputs/grep1.dat:6462:    const char *string; 
../inputs/grep1.dat:6463:    size_t nmatch; 
../inputs/grep1.dat:6464:    regmatch_t pmatch[]; 
../inputs/grep1.dat:6465:    int eflags;
../inputs/grep1.dat:6466:{
../inputs/grep1.dat:6467:  int ret;
../inputs/grep1.dat:6468:  struct re_registers regs;
../inputs/grep1.dat:6469:  regex_t private_preg;
../inputs/grep1.dat:6470:  int len = strlen (string);
../inputs/grep1.dat:6471:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
../inputs/grep1.dat:6472:
../inputs/grep1.dat:6473:  private_preg = *preg;
../inputs/grep1.dat:6474:  
../inputs/grep1.dat:6475:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
../inputs/grep1.dat:6476:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
../inputs/grep1.dat:6477:  
../inputs/grep1.dat:6478:  /* The user has told us exactly how many registers to return
../inputs/grep1.dat:6479:     information about, via `nmatch'.  We have to pass that on to the
../inputs/grep1.dat:6480:     matching routines.  */
../inputs/grep1.dat:6481:  private_preg.regs_allocated = REGS_FIXED;
../inputs/grep1.dat:6482:  
../inputs/grep1.dat:6483:  if (want_reg_info)
../inputs/grep1.dat:6484:    {
../inputs/grep1.dat:6485:      regs.num_regs = nmatch;
../inputs/grep1.dat:6486:      regs.start = TALLOC (nmatch, regoff_t);
../inputs/grep1.dat:6487:      regs.end = TALLOC (nmatch, regoff_t);
../inputs/grep1.dat:6488:      if (regs.start == NULL || regs.end == NULL)
../inputs/grep1.dat:6489:        return (int) REG_NOMATCH;
../inputs/grep1.dat:6490:    }
../inputs/grep1.dat:6491:
../inputs/grep1.dat:6492:  /* Perform the searching operation.  */
../inputs/grep1.dat:6493:  ret = re_search (&private_preg, string, len,
../inputs/grep1.dat:6494:                   /* start: */ 0, /* range: */ len,
../inputs/grep1.dat:6495:                   want_reg_info ? &regs : (struct re_registers *) 0);
../inputs/grep1.dat:6496:  
../inputs/grep1.dat:6497:  /* Copy the register information to the POSIX structure.  */
../inputs/grep1.dat:6498:  if (want_reg_info)
../inputs/grep1.dat:6499:    {
../inputs/grep1.dat:6500:      if (ret >= 0)
../inputs/grep1.dat:6501:        {
../inputs/grep1.dat:6502:          unsigned r;
../inputs/grep1.dat:6503:
../inputs/grep1.dat:6504:          for (r = 0; r < nmatch; r++)
../inputs/grep1.dat:6505:            {
../inputs/grep1.dat:6506:              pmatch[r].rm_so = regs.start[r];
../inputs/grep1.dat:6507:              pmatch[r].rm_eo = regs.end[r];
../inputs/grep1.dat:6508:            }
../inputs/grep1.dat:6509:        }
../inputs/grep1.dat:6510:
../inputs/grep1.dat:6511:      /* If we needed the temporary register info, free the space now.  */
../inputs/grep1.dat:6512:      free (regs.start);
../inputs/grep1.dat:6513:      free (regs.end);
../inputs/grep1.dat:6514:    }
../inputs/grep1.dat:6515:
../inputs/grep1.dat:6516:  /* We want zero return to mean success, unlike `re_search'.  */
../inputs/grep1.dat:6517:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
../inputs/grep1.dat:6518:}
../inputs/grep1.dat:6519:
../inputs/grep1.dat:6520:
../inputs/grep1.dat:6521:/* Returns a message corresponding to an error code, ERRCODE, returned
../inputs/grep1.dat:6522:   from either regcomp or regexec.   We don't use PREG here.  */
../inputs/grep1.dat:6523:
../inputs/grep1.dat:6524:size_t
../inputs/grep1.dat:6525:regerror (errcode, preg, errbuf, errbuf_size)
../inputs/grep1.dat:6526:    int errcode;
../inputs/grep1.dat:6527:    const regex_t *preg;
../inputs/grep1.dat:6528:    char *errbuf;
../inputs/grep1.dat:6529:    size_t errbuf_size;
../inputs/grep1.dat:6530:{
../inputs/grep1.dat:6531:  const char *msg;
../inputs/grep1.dat:6532:  size_t msg_size;
../inputs/grep1.dat:6533:
../inputs/grep1.dat:6534:  if (errcode < 0
../inputs/grep1.dat:6535:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
../inputs/grep1.dat:6536:    /* Only error codes returned by the rest of the code should be passed 
../inputs/grep1.dat:6537:       to this routine.  If we are given anything else, or if other regex
../inputs/grep1.dat:6538:       code generates an invalid error code, then the program has a bug.
../inputs/grep1.dat:6539:       Dump core so we can fix it.  */
../inputs/grep1.dat:6540:    abort ();
../inputs/grep1.dat:6541:
../inputs/grep1.dat:6542:  msg = re_error_msg[errcode];
../inputs/grep1.dat:6543:
../inputs/grep1.dat:6544:  /* POSIX doesn't require that we do anything in this case, but why
../inputs/grep1.dat:6545:     not be nice.  */
../inputs/grep1.dat:6546:  if (! msg)
../inputs/grep1.dat:6547:    msg = "Success";
../inputs/grep1.dat:6548:
../inputs/grep1.dat:6550:  
../inputs/grep1.dat:6551:  if (errbuf_size != 0)
../inputs/grep1.dat:6552:    {
../inputs/grep1.dat:6553:      if (msg_size > errbuf_size)
../inputs/grep1.dat:6554:        {
../inputs/grep1.dat:6555:          strncpy (errbuf, msg, errbuf_size - 1);
../inputs/grep1.dat:6556:          errbuf[errbuf_size - 1] = 0;
../inputs/grep1.dat:6557:        }
../inputs/grep1.dat:6558:      else
../inputs/grep1.dat:6559:        strcpy (errbuf, msg);
../inputs/grep1.dat:6560:    }
../inputs/grep1.dat:6561:
../inputs/grep1.dat:6562:  return msg_size;
../inputs/grep1.dat:6563:}
../inputs/grep1.dat:6564:
../inputs/grep1.dat:6565:
../inputs/grep1.dat:6566:/* Free dynamically allocated space used by PREG.  */
../inputs/grep1.dat:6567:
../inputs/grep1.dat:6568:void
../inputs/grep1.dat:6569:regfree (preg)
../inputs/grep1.dat:6570:    regex_t *preg;
../inputs/grep1.dat:6571:{
../inputs/grep1.dat:6572:  if (preg->buffer != NULL)
../inputs/grep1.dat:6573:    free (preg->buffer);
../inputs/grep1.dat:6574:  preg->buffer = NULL;
../inputs/grep1.dat:6575:  
../inputs/grep1.dat:6576:  preg->allocated = 0;
../inputs/grep1.dat:6577:  preg->used = 0;
../inputs/grep1.dat:6578:
../inputs/grep1.dat:6579:  if (preg->fastmap != NULL)
../inputs/grep1.dat:6580:    free (preg->fastmap);
../inputs/grep1.dat:6581:  preg->fastmap = NULL;
../inputs/grep1.dat:6582:  preg->fastmap_accurate = 0;
../inputs/grep1.dat:6583:
../inputs/grep1.dat:6584:  if (preg->translate != NULL)
../inputs/grep1.dat:6585:    free (preg->translate);
../inputs/grep1.dat:6586:  preg->translate = NULL;
../inputs/grep1.dat:6587:}
../inputs/grep1.dat:6588:
../inputs/grep1.dat:6589:#endif /* not emacs  */
../inputs/grep1.dat:6590:
../inputs/grep1.dat:6591:/*
../inputs/grep1.dat:6592:Local variables:
../inputs/grep1.dat:6593:make-backup-files: t
../inputs/grep1.dat:6594:version-control: t
../inputs/grep1.dat:6595:trim-versions-without-asking: nil
../inputs/grep1.dat:6596:End:
../inputs/grep1.dat:6597:*/
../inputs/grep1.dat:6598:/* dfa.c - deterministic extended regexp routines for GNU
../inputs/grep1.dat:6599:   Copyright (C) 1988 Free Software Foundation, Inc.
../inputs/grep1.dat:6600:
../inputs/grep1.dat:6601:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:6602:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:6603:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:6604:   any later version.
../inputs/grep1.dat:6605:
../inputs/grep1.dat:6606:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:6607:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:6608:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:6609:   GNU General Public License for more details.
../inputs/grep1.dat:6610:
../inputs/grep1.dat:6611:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:6612:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:6613:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:6614:
../inputs/grep1.dat:6615:/* Written June, 1988 by Mike Haertel
../inputs/grep1.dat:6616:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
../inputs/grep1.dat:6617:
../inputs/grep1.dat:6621:
../inputs/grep1.dat:6622:#ifdef STDC_HEADERS
../inputs/grep1.dat:6623:#if flag_stdlib==0
../inputs/grep1.dat:6625:#define flag_stdlib 1
../inputs/grep1.dat:6626:#endif
../inputs/grep1.dat:6627:#else
../inputs/grep1.dat:6628:#if flag_systypes==0 
../inputs/grep1.dat:6630:#define flag_systypes 1
../inputs/grep1.dat:6631:#endif
../inputs/grep1.dat:6632:extern char *calloc(), *malloc(), *realloc();
../inputs/grep1.dat:6633:extern void free();
../inputs/grep1.dat:6634:#endif
../inputs/grep1.dat:6635:
../inputs/grep1.dat:6636:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
../inputs/grep1.dat:6637:#if flag_string==0
../inputs/grep1.dat:6639:#define flag_string 1
../inputs/grep1.dat:6640:#endif
../inputs/grep1.dat:6641:#undef index
../inputs/grep1.dat:6642:#define index strchr
../inputs/grep1.dat:6643:#else
../inputs/grep1.dat:6644:#if flag_strings==0
../inputs/grep1.dat:6646:#define flag_strings 1
../inputs/grep1.dat:6647:#endif
../inputs/grep1.dat:6648:#endif
../inputs/grep1.dat:6649:
../inputs/grep1.dat:6650:#ifndef isgraph
../inputs/grep1.dat:6651:#define isgraph(C) (isprint(C) && !isspace(C))
../inputs/grep1.dat:6652:#endif
../inputs/grep1.dat:6653:
../inputs/grep1.dat:6654:#undef ISALPHA
../inputs/grep1.dat:6655:#undef ISUPPER
../inputs/grep1.dat:6656:#undef ISLOWER
../inputs/grep1.dat:6657:#undef ISDIGIT
../inputs/grep1.dat:6658:#undef ISXDIGIT
../inputs/grep1.dat:6659:#undef ISSPACE
../inputs/grep1.dat:6660:#undef ISPUNCT
../inputs/grep1.dat:6661:#undef ISALNUM
../inputs/grep1.dat:6662:#undef ISPRINT
../inputs/grep1.dat:6663:#undef ISGRAPH
../inputs/grep1.dat:6664:#undef ISCNTRL
../inputs/grep1.dat:6665:
../inputs/grep1.dat:6666:
../inputs/grep1.dat:6667:#ifdef isascii
../inputs/grep1.dat:6668:#define ISALPHA(C) (isascii(C) && isalpha(C))
../inputs/grep1.dat:6669:#define ISUPPER(C) (isascii(C) && isupper(C))
../inputs/grep1.dat:6670:#define ISLOWER(C) (isascii(C) && islower(C))
../inputs/grep1.dat:6671:#define ISDIGIT(C) (isascii(C) && isdigit(C))
../inputs/grep1.dat:6672:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
../inputs/grep1.dat:6673:#define ISSPACE(C) (isascii(C) && isspace(C))
../inputs/grep1.dat:6674:#define ISPUNCT(C) (isascii(C) && ispunct(C))
../inputs/grep1.dat:6675:#define ISALNUM(C) (isascii(C) && isalnum(C))
../inputs/grep1.dat:6676:#define ISPRINT(C) (isascii(C) && isprint(C))
../inputs/grep1.dat:6677:#define ISGRAPH(C) (isascii(C) && isgraph(C))
../inputs/grep1.dat:6678:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
../inputs/grep1.dat:6679:#else
../inputs/grep1.dat:6680:#define ISALPHA(C) isalpha(C)
../inputs/grep1.dat:6681:#define ISUPPER(C) isupper(C)
../inputs/grep1.dat:6682:#define ISLOWER(C) islower(C)
../inputs/grep1.dat:6683:#define ISDIGIT(C) isdigit(C)
../inputs/grep1.dat:6684:#define ISXDIGIT(C) isxdigit(C)
../inputs/grep1.dat:6685:#define ISSPACE(C) isspace(C)
../inputs/grep1.dat:6686:#define ISPUNCT(C) ispunct(C)
../inputs/grep1.dat:6687:#define ISALNUM(C) isalnum(C)
../inputs/grep1.dat:6688:#define ISPRINT(C) isprint(C)
../inputs/grep1.dat:6689:#define ISGRAPH(C) isgraph(C)
../inputs/grep1.dat:6690:#define ISCNTRL(C) iscntrl(C)
../inputs/grep1.dat:6691:#endif
../inputs/grep1.dat:6692:
../inputs/grep1.dat:6695:
../inputs/grep1.dat:6696:#if __STDC__
../inputs/grep1.dat:6697:typedef void *ptr_t;
../inputs/grep1.dat:6698:#else
../inputs/grep1.dat:6699:typedef char *ptr_t;
../inputs/grep1.dat:6700:#endif
../inputs/grep1.dat:6701:
../inputs/grep1.dat:6702:static void	dfamust();
../inputs/grep1.dat:6703:
../inputs/grep1.dat:6704:static ptr_t
../inputs/grep1.dat:6705:xcalloc(n, s)
../inputs/grep1.dat:6706:     int n;
../inputs/grep1.dat:6707:     size_t s;
../inputs/grep1.dat:6708:{
../inputs/grep1.dat:6709:  ptr_t r = calloc(n, s);
../inputs/grep1.dat:6710:
../inputs/grep1.dat:6711:  if (!r)
../inputs/grep1.dat:6712:    dfaerror("Memory exhausted");
../inputs/grep1.dat:6713:  return r;
../inputs/grep1.dat:6714:}
../inputs/grep1.dat:6715:
../inputs/grep1.dat:6716:static ptr_t
../inputs/grep1.dat:6717:xmalloc_1(n)
../inputs/grep1.dat:6718:     size_t n;
../inputs/grep1.dat:6719:{
../inputs/grep1.dat:6720:  ptr_t r = malloc(n);
../inputs/grep1.dat:6721:
../inputs/grep1.dat:6722:  assert(n != 0);
../inputs/grep1.dat:6723:  if (!r)
../inputs/grep1.dat:6724:    dfaerror("Memory exhausted");
../inputs/grep1.dat:6725:  return r;
../inputs/grep1.dat:6726:}
../inputs/grep1.dat:6727:
../inputs/grep1.dat:6728:static ptr_t
../inputs/grep1.dat:6729:xrealloc_1(p, n)
../inputs/grep1.dat:6730:     ptr_t p;
../inputs/grep1.dat:6731:     size_t n;
../inputs/grep1.dat:6732:{
../inputs/grep1.dat:6733:  ptr_t r = realloc(p, n);
../inputs/grep1.dat:6734:
../inputs/grep1.dat:6735:  assert(n != 0);
../inputs/grep1.dat:6736:  if (!r)
../inputs/grep1.dat:6737:    dfaerror("Memory exhausted");
../inputs/grep1.dat:6738:  return r;
../inputs/grep1.dat:6739:}
../inputs/grep1.dat:6740:
../inputs/grep1.dat:6741:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
../inputs/grep1.dat:6742:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
../inputs/grep1.dat:6743:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
../inputs/grep1.dat:6744:
../inputs/grep1.dat:6745:/* Reallocate an array of type t if nalloc is too small for index. */
../inputs/grep1.dat:6746:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
../inputs/grep1.dat:6747:  if ((index) >= (nalloc))			  \
../inputs/grep1.dat:6748:    {						  \
../inputs/grep1.dat:6749:      while ((index) >= (nalloc))		  \
../inputs/grep1.dat:6750:	(nalloc) *= 2;				  \
../inputs/grep1.dat:6751:      REALLOC(p, t, nalloc);			  \
../inputs/grep1.dat:6752:    }
../inputs/grep1.dat:6753:
../inputs/grep1.dat:6754:#ifdef DEBUG
../inputs/grep1.dat:6755:
../inputs/grep1.dat:6756:static void
../inputs/grep1.dat:6757:prtok(t)
../inputs/grep1.dat:6758:     token t;
../inputs/grep1.dat:6759:{
../inputs/grep1.dat:6760:  char *s;
../inputs/grep1.dat:6761:
../inputs/grep1.dat:6762:  if (t < 0)
../inputs/grep1.dat:6763:    fprintf(stderr, "END");
../inputs/grep1.dat:6764:  else if (t < NOTCHAR)
../inputs/grep1.dat:6765:    fprintf(stderr, "%c", t);
../inputs/grep1.dat:6766:  else
../inputs/grep1.dat:6767:    {
../inputs/grep1.dat:6768:      switch (t)
../inputs/grep1.dat:6769:	{
../inputs/grep1.dat:6770:	case EMPTY: s = "EMPTY"; break;
../inputs/grep1.dat:6771:	case BACKREF: s = "BACKREF"; break;
../inputs/grep1.dat:6772:	case BEGLINE: s = "BEGLINE"; break;
../inputs/grep1.dat:6773:	case ENDLINE: s = "ENDLINE"; break;
../inputs/grep1.dat:6774:	case BEGWORD: s = "BEGWORD"; break;
../inputs/grep1.dat:6775:	case ENDWORD: s = "ENDWORD"; break;
../inputs/grep1.dat:6776:	case LIMWORD: s = "LIMWORD"; break;
../inputs/grep1.dat:6777:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
../inputs/grep1.dat:6778:	case QMARK: s = "QMARK"; break;
../inputs/grep1.dat:6779:	case STAR: s = "STAR"; break;
../inputs/grep1.dat:6780:	case PLUS: s = "PLUS"; break;
../inputs/grep1.dat:6781:	case CAT: s = "CAT"; break;
../inputs/grep1.dat:6782:	case OR: s = "OR"; break;
../inputs/grep1.dat:6783:	case ORTOP: s = "ORTOP"; break;
../inputs/grep1.dat:6784:	case LPAREN: s = "LPAREN"; break;
../inputs/grep1.dat:6785:	case RPAREN: s = "RPAREN"; break;
../inputs/grep1.dat:6786:	default: s = "CSET"; break;
../inputs/grep1.dat:6787:	}
../inputs/grep1.dat:6788:      fprintf(stderr, "%s", s);
../inputs/grep1.dat:6789:    }
../inputs/grep1.dat:6790:}
../inputs/grep1.dat:6791:#endif /* DEBUG */
../inputs/grep1.dat:6792:
../inputs/grep1.dat:6793:/* Stuff pertaining to charclasses. */
../inputs/grep1.dat:6794:
../inputs/grep1.dat:6795:static int
../inputs/grep1.dat:6796:tstbit(b, c)
../inputs/grep1.dat:6797:     int b;
../inputs/grep1.dat:6798:     charclass c;
../inputs/grep1.dat:6799:{
../inputs/grep1.dat:6800:  return c[b / INTBITS] & 1 << b % INTBITS;
../inputs/grep1.dat:6801:}
../inputs/grep1.dat:6802:
../inputs/grep1.dat:6803:static void
../inputs/grep1.dat:6804:setbit(b, c)
../inputs/grep1.dat:6805:     int b;
../inputs/grep1.dat:6806:     charclass c;
../inputs/grep1.dat:6807:{
../inputs/grep1.dat:6808:  c[b / INTBITS] |= 1 << b % INTBITS;
../inputs/grep1.dat:6809:}
../inputs/grep1.dat:6810:
../inputs/grep1.dat:6811:static void
../inputs/grep1.dat:6812:clrbit(b, c)
../inputs/grep1.dat:6813:     int b;
../inputs/grep1.dat:6814:     charclass c;
../inputs/grep1.dat:6815:{
../inputs/grep1.dat:6816:  c[b / INTBITS] &= ~(1 << b % INTBITS);
../inputs/grep1.dat:6817:}
../inputs/grep1.dat:6818:
../inputs/grep1.dat:6819:static void
../inputs/grep1.dat:6820:copyset(src, dst)
../inputs/grep1.dat:6821:     charclass src;
../inputs/grep1.dat:6822:     charclass dst;
../inputs/grep1.dat:6823:{
../inputs/grep1.dat:6824:  int i;
../inputs/grep1.dat:6825:
../inputs/grep1.dat:6826:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:6827:    dst[i] = src[i];
../inputs/grep1.dat:6828:}
../inputs/grep1.dat:6829:
../inputs/grep1.dat:6830:static void
../inputs/grep1.dat:6831:zeroset(s)
../inputs/grep1.dat:6832:     charclass s;
../inputs/grep1.dat:6833:{
../inputs/grep1.dat:6834:  int i;
../inputs/grep1.dat:6835:
../inputs/grep1.dat:6836:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:6837:    s[i] = 0;
../inputs/grep1.dat:6838:}
../inputs/grep1.dat:6839:
../inputs/grep1.dat:6840:static void
../inputs/grep1.dat:6841:notset(s)
../inputs/grep1.dat:6842:     charclass s;
../inputs/grep1.dat:6843:{
../inputs/grep1.dat:6844:  int i;
../inputs/grep1.dat:6845:
../inputs/grep1.dat:6846:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:6847:    s[i] = ~s[i];
../inputs/grep1.dat:6848:}
../inputs/grep1.dat:6849:
../inputs/grep1.dat:6850:static int
../inputs/grep1.dat:6851:equal(s1, s2)
../inputs/grep1.dat:6852:     charclass s1;
../inputs/grep1.dat:6853:     charclass s2;
../inputs/grep1.dat:6854:{
../inputs/grep1.dat:6855:  int i;
../inputs/grep1.dat:6856:
../inputs/grep1.dat:6857:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:6858:    if (s1[i] != s2[i])
../inputs/grep1.dat:6859:      return 0;
../inputs/grep1.dat:6860:  return 1;
../inputs/grep1.dat:6861:}
../inputs/grep1.dat:6862:
../inputs/grep1.dat:6863:/* A pointer to the current dfa is kept here during parsing. */
../inputs/grep1.dat:6864:static struct dfa *dfa;
../inputs/grep1.dat:6865:
../inputs/grep1.dat:6866:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
../inputs/grep1.dat:6867:static int
../inputs/grep1.dat:6868:charclass_index(s)
../inputs/grep1.dat:6869:     charclass s;
../inputs/grep1.dat:6870:{
../inputs/grep1.dat:6871:  int i;
../inputs/grep1.dat:6872:
../inputs/grep1.dat:6873:  for (i = 0; i < dfa->cindex; ++i)
../inputs/grep1.dat:6874:    if (equal(s, dfa->charclasses[i]))
../inputs/grep1.dat:6875:      return i;
../inputs/grep1.dat:6876:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
../inputs/grep1.dat:6877:  ++dfa->cindex;
../inputs/grep1.dat:6878:  copyset(s, dfa->charclasses[i]);
../inputs/grep1.dat:6879:  return i;
../inputs/grep1.dat:6880:}
../inputs/grep1.dat:6881:
../inputs/grep1.dat:6882:/* Syntax bits controlling the behavior of the lexical analyzer. */
../inputs/grep1.dat:6883:static int syntax_bits, syntax_bits_set;
../inputs/grep1.dat:6884:
../inputs/grep1.dat:6885:/* Flag for case-folding letters into sets. */
../inputs/grep1.dat:6886:static int case_fold;
../inputs/grep1.dat:6887:
../inputs/grep1.dat:6888:/* Entry point to set syntax options. */
../inputs/grep1.dat:6889:void
../inputs/grep1.dat:6890:dfasyntax(bits, fold)
../inputs/grep1.dat:6891:     int bits;
../inputs/grep1.dat:6892:     int fold;
../inputs/grep1.dat:6893:{
../inputs/grep1.dat:6894:  syntax_bits_set = 1;
../inputs/grep1.dat:6895:  syntax_bits = bits;
../inputs/grep1.dat:6896:  case_fold = fold;
../inputs/grep1.dat:6897:}
../inputs/grep1.dat:6898:
../inputs/grep1.dat:6899:/* Lexical analyzer.  All the dross that deals with the obnoxious
../inputs/grep1.dat:6900:   GNU Regex syntax bits is located here.  The poor, suffering
../inputs/grep1.dat:6901:   reader is referred to the GNU Regex documentation for the
../inputs/grep1.dat:6902:   meaning of the @#%!@#%^!@ syntax bits. */
../inputs/grep1.dat:6903:
../inputs/grep1.dat:6904:static char *lexstart;		/* Pointer to beginning of input string. */
../inputs/grep1.dat:6905:static char *lexptr;		/* Pointer to next input character. */
../inputs/grep1.dat:6906:static lexleft;			/* Number of characters remaining. */
../inputs/grep1.dat:6907:static token lasttok;		/* Previous token returned; initially END. */
../inputs/grep1.dat:6908:static int laststart;		/* True if we're separated from beginning or (, |
../inputs/grep1.dat:6909:				   only by zero-width characters. */
../inputs/grep1.dat:6910:static int parens;		/* Count of outstanding left parens. */
../inputs/grep1.dat:6911:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
../inputs/grep1.dat:6912:
../inputs/grep1.dat:6913:/* Note that characters become unsigned here. */
../inputs/grep1.dat:6914:#define FETCH(c, eoferr)   	      \
../inputs/grep1.dat:6915:  {			   	      \
../inputs/grep1.dat:6916:    if (! lexleft)	   	      \
../inputs/grep1.dat:6917:      if (eoferr != 0)	   	      \
../inputs/grep1.dat:6918:	dfaerror(eoferr);  	      \
../inputs/grep1.dat:6919:      else		   	      \
../inputs/grep1.dat:6920:	return END;	   	      \
../inputs/grep1.dat:6921:    (c) = (unsigned char) *lexptr++;  \
../inputs/grep1.dat:6922:    --lexleft;		   	      \
../inputs/grep1.dat:6923:  }
../inputs/grep1.dat:6924:
../inputs/grep1.dat:6925:#define FUNC(F, P) static int F(c) int c; { return P(c); }
../inputs/grep1.dat:6926:
../inputs/grep1.dat:6927:FUNC(is_alpha, ISALPHA)
../inputs/grep1.dat:6928:FUNC(is_upper, ISUPPER)
../inputs/grep1.dat:6929:FUNC(is_lower, ISLOWER)
../inputs/grep1.dat:6930:FUNC(is_digit, ISDIGIT)
../inputs/grep1.dat:6931:FUNC(is_xdigit, ISXDIGIT)
../inputs/grep1.dat:6932:FUNC(is_space, ISSPACE)
../inputs/grep1.dat:6933:FUNC(is_punct, ISPUNCT)
../inputs/grep1.dat:6934:FUNC(is_alnum, ISALNUM)
../inputs/grep1.dat:6935:FUNC(is_print, ISPRINT)
../inputs/grep1.dat:6936:FUNC(is_graph, ISGRAPH)
../inputs/grep1.dat:6937:FUNC(is_cntrl, ISCNTRL)
../inputs/grep1.dat:6938:
../inputs/grep1.dat:6939:/* The following list maps the names of the Posix named character classes
../inputs/grep1.dat:6940:   to predicate functions that determine whether a given character is in
../inputs/grep1.dat:6941:   the class.  The leading [ has already been eaten by the lexical analyzer. */
../inputs/grep1.dat:6942:static struct {
../inputs/grep1.dat:6943:  char *name;
../inputs/grep1.dat:6944:  int (*pred)();
../inputs/grep1.dat:6945:} prednames[] = {
../inputs/grep1.dat:6946:  ":alpha:]", is_alpha,
../inputs/grep1.dat:6947:  ":upper:]", is_upper,
../inputs/grep1.dat:6948:  ":lower:]", is_lower,
../inputs/grep1.dat:6949:  ":digit:]", is_digit,
../inputs/grep1.dat:6950:  ":xdigit:]", is_xdigit,
../inputs/grep1.dat:6951:  ":space:]", is_space,
../inputs/grep1.dat:6952:  ":punct:]", is_punct,
../inputs/grep1.dat:6953:  ":alnum:]", is_alnum,
../inputs/grep1.dat:6954:  ":print:]", is_print,
../inputs/grep1.dat:6955:  ":graph:]", is_graph,
../inputs/grep1.dat:6956:  ":cntrl:]", is_cntrl,
../inputs/grep1.dat:6957:  0
../inputs/grep1.dat:6958:};
../inputs/grep1.dat:6959:
../inputs/grep1.dat:6960:static int
../inputs/grep1.dat:6961:looking_at(s)
../inputs/grep1.dat:6962:     char *s;
../inputs/grep1.dat:6963:{
../inputs/grep1.dat:6964:  int len;
../inputs/grep1.dat:6965:
../inputs/grep1.dat:6966:  len = strlen(s);
../inputs/grep1.dat:6967:  if (lexleft < len)
../inputs/grep1.dat:6968:    return 0;
../inputs/grep1.dat:6969:  return strncmp(s, lexptr, len) == 0;
../inputs/grep1.dat:6970:}
../inputs/grep1.dat:6971:
../inputs/grep1.dat:6972:static token
../inputs/grep1.dat:6973:lex()
../inputs/grep1.dat:6974:{
../inputs/grep1.dat:6975:  token c, c1, c2;
../inputs/grep1.dat:6976:  int backslash = 0, invert;
../inputs/grep1.dat:6977:  charclass ccl;
../inputs/grep1.dat:6978:  int i;
../inputs/grep1.dat:6979:
../inputs/grep1.dat:6980:  /* Basic plan: We fetch a character.  If it's a backslash,
../inputs/grep1.dat:6981:     we set the backslash flag and go through the loop again.
../inputs/grep1.dat:6982:     On the plus side, this avoids having a duplicate of the
../inputs/grep1.dat:6983:     main switch inside the backslash case.  On the minus side,
../inputs/grep1.dat:6984:     it means that just about every case begins with
../inputs/grep1.dat:6985:     "if (backslash) ...".  */
../inputs/grep1.dat:6986:  for (i = 0; i < 2; ++i)
../inputs/grep1.dat:6987:    {
../inputs/grep1.dat:6988:      FETCH(c, 0);
../inputs/grep1.dat:6989:      switch (c)
../inputs/grep1.dat:6990:	{
../inputs/grep1.dat:6991:	case '\\':
../inputs/grep1.dat:6992:	  if (backslash)
../inputs/grep1.dat:6993:	    goto normal_char;
../inputs/grep1.dat:6994:	  if (lexleft == 0)
../inputs/grep1.dat:6995:	    dfaerror("Unfinished \\ escape");
../inputs/grep1.dat:6996:	  backslash = 1;
../inputs/grep1.dat:6997:	  break;
../inputs/grep1.dat:6998:
../inputs/grep1.dat:6999:	case '^':
../inputs/grep1.dat:7000:	  if (backslash)
../inputs/grep1.dat:7001:	    goto normal_char;
../inputs/grep1.dat:7002:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:7003:	      || lasttok == END
../inputs/grep1.dat:7004:	      || lasttok == LPAREN
../inputs/grep1.dat:7005:	      || lasttok == OR)
../inputs/grep1.dat:7006:	    return lasttok = BEGLINE;
../inputs/grep1.dat:7007:	  goto normal_char;
../inputs/grep1.dat:7008:
../inputs/grep1.dat:7009:	case '$':
../inputs/grep1.dat:7010:	  if (backslash)
../inputs/grep1.dat:7011:	    goto normal_char;
../inputs/grep1.dat:7012:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:7013:	      || lexleft == 0
../inputs/grep1.dat:7014:	      || (syntax_bits & RE_NO_BK_PARENS
../inputs/grep1.dat:7015:		  ? lexleft > 0 && *lexptr == ')'
../inputs/grep1.dat:7016:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
../inputs/grep1.dat:7017:	      || (syntax_bits & RE_NO_BK_VBAR
../inputs/grep1.dat:7018:		  ? lexleft > 0 && *lexptr == '|'
../inputs/grep1.dat:7019:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
../inputs/grep1.dat:7020:	      || ((syntax_bits & RE_NEWLINE_ALT)
../inputs/grep1.dat:7021:	          && lexleft > 0 && *lexptr == '\n'))
../inputs/grep1.dat:7022:	    return lasttok = ENDLINE;
../inputs/grep1.dat:7023:	  goto normal_char;
../inputs/grep1.dat:7024:
../inputs/grep1.dat:7025:	case '1':
../inputs/grep1.dat:7026:	case '2':
../inputs/grep1.dat:7027:	case '3':
../inputs/grep1.dat:7028:	case '4':
../inputs/grep1.dat:7029:	case '5':
../inputs/grep1.dat:7030:	case '6':
../inputs/grep1.dat:7031:	case '7':
../inputs/grep1.dat:7032:	case '8':
../inputs/grep1.dat:7033:	case '9':
../inputs/grep1.dat:7034:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
../inputs/grep1.dat:7035:	    {
../inputs/grep1.dat:7036:	      laststart = 0;
../inputs/grep1.dat:7037:	      return lasttok = BACKREF;
../inputs/grep1.dat:7038:	    }
../inputs/grep1.dat:7039:	  goto normal_char;
../inputs/grep1.dat:7040:
../inputs/grep1.dat:7041:	case '<':
../inputs/grep1.dat:7042:	  if (backslash)
../inputs/grep1.dat:7043:	    return lasttok = BEGWORD;
../inputs/grep1.dat:7044:	  goto normal_char;
../inputs/grep1.dat:7045:
../inputs/grep1.dat:7046:	case '>':
../inputs/grep1.dat:7047:	  if (backslash)
../inputs/grep1.dat:7048:	    return lasttok = ENDWORD;
../inputs/grep1.dat:7049:	  goto normal_char;
../inputs/grep1.dat:7050:
../inputs/grep1.dat:7051:	case 'b':
../inputs/grep1.dat:7052:	  if (backslash)
../inputs/grep1.dat:7053:	    return lasttok = LIMWORD;
../inputs/grep1.dat:7054:	  goto normal_char;
../inputs/grep1.dat:7055:
../inputs/grep1.dat:7056:	case 'B':
../inputs/grep1.dat:7057:	  if (backslash)
../inputs/grep1.dat:7058:	    return lasttok = NOTLIMWORD;
../inputs/grep1.dat:7059:	  goto normal_char;
../inputs/grep1.dat:7060:
../inputs/grep1.dat:7061:	case '?':
../inputs/grep1.dat:7062:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:7063:	    goto normal_char;
../inputs/grep1.dat:7064:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
../inputs/grep1.dat:7065:	    goto normal_char;
../inputs/grep1.dat:7066:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:7067:	    goto normal_char;
../inputs/grep1.dat:7068:	  return lasttok = QMARK;
../inputs/grep1.dat:7069:
../inputs/grep1.dat:7070:	case '*':
../inputs/grep1.dat:7071:	  if (backslash)
../inputs/grep1.dat:7072:	    goto normal_char;
../inputs/grep1.dat:7073:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:7074:	    goto normal_char;
../inputs/grep1.dat:7075:	  return lasttok = STAR;
../inputs/grep1.dat:7076:
../inputs/grep1.dat:7077:	case '+':
../inputs/grep1.dat:7078:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:7079:	    goto normal_char;
../inputs/grep1.dat:7080:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
../inputs/grep1.dat:7081:	    goto normal_char;
../inputs/grep1.dat:7082:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:7083:	    goto normal_char;
../inputs/grep1.dat:7084:	  return lasttok = PLUS;
../inputs/grep1.dat:7085:
../inputs/grep1.dat:7086:	case '{':
../inputs/grep1.dat:7087:	  if (!(syntax_bits & RE_INTERVALS))
../inputs/grep1.dat:7088:	    goto normal_char;
../inputs/grep1.dat:7089:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
../inputs/grep1.dat:7090:	    goto normal_char;
../inputs/grep1.dat:7091:	  minrep = maxrep = 0;
../inputs/grep1.dat:7092:	  /* Cases:
../inputs/grep1.dat:7093:	     {M} - exact count
../inputs/grep1.dat:7094:	     {M,} - minimum count, maximum is infinity
../inputs/grep1.dat:7095:	     {,M} - 0 through M
../inputs/grep1.dat:7096:	     {M,N} - M through N */
../inputs/grep1.dat:7097:	  FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:7098:	  if (ISDIGIT(c))
../inputs/grep1.dat:7099:	    {
../inputs/grep1.dat:7100:	      minrep = c - '0';
../inputs/grep1.dat:7101:	      for (;;)
../inputs/grep1.dat:7102:		{
../inputs/grep1.dat:7103:		  FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:7104:		  if (!ISDIGIT(c))
../inputs/grep1.dat:7105:		    break;
../inputs/grep1.dat:7106:		  minrep = 10 * minrep + c - '0';
../inputs/grep1.dat:7107:		}
../inputs/grep1.dat:7108:	    }
../inputs/grep1.dat:7109:	  else if (c != ',')
../inputs/grep1.dat:7110:	    dfaerror("malformed repeat count");
../inputs/grep1.dat:7111:	  if (c == ',')
../inputs/grep1.dat:7112:	    for (;;)
../inputs/grep1.dat:7113:	      {
../inputs/grep1.dat:7114:		FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:7115:		if (!ISDIGIT(c))
../inputs/grep1.dat:7116:		  break;
../inputs/grep1.dat:7117:		maxrep = 10 * maxrep + c - '0';
../inputs/grep1.dat:7118:	      }
../inputs/grep1.dat:7119:	  else
../inputs/grep1.dat:7120:	    maxrep = minrep;
../inputs/grep1.dat:7121:	  if (!(syntax_bits & RE_NO_BK_BRACES))
../inputs/grep1.dat:7122:	    {
../inputs/grep1.dat:7123:	      if (c != '\\')
../inputs/grep1.dat:7124:		dfaerror("malformed repeat count");
../inputs/grep1.dat:7125:	      FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:7126:	    }
../inputs/grep1.dat:7127:	  if (c != '}')
../inputs/grep1.dat:7128:	    dfaerror("malformed repeat count");
../inputs/grep1.dat:7129:	  laststart = 0;
../inputs/grep1.dat:7130:	  return lasttok = REPMN;
../inputs/grep1.dat:7131:
../inputs/grep1.dat:7132:	case '|':
../inputs/grep1.dat:7133:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:7134:	    goto normal_char;
../inputs/grep1.dat:7135:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
../inputs/grep1.dat:7136:	    goto normal_char;
../inputs/grep1.dat:7137:	  laststart = 1;
../inputs/grep1.dat:7138:	  return lasttok = OR;
../inputs/grep1.dat:7139:
../inputs/grep1.dat:7140:	case '\n':
../inputs/grep1.dat:7141:	  if (syntax_bits & RE_LIMITED_OPS
../inputs/grep1.dat:7142:	      || backslash
../inputs/grep1.dat:7143:	      || !(syntax_bits & RE_NEWLINE_ALT))
../inputs/grep1.dat:7144:	    goto normal_char;
../inputs/grep1.dat:7145:	  laststart = 1;
../inputs/grep1.dat:7146:	  return lasttok = OR;
../inputs/grep1.dat:7147:
../inputs/grep1.dat:7148:	case '(':
../inputs/grep1.dat:7149:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
../inputs/grep1.dat:7150:	    goto normal_char;
../inputs/grep1.dat:7151:	  ++parens;
../inputs/grep1.dat:7152:	  laststart = 1;
../inputs/grep1.dat:7153:	  return lasttok = LPAREN;
../inputs/grep1.dat:7154:
../inputs/grep1.dat:7155:	case ')':
../inputs/grep1.dat:7156:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
../inputs/grep1.dat:7157:	    goto normal_char;
../inputs/grep1.dat:7158:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:7159:	    goto normal_char;
../inputs/grep1.dat:7160:	  --parens;
../inputs/grep1.dat:7161:	  laststart = 0;
../inputs/grep1.dat:7162:	  return lasttok = RPAREN;
../inputs/grep1.dat:7163:
../inputs/grep1.dat:7164:	case '.':
../inputs/grep1.dat:7165:	  if (backslash)
../inputs/grep1.dat:7166:	    goto normal_char;
../inputs/grep1.dat:7167:	  zeroset(ccl);
../inputs/grep1.dat:7168:	  notset(ccl);
../inputs/grep1.dat:7169:	  if (!(syntax_bits & RE_DOT_NEWLINE))
../inputs/grep1.dat:7170:	    clrbit('\n', ccl);
../inputs/grep1.dat:7171:	  if (syntax_bits & RE_DOT_NOT_NULL)
../inputs/grep1.dat:7172:	    clrbit('\0', ccl);
../inputs/grep1.dat:7173:	  laststart = 0;
../inputs/grep1.dat:7174:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:7175:
../inputs/grep1.dat:7176:	case 'w':
../inputs/grep1.dat:7177:	case 'W':
../inputs/grep1.dat:7178:	  if (!backslash)
../inputs/grep1.dat:7179:	    goto normal_char;
../inputs/grep1.dat:7180:	  zeroset(ccl);
../inputs/grep1.dat:7181:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
../inputs/grep1.dat:7182:	    if (ISALNUM(c2))
../inputs/grep1.dat:7183:	      setbit(c2, ccl);
../inputs/grep1.dat:7184:	  if (c == 'W')
../inputs/grep1.dat:7185:	    notset(ccl);
../inputs/grep1.dat:7186:	  laststart = 0;
../inputs/grep1.dat:7187:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:7188:	
../inputs/grep1.dat:7189:	case '[':
../inputs/grep1.dat:7190:	  if (backslash)
../inputs/grep1.dat:7191:	    goto normal_char;
../inputs/grep1.dat:7192:	  zeroset(ccl);
../inputs/grep1.dat:7193:	  FETCH(c, "Unbalanced [");
../inputs/grep1.dat:7194:	  if (c == '^')
../inputs/grep1.dat:7195:	    {
../inputs/grep1.dat:7196:	      FETCH(c, "Unbalanced [");
../inputs/grep1.dat:7197:	      invert = 1;
../inputs/grep1.dat:7198:	    }
../inputs/grep1.dat:7199:	  else
../inputs/grep1.dat:7200:	    invert = 0;
../inputs/grep1.dat:7201:	  do
../inputs/grep1.dat:7202:	    {
../inputs/grep1.dat:7203:	      /* Nobody ever said this had to be fast. :-)
../inputs/grep1.dat:7204:		 Note that if we're looking at some other [:...:]
../inputs/grep1.dat:7205:		 construct, we just treat it as a bunch of ordinary
../inputs/grep1.dat:7206:		 characters.  We can do this because we assume
../inputs/grep1.dat:7207:		 regex has checked for syntax errors before
../inputs/grep1.dat:7208:		 dfa is ever called. */
../inputs/grep1.dat:7209:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
../inputs/grep1.dat:7210:		for (c1 = 0; prednames[c1].name; ++c1)
../inputs/grep1.dat:7211:		  if (looking_at(prednames[c1].name))
../inputs/grep1.dat:7212:		    {
../inputs/grep1.dat:7213:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
../inputs/grep1.dat:7214:			if ((*prednames[c1].pred)(c2))
../inputs/grep1.dat:7215:			  setbit(c2, ccl);
../inputs/grep1.dat:7216:		      lexptr += strlen(prednames[c1].name);
../inputs/grep1.dat:7217:		      lexleft -= strlen(prednames[c1].name);
../inputs/grep1.dat:7218:		      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:7219:		      goto skip;
../inputs/grep1.dat:7220:		    }
../inputs/grep1.dat:7221:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
../inputs/grep1.dat:7222:		FETCH(c, "Unbalanced [");
../inputs/grep1.dat:7223:	      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:7224:	      if (c1 == '-')
../inputs/grep1.dat:7225:		{
../inputs/grep1.dat:7226:		  FETCH(c2, "Unbalanced [");
../inputs/grep1.dat:7227:		  if (c2 == ']')
../inputs/grep1.dat:7228:		    {
../inputs/grep1.dat:7229:		      /* In the case [x-], the - is an ordinary hyphen,
../inputs/grep1.dat:7230:			 which is left in c1, the lookahead character. */
../inputs/grep1.dat:7231:		      --lexptr;
../inputs/grep1.dat:7232:		      ++lexleft;
../inputs/grep1.dat:7233:		      c2 = c;
../inputs/grep1.dat:7234:		    }
../inputs/grep1.dat:7235:		  else
../inputs/grep1.dat:7236:		    {
../inputs/grep1.dat:7237:		      if (c2 == '\\'
../inputs/grep1.dat:7238:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
../inputs/grep1.dat:7239:			FETCH(c2, "Unbalanced [");
../inputs/grep1.dat:7240:		      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:7241:		    }
../inputs/grep1.dat:7242:		}
../inputs/grep1.dat:7243:	      else
../inputs/grep1.dat:7244:		c2 = c;
../inputs/grep1.dat:7245:	      while (c <= c2)
../inputs/grep1.dat:7246:		{
../inputs/grep1.dat:7247:		  setbit(c, ccl);
../inputs/grep1.dat:7248:		  if (case_fold)
../inputs/grep1.dat:7249:		    if (ISUPPER(c))
../inputs/grep1.dat:7250:		      setbit(tolower(c), ccl);
../inputs/grep1.dat:7251:		    else if (ISLOWER(c))
../inputs/grep1.dat:7252:		      setbit(toupper(c), ccl);
../inputs/grep1.dat:7253:		  ++c;
../inputs/grep1.dat:7254:		}
../inputs/grep1.dat:7255:	    skip:
../inputs/grep1.dat:7256:	      ;
../inputs/grep1.dat:7257:	    }
../inputs/grep1.dat:7258:	  while ((c = c1) != ']');
../inputs/grep1.dat:7259:	  if (invert)
../inputs/grep1.dat:7260:	    {
../inputs/grep1.dat:7261:	      notset(ccl);
../inputs/grep1.dat:7262:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
../inputs/grep1.dat:7263:		clrbit('\n', ccl);
../inputs/grep1.dat:7264:	    }
../inputs/grep1.dat:7265:	  laststart = 0;
../inputs/grep1.dat:7266:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:7267:
../inputs/grep1.dat:7268:	default:
../inputs/grep1.dat:7269:	normal_char:
../inputs/grep1.dat:7270:	  laststart = 0;
../inputs/grep1.dat:7271:	  if (case_fold && ISALPHA(c))
../inputs/grep1.dat:7272:	    {
../inputs/grep1.dat:7273:	      zeroset(ccl);
../inputs/grep1.dat:7274:	      setbit(c, ccl);
../inputs/grep1.dat:7275:	      if (isupper(c))
../inputs/grep1.dat:7276:		setbit(tolower(c), ccl);
../inputs/grep1.dat:7277:	      else
../inputs/grep1.dat:7278:		setbit(toupper(c), ccl);
../inputs/grep1.dat:7279:	      return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:7280:	    }
../inputs/grep1.dat:7281:	  return c;
../inputs/grep1.dat:7282:	}
../inputs/grep1.dat:7283:    }
../inputs/grep1.dat:7284:
../inputs/grep1.dat:7285:  /* The above loop should consume at most a backslash
../inputs/grep1.dat:7286:     and some other character. */
../inputs/grep1.dat:7287:  abort();
../inputs/grep1.dat:7288:}
../inputs/grep1.dat:7289:
../inputs/grep1.dat:7290:/* Recursive descent parser for regular expressions. */
../inputs/grep1.dat:7291:
../inputs/grep1.dat:7292:static token tok;		/* Lookahead token. */
../inputs/grep1.dat:7293:static depth;			/* Current depth of a hypothetical stack
../inputs/grep1.dat:7294:				   holding deferred productions.  This is
../inputs/grep1.dat:7295:				   used to determine the depth that will be
../inputs/grep1.dat:7296:				   required of the real stack later on in
../inputs/grep1.dat:7297:				   dfaanalyze(). */
../inputs/grep1.dat:7298:
../inputs/grep1.dat:7299:/* Add the given token to the parse tree, maintaining the depth count and
../inputs/grep1.dat:7300:   updating the maximum depth if necessary. */
../inputs/grep1.dat:7301:static void
../inputs/grep1.dat:7302:addtok(t)
../inputs/grep1.dat:7303:     token t;
../inputs/grep1.dat:7304:{
../inputs/grep1.dat:7305:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
../inputs/grep1.dat:7306:  dfa->tokens[dfa->tindex++] = t;
../inputs/grep1.dat:7307:
../inputs/grep1.dat:7308:  switch (t)
../inputs/grep1.dat:7309:    {
../inputs/grep1.dat:7310:    case QMARK:
../inputs/grep1.dat:7311:    case STAR:
../inputs/grep1.dat:7312:    case PLUS:
../inputs/grep1.dat:7313:      break;
../inputs/grep1.dat:7314:
../inputs/grep1.dat:7315:    case CAT:
../inputs/grep1.dat:7316:    case OR:
../inputs/grep1.dat:7317:    case ORTOP:
../inputs/grep1.dat:7318:      --depth;
../inputs/grep1.dat:7319:      break;
../inputs/grep1.dat:7320:
../inputs/grep1.dat:7321:    default:
../inputs/grep1.dat:7322:      ++dfa->nleaves;
../inputs/grep1.dat:7323:    case EMPTY:
../inputs/grep1.dat:7324:      ++depth;
../inputs/grep1.dat:7325:      break;
../inputs/grep1.dat:7326:    }
../inputs/grep1.dat:7327:  if (depth > dfa->depth)
../inputs/grep1.dat:7328:    dfa->depth = depth;
../inputs/grep1.dat:7329:}
../inputs/grep1.dat:7330:
../inputs/grep1.dat:7331:/* The grammar understood by the parser is as follows.
../inputs/grep1.dat:7332:
../inputs/grep1.dat:7333:   regexp:
../inputs/grep1.dat:7334:     regexp OR branch
../inputs/grep1.dat:7335:     branch
../inputs/grep1.dat:7336:
../inputs/grep1.dat:7337:   branch:
../inputs/grep1.dat:7338:     branch closure
../inputs/grep1.dat:7339:     closure
../inputs/grep1.dat:7340:
../inputs/grep1.dat:7341:   closure:
../inputs/grep1.dat:7342:     closure QMARK
../inputs/grep1.dat:7343:     closure STAR
../inputs/grep1.dat:7344:     closure PLUS
../inputs/grep1.dat:7345:     atom
../inputs/grep1.dat:7346:
../inputs/grep1.dat:7347:   atom:
../inputs/grep1.dat:7348:     <normal character>
../inputs/grep1.dat:7349:     CSET
../inputs/grep1.dat:7350:     BACKREF
../inputs/grep1.dat:7351:     BEGLINE
../inputs/grep1.dat:7352:     ENDLINE
../inputs/grep1.dat:7353:     BEGWORD
../inputs/grep1.dat:7354:     ENDWORD
../inputs/grep1.dat:7355:     LIMWORD
../inputs/grep1.dat:7356:     NOTLIMWORD
../inputs/grep1.dat:7357:     <empty>
../inputs/grep1.dat:7358:
../inputs/grep1.dat:7359:   The parser builds a parse tree in postfix form in an array of tokens. */
../inputs/grep1.dat:7360:
../inputs/grep1.dat:7361:#if __STDC__
../inputs/grep1.dat:7362:static void regexp(int);
../inputs/grep1.dat:7363:#else
../inputs/grep1.dat:7364:static void regexp();
../inputs/grep1.dat:7365:#endif
../inputs/grep1.dat:7366:
../inputs/grep1.dat:7367:static void
../inputs/grep1.dat:7368:atom()
../inputs/grep1.dat:7369:{
../inputs/grep1.dat:7370:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
../inputs/grep1.dat:7371:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
../inputs/grep1.dat:7372:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
../inputs/grep1.dat:7373:    {
../inputs/grep1.dat:7374:      addtok(tok);
../inputs/grep1.dat:7375:      tok = lex();
../inputs/grep1.dat:7376:    }
../inputs/grep1.dat:7377:  else if (tok == LPAREN)
../inputs/grep1.dat:7378:    {
../inputs/grep1.dat:7379:      tok = lex();
../inputs/grep1.dat:7380:      regexp(0);
../inputs/grep1.dat:7381:      if (tok != RPAREN)
../inputs/grep1.dat:7382:	dfaerror("Unbalanced (");
../inputs/grep1.dat:7383:      tok = lex();
../inputs/grep1.dat:7384:    }
../inputs/grep1.dat:7385:  else
../inputs/grep1.dat:7386:    addtok(EMPTY);
../inputs/grep1.dat:7387:}
../inputs/grep1.dat:7388:
../inputs/grep1.dat:7389:/* Return the number of tokens in the given subexpression. */
../inputs/grep1.dat:7390:static int
../inputs/grep1.dat:7391:nsubtoks(tindex)
../inputs/grep1.dat:7392:{
../inputs/grep1.dat:7393:  int ntoks1;
../inputs/grep1.dat:7394:
../inputs/grep1.dat:7395:  switch (dfa->tokens[tindex - 1])
../inputs/grep1.dat:7396:    {
../inputs/grep1.dat:7397:    default:
../inputs/grep1.dat:7398:      return 1;
../inputs/grep1.dat:7399:    case QMARK:
../inputs/grep1.dat:7400:    case STAR:
../inputs/grep1.dat:7401:    case PLUS:
../inputs/grep1.dat:7402:      return 1 + nsubtoks(tindex - 1);
../inputs/grep1.dat:7403:    case CAT:
../inputs/grep1.dat:7404:    case OR:
../inputs/grep1.dat:7405:    case ORTOP:
../inputs/grep1.dat:7406:      ntoks1 = nsubtoks(tindex - 1);
../inputs/grep1.dat:7407:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
../inputs/grep1.dat:7408:    }
../inputs/grep1.dat:7409:}
../inputs/grep1.dat:7410:
../inputs/grep1.dat:7411:/* Copy the given subexpression to the top of the tree. */
../inputs/grep1.dat:7412:static void
../inputs/grep1.dat:7413:copytoks(tindex, ntokens)
../inputs/grep1.dat:7414:     int tindex, ntokens;
../inputs/grep1.dat:7415:{
../inputs/grep1.dat:7416:  int i;
../inputs/grep1.dat:7417:
../inputs/grep1.dat:7418:  for (i = 0; i < ntokens; ++i)
../inputs/grep1.dat:7419:    addtok(dfa->tokens[tindex + i]);
../inputs/grep1.dat:7420:}
../inputs/grep1.dat:7421:
../inputs/grep1.dat:7422:static void
../inputs/grep1.dat:7423:closure()
../inputs/grep1.dat:7424:{
../inputs/grep1.dat:7425:  int tindex, ntokens, i;
../inputs/grep1.dat:7426:
../inputs/grep1.dat:7427:  atom();
../inputs/grep1.dat:7428:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
../inputs/grep1.dat:7429:    if (tok == REPMN)
../inputs/grep1.dat:7430:      {
../inputs/grep1.dat:7431:	ntokens = nsubtoks(dfa->tindex);
../inputs/grep1.dat:7432:	tindex = dfa->tindex - ntokens;
../inputs/grep1.dat:7433:	if (maxrep == 0)
../inputs/grep1.dat:7434:	  addtok(PLUS);
../inputs/grep1.dat:7435:	if (minrep == 0)
../inputs/grep1.dat:7436:	  addtok(QMARK);
../inputs/grep1.dat:7437:	for (i = 1; i < minrep; ++i)
../inputs/grep1.dat:7438:	  {
../inputs/grep1.dat:7439:	    copytoks(tindex, ntokens);
../inputs/grep1.dat:7440:	    addtok(CAT);
../inputs/grep1.dat:7441:	  }
../inputs/grep1.dat:7442:	for (; i < maxrep; ++i)
../inputs/grep1.dat:7443:	  {
../inputs/grep1.dat:7444:	    copytoks(tindex, ntokens);
../inputs/grep1.dat:7445:	    addtok(QMARK);
../inputs/grep1.dat:7446:	    addtok(CAT);
../inputs/grep1.dat:7447:	  }
../inputs/grep1.dat:7448:	tok = lex();
../inputs/grep1.dat:7449:      }
../inputs/grep1.dat:7450:    else
../inputs/grep1.dat:7451:      {
../inputs/grep1.dat:7452:	addtok(tok);
../inputs/grep1.dat:7453:	tok = lex();
../inputs/grep1.dat:7454:      }
../inputs/grep1.dat:7455:}
../inputs/grep1.dat:7456:
../inputs/grep1.dat:7457:static void
../inputs/grep1.dat:7458:branch()
../inputs/grep1.dat:7459:{
../inputs/grep1.dat:7460:  closure();
../inputs/grep1.dat:7461:  while (tok != RPAREN && tok != OR && tok >= 0)
../inputs/grep1.dat:7462:    {
../inputs/grep1.dat:7463:      closure();
../inputs/grep1.dat:7464:      addtok(CAT);
../inputs/grep1.dat:7465:    }
../inputs/grep1.dat:7466:}
../inputs/grep1.dat:7467:
../inputs/grep1.dat:7468:static void
../inputs/grep1.dat:7469:regexp(toplevel)
../inputs/grep1.dat:7470:     int toplevel;
../inputs/grep1.dat:7471:{
../inputs/grep1.dat:7472:  branch();
../inputs/grep1.dat:7473:  while (tok == OR)
../inputs/grep1.dat:7474:    {
../inputs/grep1.dat:7475:      tok = lex();
../inputs/grep1.dat:7476:      branch();
../inputs/grep1.dat:7477:      if (toplevel)
../inputs/grep1.dat:7478:	addtok(ORTOP);
../inputs/grep1.dat:7479:      else
../inputs/grep1.dat:7480:	addtok(OR);
../inputs/grep1.dat:7481:    }
../inputs/grep1.dat:7482:}
../inputs/grep1.dat:7483:
../inputs/grep1.dat:7484:/* Main entry point for the parser.  S is a string to be parsed, len is the
../inputs/grep1.dat:7486:   the struct dfa to parse into. */
../inputs/grep1.dat:7487:void
../inputs/grep1.dat:7488:dfaparse(s, len, d)
../inputs/grep1.dat:7489:     char *s;
../inputs/grep1.dat:7490:     size_t len;
../inputs/grep1.dat:7491:     struct dfa *d;
../inputs/grep1.dat:7492:
../inputs/grep1.dat:7493:{
../inputs/grep1.dat:7494:  dfa = d;
../inputs/grep1.dat:7495:  lexstart = lexptr = s;
../inputs/grep1.dat:7496:  lexleft = len;
../inputs/grep1.dat:7497:  lasttok = END;
../inputs/grep1.dat:7498:  laststart = 1;
../inputs/grep1.dat:7499:  parens = 0;
../inputs/grep1.dat:7500:
../inputs/grep1.dat:7501:  if (! syntax_bits_set)
../inputs/grep1.dat:7502:    dfaerror("No syntax specified");
../inputs/grep1.dat:7503:
../inputs/grep1.dat:7504:  tok = lex();
../inputs/grep1.dat:7505:  depth = d->depth;
../inputs/grep1.dat:7506:
../inputs/grep1.dat:7507:  regexp(1);
../inputs/grep1.dat:7508:
../inputs/grep1.dat:7509:  if (tok != END)
../inputs/grep1.dat:7510:    dfaerror("Unbalanced )");
../inputs/grep1.dat:7511:
../inputs/grep1.dat:7512:  addtok(END - d->nregexps);
../inputs/grep1.dat:7513:  addtok(CAT);
../inputs/grep1.dat:7514:
../inputs/grep1.dat:7515:  if (d->nregexps)
../inputs/grep1.dat:7516:    addtok(ORTOP);
../inputs/grep1.dat:7517:
../inputs/grep1.dat:7518:  ++d->nregexps;
../inputs/grep1.dat:7519:}
../inputs/grep1.dat:7520:
../inputs/grep1.dat:7521:/* Some primitives for operating on sets of positions. */
../inputs/grep1.dat:7522:
../inputs/grep1.dat:7523:/* Copy one set to another; the destination must be large enough. */
../inputs/grep1.dat:7524:static void
../inputs/grep1.dat:7525:copy(src, dst)
../inputs/grep1.dat:7526:     position_set *src;
../inputs/grep1.dat:7527:     position_set *dst;
../inputs/grep1.dat:7528:{
../inputs/grep1.dat:7529:  int i;
../inputs/grep1.dat:7530:
../inputs/grep1.dat:7531:  for (i = 0; i < src->nelem; ++i)
../inputs/grep1.dat:7532:    dst->elems[i] = src->elems[i];
../inputs/grep1.dat:7533:  dst->nelem = src->nelem;
../inputs/grep1.dat:7534:}
../inputs/grep1.dat:7535:
../inputs/grep1.dat:7536:/* Insert a position in a set.  Position sets are maintained in sorted
../inputs/grep1.dat:7537:   order according to index.  If position already exists in the set with
../inputs/grep1.dat:7538:   the same index then their constraints are logically or'd together.
../inputs/grep1.dat:7539:   S->elems must point to an array large enough to hold the resulting set. */
../inputs/grep1.dat:7540:static void
../inputs/grep1.dat:7541:insert(p, s)
../inputs/grep1.dat:7542:     position p;
../inputs/grep1.dat:7543:     position_set *s;
../inputs/grep1.dat:7544:{
../inputs/grep1.dat:7545:  int i;
../inputs/grep1.dat:7546:  position t1, t2;
../inputs/grep1.dat:7547:
../inputs/grep1.dat:7548:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
../inputs/grep1.dat:7549:    ;
../inputs/grep1.dat:7550:  if (i < s->nelem && p.index == s->elems[i].index)
../inputs/grep1.dat:7551:    s->elems[i].constraint |= p.constraint;
../inputs/grep1.dat:7552:  else
../inputs/grep1.dat:7553:    {
../inputs/grep1.dat:7554:      t1 = p;
../inputs/grep1.dat:7555:      ++s->nelem;
../inputs/grep1.dat:7556:      while (i < s->nelem)
../inputs/grep1.dat:7557:	{
../inputs/grep1.dat:7558:	  t2 = s->elems[i];
../inputs/grep1.dat:7559:	  s->elems[i++] = t1;
../inputs/grep1.dat:7560:	  t1 = t2;
../inputs/grep1.dat:7561:	}
../inputs/grep1.dat:7562:    }
../inputs/grep1.dat:7563:}
../inputs/grep1.dat:7564:
../inputs/grep1.dat:7565:/* Merge two sets of positions into a third.  The result is exactly as if
../inputs/grep1.dat:7566:   the positions of both sets were inserted into an initially empty set. */
../inputs/grep1.dat:7567:static void
../inputs/grep1.dat:7568:merge(s1, s2, m)
../inputs/grep1.dat:7569:     position_set *s1;
../inputs/grep1.dat:7570:     position_set *s2;
../inputs/grep1.dat:7571:     position_set *m;
../inputs/grep1.dat:7572:{
../inputs/grep1.dat:7573:  int i = 0, j = 0;
../inputs/grep1.dat:7574:
../inputs/grep1.dat:7575:  m->nelem = 0;
../inputs/grep1.dat:7576:  while (i < s1->nelem && j < s2->nelem)
../inputs/grep1.dat:7577:    if (s1->elems[i].index > s2->elems[j].index)
../inputs/grep1.dat:7578:      m->elems[m->nelem++] = s1->elems[i++];
../inputs/grep1.dat:7579:    else if (s1->elems[i].index < s2->elems[j].index)
../inputs/grep1.dat:7580:      m->elems[m->nelem++] = s2->elems[j++];
../inputs/grep1.dat:7581:    else
../inputs/grep1.dat:7582:      {
../inputs/grep1.dat:7583:	m->elems[m->nelem] = s1->elems[i++];
../inputs/grep1.dat:7584:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
../inputs/grep1.dat:7585:      }
../inputs/grep1.dat:7586:  while (i < s1->nelem)
../inputs/grep1.dat:7587:    m->elems[m->nelem++] = s1->elems[i++];
../inputs/grep1.dat:7588:  while (j < s2->nelem)
../inputs/grep1.dat:7589:    m->elems[m->nelem++] = s2->elems[j++];
../inputs/grep1.dat:7590:}
../inputs/grep1.dat:7591:
../inputs/grep1.dat:7592:/* Delete a position from a set. */
../inputs/grep1.dat:7593:static void
../inputs/grep1.dat:7594:delete(p, s)
../inputs/grep1.dat:7595:     position p;
../inputs/grep1.dat:7596:     position_set *s;
../inputs/grep1.dat:7597:{
../inputs/grep1.dat:7598:  int i;
../inputs/grep1.dat:7599:
../inputs/grep1.dat:7600:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:7601:    if (p.index == s->elems[i].index)
../inputs/grep1.dat:7602:      break;
../inputs/grep1.dat:7603:  if (i < s->nelem)
../inputs/grep1.dat:7604:    for (--s->nelem; i < s->nelem; ++i)
../inputs/grep1.dat:7605:      s->elems[i] = s->elems[i + 1];
../inputs/grep1.dat:7606:}
../inputs/grep1.dat:7607:
../inputs/grep1.dat:7608:/* Find the index of the state corresponding to the given position set with
../inputs/grep1.dat:7609:   the given preceding context, or create a new state if there is no such
../inputs/grep1.dat:7610:   state.  Newline and letter tell whether we got here on a newline or
../inputs/grep1.dat:7611:   letter, respectively. */
../inputs/grep1.dat:7612:static int
../inputs/grep1.dat:7613:state_index(d, s, newline, letter)
../inputs/grep1.dat:7614:     struct dfa *d;
../inputs/grep1.dat:7615:     position_set *s;
../inputs/grep1.dat:7616:     int newline;
../inputs/grep1.dat:7617:     int letter;
../inputs/grep1.dat:7618:{
../inputs/grep1.dat:7619:  int hash = 0;
../inputs/grep1.dat:7620:  int constraint;
../inputs/grep1.dat:7621:  int i, j;
../inputs/grep1.dat:7622:
../inputs/grep1.dat:7623:  newline = newline ? 1 : 0;
../inputs/grep1.dat:7624:  letter = letter ? 1 : 0;
../inputs/grep1.dat:7625:
../inputs/grep1.dat:7626:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:7627:    hash ^= s->elems[i].index + s->elems[i].constraint;
../inputs/grep1.dat:7628:
../inputs/grep1.dat:7629:  /* Try to find a state that exactly matches the proposed one. */
../inputs/grep1.dat:7630:  for (i = 0; i < d->sindex; ++i)
../inputs/grep1.dat:7631:    {
../inputs/grep1.dat:7632:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
../inputs/grep1.dat:7633:	  || newline != d->states[i].newline || letter != d->states[i].letter)
../inputs/grep1.dat:7634:	continue;
../inputs/grep1.dat:7635:      for (j = 0; j < s->nelem; ++j)
../inputs/grep1.dat:7636:	if (s->elems[j].constraint
../inputs/grep1.dat:7637:	    != d->states[i].elems.elems[j].constraint
../inputs/grep1.dat:7638:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
../inputs/grep1.dat:7639:	  break;
../inputs/grep1.dat:7640:      if (j == s->nelem)
../inputs/grep1.dat:7641:	return i;
../inputs/grep1.dat:7642:    }
../inputs/grep1.dat:7643:
../inputs/grep1.dat:7644:  /* We'll have to create a new state. */
../inputs/grep1.dat:7645:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
../inputs/grep1.dat:7646:  d->states[i].hash = hash;
../inputs/grep1.dat:7647:  MALLOC(d->states[i].elems.elems, position, s->nelem);
../inputs/grep1.dat:7648:  copy(s, &d->states[i].elems);
../inputs/grep1.dat:7649:  d->states[i].newline = newline;
../inputs/grep1.dat:7650:  d->states[i].letter = letter;
../inputs/grep1.dat:7651:  d->states[i].backref = 0;
../inputs/grep1.dat:7652:  d->states[i].constraint = 0;
../inputs/grep1.dat:7653:  d->states[i].first_end = 0;
../inputs/grep1.dat:7654:  for (j = 0; j < s->nelem; ++j)
../inputs/grep1.dat:7655:    if (d->tokens[s->elems[j].index] < 0)
../inputs/grep1.dat:7656:      {
../inputs/grep1.dat:7657:	constraint = s->elems[j].constraint;
../inputs/grep1.dat:7658:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
../inputs/grep1.dat:7659:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
../inputs/grep1.dat:7660:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
../inputs/grep1.dat:7661:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
../inputs/grep1.dat:7662:	  d->states[i].constraint |= constraint;
../inputs/grep1.dat:7663:	if (! d->states[i].first_end)
../inputs/grep1.dat:7664:	  d->states[i].first_end = d->tokens[s->elems[j].index];
../inputs/grep1.dat:7665:      }
../inputs/grep1.dat:7666:    else if (d->tokens[s->elems[j].index] == BACKREF)
../inputs/grep1.dat:7667:      {
../inputs/grep1.dat:7668:	d->states[i].constraint = NO_CONSTRAINT;
../inputs/grep1.dat:7669:	d->states[i].backref = 1;
../inputs/grep1.dat:7670:      }
../inputs/grep1.dat:7671:
../inputs/grep1.dat:7672:  ++d->sindex;
../inputs/grep1.dat:7673:
../inputs/grep1.dat:7674:  return i;
../inputs/grep1.dat:7675:}
../inputs/grep1.dat:7676:
../inputs/grep1.dat:7677:/* Find the epsilon closure of a set of positions.  If any position of the set
../inputs/grep1.dat:7678:   contains a symbol that matches the empty string in some context, replace
../inputs/grep1.dat:7679:   that position with the elements of its follow labeled with an appropriate
../inputs/grep1.dat:7680:   constraint.  Repeat exhaustively until no funny positions are left.
../inputs/grep1.dat:7681:   S->elems must be large enough to hold the result. */
../inputs/grep1.dat:7682:void
../inputs/grep1.dat:7683:epsclosure(s, d)
../inputs/grep1.dat:7684:     position_set *s;
../inputs/grep1.dat:7685:     struct dfa *d;
../inputs/grep1.dat:7686:{
../inputs/grep1.dat:7687:  int i, j;
../inputs/grep1.dat:7688:  int *visited;
../inputs/grep1.dat:7689:  position p, old;
../inputs/grep1.dat:7690:
../inputs/grep1.dat:7691:  MALLOC(visited, int, d->tindex);
../inputs/grep1.dat:7692:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:7693:    visited[i] = 0;
../inputs/grep1.dat:7694:
../inputs/grep1.dat:7695:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:7696:    if (d->tokens[s->elems[i].index] >= NOTCHAR
../inputs/grep1.dat:7697:	&& d->tokens[s->elems[i].index] != BACKREF
../inputs/grep1.dat:7698:	&& d->tokens[s->elems[i].index] < CSET)
../inputs/grep1.dat:7699:      {
../inputs/grep1.dat:7700:	old = s->elems[i];
../inputs/grep1.dat:7701:	p.constraint = old.constraint;
../inputs/grep1.dat:7702:	delete(s->elems[i], s);
../inputs/grep1.dat:7703:	if (visited[old.index])
../inputs/grep1.dat:7704:	  {
../inputs/grep1.dat:7705:	    --i;
../inputs/grep1.dat:7706:	    continue;
../inputs/grep1.dat:7707:	  }
../inputs/grep1.dat:7708:	visited[old.index] = 1;
../inputs/grep1.dat:7709:	switch (d->tokens[old.index])
../inputs/grep1.dat:7710:	  {
../inputs/grep1.dat:7711:	  case BEGLINE:
../inputs/grep1.dat:7712:	    p.constraint &= BEGLINE_CONSTRAINT;
../inputs/grep1.dat:7713:	    break;
../inputs/grep1.dat:7714:	  case ENDLINE:
../inputs/grep1.dat:7715:	    p.constraint &= ENDLINE_CONSTRAINT;
../inputs/grep1.dat:7716:	    break;
../inputs/grep1.dat:7717:	  case BEGWORD:
../inputs/grep1.dat:7718:	    p.constraint &= BEGWORD_CONSTRAINT;
../inputs/grep1.dat:7719:	    break;
../inputs/grep1.dat:7720:	  case ENDWORD:
../inputs/grep1.dat:7721:	    p.constraint &= ENDWORD_CONSTRAINT;
../inputs/grep1.dat:7722:	    break;
../inputs/grep1.dat:7723:	  case LIMWORD:
../inputs/grep1.dat:7724:	    p.constraint &= LIMWORD_CONSTRAINT;
../inputs/grep1.dat:7725:	    break;
../inputs/grep1.dat:7726:	  case NOTLIMWORD:
../inputs/grep1.dat:7727:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
../inputs/grep1.dat:7728:	    break;
../inputs/grep1.dat:7729:	  default:
../inputs/grep1.dat:7730:	    break;
../inputs/grep1.dat:7731:	  }
../inputs/grep1.dat:7732:	for (j = 0; j < d->follows[old.index].nelem; ++j)
../inputs/grep1.dat:7733:	  {
../inputs/grep1.dat:7734:	    p.index = d->follows[old.index].elems[j].index;
../inputs/grep1.dat:7735:	    insert(p, s);
../inputs/grep1.dat:7736:	  }
../inputs/grep1.dat:7737:	/* Force rescan to start at the beginning. */
../inputs/grep1.dat:7738:	i = -1;
../inputs/grep1.dat:7739:      }
../inputs/grep1.dat:7740:
../inputs/grep1.dat:7741:  free(visited);
../inputs/grep1.dat:7742:}
../inputs/grep1.dat:7743:
../inputs/grep1.dat:7744:/* Perform bottom-up analysis on the parse tree, computing various functions.
../inputs/grep1.dat:7745:   Note that at this point, we're pretending constructs like \< are real
../inputs/grep1.dat:7746:   characters rather than constraints on what can follow them.
../inputs/grep1.dat:7747:
../inputs/grep1.dat:7748:   Nullable:  A node is nullable if it is at the root of a regexp that can
../inputs/grep1.dat:7749:   match the empty string.
../inputs/grep1.dat:7750:   *  EMPTY leaves are nullable.
../inputs/grep1.dat:7751:   * No other leaf is nullable.
../inputs/grep1.dat:7752:   * A QMARK or STAR node is nullable.
../inputs/grep1.dat:7753:   * A PLUS node is nullable if its argument is nullable.
../inputs/grep1.dat:7754:   * A CAT node is nullable if both its arguments are nullable.
../inputs/grep1.dat:7755:   * An OR node is nullable if either argument is nullable.
../inputs/grep1.dat:7756:
../inputs/grep1.dat:7757:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
../inputs/grep1.dat:7758:   that could correspond to the first character of a string matching the
../inputs/grep1.dat:7759:   regexp rooted at the given node.
../inputs/grep1.dat:7760:   * EMPTY leaves have empty firstpos.
../inputs/grep1.dat:7761:   * The firstpos of a nonempty leaf is that leaf itself.
../inputs/grep1.dat:7762:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
../inputs/grep1.dat:7763:     argument.
../inputs/grep1.dat:7764:   * The firstpos of a CAT node is the firstpos of the left argument, union
../inputs/grep1.dat:7765:     the firstpos of the right if the left argument is nullable.
../inputs/grep1.dat:7766:   * The firstpos of an OR node is the union of firstpos of each argument.
../inputs/grep1.dat:7767:
../inputs/grep1.dat:7768:   Lastpos:  The lastpos of a node is the set of positions that could
../inputs/grep1.dat:7769:   correspond to the last character of a string matching the regexp at
../inputs/grep1.dat:7770:   the given node.
../inputs/grep1.dat:7771:   * EMPTY leaves have empty lastpos.
../inputs/grep1.dat:7772:   * The lastpos of a nonempty leaf is that leaf itself.
../inputs/grep1.dat:7773:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
../inputs/grep1.dat:7774:     argument.
../inputs/grep1.dat:7775:   * The lastpos of a CAT node is the lastpos of its right argument, union
../inputs/grep1.dat:7776:     the lastpos of the left if the right argument is nullable.
../inputs/grep1.dat:7777:   * The lastpos of an OR node is the union of the lastpos of each argument.
../inputs/grep1.dat:7778:
../inputs/grep1.dat:7779:   Follow:  The follow of a position is the set of positions that could
../inputs/grep1.dat:7780:   correspond to the character following a character matching the node in
../inputs/grep1.dat:7781:   a string matching the regexp.  At this point we consider special symbols
../inputs/grep1.dat:7782:   that match the empty string in some context to be just normal characters.
../inputs/grep1.dat:7783:   Later, if we find that a special symbol is in a follow set, we will
../inputs/grep1.dat:7784:   replace it with the elements of its follow, labeled with an appropriate
../inputs/grep1.dat:7785:   constraint.
../inputs/grep1.dat:7786:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
../inputs/grep1.dat:7787:     the follow of every node in the lastpos.
../inputs/grep1.dat:7788:   * Every node in the firstpos of the second argument of a CAT node is in
../inputs/grep1.dat:7789:     the follow of every node in the lastpos of the first argument.
../inputs/grep1.dat:7790:
../inputs/grep1.dat:7791:   Because of the postfix representation of the parse tree, the depth-first
../inputs/grep1.dat:7792:   analysis is conveniently done by a linear scan with the aid of a stack.
../inputs/grep1.dat:7793:   Sets are stored as arrays of the elements, obeying a stack-like allocation
../inputs/grep1.dat:7794:   scheme; the number of elements in each set deeper in the stack can be
../inputs/grep1.dat:7795:   used to determine the address of a particular set's array. */
../inputs/grep1.dat:7796:void
../inputs/grep1.dat:7797:dfaanalyze(d, searchflag)
../inputs/grep1.dat:7798:     struct dfa *d;
../inputs/grep1.dat:7799:     int searchflag;
../inputs/grep1.dat:7800:{
../inputs/grep1.dat:7801:  int *nullable;		/* Nullable stack. */
../inputs/grep1.dat:7802:  int *nfirstpos;		/* Element count stack for firstpos sets. */
../inputs/grep1.dat:7803:  position *firstpos;		/* Array where firstpos elements are stored. */
../inputs/grep1.dat:7804:  int *nlastpos;		/* Element count stack for lastpos sets. */
../inputs/grep1.dat:7805:  position *lastpos;		/* Array where lastpos elements are stored. */
../inputs/grep1.dat:7806:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
../inputs/grep1.dat:7807:  position_set tmp;		/* Temporary set for merging sets. */
../inputs/grep1.dat:7808:  position_set merged;		/* Result of merging sets. */
../inputs/grep1.dat:7809:  int wants_newline;		/* True if some position wants newline info. */
../inputs/grep1.dat:7810:  int *o_nullable;
../inputs/grep1.dat:7811:  int *o_nfirst, *o_nlast;
../inputs/grep1.dat:7812:  position *o_firstpos, *o_lastpos;
../inputs/grep1.dat:7813:  int i, j;
../inputs/grep1.dat:7814:  position *pos;
../inputs/grep1.dat:7815:
../inputs/grep1.dat:7816:#ifdef DEBUG
../inputs/grep1.dat:7817:  fprintf(stderr, "dfaanalyze:\n");
../inputs/grep1.dat:7818:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:7819:    {
../inputs/grep1.dat:7820:      fprintf(stderr, " %d:", i);
../inputs/grep1.dat:7821:      prtok(d->tokens[i]);
../inputs/grep1.dat:7822:    }
../inputs/grep1.dat:7823:  putc('\n', stderr);
../inputs/grep1.dat:7824:#endif
../inputs/grep1.dat:7825:
../inputs/grep1.dat:7826:  d->searchflag = searchflag;
../inputs/grep1.dat:7827:
../inputs/grep1.dat:7828:  MALLOC(nullable, int, d->depth);
../inputs/grep1.dat:7829:  o_nullable = nullable;
../inputs/grep1.dat:7830:  MALLOC(nfirstpos, int, d->depth);
../inputs/grep1.dat:7831:  o_nfirst = nfirstpos;
../inputs/grep1.dat:7832:  MALLOC(firstpos, position, d->nleaves);
../inputs/grep1.dat:7833:  o_firstpos = firstpos, firstpos += d->nleaves;
../inputs/grep1.dat:7834:  MALLOC(nlastpos, int, d->depth);
../inputs/grep1.dat:7835:  o_nlast = nlastpos;
../inputs/grep1.dat:7836:  MALLOC(lastpos, position, d->nleaves);
../inputs/grep1.dat:7837:  o_lastpos = lastpos, lastpos += d->nleaves;
../inputs/grep1.dat:7838:  MALLOC(nalloc, int, d->tindex);
../inputs/grep1.dat:7839:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:7840:    nalloc[i] = 0;
../inputs/grep1.dat:7841:  MALLOC(merged.elems, position, d->nleaves);
../inputs/grep1.dat:7842:
../inputs/grep1.dat:7843:  CALLOC(d->follows, position_set, d->tindex);
../inputs/grep1.dat:7844:
../inputs/grep1.dat:7845:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:7846:#ifdef DEBUG
../inputs/grep1.dat:7847:    {				/* Nonsyntactic #ifdef goo... */
../inputs/grep1.dat:7848:#endif
../inputs/grep1.dat:7849:    switch (d->tokens[i])
../inputs/grep1.dat:7850:      {
../inputs/grep1.dat:7851:      case EMPTY:
../inputs/grep1.dat:7852:	/* The empty set is nullable. */
../inputs/grep1.dat:7853:	*nullable++ = 1;
../inputs/grep1.dat:7854:
../inputs/grep1.dat:7855:	/* The firstpos and lastpos of the empty leaf are both empty. */
../inputs/grep1.dat:7856:	*nfirstpos++ = *nlastpos++ = 0;
../inputs/grep1.dat:7857:	break;
../inputs/grep1.dat:7858:
../inputs/grep1.dat:7859:      case STAR:
../inputs/grep1.dat:7860:      case PLUS:
../inputs/grep1.dat:7861:	/* Every element in the firstpos of the argument is in the follow
../inputs/grep1.dat:7862:	   of every element in the lastpos. */
../inputs/grep1.dat:7863:	tmp.nelem = nfirstpos[-1];
../inputs/grep1.dat:7864:	tmp.elems = firstpos;
../inputs/grep1.dat:7865:	pos = lastpos;
../inputs/grep1.dat:7866:	for (j = 0; j < nlastpos[-1]; ++j)
../inputs/grep1.dat:7867:	  {
../inputs/grep1.dat:7868:	    merge(&tmp, &d->follows[pos[j].index], &merged);
../inputs/grep1.dat:7869:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
../inputs/grep1.dat:7870:				 nalloc[pos[j].index], merged.nelem - 1);
../inputs/grep1.dat:7871:	    copy(&merged, &d->follows[pos[j].index]);
../inputs/grep1.dat:7872:	  }
../inputs/grep1.dat:7873:
../inputs/grep1.dat:7874:      case QMARK:
../inputs/grep1.dat:7875:	/* A QMARK or STAR node is automatically nullable. */
../inputs/grep1.dat:7876:	if (d->tokens[i] != PLUS)
../inputs/grep1.dat:7877:	  nullable[-1] = 1;
../inputs/grep1.dat:7878:	break;
../inputs/grep1.dat:7879:
../inputs/grep1.dat:7880:      case CAT:
../inputs/grep1.dat:7881:	/* Every element in the firstpos of the second argument is in the
../inputs/grep1.dat:7882:	   follow of every element in the lastpos of the first argument. */
../inputs/grep1.dat:7883:	tmp.nelem = nfirstpos[-1];
../inputs/grep1.dat:7884:	tmp.elems = firstpos;
../inputs/grep1.dat:7885:	pos = lastpos + nlastpos[-1];
../inputs/grep1.dat:7886:	for (j = 0; j < nlastpos[-2]; ++j)
../inputs/grep1.dat:7887:	  {
../inputs/grep1.dat:7888:	    merge(&tmp, &d->follows[pos[j].index], &merged);
../inputs/grep1.dat:7889:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
../inputs/grep1.dat:7890:				 nalloc[pos[j].index], merged.nelem - 1);
../inputs/grep1.dat:7891:	    copy(&merged, &d->follows[pos[j].index]);
../inputs/grep1.dat:7892:	  }
../inputs/grep1.dat:7893:
../inputs/grep1.dat:7894:	/* The firstpos of a CAT node is the firstpos of the first argument,
../inputs/grep1.dat:7895:	   union that of the second argument if the first is nullable. */
../inputs/grep1.dat:7896:	if (nullable[-2])
../inputs/grep1.dat:7897:	  nfirstpos[-2] += nfirstpos[-1];
../inputs/grep1.dat:7898:	else
../inputs/grep1.dat:7899:	  firstpos += nfirstpos[-1];
../inputs/grep1.dat:7900:	--nfirstpos;
../inputs/grep1.dat:7901:
../inputs/grep1.dat:7902:	/* The lastpos of a CAT node is the lastpos of the second argument,
../inputs/grep1.dat:7903:	   union that of the first argument if the second is nullable. */
../inputs/grep1.dat:7904:	if (nullable[-1])
../inputs/grep1.dat:7905:	  nlastpos[-2] += nlastpos[-1];
../inputs/grep1.dat:7906:	else
../inputs/grep1.dat:7907:	  {
../inputs/grep1.dat:7908:	    pos = lastpos + nlastpos[-2];
../inputs/grep1.dat:7909:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:7910:	      pos[j] = lastpos[j];
../inputs/grep1.dat:7911:	    lastpos += nlastpos[-2];
../inputs/grep1.dat:7912:	    nlastpos[-2] = nlastpos[-1];
../inputs/grep1.dat:7913:	  }
../inputs/grep1.dat:7914:	--nlastpos;
../inputs/grep1.dat:7915:
../inputs/grep1.dat:7916:	/* A CAT node is nullable if both arguments are nullable. */
../inputs/grep1.dat:7917:	nullable[-2] = nullable[-1] && nullable[-2];
../inputs/grep1.dat:7918:	--nullable;
../inputs/grep1.dat:7919:	break;
../inputs/grep1.dat:7920:
../inputs/grep1.dat:7921:      case OR:
../inputs/grep1.dat:7922:      case ORTOP:
../inputs/grep1.dat:7923:	/* The firstpos is the union of the firstpos of each argument. */
../inputs/grep1.dat:7924:	nfirstpos[-2] += nfirstpos[-1];
../inputs/grep1.dat:7925:	--nfirstpos;
../inputs/grep1.dat:7926:
../inputs/grep1.dat:7927:	/* The lastpos is the union of the lastpos of each argument. */
../inputs/grep1.dat:7928:	nlastpos[-2] += nlastpos[-1];
../inputs/grep1.dat:7929:	--nlastpos;
../inputs/grep1.dat:7930:
../inputs/grep1.dat:7931:	/* An OR node is nullable if either argument is nullable. */
../inputs/grep1.dat:7932:	nullable[-2] = nullable[-1] || nullable[-2];
../inputs/grep1.dat:7933:	--nullable;
../inputs/grep1.dat:7934:	break;
../inputs/grep1.dat:7935:
../inputs/grep1.dat:7936:      default:
../inputs/grep1.dat:7937:	/* Anything else is a nonempty position.  (Note that special
../inputs/grep1.dat:7938:	   constructs like \< are treated as nonempty strings here;
../inputs/grep1.dat:7939:	   an "epsilon closure" effectively makes them nullable later.
../inputs/grep1.dat:7940:	   Backreferences have to get a real position so we can detect
../inputs/grep1.dat:7941:	   transitions on them later.  But they are nullable. */
../inputs/grep1.dat:7942:	*nullable++ = d->tokens[i] == BACKREF;
../inputs/grep1.dat:7943:
../inputs/grep1.dat:7944:	/* This position is in its own firstpos and lastpos. */
../inputs/grep1.dat:7945:	*nfirstpos++ = *nlastpos++ = 1;
../inputs/grep1.dat:7946:	--firstpos, --lastpos;
../inputs/grep1.dat:7947:	firstpos->index = lastpos->index = i;
../inputs/grep1.dat:7948:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
../inputs/grep1.dat:7949:
../inputs/grep1.dat:7950:	/* Allocate the follow set for this position. */
../inputs/grep1.dat:7951:	nalloc[i] = 1;
../inputs/grep1.dat:7952:	MALLOC(d->follows[i].elems, position, nalloc[i]);
../inputs/grep1.dat:7953:	break;
../inputs/grep1.dat:7954:      }
../inputs/grep1.dat:7955:#ifdef DEBUG
../inputs/grep1.dat:7956:    /* ... balance the above nonsyntactic #ifdef goo... */
../inputs/grep1.dat:7957:      fprintf(stderr, "node %d:", i);
../inputs/grep1.dat:7958:      prtok(d->tokens[i]);
../inputs/grep1.dat:7959:      putc('\n', stderr);
../inputs/grep1.dat:7960:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
../inputs/grep1.dat:7961:      fprintf(stderr, " firstpos:");
../inputs/grep1.dat:7962:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:7963:	{
../inputs/grep1.dat:7964:	  fprintf(stderr, " %d:", firstpos[j].index);
../inputs/grep1.dat:7965:	  prtok(d->tokens[firstpos[j].index]);
../inputs/grep1.dat:7966:	}
../inputs/grep1.dat:7967:      fprintf(stderr, "\n lastpos:");
../inputs/grep1.dat:7968:      for (j = nlastpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:7969:	{
../inputs/grep1.dat:7970:	  fprintf(stderr, " %d:", lastpos[j].index);
../inputs/grep1.dat:7971:	  prtok(d->tokens[lastpos[j].index]);
../inputs/grep1.dat:7972:	}
../inputs/grep1.dat:7973:      putc('\n', stderr);
../inputs/grep1.dat:7974:    }
../inputs/grep1.dat:7975:#endif
../inputs/grep1.dat:7976:
../inputs/grep1.dat:7977:  /* For each follow set that is the follow set of a real position, replace
../inputs/grep1.dat:7978:     it with its epsilon closure. */
../inputs/grep1.dat:7979:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:7980:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
../inputs/grep1.dat:7981:	|| d->tokens[i] >= CSET)
../inputs/grep1.dat:7982:      {
../inputs/grep1.dat:7983:#ifdef DEBUG
../inputs/grep1.dat:7984:	fprintf(stderr, "follows(%d:", i);
../inputs/grep1.dat:7985:	prtok(d->tokens[i]);
../inputs/grep1.dat:7986:	fprintf(stderr, "):");
../inputs/grep1.dat:7987:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
../inputs/grep1.dat:7988:	  {
../inputs/grep1.dat:7989:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
../inputs/grep1.dat:7990:	    prtok(d->tokens[d->follows[i].elems[j].index]);
../inputs/grep1.dat:7991:	  }
../inputs/grep1.dat:7992:	putc('\n', stderr);
../inputs/grep1.dat:7993:#endif
../inputs/grep1.dat:7994:	copy(&d->follows[i], &merged);
../inputs/grep1.dat:7995:	epsclosure(&merged, d);
../inputs/grep1.dat:7996:	if (d->follows[i].nelem < merged.nelem)
../inputs/grep1.dat:7997:	  REALLOC(d->follows[i].elems, position, merged.nelem);
../inputs/grep1.dat:7998:	copy(&merged, &d->follows[i]);
../inputs/grep1.dat:7999:      }
../inputs/grep1.dat:8000:
../inputs/grep1.dat:8001:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
../inputs/grep1.dat:8002:     be the set of positions of state 0. */
../inputs/grep1.dat:8003:  merged.nelem = 0;
../inputs/grep1.dat:8004:  for (i = 0; i < nfirstpos[-1]; ++i)
../inputs/grep1.dat:8005:    insert(firstpos[i], &merged);
../inputs/grep1.dat:8006:  epsclosure(&merged, d);
../inputs/grep1.dat:8007:
../inputs/grep1.dat:8008:  /* Check if any of the positions of state 0 will want newline context. */
../inputs/grep1.dat:8009:  wants_newline = 0;
../inputs/grep1.dat:8010:  for (i = 0; i < merged.nelem; ++i)
../inputs/grep1.dat:8011:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
../inputs/grep1.dat:8012:      wants_newline = 1;
../inputs/grep1.dat:8013:
../inputs/grep1.dat:8014:  /* Build the initial state. */
../inputs/grep1.dat:8015:  d->salloc = 1;
../inputs/grep1.dat:8016:  d->sindex = 0;
../inputs/grep1.dat:8017:  MALLOC(d->states, dfa_state, d->salloc);
../inputs/grep1.dat:8018:  state_index(d, &merged, wants_newline, 0);
../inputs/grep1.dat:8019:
../inputs/grep1.dat:8020:  free(o_nullable);
../inputs/grep1.dat:8021:  free(o_nfirst);
../inputs/grep1.dat:8022:  free(o_firstpos);
../inputs/grep1.dat:8023:  free(o_nlast);
../inputs/grep1.dat:8024:  free(o_lastpos);
../inputs/grep1.dat:8025:  free(nalloc);
../inputs/grep1.dat:8026:  free(merged.elems);
../inputs/grep1.dat:8027:}
../inputs/grep1.dat:8028:
../inputs/grep1.dat:8029:/* Find, for each character, the transition out of state s of d, and store
../inputs/grep1.dat:8030:   it in the appropriate slot of trans.
../inputs/grep1.dat:8031:
../inputs/grep1.dat:8032:   We divide the positions of s into groups (positions can appear in more
../inputs/grep1.dat:8033:   than one group).  Each group is labeled with a set of characters that
../inputs/grep1.dat:8034:   every position in the group matches (taking into account, if necessary,
../inputs/grep1.dat:8035:   preceding context information of s).  For each group, find the union
../inputs/grep1.dat:8036:   of the its elements' follows.  This set is the set of positions of the
../inputs/grep1.dat:8037:   new state.  For each character in the group's label, set the transition
../inputs/grep1.dat:8038:   on this character to be to a state corresponding to the set's positions,
../inputs/grep1.dat:8039:   and its associated backward context information, if necessary.
../inputs/grep1.dat:8040:
../inputs/grep1.dat:8042:   0 in every state.
../inputs/grep1.dat:8043:
../inputs/grep1.dat:8044:   The collection of groups is constructed by building an equivalence-class
../inputs/grep1.dat:8045:   partition of the positions of s.
../inputs/grep1.dat:8046:
../inputs/grep1.dat:8047:   For each position, find the set of characters C that it matches.  Eliminate
../inputs/grep1.dat:8048:   any characters from C that fail on grounds of backward context.
../inputs/grep1.dat:8049:
../inputs/grep1.dat:8050:   Search through the groups, looking for a group whose label L has nonempty
../inputs/grep1.dat:8051:   intersection with C.  If L - C is nonempty, create a new group labeled
../inputs/grep1.dat:8052:   L - C and having the same positions as the current group, and set L to
../inputs/grep1.dat:8053:   the intersection of L and C.  Insert the position in this group, set
../inputs/grep1.dat:8054:   C = C - L, and resume scanning.
../inputs/grep1.dat:8055:
../inputs/grep1.dat:8056:   If after comparing with every group there are characters remaining in C,
../inputs/grep1.dat:8057:   create a new group labeled with the characters of C and insert this
../inputs/grep1.dat:8058:   position in that group. */
../inputs/grep1.dat:8059:void
../inputs/grep1.dat:8060:dfastate(s, d, trans)
../inputs/grep1.dat:8061:     int s;
../inputs/grep1.dat:8062:     struct dfa *d;
../inputs/grep1.dat:8063:     int trans[];
../inputs/grep1.dat:8064:{
../inputs/grep1.dat:8065:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
../inputs/grep1.dat:8066:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
../inputs/grep1.dat:8067:  int ngrps = 0;		/* Number of groups actually used. */
../inputs/grep1.dat:8068:  position pos;			/* Current position being considered. */
../inputs/grep1.dat:8069:  charclass matches;		/* Set of matching characters. */
../inputs/grep1.dat:8070:  int matchesf;			/* True if matches is nonempty. */
../inputs/grep1.dat:8071:  charclass intersect;		/* Intersection with some label set. */
../inputs/grep1.dat:8072:  int intersectf;		/* True if intersect is nonempty. */
../inputs/grep1.dat:8073:  charclass leftovers;		/* Stuff in the label that didn't match. */
../inputs/grep1.dat:8074:  int leftoversf;		/* True if leftovers is nonempty. */
../inputs/grep1.dat:8075:  static charclass letters;	/* Set of characters considered letters. */
../inputs/grep1.dat:8076:  static charclass newline;	/* Set of characters that aren't newline. */
../inputs/grep1.dat:8077:  position_set follows;		/* Union of the follows of some group. */
../inputs/grep1.dat:8078:  position_set tmp;		/* Temporary space for merging sets. */
../inputs/grep1.dat:8079:  int state;			/* New state. */
../inputs/grep1.dat:8080:  int wants_newline;		/* New state wants to know newline context. */
../inputs/grep1.dat:8081:  int state_newline;		/* New state on a newline transition. */
../inputs/grep1.dat:8082:  int wants_letter;		/* New state wants to know letter context. */
../inputs/grep1.dat:8083:  int state_letter;		/* New state on a letter transition. */
../inputs/grep1.dat:8084:  static initialized;		/* Flag for static initialization. */
../inputs/grep1.dat:8085:  int i, j, k;
../inputs/grep1.dat:8086:
../inputs/grep1.dat:8087:  /* Initialize the set of letters, if necessary. */
../inputs/grep1.dat:8088:  if (! initialized)
../inputs/grep1.dat:8089:    {
../inputs/grep1.dat:8090:      initialized = 1;
../inputs/grep1.dat:8091:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:8092:	if (ISALNUM(i))
../inputs/grep1.dat:8093:	  setbit(i, letters);
../inputs/grep1.dat:8094:      setbit('\n', newline);
../inputs/grep1.dat:8095:    }
../inputs/grep1.dat:8096:
../inputs/grep1.dat:8097:  zeroset(matches);
../inputs/grep1.dat:8098:
../inputs/grep1.dat:8099:  for (i = 0; i < d->states[s].elems.nelem; ++i)
../inputs/grep1.dat:8100:    {
../inputs/grep1.dat:8101:      pos = d->states[s].elems.elems[i];
../inputs/grep1.dat:8102:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
../inputs/grep1.dat:8103:	setbit(d->tokens[pos.index], matches);
../inputs/grep1.dat:8104:      else if (d->tokens[pos.index] >= CSET)
../inputs/grep1.dat:8105:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
../inputs/grep1.dat:8106:      else
../inputs/grep1.dat:8107:	continue;
../inputs/grep1.dat:8108:
../inputs/grep1.dat:8109:      /* Some characters may need to be eliminated from matches because
../inputs/grep1.dat:8110:	 they fail in the current context. */
../inputs/grep1.dat:8111:      if (pos.constraint != 0xFF)
../inputs/grep1.dat:8112:	{
../inputs/grep1.dat:8113:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
../inputs/grep1.dat:8114:					 d->states[s].newline, 1))
../inputs/grep1.dat:8115:	    clrbit('\n', matches);
../inputs/grep1.dat:8116:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
../inputs/grep1.dat:8117:					 d->states[s].newline, 0))
../inputs/grep1.dat:8118:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:8119:	      matches[j] &= newline[j];
../inputs/grep1.dat:8120:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
../inputs/grep1.dat:8121:					d->states[s].letter, 1))
../inputs/grep1.dat:8122:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:8123:	      matches[j] &= ~letters[j];
../inputs/grep1.dat:8124:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
../inputs/grep1.dat:8125:					d->states[s].letter, 0))
../inputs/grep1.dat:8126:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:8127:	      matches[j] &= letters[j];
../inputs/grep1.dat:8128:
../inputs/grep1.dat:8129:	  /* If there are no characters left, there's no point in going on. */
../inputs/grep1.dat:8130:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
../inputs/grep1.dat:8131:	    ;
../inputs/grep1.dat:8132:	  if (j == CHARCLASS_INTS)
../inputs/grep1.dat:8133:	    continue;
../inputs/grep1.dat:8134:	}
../inputs/grep1.dat:8135:
../inputs/grep1.dat:8136:      for (j = 0; j < ngrps; ++j)
../inputs/grep1.dat:8137:	{
../inputs/grep1.dat:8138:	  /* If matches contains a single character only, and the current
../inputs/grep1.dat:8139:	     group's label doesn't contain that character, go on to the
../inputs/grep1.dat:8140:	     next group. */
../inputs/grep1.dat:8141:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
../inputs/grep1.dat:8142:	      && !tstbit(d->tokens[pos.index], labels[j]))
../inputs/grep1.dat:8143:	    continue;
../inputs/grep1.dat:8144:
../inputs/grep1.dat:8145:	  /* Check if this group's label has a nonempty intersection with
../inputs/grep1.dat:8146:	     matches. */
../inputs/grep1.dat:8147:	  intersectf = 0;
../inputs/grep1.dat:8148:	  for (k = 0; k < CHARCLASS_INTS; ++k)
../inputs/grep1.dat:8149:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
../inputs/grep1.dat:8150:	  if (! intersectf)
../inputs/grep1.dat:8151:	    continue;
../inputs/grep1.dat:8152:
../inputs/grep1.dat:8153:	  /* It does; now find the set differences both ways. */
../inputs/grep1.dat:8154:	  leftoversf = matchesf = 0;
../inputs/grep1.dat:8155:	  for (k = 0; k < CHARCLASS_INTS; ++k)
../inputs/grep1.dat:8156:	    {
../inputs/grep1.dat:8157:	      /* Even an optimizing compiler can't know this for sure. */
../inputs/grep1.dat:8158:	      int match = matches[k], label = labels[j][k];
../inputs/grep1.dat:8159:
../inputs/grep1.dat:8160:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
../inputs/grep1.dat:8161:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
../inputs/grep1.dat:8162:	    }
../inputs/grep1.dat:8163:
../inputs/grep1.dat:8164:	  /* If there were leftovers, create a new group labeled with them. */
../inputs/grep1.dat:8165:	  if (leftoversf)
../inputs/grep1.dat:8166:	    {
../inputs/grep1.dat:8167:	      copyset(leftovers, labels[ngrps]);
../inputs/grep1.dat:8168:	      copyset(intersect, labels[j]);
../inputs/grep1.dat:8169:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
../inputs/grep1.dat:8170:	      copy(&grps[j], &grps[ngrps]);
../inputs/grep1.dat:8171:	      ++ngrps;
../inputs/grep1.dat:8172:	    }
../inputs/grep1.dat:8173:
../inputs/grep1.dat:8174:	  /* Put the position in the current group.  Note that there is no
../inputs/grep1.dat:8175:	     reason to call insert() here. */
../inputs/grep1.dat:8176:	  grps[j].elems[grps[j].nelem++] = pos;
../inputs/grep1.dat:8177:
../inputs/grep1.dat:8178:	  /* If every character matching the current position has been
../inputs/grep1.dat:8179:	     accounted for, we're done. */
../inputs/grep1.dat:8180:	  if (! matchesf)
../inputs/grep1.dat:8181:	    break;
../inputs/grep1.dat:8182:	}
../inputs/grep1.dat:8183:
../inputs/grep1.dat:8184:      /* If we've passed the last group, and there are still characters
../inputs/grep1.dat:8185:	 unaccounted for, then we'll have to create a new group. */
../inputs/grep1.dat:8186:      if (j == ngrps)
../inputs/grep1.dat:8187:	{
../inputs/grep1.dat:8188:	  copyset(matches, labels[ngrps]);
../inputs/grep1.dat:8189:	  zeroset(matches);
../inputs/grep1.dat:8190:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
../inputs/grep1.dat:8191:	  grps[ngrps].nelem = 1;
../inputs/grep1.dat:8192:	  grps[ngrps].elems[0] = pos;
../inputs/grep1.dat:8193:	  ++ngrps;
../inputs/grep1.dat:8194:	}
../inputs/grep1.dat:8195:    }
../inputs/grep1.dat:8196:
../inputs/grep1.dat:8197:  MALLOC(follows.elems, position, d->nleaves);
../inputs/grep1.dat:8198:  MALLOC(tmp.elems, position, d->nleaves);
../inputs/grep1.dat:8199:
../inputs/grep1.dat:8200:  /* If we are a searching matcher, the default transition is to a state
../inputs/grep1.dat:8201:     containing the positions of state 0, otherwise the default transition
../inputs/grep1.dat:8202:     is to fail miserably. */
../inputs/grep1.dat:8203:  if (d->searchflag)
../inputs/grep1.dat:8204:    {
../inputs/grep1.dat:8205:      wants_newline = 0;
../inputs/grep1.dat:8206:      wants_letter = 0;
../inputs/grep1.dat:8207:      for (i = 0; i < d->states[0].elems.nelem; ++i)
../inputs/grep1.dat:8208:	{
../inputs/grep1.dat:8209:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
../inputs/grep1.dat:8210:	    wants_newline = 1;
../inputs/grep1.dat:8211:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
../inputs/grep1.dat:8212:	    wants_letter = 1;
../inputs/grep1.dat:8213:	}
../inputs/grep1.dat:8214:      copy(&d->states[0].elems, &follows);
../inputs/grep1.dat:8215:      state = state_index(d, &follows, 0, 0);
../inputs/grep1.dat:8216:      if (wants_newline)
../inputs/grep1.dat:8217:	state_newline = state_index(d, &follows, 1, 0);
../inputs/grep1.dat:8218:      else
../inputs/grep1.dat:8219:	state_newline = state;
../inputs/grep1.dat:8220:      if (wants_letter)
../inputs/grep1.dat:8221:	state_letter = state_index(d, &follows, 0, 1);
../inputs/grep1.dat:8222:      else
../inputs/grep1.dat:8223:	state_letter = state;
../inputs/grep1.dat:8224:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:8225:	if (i == '\n')
../inputs/grep1.dat:8226:	  trans[i] = state_newline;
../inputs/grep1.dat:8227:	else if (ISALNUM(i))
../inputs/grep1.dat:8228:	  trans[i] = state_letter;
../inputs/grep1.dat:8229:	else
../inputs/grep1.dat:8230:	  trans[i] = state;
../inputs/grep1.dat:8231:    }
../inputs/grep1.dat:8232:  else
../inputs/grep1.dat:8233:    for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:8234:      trans[i] = -1;
../inputs/grep1.dat:8235:
../inputs/grep1.dat:8236:  for (i = 0; i < ngrps; ++i)
../inputs/grep1.dat:8237:    {
../inputs/grep1.dat:8238:      follows.nelem = 0;
../inputs/grep1.dat:8239:
../inputs/grep1.dat:8240:      /* Find the union of the follows of the positions of the group.
../inputs/grep1.dat:8241:	 This is a hideously inefficient loop.  Fix it someday. */
../inputs/grep1.dat:8242:      for (j = 0; j < grps[i].nelem; ++j)
../inputs/grep1.dat:8243:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
../inputs/grep1.dat:8244:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
../inputs/grep1.dat:8245:
../inputs/grep1.dat:8246:      /* If we are building a searching matcher, throw in the positions
../inputs/grep1.dat:8247:	 of state 0 as well. */
../inputs/grep1.dat:8248:      if (d->searchflag)
../inputs/grep1.dat:8249:	for (j = 0; j < d->states[0].elems.nelem; ++j)
../inputs/grep1.dat:8250:	  insert(d->states[0].elems.elems[j], &follows);
../inputs/grep1.dat:8251:
../inputs/grep1.dat:8252:      /* Find out if the new state will want any context information. */
../inputs/grep1.dat:8253:      wants_newline = 0;
../inputs/grep1.dat:8254:      if (tstbit('\n', labels[i]))
../inputs/grep1.dat:8255:	for (j = 0; j < follows.nelem; ++j)
../inputs/grep1.dat:8256:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
../inputs/grep1.dat:8257:	    wants_newline = 1;
../inputs/grep1.dat:8258:
../inputs/grep1.dat:8259:      wants_letter = 0;
../inputs/grep1.dat:8260:      for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:8261:	if (labels[i][j] & letters[j])
../inputs/grep1.dat:8262:	  break;
../inputs/grep1.dat:8263:      if (j < CHARCLASS_INTS)
../inputs/grep1.dat:8264:	for (j = 0; j < follows.nelem; ++j)
../inputs/grep1.dat:8265:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
../inputs/grep1.dat:8266:	    wants_letter = 1;
../inputs/grep1.dat:8267:
../inputs/grep1.dat:8268:      /* Find the state(s) corresponding to the union of the follows. */
../inputs/grep1.dat:8269:      state = state_index(d, &follows, 0, 0);
../inputs/grep1.dat:8270:      if (wants_newline)
../inputs/grep1.dat:8271:	state_newline = state_index(d, &follows, 1, 0);
../inputs/grep1.dat:8272:      else
../inputs/grep1.dat:8273:	state_newline = state;
../inputs/grep1.dat:8274:      if (wants_letter)
../inputs/grep1.dat:8275:	state_letter = state_index(d, &follows, 0, 1);
../inputs/grep1.dat:8276:      else
../inputs/grep1.dat:8277:	state_letter = state;
../inputs/grep1.dat:8278:
../inputs/grep1.dat:8279:      /* Set the transitions for each character in the current label. */
../inputs/grep1.dat:8280:      for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:8281:	for (k = 0; k < INTBITS; ++k)
../inputs/grep1.dat:8282:	  if (labels[i][j] & 1 << k)
../inputs/grep1.dat:8283:	    {
../inputs/grep1.dat:8284:	      int c = j * INTBITS + k;
../inputs/grep1.dat:8285:
../inputs/grep1.dat:8286:	      if (c == '\n')
../inputs/grep1.dat:8287:		trans[c] = state_newline;
../inputs/grep1.dat:8288:	      else if (ISALNUM(c))
../inputs/grep1.dat:8289:		trans[c] = state_letter;
../inputs/grep1.dat:8290:	      else if (c < NOTCHAR)
../inputs/grep1.dat:8291:		trans[c] = state;
../inputs/grep1.dat:8292:	    }
../inputs/grep1.dat:8293:    }
../inputs/grep1.dat:8294:
../inputs/grep1.dat:8295:  for (i = 0; i < ngrps; ++i)
../inputs/grep1.dat:8296:    free(grps[i].elems);
../inputs/grep1.dat:8297:  free(follows.elems);
../inputs/grep1.dat:8298:  free(tmp.elems);
../inputs/grep1.dat:8299:}
../inputs/grep1.dat:8300:
../inputs/grep1.dat:8301:/* Some routines for manipulating a compiled dfa's transition tables.
../inputs/grep1.dat:8302:   Each state may or may not have a transition table; if it does, and it
../inputs/grep1.dat:8303:   is a non-accepting state, then d->trans[state] points to its table.
../inputs/grep1.dat:8304:   If it is an accepting state then d->fails[state] points to its table.
../inputs/grep1.dat:8305:   If it has no table at all, then d->trans[state] is NULL.
../inputs/grep1.dat:8306:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
../inputs/grep1.dat:8307:
../inputs/grep1.dat:8308:static void
../inputs/grep1.dat:8309:build_state(s, d)
../inputs/grep1.dat:8310:     int s;
../inputs/grep1.dat:8311:     struct dfa *d;
../inputs/grep1.dat:8312:{
../inputs/grep1.dat:8313:  int *trans;			/* The new transition table. */
../inputs/grep1.dat:8314:  int i;
../inputs/grep1.dat:8315:
../inputs/grep1.dat:8316:  /* Set an upper limit on the number of transition tables that will ever
../inputs/grep1.dat:8317:     exist at once.  1024 is arbitrary.  The idea is that the frequently
../inputs/grep1.dat:8318:     used transition tables will be quickly rebuilt, whereas the ones that
../inputs/grep1.dat:8319:     were only needed once or twice will be cleared away. */
../inputs/grep1.dat:8320:  if (d->trcount >= 1024)
../inputs/grep1.dat:8321:    {
../inputs/grep1.dat:8322:      for (i = 0; i < d->tralloc; ++i)
../inputs/grep1.dat:8323:	if (d->trans[i])
../inputs/grep1.dat:8324:	  {
../inputs/grep1.dat:8325:	    free((ptr_t) d->trans[i]);
../inputs/grep1.dat:8326:	    d->trans[i] = NULL;
../inputs/grep1.dat:8327:	  }
../inputs/grep1.dat:8328:	else if (d->fails[i])
../inputs/grep1.dat:8329:	  {
../inputs/grep1.dat:8330:	    free((ptr_t) d->fails[i]);
../inputs/grep1.dat:8331:	    d->fails[i] = NULL;
../inputs/grep1.dat:8332:	  }
../inputs/grep1.dat:8333:      d->trcount = 0;
../inputs/grep1.dat:8334:    }
../inputs/grep1.dat:8335:
../inputs/grep1.dat:8336:  ++d->trcount;
../inputs/grep1.dat:8337:
../inputs/grep1.dat:8338:  /* Set up the success bits for this state. */
../inputs/grep1.dat:8339:  d->success[s] = 0;
../inputs/grep1.dat:8340:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
../inputs/grep1.dat:8341:      s, *d))
../inputs/grep1.dat:8342:    d->success[s] |= 4;
../inputs/grep1.dat:8343:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
../inputs/grep1.dat:8344:      s, *d))
../inputs/grep1.dat:8345:    d->success[s] |= 2;
../inputs/grep1.dat:8346:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
../inputs/grep1.dat:8347:      s, *d))
../inputs/grep1.dat:8348:    d->success[s] |= 1;
../inputs/grep1.dat:8349:
../inputs/grep1.dat:8350:  MALLOC(trans, int, NOTCHAR);
../inputs/grep1.dat:8351:  dfastate(s, d, trans);
../inputs/grep1.dat:8352:
../inputs/grep1.dat:8353:  /* Now go through the new transition table, and make sure that the trans
../inputs/grep1.dat:8354:     and fail arrays are allocated large enough to hold a pointer for the
../inputs/grep1.dat:8355:     largest state mentioned in the table. */
../inputs/grep1.dat:8356:  for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:8357:    if (trans[i] >= d->tralloc)
../inputs/grep1.dat:8358:      {
../inputs/grep1.dat:8359:	int oldalloc = d->tralloc;
../inputs/grep1.dat:8360:
../inputs/grep1.dat:8361:	while (trans[i] >= d->tralloc)
../inputs/grep1.dat:8362:	  d->tralloc *= 2;
../inputs/grep1.dat:8363:	REALLOC(d->realtrans, int *, d->tralloc + 1);
../inputs/grep1.dat:8364:	d->trans = d->realtrans + 1;
../inputs/grep1.dat:8365:	REALLOC(d->fails, int *, d->tralloc);
../inputs/grep1.dat:8366:	REALLOC(d->success, int, d->tralloc);
../inputs/grep1.dat:8367:	REALLOC(d->newlines, int, d->tralloc);
../inputs/grep1.dat:8368:	while (oldalloc < d->tralloc)
../inputs/grep1.dat:8369:	  {
../inputs/grep1.dat:8370:	    d->trans[oldalloc] = NULL;
../inputs/grep1.dat:8371:	    d->fails[oldalloc++] = NULL;
../inputs/grep1.dat:8372:	  }
../inputs/grep1.dat:8373:      }
../inputs/grep1.dat:8374:
../inputs/grep1.dat:8375:  /* Keep the newline transition in a special place so we can use it as
../inputs/grep1.dat:8376:     a sentinel. */
../inputs/grep1.dat:8377:  d->newlines[s] = trans['\n'];
../inputs/grep1.dat:8378:  trans['\n'] = -1;
../inputs/grep1.dat:8379:
../inputs/grep1.dat:8380:  if (ACCEPTING(s, *d))
../inputs/grep1.dat:8381:    d->fails[s] = trans;
../inputs/grep1.dat:8382:  else
../inputs/grep1.dat:8383:    d->trans[s] = trans;
../inputs/grep1.dat:8384:}
../inputs/grep1.dat:8385:
../inputs/grep1.dat:8386:static void
../inputs/grep1.dat:8387:build_state_zero(d)
../inputs/grep1.dat:8388:     struct dfa *d;
../inputs/grep1.dat:8389:{
../inputs/grep1.dat:8390:  d->tralloc = 1;
../inputs/grep1.dat:8391:  d->trcount = 0;
../inputs/grep1.dat:8392:  CALLOC(d->realtrans, int *, d->tralloc + 1);
../inputs/grep1.dat:8393:  d->trans = d->realtrans + 1;
../inputs/grep1.dat:8394:  CALLOC(d->fails, int *, d->tralloc);
../inputs/grep1.dat:8395:  MALLOC(d->success, int, d->tralloc);
../inputs/grep1.dat:8396:  MALLOC(d->newlines, int, d->tralloc);
../inputs/grep1.dat:8397:  build_state(0, d);
../inputs/grep1.dat:8398:}
../inputs/grep1.dat:8399:
../inputs/grep1.dat:8400:/* Search through a buffer looking for a match to the given struct dfa.
../inputs/grep1.dat:8401:   Find the first occurrence of a string matching the regexp in the buffer,
../inputs/grep1.dat:8402:   and the shortest possible version thereof.  Return a pointer to the first
../inputs/grep1.dat:8403:   character after the match, or NULL if none is found.  Begin points to
../inputs/grep1.dat:8404:   the beginning of the buffer, and end points to the first character after
../inputs/grep1.dat:8405:   its end.  We store a newline in *end to act as a sentinel, so end had
../inputs/grep1.dat:8406:   better point somewhere valid.  Newline is a flag indicating whether to
../inputs/grep1.dat:8407:   allow newlines to be in the matching string.  If count is non-
../inputs/grep1.dat:8408:   NULL it points to a place we're supposed to increment every time we
../inputs/grep1.dat:8409:   see a newline.  Finally, if backref is non-NULL it points to a place
../inputs/grep1.dat:8410:   where we're supposed to store a 1 if backreferencing happened and the
../inputs/grep1.dat:8411:   match needs to be verified by a backtracking matcher.  Otherwise
../inputs/grep1.dat:8412:   we store a 0 in *backref. */
../inputs/grep1.dat:8413:char *
../inputs/grep1.dat:8414:dfaexec(d, begin, end, newline, count, backref)
../inputs/grep1.dat:8415:     struct dfa *d;
../inputs/grep1.dat:8416:     char *begin;
../inputs/grep1.dat:8417:     char *end;
../inputs/grep1.dat:8418:     int newline;
../inputs/grep1.dat:8419:     int *count;
../inputs/grep1.dat:8420:     int *backref;
../inputs/grep1.dat:8421:{
../inputs/grep1.dat:8422:  register s, s1, tmp;		/* Current state. */
../inputs/grep1.dat:8423:  register unsigned char *p;	/* Current input character. */
../inputs/grep1.dat:8424:  register **trans, *t;		/* Copy of d->trans so it can be optimized
../inputs/grep1.dat:8425:				   into a register. */
../inputs/grep1.dat:8426:  static sbit[NOTCHAR];	/* Table for anding with d->success. */
../inputs/grep1.dat:8427:  static sbit_init;
../inputs/grep1.dat:8428:
../inputs/grep1.dat:8429:  if (! sbit_init)
../inputs/grep1.dat:8430:    {
../inputs/grep1.dat:8431:      int i;
../inputs/grep1.dat:8432:
../inputs/grep1.dat:8433:      sbit_init = 1;
../inputs/grep1.dat:8434:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:8435:	if (i == '\n')
../inputs/grep1.dat:8436:	  sbit[i] = 4;
../inputs/grep1.dat:8437:	else if (ISALNUM(i))
../inputs/grep1.dat:8438:	  sbit[i] = 2;
../inputs/grep1.dat:8439:	else
../inputs/grep1.dat:8440:	  sbit[i] = 1;
../inputs/grep1.dat:8441:    }
../inputs/grep1.dat:8442:
../inputs/grep1.dat:8443:  if (! d->tralloc)
../inputs/grep1.dat:8444:    build_state_zero(d);
../inputs/grep1.dat:8445:
../inputs/grep1.dat:8446:  s = s1 = 0;
../inputs/grep1.dat:8447:  p = (unsigned char *) begin;
../inputs/grep1.dat:8448:  trans = d->trans;
../inputs/grep1.dat:8449:  *end = '\n';
../inputs/grep1.dat:8450:
../inputs/grep1.dat:8451:  for (;;)
../inputs/grep1.dat:8452:    {
../inputs/grep1.dat:8453:      /* The dreaded inner loop. */
../inputs/grep1.dat:8454:      if ((t = trans[s]) != 0)
../inputs/grep1.dat:8455:	do
../inputs/grep1.dat:8456:	  {
../inputs/grep1.dat:8457:	    s1 = t[*p++];
../inputs/grep1.dat:8458:	    if (! (t = trans[s1]))
../inputs/grep1.dat:8459:	      goto last_was_s;
../inputs/grep1.dat:8460:	    s = t[*p++];
../inputs/grep1.dat:8461:	  }
../inputs/grep1.dat:8462:        while ((t = trans[s]) != 0);
../inputs/grep1.dat:8463:      goto last_was_s1;
../inputs/grep1.dat:8464:    last_was_s:
../inputs/grep1.dat:8465:      tmp = s, s = s1, s1 = tmp;
../inputs/grep1.dat:8466:    last_was_s1:
../inputs/grep1.dat:8467:
../inputs/grep1.dat:8468:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
../inputs/grep1.dat:8469:	{
../inputs/grep1.dat:8470:	  if (d->success[s] & sbit[*p])
../inputs/grep1.dat:8471:	    {
../inputs/grep1.dat:8472:	      if (backref)
../inputs/grep1.dat:8473:		if (d->states[s].backref)
../inputs/grep1.dat:8474:		  *backref = 1;
../inputs/grep1.dat:8475:		else
../inputs/grep1.dat:8476:		  *backref = 0;
../inputs/grep1.dat:8477:	      return (char *) p;
../inputs/grep1.dat:8478:	    }
../inputs/grep1.dat:8479:
../inputs/grep1.dat:8480:	  s1 = s;
../inputs/grep1.dat:8481:	  s = d->fails[s][*p++];
../inputs/grep1.dat:8482:	  continue;
../inputs/grep1.dat:8483:	}
../inputs/grep1.dat:8484:
../inputs/grep1.dat:8485:      /* If the previous character was a newline, count it. */
../inputs/grep1.dat:8486:      if (count && (char *) p <= end && p[-1] == '\n')
../inputs/grep1.dat:8487:	++*count;
../inputs/grep1.dat:8488:
../inputs/grep1.dat:8489:      /* Check if we've run off the end of the buffer. */
../inputs/grep1.dat:8490:      if ((char *) p > end)
../inputs/grep1.dat:8491:	return NULL;
../inputs/grep1.dat:8492:
../inputs/grep1.dat:8493:      if (s >= 0)
../inputs/grep1.dat:8494:	{
../inputs/grep1.dat:8495:	  build_state(s, d);
../inputs/grep1.dat:8496:	  trans = d->trans;
../inputs/grep1.dat:8497:	  continue;
../inputs/grep1.dat:8498:	}
../inputs/grep1.dat:8499:
../inputs/grep1.dat:8500:      if (p[-1] == '\n' && newline)
../inputs/grep1.dat:8501:	{
../inputs/grep1.dat:8502:	  s = d->newlines[s1];
../inputs/grep1.dat:8503:	  continue;
../inputs/grep1.dat:8504:	}
../inputs/grep1.dat:8505:
../inputs/grep1.dat:8506:      s = 0;
../inputs/grep1.dat:8507:    }
../inputs/grep1.dat:8508:}
../inputs/grep1.dat:8509:
../inputs/grep1.dat:8510:/* Initialize the components of a dfa that the other routines don't
../inputs/grep1.dat:8511:   initialize for themselves. */
../inputs/grep1.dat:8512:void
../inputs/grep1.dat:8513:dfainit(d)
../inputs/grep1.dat:8514:     struct dfa *d;
../inputs/grep1.dat:8515:{
../inputs/grep1.dat:8516:  d->calloc = 1;
../inputs/grep1.dat:8517:  MALLOC(d->charclasses, charclass, d->calloc);
../inputs/grep1.dat:8518:  d->cindex = 0;
../inputs/grep1.dat:8519:
../inputs/grep1.dat:8520:  d->talloc = 1;
../inputs/grep1.dat:8521:  MALLOC(d->tokens, token, d->talloc);
../inputs/grep1.dat:8522:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
../inputs/grep1.dat:8523:
../inputs/grep1.dat:8524:  d->searchflag = 0;
../inputs/grep1.dat:8525:  d->tralloc = 0;
../inputs/grep1.dat:8526:
../inputs/grep1.dat:8527:  d->musts = 0;
../inputs/grep1.dat:8528:}
../inputs/grep1.dat:8529:
../inputs/grep1.dat:8530:/* Parse and analyze a single string of the given length. */
../inputs/grep1.dat:8531:void
../inputs/grep1.dat:8532:dfacomp(s, len, d, searchflag)
../inputs/grep1.dat:8533:     char *s;
../inputs/grep1.dat:8534:     size_t len;
../inputs/grep1.dat:8535:     struct dfa *d;
../inputs/grep1.dat:8536:     int searchflag;
../inputs/grep1.dat:8537:{
../inputs/grep1.dat:8538:  if (case_fold)	/* dummy folding in service of dfamust() */
../inputs/grep1.dat:8539:    {
../inputs/grep1.dat:8540:      char *copy;
../inputs/grep1.dat:8541:      int i;
../inputs/grep1.dat:8542:
../inputs/grep1.dat:8543:      copy = malloc(len);
../inputs/grep1.dat:8544:      if (!copy)
../inputs/grep1.dat:8545:	dfaerror("out of memory");
../inputs/grep1.dat:8546:      
../inputs/grep1.dat:8547:      /* This is a kludge. */
../inputs/grep1.dat:8548:      case_fold = 0;
../inputs/grep1.dat:8549:      for (i = 0; i < len; ++i)
../inputs/grep1.dat:8550:	if (ISUPPER(s[i]))
../inputs/grep1.dat:8551:	  copy[i] = tolower(s[i]);
../inputs/grep1.dat:8552:	else
../inputs/grep1.dat:8553:	  copy[i] = s[i];
../inputs/grep1.dat:8554:
../inputs/grep1.dat:8555:      dfainit(d);
../inputs/grep1.dat:8556:      dfaparse(copy, len, d);
../inputs/grep1.dat:8557:      free(copy);
../inputs/grep1.dat:8558:      dfamust(d);
../inputs/grep1.dat:8559:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
../inputs/grep1.dat:8560:      case_fold = 1;
../inputs/grep1.dat:8561:      dfaparse(s, len, d);
../inputs/grep1.dat:8562:      dfaanalyze(d, searchflag);
../inputs/grep1.dat:8563:    }
../inputs/grep1.dat:8564:  else
../inputs/grep1.dat:8565:    {
../inputs/grep1.dat:8566:        dfainit(d);
../inputs/grep1.dat:8567:        dfaparse(s, len, d);
../inputs/grep1.dat:8568:	dfamust(d);
../inputs/grep1.dat:8569:        dfaanalyze(d, searchflag);
../inputs/grep1.dat:8570:    }
../inputs/grep1.dat:8571:}
../inputs/grep1.dat:8572:
../inputs/grep1.dat:8573:/* Free the storage held by the components of a dfa. */
../inputs/grep1.dat:8574:void
../inputs/grep1.dat:8575:dfafree(d)
../inputs/grep1.dat:8576:     struct dfa *d;
../inputs/grep1.dat:8577:{
../inputs/grep1.dat:8578:  int i;
../inputs/grep1.dat:8579:  struct dfamust *dm, *ndm;
../inputs/grep1.dat:8580:
../inputs/grep1.dat:8581:  free((ptr_t) d->charclasses);
../inputs/grep1.dat:8582:  free((ptr_t) d->tokens);
../inputs/grep1.dat:8583:  for (i = 0; i < d->sindex; ++i)
../inputs/grep1.dat:8584:    free((ptr_t) d->states[i].elems.elems);
../inputs/grep1.dat:8585:  free((ptr_t) d->states);
../inputs/grep1.dat:8586:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:8587:    if (d->follows[i].elems)
../inputs/grep1.dat:8588:      free((ptr_t) d->follows[i].elems);
../inputs/grep1.dat:8589:  free((ptr_t) d->follows);
../inputs/grep1.dat:8590:  for (i = 0; i < d->tralloc; ++i)
../inputs/grep1.dat:8591:    if (d->trans[i])
../inputs/grep1.dat:8592:      free((ptr_t) d->trans[i]);
../inputs/grep1.dat:8593:    else if (d->fails[i])
../inputs/grep1.dat:8594:      free((ptr_t) d->fails[i]);
../inputs/grep1.dat:8595:  free((ptr_t) d->realtrans);
../inputs/grep1.dat:8596:  free((ptr_t) d->fails);
../inputs/grep1.dat:8597:  free((ptr_t) d->newlines);
../inputs/grep1.dat:8598:  for (dm = d->musts; dm; dm = ndm)
../inputs/grep1.dat:8599:    {
../inputs/grep1.dat:8600:      ndm = dm->next;
../inputs/grep1.dat:8601:      free(dm->must);
../inputs/grep1.dat:8602:      free((ptr_t) dm);
../inputs/grep1.dat:8603:    }
../inputs/grep1.dat:8604:}
../inputs/grep1.dat:8605:
../inputs/grep1.dat:8606:/* Having found the postfix representation of the regular expression,
../inputs/grep1.dat:8607:   try to find a long sequence of characters that must appear in any line
../inputs/grep1.dat:8608:   containing the r.e.
../inputs/grep1.dat:8609:   Finding a "longest" sequence is beyond the scope here;
../inputs/grep1.dat:8610:   we take an easy way out and hope for the best.
../inputs/grep1.dat:8611:   (Take "(ab|a)b"--please.)
../inputs/grep1.dat:8612:
../inputs/grep1.dat:8613:   We do a bottom-up calculation of sequences of characters that must appear
../inputs/grep1.dat:8614:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
../inputs/grep1.dat:8615:   representation:
../inputs/grep1.dat:8616:	sequences that must appear at the left of the match ("left")
../inputs/grep1.dat:8617:	sequences that must appear at the right of the match ("right")
../inputs/grep1.dat:8618:	lists of sequences that must appear somewhere in the match ("in")
../inputs/grep1.dat:8619:	sequences that must constitute the match ("is")
../inputs/grep1.dat:8620:
../inputs/grep1.dat:8621:   When we get to the root of the tree, we use one of the longest of its
../inputs/grep1.dat:8622:   calculated "in" sequences as our answer.  The sequence we find is returned in
../inputs/grep1.dat:8623:   d->must (where "d" is the single argument passed to "dfamust");
../inputs/grep1.dat:8624:   the length of the sequence is returned in d->mustn.
../inputs/grep1.dat:8625:
../inputs/grep1.dat:8626:   The sequences calculated for the various types of node (in pseudo ANSI c)
../inputs/grep1.dat:8627:   are shown below.  "p" is the operand of unary operators (and the left-hand
../inputs/grep1.dat:8628:   operand of binary operators); "q" is the right-hand operand of binary
../inputs/grep1.dat:8629:   operators.
../inputs/grep1.dat:8630:
../inputs/grep1.dat:8631:   "ZERO" means "a zero-length sequence" below.
../inputs/grep1.dat:8632:
../inputs/grep1.dat:8633:	Type	left		right		is		in
../inputs/grep1.dat:8634:	----	----		-----		--		--
../inputs/grep1.dat:8635:	char c	# c		# c		# c		# c
../inputs/grep1.dat:8636:	
../inputs/grep1.dat:8637:	CSET	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:8638:	
../inputs/grep1.dat:8639:	STAR	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:8640:
../inputs/grep1.dat:8641:	QMARK	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:8642:
../inputs/grep1.dat:8643:	PLUS	p->left		p->right	ZERO		p->in
../inputs/grep1.dat:8644:
../inputs/grep1.dat:8645:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
../inputs/grep1.dat:8646:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
../inputs/grep1.dat:8647:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
../inputs/grep1.dat:8648:						ZERO
../inputs/grep1.dat:8649:					
../inputs/grep1.dat:8650:	OR	longest common	longest common	(do p->is and	substrings common to
../inputs/grep1.dat:8651:		leading		trailing	q->is have same	p->in and q->in
../inputs/grep1.dat:8652:		(sub)sequence	(sub)sequence	length and	
../inputs/grep1.dat:8653:		of p->left	of p->right	content) ?	
../inputs/grep1.dat:8654:		and q->left	and q->right	p->is : NULL	
../inputs/grep1.dat:8655:
../inputs/grep1.dat:8656:   If there's anything else we recognize in the tree, all four sequences get set
../inputs/grep1.dat:8657:   to zero-length sequences.  If there's something we don't recognize in the tree,
../inputs/grep1.dat:8658:   we just return a zero-length sequence.
../inputs/grep1.dat:8659:
../inputs/grep1.dat:8660:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
../inputs/grep1.dat:8661:   'aaa')?
../inputs/grep1.dat:8662:
../inputs/grep1.dat:8663:   And. . .is it here or someplace that we might ponder "optimizations" such as
../inputs/grep1.dat:8664:	egrep 'psi|epsilon'	->	egrep 'psi'
../inputs/grep1.dat:8665:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
../inputs/grep1.dat:8666:					(Yes, we now find "epsi" as a "string
../inputs/grep1.dat:8667:					that must occur", but we might also
../inputs/grep1.dat:8668:					simplify the *entire* r.e. being sought)
../inputs/grep1.dat:8669:	grep '[c]'		->	grep 'c'
../inputs/grep1.dat:8670:	grep '(ab|a)b'		->	grep 'ab'
../inputs/grep1.dat:8671:	grep 'ab*'		->	grep 'a'
../inputs/grep1.dat:8672:	grep 'a*b'		->	grep 'b'
../inputs/grep1.dat:8673:
../inputs/grep1.dat:8674:   There are several issues:
../inputs/grep1.dat:8675:
../inputs/grep1.dat:8676:   Is optimization easy (enough)?
../inputs/grep1.dat:8677:
../inputs/grep1.dat:8678:   Does optimization actually accomplish anything,
../inputs/grep1.dat:8679:   or is the automaton you get from "psi|epsilon" (for example)
../inputs/grep1.dat:8680:   the same as the one you get from "psi" (for example)?
../inputs/grep1.dat:8681:  
../inputs/grep1.dat:8682:   Are optimizable r.e.'s likely to be used in real-life situations
../inputs/grep1.dat:8683:   (something like 'ab*' is probably unlikely; something like is
../inputs/grep1.dat:8684:   'psi|epsilon' is likelier)? */
../inputs/grep1.dat:8685:
../inputs/grep1.dat:8686:static char *
../inputs/grep1.dat:8687:icatalloc(old, new)
../inputs/grep1.dat:8688:     char *old;
../inputs/grep1.dat:8689:     char *new;
../inputs/grep1.dat:8690:{
../inputs/grep1.dat:8691:  char *result;
../inputs/grep1.dat:8692:  int oldsize, newsize;
../inputs/grep1.dat:8693:
../inputs/grep1.dat:8694:  newsize = (new == NULL) ? 0 : strlen(new);
../inputs/grep1.dat:8695:  if (old == NULL)
../inputs/grep1.dat:8696:    oldsize = 0;
../inputs/grep1.dat:8697:  else if (newsize == 0)
../inputs/grep1.dat:8698:    return old;
../inputs/grep1.dat:8699:  else	oldsize = strlen(old);
../inputs/grep1.dat:8700:  if (old == NULL)
../inputs/grep1.dat:8701:    result = (char *) malloc(newsize + 1);
../inputs/grep1.dat:8702:  else
../inputs/grep1.dat:8703:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
../inputs/grep1.dat:8704:  if (result != NULL && new != NULL)
../inputs/grep1.dat:8705:    (void) strcpy(result + oldsize, new);
../inputs/grep1.dat:8706:  return result;
../inputs/grep1.dat:8707:}
../inputs/grep1.dat:8708:
../inputs/grep1.dat:8709:static char *
../inputs/grep1.dat:8710:icpyalloc(string)
../inputs/grep1.dat:8711:     char *string;
../inputs/grep1.dat:8712:{
../inputs/grep1.dat:8713:  return icatalloc((char *) NULL, string);
../inputs/grep1.dat:8714:}
../inputs/grep1.dat:8715:
../inputs/grep1.dat:8716:static char *
../inputs/grep1.dat:8717:istrstr(lookin, lookfor)
../inputs/grep1.dat:8718:     char *lookin;
../inputs/grep1.dat:8719:     char *lookfor;
../inputs/grep1.dat:8720:{
../inputs/grep1.dat:8721:  char *cp;
../inputs/grep1.dat:8722:  int len;
../inputs/grep1.dat:8723:
../inputs/grep1.dat:8724:  len = strlen(lookfor);
../inputs/grep1.dat:8725:  for (cp = lookin; *cp != '\0'; ++cp)
../inputs/grep1.dat:8726:    if (strncmp(cp, lookfor, len) == 0)
../inputs/grep1.dat:8727:      return cp;
../inputs/grep1.dat:8728:  return NULL;
../inputs/grep1.dat:8729:}
../inputs/grep1.dat:8730:
../inputs/grep1.dat:8731:static void
../inputs/grep1.dat:8732:ifree(cp)
../inputs/grep1.dat:8733:     char *cp;
../inputs/grep1.dat:8734:{
../inputs/grep1.dat:8735:  if (cp != NULL)
../inputs/grep1.dat:8736:    free(cp);
../inputs/grep1.dat:8737:}
../inputs/grep1.dat:8738:
../inputs/grep1.dat:8739:static void
../inputs/grep1.dat:8740:freelist(cpp)
../inputs/grep1.dat:8741:     char **cpp;
../inputs/grep1.dat:8742:{
../inputs/grep1.dat:8743:  int i;
../inputs/grep1.dat:8744:
../inputs/grep1.dat:8745:  if (cpp == NULL)
../inputs/grep1.dat:8746:    return;
../inputs/grep1.dat:8747:  for (i = 0; cpp[i] != NULL; ++i)
../inputs/grep1.dat:8748:    {
../inputs/grep1.dat:8749:      free(cpp[i]);
../inputs/grep1.dat:8750:      cpp[i] = NULL;
../inputs/grep1.dat:8751:    }
../inputs/grep1.dat:8752:}
../inputs/grep1.dat:8753:
../inputs/grep1.dat:8754:static char **
../inputs/grep1.dat:8755:enlist(cpp, new, len)
../inputs/grep1.dat:8756:     char **cpp;
../inputs/grep1.dat:8757:     char *new;
../inputs/grep1.dat:8758:     int len;
../inputs/grep1.dat:8759:{
../inputs/grep1.dat:8760:  int i, j;
../inputs/grep1.dat:8761:
../inputs/grep1.dat:8762:  if (cpp == NULL)
../inputs/grep1.dat:8763:    return NULL;
../inputs/grep1.dat:8764:  if ((new = icpyalloc(new)) == NULL)
../inputs/grep1.dat:8765:    {
../inputs/grep1.dat:8766:      freelist(cpp);
../inputs/grep1.dat:8767:      return NULL;
../inputs/grep1.dat:8768:    }
../inputs/grep1.dat:8769:  new[len] = '\0';
../inputs/grep1.dat:8770:  /* Is there already something in the list that's new (or longer)? */
../inputs/grep1.dat:8771:  for (i = 0; cpp[i] != NULL; ++i)
../inputs/grep1.dat:8772:    if (istrstr(cpp[i], new) != NULL)
../inputs/grep1.dat:8773:      {
../inputs/grep1.dat:8774:	free(new);
../inputs/grep1.dat:8775:	return cpp;
../inputs/grep1.dat:8776:      }
../inputs/grep1.dat:8777:  /* Eliminate any obsoleted strings. */
../inputs/grep1.dat:8778:  j = 0;
../inputs/grep1.dat:8779:  while (cpp[j] != NULL)
../inputs/grep1.dat:8780:    if (istrstr(new, cpp[j]) == NULL)
../inputs/grep1.dat:8781:      ++j;
../inputs/grep1.dat:8782:    else
../inputs/grep1.dat:8783:      {
../inputs/grep1.dat:8784:	free(cpp[j]);
../inputs/grep1.dat:8785:	if (--i == j)
../inputs/grep1.dat:8786:	  break;
../inputs/grep1.dat:8787:	cpp[j] = cpp[i];
../inputs/grep1.dat:8788:	cpp[i] = NULL;
../inputs/grep1.dat:8789:      }
../inputs/grep1.dat:8790:  /* Add the new string. */
../inputs/grep1.dat:8791:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
../inputs/grep1.dat:8792:  if (cpp == NULL)
../inputs/grep1.dat:8793:    return NULL;
../inputs/grep1.dat:8794:  cpp[i] = new;
../inputs/grep1.dat:8795:  cpp[i + 1] = NULL;
../inputs/grep1.dat:8796:  return cpp;
../inputs/grep1.dat:8797:}
../inputs/grep1.dat:8798:
../inputs/grep1.dat:8799:/* Given pointers to two strings, return a pointer to an allocated
../inputs/grep1.dat:8800:   list of their distinct common substrings. Return NULL if something
../inputs/grep1.dat:8801:   seems wild. */
../inputs/grep1.dat:8802:static char **
../inputs/grep1.dat:8803:comsubs(left, right)
../inputs/grep1.dat:8804:     char *left;
../inputs/grep1.dat:8805:     char *right;
../inputs/grep1.dat:8806:{
../inputs/grep1.dat:8807:  char **cpp;
../inputs/grep1.dat:8808:  char *lcp;
../inputs/grep1.dat:8809:  char *rcp;
../inputs/grep1.dat:8810:  int i, len;
../inputs/grep1.dat:8811:
../inputs/grep1.dat:8812:  if (left == NULL || right == NULL)
../inputs/grep1.dat:8813:    return NULL;
../inputs/grep1.dat:8814:  cpp = (char **) malloc(sizeof *cpp);
../inputs/grep1.dat:8815:  if (cpp == NULL)
../inputs/grep1.dat:8816:    return NULL;
../inputs/grep1.dat:8817:  cpp[0] = NULL;
../inputs/grep1.dat:8818:  for (lcp = left; *lcp != '\0'; ++lcp)
../inputs/grep1.dat:8819:    {
../inputs/grep1.dat:8820:      len = 0;
../inputs/grep1.dat:8821:      rcp = index(right, *lcp);
../inputs/grep1.dat:8822:      while (rcp != NULL)
../inputs/grep1.dat:8823:	{
../inputs/grep1.dat:8824:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
../inputs/grep1.dat:8825:	    ;
../inputs/grep1.dat:8826:	  if (i > len)
../inputs/grep1.dat:8827:	    len = i;
../inputs/grep1.dat:8828:	  rcp = index(rcp + 1, *lcp);
../inputs/grep1.dat:8829:	}
../inputs/grep1.dat:8830:      if (len == 0)
../inputs/grep1.dat:8831:	continue;
../inputs/grep1.dat:8832:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
../inputs/grep1.dat:8833:	break;
../inputs/grep1.dat:8834:    }
../inputs/grep1.dat:8835:  return cpp;
../inputs/grep1.dat:8836:}
../inputs/grep1.dat:8837:
../inputs/grep1.dat:8838:static char **
../inputs/grep1.dat:8839:addlists(old, new)
../inputs/grep1.dat:8840:char **old;
../inputs/grep1.dat:8841:char **new;
../inputs/grep1.dat:8842:{
../inputs/grep1.dat:8843:  int i;
../inputs/grep1.dat:8844:
../inputs/grep1.dat:8845:  if (old == NULL || new == NULL)
../inputs/grep1.dat:8846:    return NULL;
../inputs/grep1.dat:8847:  for (i = 0; new[i] != NULL; ++i)
../inputs/grep1.dat:8848:    {
../inputs/grep1.dat:8849:      old = enlist(old, new[i], strlen(new[i]));
../inputs/grep1.dat:8850:      if (old == NULL)
../inputs/grep1.dat:8851:	break;
../inputs/grep1.dat:8852:    }
../inputs/grep1.dat:8853:  return old;
../inputs/grep1.dat:8854:}
../inputs/grep1.dat:8855:
../inputs/grep1.dat:8856:/* Given two lists of substrings, return a new list giving substrings
../inputs/grep1.dat:8857:   common to both. */
../inputs/grep1.dat:8858:static char **
../inputs/grep1.dat:8859:inboth(left, right)
../inputs/grep1.dat:8860:     char **left;
../inputs/grep1.dat:8861:     char **right;
../inputs/grep1.dat:8862:{
../inputs/grep1.dat:8863:  char **both;
../inputs/grep1.dat:8864:  char **temp;
../inputs/grep1.dat:8865:  int lnum, rnum;
../inputs/grep1.dat:8866:
../inputs/grep1.dat:8867:  if (left == NULL || right == NULL)
../inputs/grep1.dat:8868:    return NULL;
../inputs/grep1.dat:8869:  both = (char **) malloc(sizeof *both);
../inputs/grep1.dat:8870:  if (both == NULL)
../inputs/grep1.dat:8871:    return NULL;
../inputs/grep1.dat:8872:  both[0] = NULL;
../inputs/grep1.dat:8873:  for (lnum = 0; left[lnum] != NULL; ++lnum)
../inputs/grep1.dat:8874:    {
../inputs/grep1.dat:8875:      for (rnum = 0; right[rnum] != NULL; ++rnum)
../inputs/grep1.dat:8876:	{
../inputs/grep1.dat:8877:	  temp = comsubs(left[lnum], right[rnum]);
../inputs/grep1.dat:8878:	  if (temp == NULL)
../inputs/grep1.dat:8879:	    {
../inputs/grep1.dat:8880:	      freelist(both);
../inputs/grep1.dat:8881:	      return NULL;
../inputs/grep1.dat:8882:	    }
../inputs/grep1.dat:8883:	  both = addlists(both, temp);
../inputs/grep1.dat:8884:	  freelist(temp);
../inputs/grep1.dat:8885:	  if (both == NULL)
../inputs/grep1.dat:8886:	    return NULL;
../inputs/grep1.dat:8887:	}
../inputs/grep1.dat:8888:    }
../inputs/grep1.dat:8889:  return both;
../inputs/grep1.dat:8890:}
../inputs/grep1.dat:8891:
../inputs/grep1.dat:8892:typedef struct
../inputs/grep1.dat:8893:{
../inputs/grep1.dat:8894:  char **in;
../inputs/grep1.dat:8895:  char *left;
../inputs/grep1.dat:8896:  char *right;
../inputs/grep1.dat:8897:  char *is;
../inputs/grep1.dat:8898:} must;
../inputs/grep1.dat:8899:
../inputs/grep1.dat:8900:static void
../inputs/grep1.dat:8901:resetmust(mp)
../inputs/grep1.dat:8902:must *mp;
../inputs/grep1.dat:8903:{
../inputs/grep1.dat:8904:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
../inputs/grep1.dat:8905:  freelist(mp->in);
../inputs/grep1.dat:8906:}
../inputs/grep1.dat:8907:
../inputs/grep1.dat:8908:static void
../inputs/grep1.dat:8909:dfamust(dfa)
../inputs/grep1.dat:8910:struct dfa *dfa;
../inputs/grep1.dat:8911:{
../inputs/grep1.dat:8912:  must *musts;
../inputs/grep1.dat:8913:  must *mp;
../inputs/grep1.dat:8914:  char *result;
../inputs/grep1.dat:8915:  int ri;
../inputs/grep1.dat:8916:  int i;
../inputs/grep1.dat:8917:  int exact;
../inputs/grep1.dat:8918:  token t;
../inputs/grep1.dat:8919:  static must must0;
../inputs/grep1.dat:8920:  struct dfamust *dm;
../inputs/grep1.dat:8921:
../inputs/grep1.dat:8922:  result = "";
../inputs/grep1.dat:8923:  exact = 0;
../inputs/grep1.dat:8924:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
../inputs/grep1.dat:8925:  if (musts == NULL)
../inputs/grep1.dat:8926:    return;
../inputs/grep1.dat:8927:  mp = musts;
../inputs/grep1.dat:8928:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:8929:    mp[i] = must0;
../inputs/grep1.dat:8930:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:8931:    {
../inputs/grep1.dat:8932:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
../inputs/grep1.dat:8933:      mp[i].left = malloc(2);
../inputs/grep1.dat:8934:      mp[i].right = malloc(2);
../inputs/grep1.dat:8935:      mp[i].is = malloc(2);
../inputs/grep1.dat:8936:      if (mp[i].in == NULL || mp[i].left == NULL ||
../inputs/grep1.dat:8937:	  mp[i].right == NULL || mp[i].is == NULL)
../inputs/grep1.dat:8938:	goto done;
../inputs/grep1.dat:8939:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
../inputs/grep1.dat:8940:      mp[i].in[0] = NULL;
../inputs/grep1.dat:8941:    }
../inputs/grep1.dat:8942:#ifdef DEBUG
../inputs/grep1.dat:8943:  fprintf(stderr, "dfamust:\n");
../inputs/grep1.dat:8944:  for (i = 0; i < dfa->tindex; ++i)
../inputs/grep1.dat:8945:    {
../inputs/grep1.dat:8946:      fprintf(stderr, " %d:", i);
../inputs/grep1.dat:8947:      prtok(dfa->tokens[i]);
../inputs/grep1.dat:8948:    }
../inputs/grep1.dat:8949:  putc('\n', stderr);
../inputs/grep1.dat:8950:#endif
../inputs/grep1.dat:8951:  for (ri = 0; ri < dfa->tindex; ++ri)
../inputs/grep1.dat:8952:    {
../inputs/grep1.dat:8953:      switch (t = dfa->tokens[ri])
../inputs/grep1.dat:8954:	{
../inputs/grep1.dat:8955:	case LPAREN:
../inputs/grep1.dat:8956:	case RPAREN:
../inputs/grep1.dat:8957:	  goto done;		/* "cannot happen" */
../inputs/grep1.dat:8958:	case EMPTY:
../inputs/grep1.dat:8959:	case BEGLINE:
../inputs/grep1.dat:8960:	case ENDLINE:
../inputs/grep1.dat:8961:	case BEGWORD:
../inputs/grep1.dat:8962:	case ENDWORD:
../inputs/grep1.dat:8963:	case LIMWORD:
../inputs/grep1.dat:8964:	case NOTLIMWORD:
../inputs/grep1.dat:8965:	case BACKREF:
../inputs/grep1.dat:8966:	  resetmust(mp);
../inputs/grep1.dat:8967:	  break;
../inputs/grep1.dat:8968:	case STAR:
../inputs/grep1.dat:8969:	case QMARK:
../inputs/grep1.dat:8970:	  if (mp <= musts)
../inputs/grep1.dat:8971:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:8972:	  --mp;
../inputs/grep1.dat:8973:	  resetmust(mp);
../inputs/grep1.dat:8974:	  break;
../inputs/grep1.dat:8975:	case OR:
../inputs/grep1.dat:8976:	case ORTOP:
../inputs/grep1.dat:8977:	  if (mp < &musts[2])
../inputs/grep1.dat:8978:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:8979:	  {
../inputs/grep1.dat:8980:	    char **new;
../inputs/grep1.dat:8981:	    must *lmp;
../inputs/grep1.dat:8982:	    must *rmp;
../inputs/grep1.dat:8983:	    int j, ln, rn, n;
../inputs/grep1.dat:8984:
../inputs/grep1.dat:8985:	    rmp = --mp;
../inputs/grep1.dat:8986:	    lmp = --mp;
../inputs/grep1.dat:8987:	    /* Guaranteed to be.  Unlikely, but. . . */
../inputs/grep1.dat:8988:	    if (strcmp(lmp->is, rmp->is) != 0)
../inputs/grep1.dat:8989:	      lmp->is[0] = '\0';
../inputs/grep1.dat:8990:	    /* Left side--easy */
../inputs/grep1.dat:8991:	    i = 0;
../inputs/grep1.dat:8992:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
../inputs/grep1.dat:8993:	      ++i;
../inputs/grep1.dat:8994:	    lmp->left[i] = '\0';
../inputs/grep1.dat:8995:	    /* Right side */
../inputs/grep1.dat:8996:	    ln = strlen(lmp->right);
../inputs/grep1.dat:8997:	    rn = strlen(rmp->right);
../inputs/grep1.dat:8998:	    n = ln;
../inputs/grep1.dat:8999:	    if (n > rn)
../inputs/grep1.dat:9000:	      n = rn;
../inputs/grep1.dat:9001:	    for (i = 0; i < n; ++i)
../inputs/grep1.dat:9002:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
../inputs/grep1.dat:9003:		break;
../inputs/grep1.dat:9004:	    for (j = 0; j < i; ++j)
../inputs/grep1.dat:9005:	      lmp->right[j] = lmp->right[(ln - i) + j];
../inputs/grep1.dat:9006:	    lmp->right[j] = '\0';
../inputs/grep1.dat:9007:	    new = inboth(lmp->in, rmp->in);
../inputs/grep1.dat:9008:	    if (new == NULL)
../inputs/grep1.dat:9009:	      goto done;
../inputs/grep1.dat:9010:	    freelist(lmp->in);
../inputs/grep1.dat:9011:	    free((char *) lmp->in);
../inputs/grep1.dat:9012:	    lmp->in = new;
../inputs/grep1.dat:9013:	  }
../inputs/grep1.dat:9014:	  break;
../inputs/grep1.dat:9015:	case PLUS:
../inputs/grep1.dat:9016:	  if (mp <= musts)
../inputs/grep1.dat:9017:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:9018:	  --mp;
../inputs/grep1.dat:9019:	  mp->is[0] = '\0';
../inputs/grep1.dat:9020:	  break;
../inputs/grep1.dat:9021:	case END:
../inputs/grep1.dat:9022:	  if (mp != &musts[1])
../inputs/grep1.dat:9023:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:9024:	  for (i = 0; musts[0].in[i] != NULL; ++i)
../inputs/grep1.dat:9025:	    if (strlen(musts[0].in[i]) > strlen(result))
../inputs/grep1.dat:9026:	      result = musts[0].in[i];
../inputs/grep1.dat:9027:	  if (strcmp(result, musts[0].is) == 0)
../inputs/grep1.dat:9028:	    exact = 1;
../inputs/grep1.dat:9029:	  goto done;
../inputs/grep1.dat:9030:	case CAT:
../inputs/grep1.dat:9031:	  if (mp < &musts[2])
../inputs/grep1.dat:9032:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:9033:	  {
../inputs/grep1.dat:9034:	    must *lmp;
../inputs/grep1.dat:9035:	    must *rmp;
../inputs/grep1.dat:9036:
../inputs/grep1.dat:9037:	    rmp = --mp;
../inputs/grep1.dat:9038:	    lmp = --mp;
../inputs/grep1.dat:9039:	    /* In.  Everything in left, plus everything in
../inputs/grep1.dat:9040:	       right, plus catenation of
../inputs/grep1.dat:9041:	       left's right and right's left. */
../inputs/grep1.dat:9042:	    lmp->in = addlists(lmp->in, rmp->in);
../inputs/grep1.dat:9043:	    if (lmp->in == NULL)
../inputs/grep1.dat:9044:	      goto done;
../inputs/grep1.dat:9045:	    if (lmp->right[0] != '\0' &&
../inputs/grep1.dat:9046:		rmp->left[0] != '\0')
../inputs/grep1.dat:9047:	      {
../inputs/grep1.dat:9048:		char *tp;
../inputs/grep1.dat:9049:
../inputs/grep1.dat:9050:		tp = icpyalloc(lmp->right);
../inputs/grep1.dat:9051:		if (tp == NULL)
../inputs/grep1.dat:9052:		  goto done;
../inputs/grep1.dat:9053:		tp = icatalloc(tp, rmp->left);
../inputs/grep1.dat:9054:		if (tp == NULL)
../inputs/grep1.dat:9055:		  goto done;
../inputs/grep1.dat:9056:		lmp->in = enlist(lmp->in, tp,
../inputs/grep1.dat:9057:				 strlen(tp));
../inputs/grep1.dat:9058:		free(tp);
../inputs/grep1.dat:9059:		if (lmp->in == NULL)
../inputs/grep1.dat:9060:		  goto done;
../inputs/grep1.dat:9061:	      }
../inputs/grep1.dat:9062:	    /* Left-hand */
../inputs/grep1.dat:9063:	    if (lmp->is[0] != '\0')
../inputs/grep1.dat:9064:	      {
../inputs/grep1.dat:9065:		lmp->left = icatalloc(lmp->left,
../inputs/grep1.dat:9066:				      rmp->left);
../inputs/grep1.dat:9067:		if (lmp->left == NULL)
../inputs/grep1.dat:9068:		  goto done;
../inputs/grep1.dat:9069:	      }
../inputs/grep1.dat:9070:	    /* Right-hand */
../inputs/grep1.dat:9071:	    if (rmp->is[0] == '\0')
../inputs/grep1.dat:9072:	      lmp->right[0] = '\0';
../inputs/grep1.dat:9073:	    lmp->right = icatalloc(lmp->right, rmp->right);
../inputs/grep1.dat:9074:	    if (lmp->right == NULL)
../inputs/grep1.dat:9075:	      goto done;
../inputs/grep1.dat:9076:	    /* Guaranteed to be */
../inputs/grep1.dat:9077:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
../inputs/grep1.dat:9078:	      {
../inputs/grep1.dat:9079:		lmp->is = icatalloc(lmp->is, rmp->is);
../inputs/grep1.dat:9080:		if (lmp->is == NULL)
../inputs/grep1.dat:9081:		  goto done;
../inputs/grep1.dat:9082:	      }
../inputs/grep1.dat:9083:	    else
../inputs/grep1.dat:9084:	      lmp->is[0] = '\0';
../inputs/grep1.dat:9085:	  }
../inputs/grep1.dat:9086:	  break;
../inputs/grep1.dat:9087:	default:
../inputs/grep1.dat:9088:	  if (t < END)
../inputs/grep1.dat:9089:	    {
../inputs/grep1.dat:9090:	      /* "cannot happen" */
../inputs/grep1.dat:9091:	      goto done;
../inputs/grep1.dat:9092:	    }
../inputs/grep1.dat:9093:	  else if (t == '\0')
../inputs/grep1.dat:9094:	    {
../inputs/grep1.dat:9095:	      /* not on *my* shift */
../inputs/grep1.dat:9096:	      goto done;
../inputs/grep1.dat:9097:	    }
../inputs/grep1.dat:9098:	  else if (t >= CSET)
../inputs/grep1.dat:9099:	    {
../inputs/grep1.dat:9100:	      /* easy enough */
../inputs/grep1.dat:9101:	      resetmust(mp);
../inputs/grep1.dat:9102:	    }
../inputs/grep1.dat:9103:	  else
../inputs/grep1.dat:9104:	    {
../inputs/grep1.dat:9105:	      /* plain character */
../inputs/grep1.dat:9106:	      resetmust(mp);
../inputs/grep1.dat:9107:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
../inputs/grep1.dat:9108:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
../inputs/grep1.dat:9109:	      mp->in = enlist(mp->in, mp->is, 1);
../inputs/grep1.dat:9110:	      if (mp->in == NULL)
../inputs/grep1.dat:9111:		goto done;
../inputs/grep1.dat:9112:	    }
../inputs/grep1.dat:9113:	  break;
../inputs/grep1.dat:9114:	}
../inputs/grep1.dat:9115:#ifdef DEBUG
../inputs/grep1.dat:9116:      fprintf(stderr, " node: %d:", ri);
../inputs/grep1.dat:9117:      prtok(dfa->tokens[ri]);
../inputs/grep1.dat:9118:      fprintf(stderr, "\n  in:");
../inputs/grep1.dat:9119:      for (i = 0; mp->in[i]; ++i)
../inputs/grep1.dat:9120:	fprintf(stderr, " \"%s\"", mp->in[i]);
../inputs/grep1.dat:9121:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
../inputs/grep1.dat:9122:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
../inputs/grep1.dat:9123:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
../inputs/grep1.dat:9124:#endif
../inputs/grep1.dat:9125:      ++mp;
../inputs/grep1.dat:9126:    }
../inputs/grep1.dat:9127: done:
../inputs/grep1.dat:9128:  if (strlen(result))
../inputs/grep1.dat:9129:    {
../inputs/grep1.dat:9130:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
../inputs/grep1.dat:9131:      dm->exact = exact;
../inputs/grep1.dat:9132:      dm->must = malloc(strlen(result) + 1);
../inputs/grep1.dat:9133:      strcpy(dm->must, result);
../inputs/grep1.dat:9134:      dm->next = dfa->musts;
../inputs/grep1.dat:9135:      dfa->musts = dm;
../inputs/grep1.dat:9136:    }
../inputs/grep1.dat:9137:  mp = musts;
../inputs/grep1.dat:9138:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:9139:    {
../inputs/grep1.dat:9140:      freelist(mp[i].in);
../inputs/grep1.dat:9141:      ifree((char *) mp[i].in);
../inputs/grep1.dat:9142:      ifree(mp[i].left);
../inputs/grep1.dat:9143:      ifree(mp[i].right);
../inputs/grep1.dat:9144:      ifree(mp[i].is);
../inputs/grep1.dat:9145:    }
../inputs/grep1.dat:9146:  free((char *) mp);
../inputs/grep1.dat:9147:}
../inputs/grep1.dat:9148:/* kwset.c - search for any of a set of keywords.
../inputs/grep1.dat:9149:   Copyright 1989 Free Software Foundation
../inputs/grep1.dat:9150:		  Written August 1989 by Mike Haertel.
../inputs/grep1.dat:9151:
../inputs/grep1.dat:9152:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:9153:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:9154:   the Free Software Foundation; either version 1, or (at your option)
../inputs/grep1.dat:9155:   any later version.
../inputs/grep1.dat:9156:
../inputs/grep1.dat:9157:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:9158:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:9159:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:9160:   GNU General Public License for more details.
../inputs/grep1.dat:9161:
../inputs/grep1.dat:9162:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:9163:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:9164:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:9165:
../inputs/grep1.dat:9166:   The author may be reached (Email) at the address mike@ai.mit.edu,
../inputs/grep1.dat:9167:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
../inputs/grep1.dat:9168:
../inputs/grep1.dat:9169:/* The algorithm implemented by these routines bears a startling resemblence
../inputs/grep1.dat:9170:   to one discovered by Beate Commentz-Walter, although it is not identical.
../inputs/grep1.dat:9171:   See "A String Matching Algorithm Fast on the Average," Technical Report,
../inputs/grep1.dat:9172:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
../inputs/grep1.dat:9173:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
../inputs/grep1.dat:9174:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
../inputs/grep1.dat:9175:   Vol. 18, No. 6, which describes the failure function used below. */
../inputs/grep1.dat:9176:
../inputs/grep1.dat:9177:
../inputs/grep1.dat:9178:#ifdef STDC_HEADERS
../inputs/grep1.dat:9179:#undef RE_DUP_MAX
../inputs/grep1.dat:9181:#define flag_limits 1
../inputs/grep1.dat:9182:#if flag_stdlib==0 
../inputs/grep1.dat:9184:#define flag_stdlib 1
../inputs/grep1.dat:9185:#endif
../inputs/grep1.dat:9186:#else
../inputs/grep1.dat:9187:#define INT_MAX 2147483647
../inputs/grep1.dat:9188:#define UCHAR_MAX 255
../inputs/grep1.dat:9189:#ifdef __STDC__
../inputs/grep1.dat:9191:#else
../inputs/grep1.dat:9192:#if flag_systypes==0
../inputs/grep1.dat:9194:#define flag_systypes 1
../inputs/grep1.dat:9195:#endif
../inputs/grep1.dat:9196:#endif
../inputs/grep1.dat:9197:extern char *malloc();
../inputs/grep1.dat:9198:extern void free();
../inputs/grep1.dat:9199:#endif
../inputs/grep1.dat:9200:
../inputs/grep1.dat:9201:#ifdef HAVE_MEMCHR
../inputs/grep1.dat:9202:#if flag_string==0
../inputs/grep1.dat:9204:#define flag_string 1
../inputs/grep1.dat:9205:#endif
../inputs/grep1.dat:9206:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:9207:#if flag_memory==0
../inputs/grep1.dat:9209:#define flag_memory 1
../inputs/grep1.dat:9210:#endif
../inputs/grep1.dat:9211:#endif
../inputs/grep1.dat:9212:#else
../inputs/grep1.dat:9213:#ifdef __STDC__
../inputs/grep1.dat:9214:extern void *memchr();
../inputs/grep1.dat:9215:#else
../inputs/grep1.dat:9216:extern char *memchr();
../inputs/grep1.dat:9217:#endif
../inputs/grep1.dat:9218:#endif
../inputs/grep1.dat:9219:
../inputs/grep1.dat:9220:#ifdef GREP
../inputs/grep1.dat:9221:extern char *xmalloc();
../inputs/grep1.dat:9222:#define malloc xmalloc
../inputs/grep1.dat:9223:#endif
../inputs/grep1.dat:9224:
../inputs/grep1.dat:9227:
../inputs/grep1.dat:9228:#define NCHAR (UCHAR_MAX + 1)
../inputs/grep1.dat:9229:#define obstack_chunk_alloc malloc
../inputs/grep1.dat:9230:#define obstack_chunk_free free
../inputs/grep1.dat:9231:
../inputs/grep1.dat:9232:/* Balanced tree of edges and labels leaving a given trie node. */
../inputs/grep1.dat:9233:struct tree
../inputs/grep1.dat:9234:{
../inputs/grep1.dat:9235:  struct tree *llink;		/* Left link; MUST be first field. */
../inputs/grep1.dat:9236:  struct tree *rlink;		/* Right link (to larger labels). */
../inputs/grep1.dat:9237:  struct trie *trie;		/* Trie node pointed to by this edge. */
../inputs/grep1.dat:9238:  unsigned char label;		/* Label on this edge. */
../inputs/grep1.dat:9239:  char balance;			/* Difference in depths of subtrees. */
../inputs/grep1.dat:9240:};
../inputs/grep1.dat:9241:
../inputs/grep1.dat:9242:/* Node of a trie representing a set of reversed keywords. */
../inputs/grep1.dat:9243:struct trie
../inputs/grep1.dat:9244:{
../inputs/grep1.dat:9245:  unsigned int accepting;	/* Word index of accepted word, or zero. */
../inputs/grep1.dat:9246:  struct tree *links;		/* Tree of edges leaving this node. */
../inputs/grep1.dat:9247:  struct trie *parent;		/* Parent of this node. */
../inputs/grep1.dat:9248:  struct trie *next;		/* List of all trie nodes in level order. */
../inputs/grep1.dat:9249:  struct trie *fail;		/* Aho-Corasick failure function. */
../inputs/grep1.dat:9250:  int depth;			/* Depth of this node from the root. */
../inputs/grep1.dat:9251:  int shift;			/* Shift function for search failures. */
../inputs/grep1.dat:9252:  int maxshift;			/* Max shift of self and descendents. */
../inputs/grep1.dat:9253:};
../inputs/grep1.dat:9254:
../inputs/grep1.dat:9255:/* Structure returned opaquely to the caller, containing everything. */
../inputs/grep1.dat:9256:struct kwset
../inputs/grep1.dat:9257:{
../inputs/grep1.dat:9258:  struct obstack obstack;	/* Obstack for node allocation. */
../inputs/grep1.dat:9259:  int words;			/* Number of words in the trie. */
../inputs/grep1.dat:9260:  struct trie *trie;		/* The trie itself. */
../inputs/grep1.dat:9261:  int mind;			/* Minimum depth of an accepting node. */
../inputs/grep1.dat:9262:  int maxd;			/* Maximum depth of any node. */
../inputs/grep1.dat:9263:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
../inputs/grep1.dat:9264:  struct trie *next[NCHAR];	/* Table of children of the root. */
../inputs/grep1.dat:9265:  char *target;			/* Target string if there's only one. */
../inputs/grep1.dat:9266:  int mind2;			/* Used in Boyer-Moore search for one string. */
../inputs/grep1.dat:9267:  char *trans;			/* Character translation table. */
../inputs/grep1.dat:9268:};
../inputs/grep1.dat:9269:
../inputs/grep1.dat:9270:/* Allocate and initialize a keyword set object, returning an opaque
../inputs/grep1.dat:9271:   pointer to it.  Return NULL if memory is not available. */
../inputs/grep1.dat:9272:kwset_t
../inputs/grep1.dat:9273:kwsalloc(trans)
../inputs/grep1.dat:9274:     char *trans;
../inputs/grep1.dat:9275:{
../inputs/grep1.dat:9276:  struct kwset *kwset;
../inputs/grep1.dat:9277:
../inputs/grep1.dat:9278:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
../inputs/grep1.dat:9279:  if (!kwset)
../inputs/grep1.dat:9280:    return 0;
../inputs/grep1.dat:9281:
../inputs/grep1.dat:9282:  obstack_init(&kwset->obstack);
../inputs/grep1.dat:9283:  kwset->words = 0;
../inputs/grep1.dat:9284:  kwset->trie
../inputs/grep1.dat:9285:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
../inputs/grep1.dat:9286:  if (!kwset->trie)
../inputs/grep1.dat:9287:    {
../inputs/grep1.dat:9288:      kwsfree((kwset_t) kwset);
../inputs/grep1.dat:9289:      return 0;
../inputs/grep1.dat:9290:    }
../inputs/grep1.dat:9291:  kwset->trie->accepting = 0;
../inputs/grep1.dat:9292:  kwset->trie->links = 0;
../inputs/grep1.dat:9293:  kwset->trie->parent = 0;
../inputs/grep1.dat:9294:  kwset->trie->next = 0;
../inputs/grep1.dat:9295:  kwset->trie->fail = 0;
../inputs/grep1.dat:9296:  kwset->trie->depth = 0;
../inputs/grep1.dat:9297:  kwset->trie->shift = 0;
../inputs/grep1.dat:9298:  kwset->mind = INT_MAX;
../inputs/grep1.dat:9299:  kwset->maxd = -1;
../inputs/grep1.dat:9300:  kwset->target = 0;
../inputs/grep1.dat:9301:  kwset->trans = trans;
../inputs/grep1.dat:9302:
../inputs/grep1.dat:9303:  return (kwset_t) kwset;
../inputs/grep1.dat:9304:}
../inputs/grep1.dat:9305:
../inputs/grep1.dat:9306:/* Add the given string to the contents of the keyword set.  Return NULL
../inputs/grep1.dat:9307:   for success, an error message otherwise. */
../inputs/grep1.dat:9308:char *
../inputs/grep1.dat:9309:kwsincr(kws, text, len)
../inputs/grep1.dat:9310:     kwset_t kws;
../inputs/grep1.dat:9311:     char *text;
../inputs/grep1.dat:9312:     size_t len;
../inputs/grep1.dat:9313:{
../inputs/grep1.dat:9314:  struct kwset *kwset;
../inputs/grep1.dat:9315:  register struct trie *trie;
../inputs/grep1.dat:9316:  register unsigned char label;
../inputs/grep1.dat:9317:  register struct tree *link;
../inputs/grep1.dat:9318:  register int depth;
../inputs/grep1.dat:9319:  struct tree *links[12];
../inputs/grep1.dat:9320:  enum { L, R } dirs[12];
../inputs/grep1.dat:9321:  struct tree *t, *r, *l, *rl, *lr;
../inputs/grep1.dat:9322:
../inputs/grep1.dat:9323:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9324:  trie = kwset->trie;
../inputs/grep1.dat:9325:  text += len;
../inputs/grep1.dat:9326:
../inputs/grep1.dat:9327:  /* Descend the trie (built of reversed keywords) character-by-character,
../inputs/grep1.dat:9328:     installing new nodes when necessary. */
../inputs/grep1.dat:9329:  while (len--)
../inputs/grep1.dat:9330:    {
../inputs/grep1.dat:9331:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
../inputs/grep1.dat:9332:
../inputs/grep1.dat:9333:      /* Descend the tree of outgoing links for this trie node,
../inputs/grep1.dat:9334:	 looking for the current character and keeping track
../inputs/grep1.dat:9335:	 of the path followed. */
../inputs/grep1.dat:9336:      link = trie->links;
../inputs/grep1.dat:9337:      links[0] = (struct tree *) &trie->links;
../inputs/grep1.dat:9338:      dirs[0] = L;
../inputs/grep1.dat:9339:      depth = 1;
../inputs/grep1.dat:9340:
../inputs/grep1.dat:9341:      while (link && label != link->label)
../inputs/grep1.dat:9342:	{
../inputs/grep1.dat:9343:	  links[depth] = link;
../inputs/grep1.dat:9344:	  if (label < link->label)
../inputs/grep1.dat:9345:	    dirs[depth++] = L, link = link->llink;
../inputs/grep1.dat:9346:	  else
../inputs/grep1.dat:9347:	    dirs[depth++] = R, link = link->rlink;
../inputs/grep1.dat:9348:	}
../inputs/grep1.dat:9349:
../inputs/grep1.dat:9350:      /* The current character doesn't have an outgoing link at
../inputs/grep1.dat:9351:	 this trie node, so build a new trie node and install
../inputs/grep1.dat:9352:	 a link in the current trie node's tree. */
../inputs/grep1.dat:9353:      if (!link)
../inputs/grep1.dat:9354:	{
../inputs/grep1.dat:9355:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
../inputs/grep1.dat:9356:					       sizeof (struct tree));
../inputs/grep1.dat:9357:	  if (!link)
../inputs/grep1.dat:9358:	    return "memory exhausted";
../inputs/grep1.dat:9359:	  link->llink = 0;
../inputs/grep1.dat:9360:	  link->rlink = 0;
../inputs/grep1.dat:9361:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
../inputs/grep1.dat:9362:						     sizeof (struct trie));
../inputs/grep1.dat:9363:	  if (!link->trie)
../inputs/grep1.dat:9364:	    return "memory exhausted";
../inputs/grep1.dat:9365:	  link->trie->accepting = 0;
../inputs/grep1.dat:9366:	  link->trie->links = 0;
../inputs/grep1.dat:9367:	  link->trie->parent = trie;
../inputs/grep1.dat:9368:	  link->trie->next = 0;
../inputs/grep1.dat:9369:	  link->trie->fail = 0;
../inputs/grep1.dat:9370:	  link->trie->depth = trie->depth + 1;
../inputs/grep1.dat:9371:	  link->trie->shift = 0;
../inputs/grep1.dat:9372:	  link->label = label;
../inputs/grep1.dat:9373:	  link->balance = 0;
../inputs/grep1.dat:9374:
../inputs/grep1.dat:9375:	  /* Install the new tree node in its parent. */
../inputs/grep1.dat:9376:	  if (dirs[--depth] == L)
../inputs/grep1.dat:9377:	    links[depth]->llink = link;
../inputs/grep1.dat:9378:	  else
../inputs/grep1.dat:9379:	    links[depth]->rlink = link;
../inputs/grep1.dat:9380:
../inputs/grep1.dat:9381:	  /* Back up the tree fixing the balance flags. */
../inputs/grep1.dat:9382:	  while (depth && !links[depth]->balance)
../inputs/grep1.dat:9383:	    {
../inputs/grep1.dat:9384:	      if (dirs[depth] == L)
../inputs/grep1.dat:9385:		--links[depth]->balance;
../inputs/grep1.dat:9386:	      else
../inputs/grep1.dat:9387:		++links[depth]->balance;
../inputs/grep1.dat:9388:	      --depth;
../inputs/grep1.dat:9389:	    }
../inputs/grep1.dat:9390:
../inputs/grep1.dat:9391:	  /* Rebalance the tree by pointer rotations if necessary. */
../inputs/grep1.dat:9392:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
../inputs/grep1.dat:9393:			|| (dirs[depth] == R && ++links[depth]->balance)))
../inputs/grep1.dat:9394:	    {
../inputs/grep1.dat:9395:	      switch (links[depth]->balance)
../inputs/grep1.dat:9396:		{
../inputs/grep1.dat:9397:		case (char) -2:
../inputs/grep1.dat:9398:		  switch (dirs[depth + 1])
../inputs/grep1.dat:9399:		    {
../inputs/grep1.dat:9400:		    case L:
../inputs/grep1.dat:9401:		      r = links[depth], t = r->llink, rl = t->rlink;
../inputs/grep1.dat:9402:		      t->rlink = r, r->llink = rl;
../inputs/grep1.dat:9403:		      t->balance = r->balance = 0;
../inputs/grep1.dat:9404:		      break;
../inputs/grep1.dat:9405:		    case R:
../inputs/grep1.dat:9406:		      r = links[depth], l = r->llink, t = l->rlink;
../inputs/grep1.dat:9407:		      rl = t->rlink, lr = t->llink;
../inputs/grep1.dat:9408:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
../inputs/grep1.dat:9409:		      l->balance = t->balance != 1 ? 0 : -1;
../inputs/grep1.dat:9410:		      r->balance = t->balance != (char) -1 ? 0 : 1;
../inputs/grep1.dat:9411:		      t->balance = 0;
../inputs/grep1.dat:9412:		      break;
../inputs/grep1.dat:9413:		    }
../inputs/grep1.dat:9414:		  break;
../inputs/grep1.dat:9415:		case 2:
../inputs/grep1.dat:9416:		  switch (dirs[depth + 1])
../inputs/grep1.dat:9417:		    {
../inputs/grep1.dat:9418:		    case R:
../inputs/grep1.dat:9419:		      l = links[depth], t = l->rlink, lr = t->llink;
../inputs/grep1.dat:9420:		      t->llink = l, l->rlink = lr;
../inputs/grep1.dat:9421:		      t->balance = l->balance = 0;
../inputs/grep1.dat:9422:		      break;
../inputs/grep1.dat:9423:		    case L:
../inputs/grep1.dat:9424:		      l = links[depth], r = l->rlink, t = r->llink;
../inputs/grep1.dat:9425:		      lr = t->llink, rl = t->rlink;
../inputs/grep1.dat:9426:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
../inputs/grep1.dat:9427:		      l->balance = t->balance != 1 ? 0 : -1;
../inputs/grep1.dat:9428:		      r->balance = t->balance != (char) -1 ? 0 : 1;
../inputs/grep1.dat:9429:		      t->balance = 0;
../inputs/grep1.dat:9430:		      break;
../inputs/grep1.dat:9431:		    }
../inputs/grep1.dat:9432:		  break;
../inputs/grep1.dat:9433:		}
../inputs/grep1.dat:9434:
../inputs/grep1.dat:9435:	      if (dirs[depth - 1] == L)
../inputs/grep1.dat:9436:		links[depth - 1]->llink = t;
../inputs/grep1.dat:9437:	      else
../inputs/grep1.dat:9438:		links[depth - 1]->rlink = t;
../inputs/grep1.dat:9439:	    }
../inputs/grep1.dat:9440:	}
../inputs/grep1.dat:9441:
../inputs/grep1.dat:9442:      trie = link->trie;
../inputs/grep1.dat:9443:    }
../inputs/grep1.dat:9444:
../inputs/grep1.dat:9445:  /* Mark the node we finally reached as accepting, encoding the
../inputs/grep1.dat:9446:     index number of this word in the keyword set so far. */
../inputs/grep1.dat:9447:  if (!trie->accepting)
../inputs/grep1.dat:9448:    trie->accepting = 1 + 2 * kwset->words;
../inputs/grep1.dat:9449:  ++kwset->words;
../inputs/grep1.dat:9450:
../inputs/grep1.dat:9451:  /* Keep track of the longest and shortest string of the keyword set. */
../inputs/grep1.dat:9452:  if (trie->depth < kwset->mind)
../inputs/grep1.dat:9453:    kwset->mind = trie->depth;
../inputs/grep1.dat:9454:  if (trie->depth > kwset->maxd)
../inputs/grep1.dat:9455:    kwset->maxd = trie->depth;
../inputs/grep1.dat:9456:
../inputs/grep1.dat:9457:  return 0;
../inputs/grep1.dat:9458:}
../inputs/grep1.dat:9459:
../inputs/grep1.dat:9460:/* Enqueue the trie nodes referenced from the given tree in the
../inputs/grep1.dat:9461:   given queue. */
../inputs/grep1.dat:9462:static void
../inputs/grep1.dat:9463:enqueue(tree, last)
../inputs/grep1.dat:9464:     struct tree *tree;
../inputs/grep1.dat:9465:     struct trie **last;
../inputs/grep1.dat:9466:{
../inputs/grep1.dat:9467:  if (!tree)
../inputs/grep1.dat:9468:    return;
../inputs/grep1.dat:9469:  enqueue(tree->llink, last);
../inputs/grep1.dat:9470:  enqueue(tree->rlink, last);
../inputs/grep1.dat:9471:  (*last) = (*last)->next = tree->trie;
../inputs/grep1.dat:9472:}
../inputs/grep1.dat:9473:
../inputs/grep1.dat:9474:/* Compute the Aho-Corasick failure function for the trie nodes referenced
../inputs/grep1.dat:9475:   from the given tree, given the failure function for their parent as
../inputs/grep1.dat:9476:   well as a last resort failure node. */
../inputs/grep1.dat:9477:static void
../inputs/grep1.dat:9478:treefails(tree, fail, recourse)
../inputs/grep1.dat:9479:     register struct tree *tree;
../inputs/grep1.dat:9480:     struct trie *fail;
../inputs/grep1.dat:9481:     struct trie *recourse;
../inputs/grep1.dat:9482:{
../inputs/grep1.dat:9483:  register struct tree *link;
../inputs/grep1.dat:9484:
../inputs/grep1.dat:9485:  if (!tree)
../inputs/grep1.dat:9486:    return;
../inputs/grep1.dat:9487:
../inputs/grep1.dat:9488:  treefails(tree->llink, fail, recourse);
../inputs/grep1.dat:9489:  treefails(tree->rlink, fail, recourse);
../inputs/grep1.dat:9490:
../inputs/grep1.dat:9491:  /* Find, in the chain of fails going back to the root, the first
../inputs/grep1.dat:9492:     node that has a descendent on the current label. */
../inputs/grep1.dat:9493:  while (fail)
../inputs/grep1.dat:9494:    {
../inputs/grep1.dat:9495:      link = fail->links;
../inputs/grep1.dat:9496:      while (link && tree->label != link->label)
../inputs/grep1.dat:9497:	if (tree->label < link->label)
../inputs/grep1.dat:9498:	  link = link->llink;
../inputs/grep1.dat:9499:	else
../inputs/grep1.dat:9500:	  link = link->rlink;
../inputs/grep1.dat:9501:      if (link)
../inputs/grep1.dat:9502:	{
../inputs/grep1.dat:9503:	  tree->trie->fail = link->trie;
../inputs/grep1.dat:9504:	  return;
../inputs/grep1.dat:9505:	}
../inputs/grep1.dat:9506:      fail = fail->fail;
../inputs/grep1.dat:9507:    }
../inputs/grep1.dat:9508:
../inputs/grep1.dat:9509:  tree->trie->fail = recourse;
../inputs/grep1.dat:9510:}
../inputs/grep1.dat:9511:
../inputs/grep1.dat:9512:/* Set delta entries for the links of the given tree such that
../inputs/grep1.dat:9513:   the preexisting delta value is larger than the current depth. */
../inputs/grep1.dat:9514:static void
../inputs/grep1.dat:9515:treedelta(tree, depth, delta)
../inputs/grep1.dat:9516:     register struct tree *tree;
../inputs/grep1.dat:9517:     register unsigned int depth;
../inputs/grep1.dat:9518:     unsigned char delta[];
../inputs/grep1.dat:9519:{
../inputs/grep1.dat:9520:  if (!tree)
../inputs/grep1.dat:9521:    return;
../inputs/grep1.dat:9522:  treedelta(tree->llink, depth, delta);
../inputs/grep1.dat:9523:  treedelta(tree->rlink, depth, delta);
../inputs/grep1.dat:9524:  if (depth < delta[tree->label])
../inputs/grep1.dat:9525:    delta[tree->label] = depth;
../inputs/grep1.dat:9526:}
../inputs/grep1.dat:9527:
../inputs/grep1.dat:9528:/* Return true if A has every label in B. */
../inputs/grep1.dat:9529:static int
../inputs/grep1.dat:9530:hasevery(a, b)
../inputs/grep1.dat:9531:     register struct tree *a;
../inputs/grep1.dat:9532:     register struct tree *b;
../inputs/grep1.dat:9533:{
../inputs/grep1.dat:9534:  if (!b)
../inputs/grep1.dat:9535:    return 1;
../inputs/grep1.dat:9536:  if (!hasevery(a, b->llink))
../inputs/grep1.dat:9537:    return 0;
../inputs/grep1.dat:9538:  if (!hasevery(a, b->rlink))
../inputs/grep1.dat:9539:    return 0;
../inputs/grep1.dat:9540:  while (a && b->label != a->label)
../inputs/grep1.dat:9541:    if (b->label < a->label)
../inputs/grep1.dat:9542:      a = a->llink;
../inputs/grep1.dat:9543:    else
../inputs/grep1.dat:9544:      a = a->rlink;
../inputs/grep1.dat:9545:  return !!a;
../inputs/grep1.dat:9546:}
../inputs/grep1.dat:9547:
../inputs/grep1.dat:9548:/* Compute a vector, indexed by character code, of the trie nodes
../inputs/grep1.dat:9549:   referenced from the given tree. */
../inputs/grep1.dat:9550:static void
../inputs/grep1.dat:9551:treenext(tree, next)
../inputs/grep1.dat:9552:     struct tree *tree;
../inputs/grep1.dat:9553:     struct trie *next[];
../inputs/grep1.dat:9554:{
../inputs/grep1.dat:9555:  if (!tree)
../inputs/grep1.dat:9556:    return;
../inputs/grep1.dat:9557:  treenext(tree->llink, next);
../inputs/grep1.dat:9558:  treenext(tree->rlink, next);
../inputs/grep1.dat:9559:  next[tree->label] = tree->trie;
../inputs/grep1.dat:9560:}
../inputs/grep1.dat:9561:
../inputs/grep1.dat:9562:/* Compute the shift for each trie node, as well as the delta
../inputs/grep1.dat:9563:   table and next cache for the given keyword set. */
../inputs/grep1.dat:9564:char *
../inputs/grep1.dat:9565:kwsprep(kws)
../inputs/grep1.dat:9566:     kwset_t kws;
../inputs/grep1.dat:9567:{
../inputs/grep1.dat:9568:  register struct kwset *kwset;
../inputs/grep1.dat:9569:  register int i;
../inputs/grep1.dat:9570:  register struct trie *curr, *fail;
../inputs/grep1.dat:9571:  register char *trans;
../inputs/grep1.dat:9572:  unsigned char delta[NCHAR];
../inputs/grep1.dat:9573:  struct trie *last, *next[NCHAR];
../inputs/grep1.dat:9574:
../inputs/grep1.dat:9575:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9576:
../inputs/grep1.dat:9577:  /* Initial values for the delta table; will be changed later.  The
../inputs/grep1.dat:9578:     delta entry for a given character is the smallest depth of any
../inputs/grep1.dat:9579:     node at which an outgoing edge is labeled by that character. */
../inputs/grep1.dat:9580:  if (kwset->mind < 256)
../inputs/grep1.dat:9581:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9582:      delta[i] = kwset->mind;
../inputs/grep1.dat:9583:  else
../inputs/grep1.dat:9584:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9585:      delta[i] = 255;
../inputs/grep1.dat:9586:
../inputs/grep1.dat:9587:  /* Check if we can use the simple boyer-moore algorithm, instead
../inputs/grep1.dat:9588:     of the hairy commentz-walter algorithm. */
../inputs/grep1.dat:9589:  if (kwset->words == 1 && kwset->trans == 0)
../inputs/grep1.dat:9590:    {
../inputs/grep1.dat:9591:      /* Looking for just one string.  Extract it from the trie. */
../inputs/grep1.dat:9592:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
../inputs/grep1.dat:9593:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
../inputs/grep1.dat:9594:	{
../inputs/grep1.dat:9595:	  kwset->target[i] = curr->links->label;
../inputs/grep1.dat:9596:	  curr = curr->links->trie;
../inputs/grep1.dat:9597:	}
../inputs/grep1.dat:9598:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
../inputs/grep1.dat:9599:      for (i = 0; i < kwset->mind; ++i)
../inputs/grep1.dat:9600:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
../inputs/grep1.dat:9601:      kwset->mind2 = kwset->mind;
../inputs/grep1.dat:9602:      /* Find the minimal delta2 shift that we might make after
../inputs/grep1.dat:9603:	 a backwards match has failed. */
../inputs/grep1.dat:9604:      for (i = 0; i < kwset->mind - 1; ++i)
../inputs/grep1.dat:9605:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
../inputs/grep1.dat:9606:	  kwset->mind2 = kwset->mind - (i + 1);
../inputs/grep1.dat:9607:    }
../inputs/grep1.dat:9608:  else
../inputs/grep1.dat:9609:    {
../inputs/grep1.dat:9610:      /* Traverse the nodes of the trie in level order, simultaneously
../inputs/grep1.dat:9611:	 computing the delta table, failure function, and shift function. */
../inputs/grep1.dat:9612:      for (curr = last = kwset->trie; curr; curr = curr->next)
../inputs/grep1.dat:9613:	{
../inputs/grep1.dat:9614:	  /* Enqueue the immediate descendents in the level order queue. */
../inputs/grep1.dat:9615:	  enqueue(curr->links, &last);
../inputs/grep1.dat:9616:
../inputs/grep1.dat:9617:	  curr->shift = kwset->mind;
../inputs/grep1.dat:9618:	  curr->maxshift = kwset->mind;
../inputs/grep1.dat:9619:
../inputs/grep1.dat:9620:	  /* Update the delta table for the descendents of this node. */
../inputs/grep1.dat:9621:	  treedelta(curr->links, curr->depth, delta);
../inputs/grep1.dat:9622:
../inputs/grep1.dat:9623:	  /* Compute the failure function for the decendents of this node. */
../inputs/grep1.dat:9624:	  treefails(curr->links, curr->fail, kwset->trie);
../inputs/grep1.dat:9625:
../inputs/grep1.dat:9626:	  /* Update the shifts at each node in the current node's chain
../inputs/grep1.dat:9627:	     of fails back to the root. */
../inputs/grep1.dat:9628:	  for (fail = curr->fail; fail; fail = fail->fail)
../inputs/grep1.dat:9629:	    {
../inputs/grep1.dat:9630:	      /* If the current node has some outgoing edge that the fail
../inputs/grep1.dat:9631:		 doesn't, then the shift at the fail should be no larger
../inputs/grep1.dat:9632:		 than the difference of their depths. */
../inputs/grep1.dat:9633:	      if (!hasevery(fail->links, curr->links))
../inputs/grep1.dat:9634:		if (curr->depth - fail->depth < fail->shift)
../inputs/grep1.dat:9635:		  fail->shift = curr->depth - fail->depth;
../inputs/grep1.dat:9636:
../inputs/grep1.dat:9637:	      /* If the current node is accepting then the shift at the
../inputs/grep1.dat:9638:		 fail and its descendents should be no larger than the
../inputs/grep1.dat:9639:		 difference of their depths. */
../inputs/grep1.dat:9640:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
../inputs/grep1.dat:9641:		fail->maxshift = curr->depth - fail->depth;
../inputs/grep1.dat:9642:	    }
../inputs/grep1.dat:9643:	}
../inputs/grep1.dat:9644:
../inputs/grep1.dat:9645:      /* Traverse the trie in level order again, fixing up all nodes whose
../inputs/grep1.dat:9646:	 shift exceeds their inherited maxshift. */
../inputs/grep1.dat:9647:      for (curr = kwset->trie->next; curr; curr = curr->next)
../inputs/grep1.dat:9648:	{
../inputs/grep1.dat:9649:	  if (curr->maxshift > curr->parent->maxshift)
../inputs/grep1.dat:9650:	    curr->maxshift = curr->parent->maxshift;
../inputs/grep1.dat:9651:	  if (curr->shift > curr->maxshift)
../inputs/grep1.dat:9652:	    curr->shift = curr->maxshift;
../inputs/grep1.dat:9653:	}
../inputs/grep1.dat:9654:
../inputs/grep1.dat:9655:      /* Create a vector, indexed by character code, of the outgoing links
../inputs/grep1.dat:9656:	 from the root node. */
../inputs/grep1.dat:9657:      for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9658:	next[i] = 0;
../inputs/grep1.dat:9659:      treenext(kwset->trie->links, next);
../inputs/grep1.dat:9660:
../inputs/grep1.dat:9661:      if ((trans = kwset->trans) != 0)
../inputs/grep1.dat:9662:	for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9663:	  kwset->next[i] = next[(unsigned char) trans[i]];
../inputs/grep1.dat:9664:      else
../inputs/grep1.dat:9665:	for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9666:	  kwset->next[i] = next[i];
../inputs/grep1.dat:9667:    }
../inputs/grep1.dat:9668:
../inputs/grep1.dat:9669:  /* Fix things up for any translation table. */
../inputs/grep1.dat:9670:  if ((trans = kwset->trans) != 0)
../inputs/grep1.dat:9671:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9672:      kwset->delta[i] = delta[(unsigned char) trans[i]];
../inputs/grep1.dat:9673:  else
../inputs/grep1.dat:9674:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:9675:      kwset->delta[i] = delta[i];
../inputs/grep1.dat:9676:
../inputs/grep1.dat:9677:  return 0;
../inputs/grep1.dat:9678:}
../inputs/grep1.dat:9679:
../inputs/grep1.dat:9680:#define U(C) ((unsigned char) (C))
../inputs/grep1.dat:9681:
../inputs/grep1.dat:9682:/* Fast boyer-moore search. */
../inputs/grep1.dat:9683:static char *
../inputs/grep1.dat:9684:bmexec(kws, text, size)
../inputs/grep1.dat:9685:     kwset_t kws;
../inputs/grep1.dat:9686:     char *text;
../inputs/grep1.dat:9687:     size_t size;
../inputs/grep1.dat:9688:{
../inputs/grep1.dat:9689:  struct kwset *kwset;
../inputs/grep1.dat:9690:  register unsigned char *d1;
../inputs/grep1.dat:9691:  register char *ep, *sp, *tp;
../inputs/grep1.dat:9692:  register int d, gc, i, len, md2;
../inputs/grep1.dat:9693:
../inputs/grep1.dat:9694:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9695:  len = kwset->mind;
../inputs/grep1.dat:9696:
../inputs/grep1.dat:9697:  if (len == 0)
../inputs/grep1.dat:9698:    return text;
../inputs/grep1.dat:9699:  if (len > size)
../inputs/grep1.dat:9700:    return 0;
../inputs/grep1.dat:9701:  if (len == 1)
../inputs/grep1.dat:9702:    return memchr(text, kwset->target[0], size);
../inputs/grep1.dat:9703:
../inputs/grep1.dat:9704:  d1 = kwset->delta;
../inputs/grep1.dat:9705:  sp = kwset->target + len;
../inputs/grep1.dat:9706:  gc = U(sp[-2]);
../inputs/grep1.dat:9707:  md2 = kwset->mind2;
../inputs/grep1.dat:9708:  tp = text + len;
../inputs/grep1.dat:9709:
../inputs/grep1.dat:9710:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
../inputs/grep1.dat:9711:  if (size > 12 * len)
../inputs/grep1.dat:9712:    /* 11 is not a bug, the initial offset happens only once. */
../inputs/grep1.dat:9713:    for (ep = text + size - 11 * len;;)
../inputs/grep1.dat:9714:      {
../inputs/grep1.dat:9715:	while (tp <= ep)
../inputs/grep1.dat:9716:	  {
../inputs/grep1.dat:9717:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9718:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9719:	    if (d == 0)
../inputs/grep1.dat:9720:	      goto found;
../inputs/grep1.dat:9721:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9722:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9723:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9724:	    if (d == 0)
../inputs/grep1.dat:9725:	      goto found;
../inputs/grep1.dat:9726:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9727:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9728:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9729:	    if (d == 0)
../inputs/grep1.dat:9730:	      goto found;
../inputs/grep1.dat:9731:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9732:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:9733:	  }
../inputs/grep1.dat:9734:	break;
../inputs/grep1.dat:9735:      found:
../inputs/grep1.dat:9736:	if (U(tp[-2]) == gc)
../inputs/grep1.dat:9737:	  {
../inputs/grep1.dat:9738:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
../inputs/grep1.dat:9739:	      ;
../inputs/grep1.dat:9740:	    if (i > len)
../inputs/grep1.dat:9741:	      return tp - len;
../inputs/grep1.dat:9742:	  }
../inputs/grep1.dat:9743:	tp += md2;
../inputs/grep1.dat:9744:      }
../inputs/grep1.dat:9745:
../inputs/grep1.dat:9746:  /* Now we have only a few characters left to search.  We
../inputs/grep1.dat:9747:     carefully avoid ever producing an out-of-bounds pointer. */
../inputs/grep1.dat:9748:  ep = text + size;
../inputs/grep1.dat:9749:  d = d1[U(tp[-1])];
../inputs/grep1.dat:9750:  while (d <= ep - tp)
../inputs/grep1.dat:9751:    {
../inputs/grep1.dat:9752:      d = d1[U((tp += d)[-1])];
../inputs/grep1.dat:9753:      if (d != 0)
../inputs/grep1.dat:9754:	continue;
../inputs/grep1.dat:9755:      if (tp[-2] == gc)
../inputs/grep1.dat:9756:	{
../inputs/grep1.dat:9757:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
../inputs/grep1.dat:9758:	    ;
../inputs/grep1.dat:9759:	  if (i > len)
../inputs/grep1.dat:9760:	    return tp - len;
../inputs/grep1.dat:9761:	}
../inputs/grep1.dat:9762:      d = md2;
../inputs/grep1.dat:9763:    }
../inputs/grep1.dat:9764:
../inputs/grep1.dat:9765:  return 0;
../inputs/grep1.dat:9766:}
../inputs/grep1.dat:9767:
../inputs/grep1.dat:9768:/* Hairy multiple string search. */
../inputs/grep1.dat:9769:static char *
../inputs/grep1.dat:9770:cwexec(kws, text, len, kwsmatch)
../inputs/grep1.dat:9771:     kwset_t kws;
../inputs/grep1.dat:9772:     char *text;
../inputs/grep1.dat:9773:     size_t len;
../inputs/grep1.dat:9774:     struct kwsmatch *kwsmatch;
../inputs/grep1.dat:9775:{
../inputs/grep1.dat:9776:  struct kwset *kwset;
../inputs/grep1.dat:9777:  struct trie **next, *trie, *accept;
../inputs/grep1.dat:9778:  char *beg, *lim, *mch, *lmch;
../inputs/grep1.dat:9779:  register unsigned char c, *delta;
../inputs/grep1.dat:9780:  register int d;
../inputs/grep1.dat:9781:  register char *end, *qlim;
../inputs/grep1.dat:9782:  register struct tree *tree;
../inputs/grep1.dat:9783:  register char *trans;
../inputs/grep1.dat:9784:
../inputs/grep1.dat:9785:  /* Initialize register copies and look for easy ways out. */
../inputs/grep1.dat:9786:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9787:  if (len < kwset->mind)
../inputs/grep1.dat:9788:    return 0;
../inputs/grep1.dat:9789:  next = kwset->next;
../inputs/grep1.dat:9790:  delta = kwset->delta;
../inputs/grep1.dat:9791:  trans = kwset->trans;
../inputs/grep1.dat:9792:  lim = text + len;
../inputs/grep1.dat:9793:  end = text;
../inputs/grep1.dat:9794:  if ((d = kwset->mind) != 0)
../inputs/grep1.dat:9795:    mch = 0;
../inputs/grep1.dat:9796:  else
../inputs/grep1.dat:9797:    {
../inputs/grep1.dat:9798:      mch = text, accept = kwset->trie;
../inputs/grep1.dat:9799:      goto match;
../inputs/grep1.dat:9800:    }
../inputs/grep1.dat:9801:
../inputs/grep1.dat:9802:  if (len >= 4 * kwset->mind)
../inputs/grep1.dat:9803:    qlim = lim - 4 * kwset->mind;
../inputs/grep1.dat:9804:  else
../inputs/grep1.dat:9805:    qlim = 0;
../inputs/grep1.dat:9806:
../inputs/grep1.dat:9807:  while (lim - end >= d)
../inputs/grep1.dat:9808:    {
../inputs/grep1.dat:9809:      if (qlim && end <= qlim)
../inputs/grep1.dat:9810:	{
../inputs/grep1.dat:9811:	  end += d - 1;
../inputs/grep1.dat:9812:	  while ((d = delta[c = *end]) && end < qlim)
../inputs/grep1.dat:9813:	    {
../inputs/grep1.dat:9814:	      end += d;
../inputs/grep1.dat:9815:	      end += delta[(unsigned char) *end];
../inputs/grep1.dat:9816:	      end += delta[(unsigned char) *end];
../inputs/grep1.dat:9817:	    }
../inputs/grep1.dat:9818:	  ++end;
../inputs/grep1.dat:9819:	}
../inputs/grep1.dat:9820:      else
../inputs/grep1.dat:9821:	d = delta[c = (end += d)[-1]];
../inputs/grep1.dat:9822:      if (d)
../inputs/grep1.dat:9823:	continue;
../inputs/grep1.dat:9824:      beg = end - 1;
../inputs/grep1.dat:9825:      trie = next[c];
../inputs/grep1.dat:9826:      if (trie->accepting)
../inputs/grep1.dat:9827:	{
../inputs/grep1.dat:9828:	  mch = beg;
../inputs/grep1.dat:9829:	  accept = trie;
../inputs/grep1.dat:9830:	}
../inputs/grep1.dat:9831:      d = trie->shift;
../inputs/grep1.dat:9832:      while (beg > text)
../inputs/grep1.dat:9833:	{
../inputs/grep1.dat:9834:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
../inputs/grep1.dat:9835:	  tree = trie->links;
../inputs/grep1.dat:9836:	  while (tree && c != tree->label)
../inputs/grep1.dat:9837:	    if (c < tree->label)
../inputs/grep1.dat:9838:	      tree = tree->llink;
../inputs/grep1.dat:9839:	    else
../inputs/grep1.dat:9840:	      tree = tree->rlink;
../inputs/grep1.dat:9841:	  if (tree)
../inputs/grep1.dat:9842:	    {
../inputs/grep1.dat:9843:	      trie = tree->trie;
../inputs/grep1.dat:9844:	      if (trie->accepting)
../inputs/grep1.dat:9845:		{
../inputs/grep1.dat:9846:		  mch = beg;
../inputs/grep1.dat:9847:		  accept = trie;
../inputs/grep1.dat:9848:		}
../inputs/grep1.dat:9849:	    }
../inputs/grep1.dat:9850:	  else
../inputs/grep1.dat:9851:	    break;
../inputs/grep1.dat:9852:	  d = trie->shift;
../inputs/grep1.dat:9853:	}
../inputs/grep1.dat:9854:      if (mch)
../inputs/grep1.dat:9855:	goto match;
../inputs/grep1.dat:9856:    }
../inputs/grep1.dat:9857:  return 0;
../inputs/grep1.dat:9858:
../inputs/grep1.dat:9859: match:
../inputs/grep1.dat:9860:  /* Given a known match, find the longest possible match anchored
../inputs/grep1.dat:9861:     at or before its starting point.  This is nearly a verbatim
../inputs/grep1.dat:9862:     copy of the preceding main search loops. */
../inputs/grep1.dat:9863:  if (lim - mch > kwset->maxd)
../inputs/grep1.dat:9864:    lim = mch + kwset->maxd;
../inputs/grep1.dat:9865:  lmch = 0;
../inputs/grep1.dat:9866:  d = 1;
../inputs/grep1.dat:9867:  while (lim - end >= d)
../inputs/grep1.dat:9868:    {
../inputs/grep1.dat:9869:      if ((d = delta[c = (end += d)[-1]]) != 0)
../inputs/grep1.dat:9870:	continue;
../inputs/grep1.dat:9871:      beg = end - 1;
../inputs/grep1.dat:9872:      if (!(trie = next[c]))
../inputs/grep1.dat:9873:	{
../inputs/grep1.dat:9874:	  d = 1;
../inputs/grep1.dat:9875:	  continue;
../inputs/grep1.dat:9876:	}
../inputs/grep1.dat:9877:      if (trie->accepting && beg <= mch)
../inputs/grep1.dat:9878:	{
../inputs/grep1.dat:9879:	  lmch = beg;
../inputs/grep1.dat:9880:	  accept = trie;
../inputs/grep1.dat:9881:	}
../inputs/grep1.dat:9882:      d = trie->shift;
../inputs/grep1.dat:9883:      while (beg > text)
../inputs/grep1.dat:9884:	{
../inputs/grep1.dat:9885:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
../inputs/grep1.dat:9886:	  tree = trie->links;
../inputs/grep1.dat:9887:	  while (tree && c != tree->label)
../inputs/grep1.dat:9888:	    if (c < tree->label)
../inputs/grep1.dat:9889:	      tree = tree->llink;
../inputs/grep1.dat:9890:	    else
../inputs/grep1.dat:9891:	      tree = tree->rlink;
../inputs/grep1.dat:9892:	  if (tree)
../inputs/grep1.dat:9893:	    {
../inputs/grep1.dat:9894:	      trie = tree->trie;
../inputs/grep1.dat:9895:	      if (trie->accepting && beg <= mch)
../inputs/grep1.dat:9896:		{
../inputs/grep1.dat:9897:		  lmch = beg;
../inputs/grep1.dat:9898:		  accept = trie;
../inputs/grep1.dat:9899:		}
../inputs/grep1.dat:9900:	    }
../inputs/grep1.dat:9901:	  else
../inputs/grep1.dat:9902:	    break;
../inputs/grep1.dat:9903:	  d = trie->shift;
../inputs/grep1.dat:9904:	}
../inputs/grep1.dat:9905:      if (lmch)
../inputs/grep1.dat:9906:	{
../inputs/grep1.dat:9907:	  mch = lmch;
../inputs/grep1.dat:9908:	  goto match;
../inputs/grep1.dat:9909:	}
../inputs/grep1.dat:9910:      if (!d)
../inputs/grep1.dat:9911:	d = 1;
../inputs/grep1.dat:9912:    }
../inputs/grep1.dat:9913:
../inputs/grep1.dat:9914:  if (kwsmatch)
../inputs/grep1.dat:9915:    {
../inputs/grep1.dat:9916:      kwsmatch->index = accept->accepting / 2;
../inputs/grep1.dat:9917:      kwsmatch->beg[0] = mch;
../inputs/grep1.dat:9918:      kwsmatch->size[0] = accept->depth;
../inputs/grep1.dat:9919:    }
../inputs/grep1.dat:9920:  return mch;
../inputs/grep1.dat:9921:}
../inputs/grep1.dat:9922:  
../inputs/grep1.dat:9923:/* Search through the given text for a match of any member of the
../inputs/grep1.dat:9924:   given keyword set.  Return a pointer to the first character of
../inputs/grep1.dat:9925:   the matching substring, or NULL if no match is found.  If FOUNDLEN
../inputs/grep1.dat:9926:   is non-NULL store in the referenced location the length of the
../inputs/grep1.dat:9927:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
../inputs/grep1.dat:9928:   in the referenced location the index number of the particular
../inputs/grep1.dat:9929:   keyword matched. */
../inputs/grep1.dat:9930:char *
../inputs/grep1.dat:9931:kwsexec(kws, text, size, kwsmatch)
../inputs/grep1.dat:9932:     kwset_t kws;
../inputs/grep1.dat:9933:     char *text;
../inputs/grep1.dat:9934:     size_t size;
../inputs/grep1.dat:9935:     struct kwsmatch *kwsmatch;
../inputs/grep1.dat:9936:{
../inputs/grep1.dat:9937:  struct kwset *kwset;
../inputs/grep1.dat:9938:  char *ret;
../inputs/grep1.dat:9939:
../inputs/grep1.dat:9940:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9941:  if (kwset->words == 1 && kwset->trans == 0)
../inputs/grep1.dat:9942:    {
../inputs/grep1.dat:9943:      ret = bmexec(kws, text, size);
../inputs/grep1.dat:9944:      if (kwsmatch != 0 && ret != 0)
../inputs/grep1.dat:9945:	{
../inputs/grep1.dat:9946:	  kwsmatch->index = 0;
../inputs/grep1.dat:9947:	  kwsmatch->beg[0] = ret;
../inputs/grep1.dat:9948:	  kwsmatch->size[0] = kwset->mind;
../inputs/grep1.dat:9949:	}
../inputs/grep1.dat:9950:      return ret;
../inputs/grep1.dat:9951:    }
../inputs/grep1.dat:9952:  else
../inputs/grep1.dat:9953:    return cwexec(kws, text, size, kwsmatch);
../inputs/grep1.dat:9954:}
../inputs/grep1.dat:9955:
../inputs/grep1.dat:9956:/* Free the components of the given keyword set. */
../inputs/grep1.dat:9957:void
../inputs/grep1.dat:9958:kwsfree(kws)
../inputs/grep1.dat:9959:     kwset_t kws;
../inputs/grep1.dat:9960:{
../inputs/grep1.dat:9961:  struct kwset *kwset;
../inputs/grep1.dat:9962:
../inputs/grep1.dat:9963:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:9964:  obstack_free(&kwset->obstack, 0);
../inputs/grep1.dat:9965:  free(kws);
../inputs/grep1.dat:9966:}
../inputs/grep1.dat:9967:/* obstack.c - subroutines used implicitly by object stack macros
../inputs/grep1.dat:9968:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
../inputs/grep1.dat:9969:
../inputs/grep1.dat:9970:This program is free software; you can redistribute it and/or modify it
../inputs/grep1.dat:9971:under the terms of the GNU General Public License as published by the
../inputs/grep1.dat:9972:Free Software Foundation; either version 2, or (at your option) any
../inputs/grep1.dat:9973:later version.
../inputs/grep1.dat:9974:
../inputs/grep1.dat:9975:This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:9976:but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:9977:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:9978:GNU General Public License for more details.
../inputs/grep1.dat:9979:
../inputs/grep1.dat:9980:You should have received a copy of the GNU General Public License
../inputs/grep1.dat:9981:along with this program; if not, write to the Free Software
../inputs/grep1.dat:9982:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:9983:
../inputs/grep1.dat:9985:
../inputs/grep1.dat:9986:/* This is just to get __GNU_LIBRARY__ defined.  */
../inputs/grep1.dat:9988:
../inputs/grep1.dat:9989:/* Comment out all this code if we are using the GNU C Library, and are not
../inputs/grep1.dat:9990:   actually compiling the library itself.  This code is part of the GNU C
../inputs/grep1.dat:9992:   and linking in this code is a waste when using the GNU C library
../inputs/grep1.dat:9993:   (especially if it is a shared library).  Rather than having every GNU
../inputs/grep1.dat:9994:   program understand `configure --with-gnu-libc' and omit the object files,
../inputs/grep1.dat:9995:   it is simpler to just do this in the source for each such file.  */
../inputs/grep1.dat:9996:
../inputs/grep1.dat:9997:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
../inputs/grep1.dat:9998:
../inputs/grep1.dat:9999:
../inputs/grep1.dat:10000:#ifdef __STDC__
../inputs/grep1.dat:10001:#define POINTER void *
../inputs/grep1.dat:10002:#else
../inputs/grep1.dat:10003:#define POINTER char *
../inputs/grep1.dat:10004:#endif
../inputs/grep1.dat:10005:
../inputs/grep1.dat:10006:/* Determine default alignment.  */
../inputs/grep1.dat:10007:struct fooalign {char x; double d;};
../inputs/grep1.dat:10008:#define DEFAULT_ALIGNMENT  \
../inputs/grep1.dat:10009:  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
../inputs/grep1.dat:10010:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
../inputs/grep1.dat:10011:   But in fact it might be less smart and round addresses to as much as
../inputs/grep1.dat:10012:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
../inputs/grep1.dat:10013:union fooround {long x; double d;};
../inputs/grep1.dat:10014:#define DEFAULT_ROUNDING (sizeof (union fooround))
../inputs/grep1.dat:10015:
../inputs/grep1.dat:10016:/* When we copy a long block of data, this is the unit to do it with.
../inputs/grep1.dat:10017:   On some machines, copying successive ints does not work;
../inputs/grep1.dat:10018:   in such a case, redefine COPYING_UNIT to `long' (if that works)
../inputs/grep1.dat:10019:   or `char' as a last resort.  */
../inputs/grep1.dat:10020:#ifndef COPYING_UNIT
../inputs/grep1.dat:10021:#define COPYING_UNIT int
../inputs/grep1.dat:10022:#endif
../inputs/grep1.dat:10023:
../inputs/grep1.dat:10024:/* The non-GNU-C macros copy the obstack into this global variable
../inputs/grep1.dat:10025:   to avoid multiple evaluation.  */
../inputs/grep1.dat:10026:
../inputs/grep1.dat:10027:struct obstack *_obstack;
../inputs/grep1.dat:10028:
../inputs/grep1.dat:10029:/* Define a macro that either calls functions with the traditional malloc/free
../inputs/grep1.dat:10030:   calling interface, or calls functions with the mmalloc/mfree interface
../inputs/grep1.dat:10031:   (that adds an extra first argument), based on the state of use_extra_arg.
../inputs/grep1.dat:10032:   For free, do not use ?:, since some compilers, like the MIPS compilers,
../inputs/grep1.dat:10033:   do not allow (expr) ? void : void.  */
../inputs/grep1.dat:10034:
../inputs/grep1.dat:10035:#define CALL_CHUNKFUN(h, size) \
../inputs/grep1.dat:10036:  (((h) -> use_extra_arg) \
../inputs/grep1.dat:10037:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
../inputs/grep1.dat:10038:   : (*(h)->chunkfun) ((size)))
../inputs/grep1.dat:10039:
../inputs/grep1.dat:10040:#define CALL_FREEFUN(h, old_chunk) \
../inputs/grep1.dat:10041:  do { \
../inputs/grep1.dat:10042:    if ((h) -> use_extra_arg) \
../inputs/grep1.dat:10043:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
../inputs/grep1.dat:10044:    else \
../inputs/grep1.dat:10045:      (*(h)->freefun) ((old_chunk)); \
../inputs/grep1.dat:10046:  } while (0)
../inputs/grep1.dat:10047:
../inputs/grep1.dat:10048:
../inputs/grep1.dat:10049:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
../inputs/grep1.dat:10050:   Objects start on multiples of ALIGNMENT (0 means use default).
../inputs/grep1.dat:10051:   CHUNKFUN is the function to use to allocate chunks,
../inputs/grep1.dat:10052:   and FREEFUN the function to free them.  */
../inputs/grep1.dat:10053:
../inputs/grep1.dat:10054:void
../inputs/grep1.dat:10055:_obstack_begin (h, size, alignment, chunkfun, freefun)
../inputs/grep1.dat:10056:     struct obstack *h;
../inputs/grep1.dat:10057:     int size;
../inputs/grep1.dat:10058:     int alignment;
../inputs/grep1.dat:10059:     POINTER (*chunkfun) ();
../inputs/grep1.dat:10060:     void (*freefun) ();
../inputs/grep1.dat:10061:{
../inputs/grep1.dat:10062:  register struct _obstack_chunk* chunk; /* points to new chunk */
../inputs/grep1.dat:10063:
../inputs/grep1.dat:10064:  if (alignment == 0)
../inputs/grep1.dat:10065:    alignment = DEFAULT_ALIGNMENT;
../inputs/grep1.dat:10066:  if (size == 0)
../inputs/grep1.dat:10067:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
../inputs/grep1.dat:10068:    {
../inputs/grep1.dat:10069:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
../inputs/grep1.dat:10070:	 Use the values for range checking, because if range checking is off,
../inputs/grep1.dat:10071:	 the extra bytes won't be missed terribly, but if range checking is on
../inputs/grep1.dat:10072:	 and we used a larger request, a whole extra 4096 bytes would be
../inputs/grep1.dat:10073:	 allocated.
../inputs/grep1.dat:10074:
../inputs/grep1.dat:10075:	 These number are irrelevant to the new GNU malloc.  I suspect it is
../inputs/grep1.dat:10076:	 less sensitive to the size of the request.  */
../inputs/grep1.dat:10077:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
../inputs/grep1.dat:10078:		    + 4 + DEFAULT_ROUNDING - 1)
../inputs/grep1.dat:10079:		   & ~(DEFAULT_ROUNDING - 1));
../inputs/grep1.dat:10080:      size = 4096 - extra;
../inputs/grep1.dat:10081:    }
../inputs/grep1.dat:10082:
../inputs/grep1.dat:10083:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
../inputs/grep1.dat:10084:  h->freefun = freefun;
../inputs/grep1.dat:10085:  h->chunk_size = size;
../inputs/grep1.dat:10086:  h->alignment_mask = alignment - 1;
../inputs/grep1.dat:10087:  h->use_extra_arg = 0;
../inputs/grep1.dat:10088:
../inputs/grep1.dat:10089:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
../inputs/grep1.dat:10090:  h->next_free = h->object_base = chunk->contents;
../inputs/grep1.dat:10091:  h->chunk_limit = chunk->limit
../inputs/grep1.dat:10092:    = (char *) chunk + h->chunk_size;
../inputs/grep1.dat:10093:  chunk->prev = 0;
../inputs/grep1.dat:10094:  /* The initial chunk now contains no empty object.  */
../inputs/grep1.dat:10095:  h->maybe_empty_object = 0;
../inputs/grep1.dat:10096:}
../inputs/grep1.dat:10097:
../inputs/grep1.dat:10098:void
../inputs/grep1.dat:10099:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
../inputs/grep1.dat:10100:     struct obstack *h;
../inputs/grep1.dat:10101:     int size;
../inputs/grep1.dat:10102:     int alignment;
../inputs/grep1.dat:10103:     POINTER (*chunkfun) ();
../inputs/grep1.dat:10104:     void (*freefun) ();
../inputs/grep1.dat:10105:     POINTER arg;
../inputs/grep1.dat:10106:{
../inputs/grep1.dat:10107:  register struct _obstack_chunk* chunk; /* points to new chunk */
../inputs/grep1.dat:10108:
../inputs/grep1.dat:10109:  if (alignment == 0)
../inputs/grep1.dat:10110:    alignment = DEFAULT_ALIGNMENT;
../inputs/grep1.dat:10111:  if (size == 0)
../inputs/grep1.dat:10112:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
../inputs/grep1.dat:10113:    {
../inputs/grep1.dat:10114:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
../inputs/grep1.dat:10115:	 Use the values for range checking, because if range checking is off,
../inputs/grep1.dat:10116:	 the extra bytes won't be missed terribly, but if range checking is on
../inputs/grep1.dat:10117:	 and we used a larger request, a whole extra 4096 bytes would be
../inputs/grep1.dat:10118:	 allocated.
../inputs/grep1.dat:10119:
../inputs/grep1.dat:10120:	 These number are irrelevant to the new GNU malloc.  I suspect it is
../inputs/grep1.dat:10121:	 less sensitive to the size of the request.  */
../inputs/grep1.dat:10122:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
../inputs/grep1.dat:10123:		    + 4 + DEFAULT_ROUNDING - 1)
../inputs/grep1.dat:10124:		   & ~(DEFAULT_ROUNDING - 1));
../inputs/grep1.dat:10125:      size = 4096 - extra;
../inputs/grep1.dat:10126:    }
../inputs/grep1.dat:10127:
../inputs/grep1.dat:10128:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
../inputs/grep1.dat:10129:  h->freefun = freefun;
../inputs/grep1.dat:10130:  h->chunk_size = size;
../inputs/grep1.dat:10131:  h->alignment_mask = alignment - 1;
../inputs/grep1.dat:10132:  h->extra_arg = arg;
../inputs/grep1.dat:10133:  h->use_extra_arg = 1;
../inputs/grep1.dat:10134:
../inputs/grep1.dat:10135:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
../inputs/grep1.dat:10136:  h->next_free = h->object_base = chunk->contents;
../inputs/grep1.dat:10137:  h->chunk_limit = chunk->limit
../inputs/grep1.dat:10138:    = (char *) chunk + h->chunk_size;
../inputs/grep1.dat:10139:  chunk->prev = 0;
../inputs/grep1.dat:10140:  /* The initial chunk now contains no empty object.  */
../inputs/grep1.dat:10141:  h->maybe_empty_object = 0;
../inputs/grep1.dat:10142:}
../inputs/grep1.dat:10143:
../inputs/grep1.dat:10144:/* Allocate a new current chunk for the obstack *H
../inputs/grep1.dat:10145:   on the assumption that LENGTH bytes need to be added
../inputs/grep1.dat:10146:   to the current object, or a new object of length LENGTH allocated.
../inputs/grep1.dat:10147:   Copies any partial object from the end of the old chunk
../inputs/grep1.dat:10148:   to the beginning of the new one.  */
../inputs/grep1.dat:10149:
../inputs/grep1.dat:10150:void
../inputs/grep1.dat:10151:_obstack_newchunk (h, length)
../inputs/grep1.dat:10152:     struct obstack *h;
../inputs/grep1.dat:10153:     int length;
../inputs/grep1.dat:10154:{
../inputs/grep1.dat:10155:  register struct _obstack_chunk*	old_chunk = h->chunk;
../inputs/grep1.dat:10156:  register struct _obstack_chunk*	new_chunk;
../inputs/grep1.dat:10157:  register long	new_size;
../inputs/grep1.dat:10158:  register int obj_size = h->next_free - h->object_base;
../inputs/grep1.dat:10159:  register int i;
../inputs/grep1.dat:10160:  int already;
../inputs/grep1.dat:10161:
../inputs/grep1.dat:10162:  /* Compute size for new chunk.  */
../inputs/grep1.dat:10163:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
../inputs/grep1.dat:10164:  if (new_size < h->chunk_size)
../inputs/grep1.dat:10165:    new_size = h->chunk_size;
../inputs/grep1.dat:10166:
../inputs/grep1.dat:10167:  /* Allocate and initialize the new chunk.  */
../inputs/grep1.dat:10168:  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
../inputs/grep1.dat:10169:  new_chunk->prev = old_chunk;
../inputs/grep1.dat:10170:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
../inputs/grep1.dat:10171:
../inputs/grep1.dat:10172:  /* Move the existing object to the new chunk.
../inputs/grep1.dat:10173:     Word at a time is fast and is safe if the object
../inputs/grep1.dat:10174:     is sufficiently aligned.  */
../inputs/grep1.dat:10175:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
../inputs/grep1.dat:10176:    {
../inputs/grep1.dat:10177:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
../inputs/grep1.dat:10178:	   i >= 0; i--)
../inputs/grep1.dat:10179:	((COPYING_UNIT *)new_chunk->contents)[i]
../inputs/grep1.dat:10180:	  = ((COPYING_UNIT *)h->object_base)[i];
../inputs/grep1.dat:10181:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
../inputs/grep1.dat:10182:	 but that can cross a page boundary on a machine
../inputs/grep1.dat:10183:	 which does not do strict alignment for COPYING_UNITS.  */
../inputs/grep1.dat:10184:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
../inputs/grep1.dat:10185:    }
../inputs/grep1.dat:10186:  else
../inputs/grep1.dat:10187:    already = 0;
../inputs/grep1.dat:10188:  /* Copy remaining bytes one by one.  */
../inputs/grep1.dat:10189:  for (i = already; i < obj_size; i++)
../inputs/grep1.dat:10190:    new_chunk->contents[i] = h->object_base[i];
../inputs/grep1.dat:10191:
../inputs/grep1.dat:10192:  /* If the object just copied was the only data in OLD_CHUNK,
../inputs/grep1.dat:10193:     free that chunk and remove it from the chain.
../inputs/grep1.dat:10194:     But not if that chunk might contain an empty object.  */
../inputs/grep1.dat:10195:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
../inputs/grep1.dat:10196:    {
../inputs/grep1.dat:10197:      new_chunk->prev = old_chunk->prev;
../inputs/grep1.dat:10198:      CALL_FREEFUN (h, old_chunk);
../inputs/grep1.dat:10199:    }
../inputs/grep1.dat:10200:
../inputs/grep1.dat:10201:  h->object_base = new_chunk->contents;
../inputs/grep1.dat:10202:  h->next_free = h->object_base + obj_size;
../inputs/grep1.dat:10203:  /* The new chunk certainly contains no empty object yet.  */
../inputs/grep1.dat:10204:  h->maybe_empty_object = 0;
../inputs/grep1.dat:10205:}
../inputs/grep1.dat:10206:
../inputs/grep1.dat:10207:/* Return nonzero if object OBJ has been allocated from obstack H.
../inputs/grep1.dat:10208:   This is here for debugging.
../inputs/grep1.dat:10209:   If you use it in a program, you are probably losing.  */
../inputs/grep1.dat:10210:
../inputs/grep1.dat:10211:int
../inputs/grep1.dat:10212:_obstack_allocated_p (h, obj)
../inputs/grep1.dat:10213:     struct obstack *h;
../inputs/grep1.dat:10214:     POINTER obj;
../inputs/grep1.dat:10215:{
../inputs/grep1.dat:10216:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:10217:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:10218:
../inputs/grep1.dat:10219:  lp = (h)->chunk;
../inputs/grep1.dat:10220:  /* We use >= rather than > since the object cannot be exactly at
../inputs/grep1.dat:10221:     the beginning of the chunk but might be an empty object exactly
../inputs/grep1.dat:10222:     at the end of an adjacent chunk. */
../inputs/grep1.dat:10223:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:10224:    {
../inputs/grep1.dat:10225:      plp = lp->prev;
../inputs/grep1.dat:10226:      lp = plp;
../inputs/grep1.dat:10227:    }
../inputs/grep1.dat:10228:  return lp != 0;
../inputs/grep1.dat:10229:}
../inputs/grep1.dat:10230:
../inputs/grep1.dat:10231:/* Free objects in obstack H, including OBJ and everything allocate
../inputs/grep1.dat:10232:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
../inputs/grep1.dat:10233:
../inputs/grep1.dat:10234:#undef obstack_free
../inputs/grep1.dat:10235:
../inputs/grep1.dat:10236:/* This function has two names with identical definitions.
../inputs/grep1.dat:10237:   This is the first one, called from non-ANSI code.  */
../inputs/grep1.dat:10238:
../inputs/grep1.dat:10239:void
../inputs/grep1.dat:10240:_obstack_free (h, obj)
../inputs/grep1.dat:10241:     struct obstack *h;
../inputs/grep1.dat:10242:     POINTER obj;
../inputs/grep1.dat:10243:{
../inputs/grep1.dat:10244:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:10245:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:10246:
../inputs/grep1.dat:10247:  lp = h->chunk;
../inputs/grep1.dat:10248:  /* We use >= because there cannot be an object at the beginning of a chunk.
../inputs/grep1.dat:10249:     But there can be an empty object at that address
../inputs/grep1.dat:10250:     at the end of another chunk.  */
../inputs/grep1.dat:10251:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:10252:    {
../inputs/grep1.dat:10253:      plp = lp->prev;
../inputs/grep1.dat:10254:      CALL_FREEFUN (h, lp);
../inputs/grep1.dat:10255:      lp = plp;
../inputs/grep1.dat:10256:      /* If we switch chunks, we can't tell whether the new current
../inputs/grep1.dat:10257:	 chunk contains an empty object, so assume that it may.  */
../inputs/grep1.dat:10258:      h->maybe_empty_object = 1;
../inputs/grep1.dat:10259:    }
../inputs/grep1.dat:10260:  if (lp)
../inputs/grep1.dat:10261:    {
../inputs/grep1.dat:10262:      h->object_base = h->next_free = (char *)(obj);
../inputs/grep1.dat:10263:      h->chunk_limit = lp->limit;
../inputs/grep1.dat:10264:      h->chunk = lp;
../inputs/grep1.dat:10265:    }
../inputs/grep1.dat:10266:  else if (obj != 0)
../inputs/grep1.dat:10267:    /* obj is not in any of the chunks! */
../inputs/grep1.dat:10268:    abort ();
../inputs/grep1.dat:10269:}
../inputs/grep1.dat:10270:
../inputs/grep1.dat:10271:/* This function is used from ANSI code.  */
../inputs/grep1.dat:10272:
../inputs/grep1.dat:10273:void
../inputs/grep1.dat:10274:obstack_free (h, obj)
../inputs/grep1.dat:10275:     struct obstack *h;
../inputs/grep1.dat:10276:     POINTER obj;
../inputs/grep1.dat:10277:{
../inputs/grep1.dat:10278:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:10279:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:10280:
../inputs/grep1.dat:10281:  lp = h->chunk;
../inputs/grep1.dat:10282:  /* We use >= because there cannot be an object at the beginning of a chunk.
../inputs/grep1.dat:10283:     But there can be an empty object at that address
../inputs/grep1.dat:10284:     at the end of another chunk.  */
../inputs/grep1.dat:10285:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:10286:    {
../inputs/grep1.dat:10287:      plp = lp->prev;
../inputs/grep1.dat:10288:      CALL_FREEFUN (h, lp);
../inputs/grep1.dat:10289:      lp = plp;
../inputs/grep1.dat:10290:      /* If we switch chunks, we can't tell whether the new current
../inputs/grep1.dat:10291:	 chunk contains an empty object, so assume that it may.  */
../inputs/grep1.dat:10292:      h->maybe_empty_object = 1;
../inputs/grep1.dat:10293:    }
../inputs/grep1.dat:10294:  if (lp)
../inputs/grep1.dat:10295:    {
../inputs/grep1.dat:10296:      h->object_base = h->next_free = (char *)(obj);
../inputs/grep1.dat:10297:      h->chunk_limit = lp->limit;
../inputs/grep1.dat:10298:      h->chunk = lp;
../inputs/grep1.dat:10299:    }
../inputs/grep1.dat:10300:  else if (obj != 0)
../inputs/grep1.dat:10301:    /* obj is not in any of the chunks! */
../inputs/grep1.dat:10302:    abort ();
../inputs/grep1.dat:10303:}
../inputs/grep1.dat:10304:
../inputs/grep1.dat:10305:#if 0
../inputs/grep1.dat:10306:/* These are now turned off because the applications do not use it
../inputs/grep1.dat:10307:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
../inputs/grep1.dat:10308:
../inputs/grep1.dat:10309:/* Now define the functional versions of the obstack macros.
../inputs/grep1.dat:10310:   Define them to simply use the corresponding macros to do the job.  */
../inputs/grep1.dat:10311:
../inputs/grep1.dat:10312:#ifdef __STDC__
../inputs/grep1.dat:10313:/* These function definitions do not work with non-ANSI preprocessors;
../inputs/grep1.dat:10314:   they won't pass through the macro names in parentheses.  */
../inputs/grep1.dat:10315:
../inputs/grep1.dat:10316:/* The function names appear in parentheses in order to prevent
../inputs/grep1.dat:10317:   the macro-definitions of the names from being expanded there.  */
../inputs/grep1.dat:10318:
../inputs/grep1.dat:10319:POINTER (obstack_base) (obstack)
../inputs/grep1.dat:10320:     struct obstack *obstack;
../inputs/grep1.dat:10321:{
../inputs/grep1.dat:10322:  return obstack_base (obstack);
../inputs/grep1.dat:10323:}
../inputs/grep1.dat:10324:
../inputs/grep1.dat:10325:POINTER (obstack_next_free) (obstack)
../inputs/grep1.dat:10326:     struct obstack *obstack;
../inputs/grep1.dat:10327:{
../inputs/grep1.dat:10328:  return obstack_next_free (obstack);
../inputs/grep1.dat:10329:}
../inputs/grep1.dat:10330:
../inputs/grep1.dat:10331:int (obstack_object_size) (obstack)
../inputs/grep1.dat:10332:     struct obstack *obstack;
../inputs/grep1.dat:10333:{
../inputs/grep1.dat:10334:  return obstack_object_size (obstack);
../inputs/grep1.dat:10335:}
../inputs/grep1.dat:10336:
../inputs/grep1.dat:10337:int (obstack_room) (obstack)
../inputs/grep1.dat:10338:     struct obstack *obstack;
../inputs/grep1.dat:10339:{
../inputs/grep1.dat:10340:  return obstack_room (obstack);
../inputs/grep1.dat:10341:}
../inputs/grep1.dat:10342:
../inputs/grep1.dat:10343:void (obstack_grow) (obstack, pointer, length)
../inputs/grep1.dat:10344:     struct obstack *obstack;
../inputs/grep1.dat:10345:     POINTER pointer;
../inputs/grep1.dat:10346:     int length;
../inputs/grep1.dat:10347:{
../inputs/grep1.dat:10348:  obstack_grow (obstack, pointer, length);
../inputs/grep1.dat:10349:}
../inputs/grep1.dat:10350:
../inputs/grep1.dat:10351:void (obstack_grow0) (obstack, pointer, length)
../inputs/grep1.dat:10352:     struct obstack *obstack;
../inputs/grep1.dat:10353:     POINTER pointer;
../inputs/grep1.dat:10354:     int length;
../inputs/grep1.dat:10355:{
../inputs/grep1.dat:10356:  obstack_grow0 (obstack, pointer, length);
../inputs/grep1.dat:10357:}
../inputs/grep1.dat:10358:
../inputs/grep1.dat:10359:void (obstack_1grow) (obstack, character)
../inputs/grep1.dat:10360:     struct obstack *obstack;
../inputs/grep1.dat:10361:     int character;
../inputs/grep1.dat:10362:{
../inputs/grep1.dat:10363:  obstack_1grow (obstack, character);
../inputs/grep1.dat:10364:}
../inputs/grep1.dat:10365:
../inputs/grep1.dat:10366:void (obstack_blank) (obstack, length)
../inputs/grep1.dat:10367:     struct obstack *obstack;
../inputs/grep1.dat:10368:     int length;
../inputs/grep1.dat:10369:{
../inputs/grep1.dat:10370:  obstack_blank (obstack, length);
../inputs/grep1.dat:10371:}
../inputs/grep1.dat:10372:
../inputs/grep1.dat:10373:void (obstack_1grow_fast) (obstack, character)
../inputs/grep1.dat:10374:     struct obstack *obstack;
../inputs/grep1.dat:10375:     int character;
../inputs/grep1.dat:10376:{
../inputs/grep1.dat:10377:  obstack_1grow_fast (obstack, character);
../inputs/grep1.dat:10378:}
../inputs/grep1.dat:10379:
../inputs/grep1.dat:10380:void (obstack_blank_fast) (obstack, length)
../inputs/grep1.dat:10381:     struct obstack *obstack;
../inputs/grep1.dat:10382:     int length;
../inputs/grep1.dat:10383:{
../inputs/grep1.dat:10384:  obstack_blank_fast (obstack, length);
../inputs/grep1.dat:10385:}
../inputs/grep1.dat:10386:
../inputs/grep1.dat:10387:POINTER (obstack_finish) (obstack)
../inputs/grep1.dat:10388:     struct obstack *obstack;
../inputs/grep1.dat:10389:{
../inputs/grep1.dat:10390:  return obstack_finish (obstack);
../inputs/grep1.dat:10391:}
../inputs/grep1.dat:10392:
../inputs/grep1.dat:10393:POINTER (obstack_alloc) (obstack, length)
../inputs/grep1.dat:10394:     struct obstack *obstack;
../inputs/grep1.dat:10395:     int length;
../inputs/grep1.dat:10396:{
../inputs/grep1.dat:10397:  return obstack_alloc (obstack, length);
../inputs/grep1.dat:10398:}
../inputs/grep1.dat:10399:
../inputs/grep1.dat:10400:POINTER (obstack_copy) (obstack, pointer, length)
../inputs/grep1.dat:10401:     struct obstack *obstack;
../inputs/grep1.dat:10402:     POINTER pointer;
../inputs/grep1.dat:10403:     int length;
../inputs/grep1.dat:10404:{
../inputs/grep1.dat:10405:  return obstack_copy (obstack, pointer, length);
../inputs/grep1.dat:10406:}
../inputs/grep1.dat:10407:
../inputs/grep1.dat:10408:POINTER (obstack_copy0) (obstack, pointer, length)
../inputs/grep1.dat:10409:     struct obstack *obstack;
../inputs/grep1.dat:10410:     POINTER pointer;
../inputs/grep1.dat:10411:     int length;
../inputs/grep1.dat:10412:{
../inputs/grep1.dat:10413:  return obstack_copy0 (obstack, pointer, length);
../inputs/grep1.dat:10414:}
../inputs/grep1.dat:10415:
../inputs/grep1.dat:10416:#endif /* __STDC__ */
../inputs/grep1.dat:10417:
../inputs/grep1.dat:10418:#endif /* 0 */
../inputs/grep1.dat:10419:
../inputs/grep1.dat:10420:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
../inputs/grep1.dat:10421:/* search.c - searching subroutines using dfa, kwset and regex for grep.
../inputs/grep1.dat:10422:   Copyright (C) 1992 Free Software Foundation, Inc.
../inputs/grep1.dat:10423:
../inputs/grep1.dat:10424:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:10425:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:10426:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:10427:   any later version.
../inputs/grep1.dat:10428:
../inputs/grep1.dat:10429:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:10430:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:10431:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:10432:   GNU General Public License for more details.
../inputs/grep1.dat:10433:
../inputs/grep1.dat:10434:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:10435:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:10436:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:10437:
../inputs/grep1.dat:10438:   Written August 1992 by Mike Haertel. */
../inputs/grep1.dat:10439:
../inputs/grep1.dat:10441:
../inputs/grep1.dat:10442:#ifdef STDC_HEADERS
../inputs/grep1.dat:10443:#if flag_limits==0
../inputs/grep1.dat:10444:#undef RE_DUP_MAX
../inputs/grep1.dat:10446:#define flag_limits 1
../inputs/grep1.dat:10447:#endif
../inputs/grep1.dat:10448:#if flag_stdlib==0
../inputs/grep1.dat:10450:#define flag_stdlib 1
../inputs/grep1.dat:10451:#endif
../inputs/grep1.dat:10452:#else
../inputs/grep1.dat:10453:#define UCHAR_MAX 255
../inputs/grep1.dat:10454:#if flag_systypes==0
../inputs/grep1.dat:10456:#define flag_systypes 1
../inputs/grep1.dat:10457:#endif
../inputs/grep1.dat:10458:extern char *malloc();
../inputs/grep1.dat:10459:#endif
../inputs/grep1.dat:10460:
../inputs/grep1.dat:10461:#ifdef HAVE_MEMCHR
../inputs/grep1.dat:10462:#if flag_string==0
../inputs/grep1.dat:10464:#define flag_string 1
../inputs/grep1.dat:10465:#endif
../inputs/grep1.dat:10466:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:10467:#if flag_memory==0
../inputs/grep1.dat:10469:#define flag_memory 1
../inputs/grep1.dat:10470:#endif
../inputs/grep1.dat:10471:#endif
../inputs/grep1.dat:10472:#else
../inputs/grep1.dat:10473:#ifdef __STDC__
../inputs/grep1.dat:10474:extern void *memchr();
../inputs/grep1.dat:10475:#else
../inputs/grep1.dat:10476:extern char *memchr();
../inputs/grep1.dat:10477:#endif
../inputs/grep1.dat:10478:#endif
../inputs/grep1.dat:10479:
../inputs/grep1.dat:10480:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
../inputs/grep1.dat:10481:#undef bcopy
../inputs/grep1.dat:10482:#define bcopy(s, d, n) memcpy((d), (s), (n))
../inputs/grep1.dat:10483:#endif
../inputs/grep1.dat:10484:
../inputs/grep1.dat:10485:#ifdef isascii
../inputs/grep1.dat:10486:#define ISALNUM(C) (isascii(C) && isalnum(C))
../inputs/grep1.dat:10487:#define ISUPPER(C) (isascii(C) && isupper(C))
../inputs/grep1.dat:10488:#else
../inputs/grep1.dat:10489:#define ISALNUM(C) isalnum(C)
../inputs/grep1.dat:10490:#define ISUPPER(C) isupper(C)
../inputs/grep1.dat:10491:#endif
../inputs/grep1.dat:10492:
../inputs/grep1.dat:10493:#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))
../inputs/grep1.dat:10494:
../inputs/grep1.dat:10499:
../inputs/grep1.dat:10500:#define NCHAR (UCHAR_MAX + 1)
../inputs/grep1.dat:10501:
../inputs/grep1.dat:10502:#if __STDC__
../inputs/grep1.dat:10503:static void Gcompile(char *, size_t);
../inputs/grep1.dat:10504:static void Ecompile(char *, size_t);
../inputs/grep1.dat:10505:static char *EGexecute(char *, size_t, char **);
../inputs/grep1.dat:10506:static void Fcompile(char *, size_t);
../inputs/grep1.dat:10507:static char *Fexecute(char *, size_t, char **);
../inputs/grep1.dat:10508:#else
../inputs/grep1.dat:10509:static void Gcompile();
../inputs/grep1.dat:10510:static void Ecompile();
../inputs/grep1.dat:10511:static char *EGexecute();
../inputs/grep1.dat:10512:static void Fcompile();
../inputs/grep1.dat:10513:static char *Fexecute();
../inputs/grep1.dat:10514:#endif
../inputs/grep1.dat:10515:
../inputs/grep1.dat:10516:/* Here is the matchers vector for the main program. */
../inputs/grep1.dat:10517:struct matcher matchers[] = {
../inputs/grep1.dat:10518:  { "default", Gcompile, EGexecute },
../inputs/grep1.dat:10519:  { "grep", Gcompile, EGexecute },
../inputs/grep1.dat:10520:  { "ggrep", Gcompile, EGexecute },
../inputs/grep1.dat:10521:  { "egrep", Ecompile, EGexecute },
../inputs/grep1.dat:10522:  { "posix-egrep", Ecompile, EGexecute },
../inputs/grep1.dat:10523:  { "gegrep", Ecompile, EGexecute },
../inputs/grep1.dat:10524:  { "fgrep", Fcompile, Fexecute },
../inputs/grep1.dat:10525:  { "gfgrep", Fcompile, Fexecute },
../inputs/grep1.dat:10526:  { 0, 0, 0 },
../inputs/grep1.dat:10527:};
../inputs/grep1.dat:10528:
../inputs/grep1.dat:10529:/* For -w, we also consider _ to be word constituent.  */
../inputs/grep1.dat:10530:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
../inputs/grep1.dat:10531:
../inputs/grep1.dat:10532:/* DFA compiled regexp. */
../inputs/grep1.dat:10533:static struct dfa dfa_1;
../inputs/grep1.dat:10534:
../inputs/grep1.dat:10535:/* Regex compiled regexp. */
../inputs/grep1.dat:10536:static struct re_pattern_buffer regex;
../inputs/grep1.dat:10537:
../inputs/grep1.dat:10538:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
../inputs/grep1.dat:10539:   a list of strings, at least one of which is known to occur in
../inputs/grep1.dat:10540:   any string matching the regexp. */
../inputs/grep1.dat:10541:static kwset_t kwset;
../inputs/grep1.dat:10542:
../inputs/grep1.dat:10543:/* Last compiled fixed string known to exactly match the regexp.
../inputs/grep1.dat:10544:   If kwsexec() returns < lastexact, then we don't need to
../inputs/grep1.dat:10545:   call the regexp matcher at all. */
../inputs/grep1.dat:10546:static int lastexact;
../inputs/grep1.dat:10547:
../inputs/grep1.dat:10548:void
../inputs/grep1.dat:10549:dfaerror(mesg)
../inputs/grep1.dat:10550:     char *mesg;
../inputs/grep1.dat:10551:{
../inputs/grep1.dat:10552:  fatal(mesg, 0);
../inputs/grep1.dat:10553:}
../inputs/grep1.dat:10554:
../inputs/grep1.dat:10555:static void
../inputs/grep1.dat:10556:kwsinit()
../inputs/grep1.dat:10557:{
../inputs/grep1.dat:10558:  static char trans[NCHAR];
../inputs/grep1.dat:10559:  int i;
../inputs/grep1.dat:10560:
../inputs/grep1.dat:10561:  if (match_icase)
../inputs/grep1.dat:10562:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:10563:      trans[i] = TOLOWER(i);
../inputs/grep1.dat:10564:
../inputs/grep1.dat:10565:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
../inputs/grep1.dat:10566:    fatal("memory exhausted", 0);
../inputs/grep1.dat:10567:}  
../inputs/grep1.dat:10568:
../inputs/grep1.dat:10569:/* If the DFA turns out to have some set of fixed strings one of
../inputs/grep1.dat:10570:   which must occur in the match, then we build a kwset matcher
../inputs/grep1.dat:10571:   to find those strings, and thus quickly filter out impossible
../inputs/grep1.dat:10572:   matches. */
../inputs/grep1.dat:10573:static void
../inputs/grep1.dat:10574:kwsmusts()
../inputs/grep1.dat:10575:{
../inputs/grep1.dat:10576:  struct dfamust *dm;
../inputs/grep1.dat:10577:  char *err;
../inputs/grep1.dat:10578:
../inputs/grep1.dat:10579:  if (dfa_1.musts)
../inputs/grep1.dat:10580:    {
../inputs/grep1.dat:10581:      kwsinit();
../inputs/grep1.dat:10582:      /* First, we compile in the substrings known to be exact
../inputs/grep1.dat:10583:	 matches.  The kwset matcher will return the index
../inputs/grep1.dat:10584:	 of the matching string that it chooses. */
../inputs/grep1.dat:10585:      for (dm = dfa_1.musts; dm; dm = dm->next)
../inputs/grep1.dat:10586:	{
../inputs/grep1.dat:10587:	  if (!dm->exact)
../inputs/grep1.dat:10588:	    continue;
../inputs/grep1.dat:10589:	  ++lastexact;
../inputs/grep1.dat:10590:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
../inputs/grep1.dat:10591:	    fatal(err, 0);
../inputs/grep1.dat:10592:	}
../inputs/grep1.dat:10593:      /* Now, we compile the substrings that will require
../inputs/grep1.dat:10594:	 the use of the regexp matcher.  */
../inputs/grep1.dat:10595:      for (dm = dfa_1.musts; dm; dm = dm->next)
../inputs/grep1.dat:10596:	{
../inputs/grep1.dat:10597:	  if (dm->exact)
../inputs/grep1.dat:10598:	    continue;
../inputs/grep1.dat:10599:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
../inputs/grep1.dat:10600:	    fatal(err, 0);
../inputs/grep1.dat:10601:	}
../inputs/grep1.dat:10602:      if ((err = kwsprep(kwset)) != 0)
../inputs/grep1.dat:10603:	fatal(err, 0);
../inputs/grep1.dat:10604:    }
../inputs/grep1.dat:10605:}
../inputs/grep1.dat:10606:
../inputs/grep1.dat:10607:static void
../inputs/grep1.dat:10608:Gcompile(pattern, size)
../inputs/grep1.dat:10609:     char *pattern;
../inputs/grep1.dat:10610:     size_t size;
../inputs/grep1.dat:10611:{
../inputs/grep1.dat:10612:#ifdef __STDC__
../inputs/grep1.dat:10613:  const
../inputs/grep1.dat:10614:#endif
../inputs/grep1.dat:10615:  char *err;
../inputs/grep1.dat:10616:
../inputs/grep1.dat:10617:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
../inputs/grep1.dat:10618:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase);
../inputs/grep1.dat:10619:
../inputs/grep1.dat:10620:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
../inputs/grep1.dat:10621:    fatal(err, 0);
../inputs/grep1.dat:10622:
../inputs/grep1.dat:10623:  dfainit(&dfa_1);
../inputs/grep1.dat:10624:
../inputs/grep1.dat:10625:  /* In the match_words and match_lines cases, we use a different pattern
../inputs/grep1.dat:10626:     for the DFA matcher that will quickly throw out cases that won't work.
../inputs/grep1.dat:10627:     Then if DFA succeeds we do some hairy stuff using the regex matcher
../inputs/grep1.dat:10628:     to decide whether the match should really count. */
../inputs/grep1.dat:10629:  if (match_words || match_lines)
../inputs/grep1.dat:10630:    {
../inputs/grep1.dat:10631:      /* In the whole-word case, we use the pattern:
../inputs/grep1.dat:10632:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
../inputs/grep1.dat:10633:	 In the whole-line case, we use the pattern:
../inputs/grep1.dat:10634:	 ^(userpattern)$.
../inputs/grep1.dat:10635:	 BUG: Using [A-Za-z_] is locale-dependent!  */
../inputs/grep1.dat:10636:
../inputs/grep1.dat:10637:      char *n = malloc(size + 50);
../inputs/grep1.dat:10638:      int i = 0;
../inputs/grep1.dat:10639:
../inputs/grep1.dat:10640:      strcpy(n, "");
../inputs/grep1.dat:10641:
../inputs/grep1.dat:10642:      if (match_lines)
../inputs/grep1.dat:10643:	strcpy(n, "^\\(");
../inputs/grep1.dat:10644:      if (match_words)
../inputs/grep1.dat:10645:	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
../inputs/grep1.dat:10646:
../inputs/grep1.dat:10647:      i = strlen(n);
../inputs/grep1.dat:10648:      bcopy(pattern, n + i, size);
../inputs/grep1.dat:10649:      i += size;
../inputs/grep1.dat:10650:
../inputs/grep1.dat:10651:      if (match_words)
../inputs/grep1.dat:10652:	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
../inputs/grep1.dat:10653:      if (match_lines)
../inputs/grep1.dat:10654:	strcpy(n + i, "\\)$");
../inputs/grep1.dat:10655:
../inputs/grep1.dat:10656:      i += strlen(n + i);
../inputs/grep1.dat:10657:      dfacomp(n, i, &dfa_1, 1);
../inputs/grep1.dat:10658:    }
../inputs/grep1.dat:10659:  else
../inputs/grep1.dat:10660:    dfacomp(pattern, size, &dfa_1, 1);
../inputs/grep1.dat:10661:
../inputs/grep1.dat:10662:  kwsmusts();
../inputs/grep1.dat:10663:}
../inputs/grep1.dat:10664:
../inputs/grep1.dat:10665:static void
../inputs/grep1.dat:10666:Ecompile(pattern, size)
../inputs/grep1.dat:10667:     char *pattern;
../inputs/grep1.dat:10668:     size_t size;
../inputs/grep1.dat:10669:{
../inputs/grep1.dat:10670:#ifdef __STDC__
../inputs/grep1.dat:10671:  const
../inputs/grep1.dat:10672:#endif
../inputs/grep1.dat:10673:  char *err;
../inputs/grep1.dat:10674:
../inputs/grep1.dat:10675:  if (strcmp(matcher, "posix-egrep") == 0)
../inputs/grep1.dat:10676:    {
../inputs/grep1.dat:10677:      re_set_syntax(RE_SYNTAX_POSIX_EGREP);
../inputs/grep1.dat:10678:      dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase);
../inputs/grep1.dat:10679:    }
../inputs/grep1.dat:10680:  else
../inputs/grep1.dat:10681:    {
../inputs/grep1.dat:10682:      re_set_syntax(RE_SYNTAX_EGREP);
../inputs/grep1.dat:10683:      dfasyntax(RE_SYNTAX_EGREP, match_icase);
../inputs/grep1.dat:10684:    }
../inputs/grep1.dat:10685:
../inputs/grep1.dat:10686:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
../inputs/grep1.dat:10687:    fatal(err, 0);
../inputs/grep1.dat:10688:
../inputs/grep1.dat:10689:  dfainit(&dfa_1);
../inputs/grep1.dat:10690:
../inputs/grep1.dat:10691:  /* In the match_words and match_lines cases, we use a different pattern
../inputs/grep1.dat:10692:     for the DFA matcher that will quickly throw out cases that won't work.
../inputs/grep1.dat:10693:     Then if DFA succeeds we do some hairy stuff using the regex matcher
../inputs/grep1.dat:10694:     to decide whether the match should really count. */
../inputs/grep1.dat:10695:  if (match_words || match_lines)
../inputs/grep1.dat:10696:    {
../inputs/grep1.dat:10697:      /* In the whole-word case, we use the pattern:
../inputs/grep1.dat:10698:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
../inputs/grep1.dat:10699:	 In the whole-line case, we use the pattern:
../inputs/grep1.dat:10700:	 ^(userpattern)$.
../inputs/grep1.dat:10701:	 BUG: Using [A-Za-z_] is locale-dependent!  */
../inputs/grep1.dat:10702:
../inputs/grep1.dat:10703:      char *n = malloc(size + 50);
../inputs/grep1.dat:10704:      int i = 0;
../inputs/grep1.dat:10705:
../inputs/grep1.dat:10706:      strcpy(n, "");
../inputs/grep1.dat:10707:
../inputs/grep1.dat:10708:      if (match_lines)
../inputs/grep1.dat:10709:	strcpy(n, "^(");
../inputs/grep1.dat:10710:      if (match_words)
../inputs/grep1.dat:10711:	strcpy(n, "(^|[^0-9A-Za-z_])(");
../inputs/grep1.dat:10712:
../inputs/grep1.dat:10713:      i = strlen(n);
../inputs/grep1.dat:10714:      bcopy(pattern, n + i, size);
../inputs/grep1.dat:10715:      i += size;
../inputs/grep1.dat:10716:
../inputs/grep1.dat:10717:      if (match_words)
../inputs/grep1.dat:10718:	strcpy(n + i, ")([^0-9A-Za-z_]|$)");
../inputs/grep1.dat:10719:      if (match_lines)
../inputs/grep1.dat:10720:	strcpy(n + i, ")$");
../inputs/grep1.dat:10721:
../inputs/grep1.dat:10722:      i += strlen(n + i);
../inputs/grep1.dat:10723:      dfacomp(n, i, &dfa_1, 1);
../inputs/grep1.dat:10724:    }
../inputs/grep1.dat:10725:  else
../inputs/grep1.dat:10726:    dfacomp(pattern, size, &dfa_1, 1);
../inputs/grep1.dat:10727:
../inputs/grep1.dat:10728:  kwsmusts();
../inputs/grep1.dat:10729:}
../inputs/grep1.dat:10730:
../inputs/grep1.dat:10731:static char *
../inputs/grep1.dat:10732:EGexecute(buf, size, endp)
../inputs/grep1.dat:10733:     char *buf;
../inputs/grep1.dat:10734:     size_t size;
../inputs/grep1.dat:10735:     char **endp;
../inputs/grep1.dat:10736:{
../inputs/grep1.dat:10737:  register char *buflim, *beg, *end, save;
../inputs/grep1.dat:10738:  int backref, start, len;
../inputs/grep1.dat:10739:  struct kwsmatch kwsm;
../inputs/grep1.dat:10740:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
../inputs/grep1.dat:10741:				    Q@#%!# library interface in regex.c.  */
../inputs/grep1.dat:10742:
../inputs/grep1.dat:10743:  buflim = buf + size;
../inputs/grep1.dat:10744:
../inputs/grep1.dat:10745:  for (beg = end = buf; end < buflim; beg = end + 1)
../inputs/grep1.dat:10746:    {
../inputs/grep1.dat:10747:      if (kwset)
../inputs/grep1.dat:10748:	{
../inputs/grep1.dat:10749:	  /* Find a possible match using the KWset matcher. */
../inputs/grep1.dat:10750:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
../inputs/grep1.dat:10751:	  if (!beg)
../inputs/grep1.dat:10752:	    goto failure;
../inputs/grep1.dat:10753:	  /* Narrow down to the line containing the candidate, and
../inputs/grep1.dat:10754:	     run it through DFA. */
../inputs/grep1.dat:10755:	  end = memchr(beg, '\n', buflim - beg);
../inputs/grep1.dat:10756:	  if (!end)
../inputs/grep1.dat:10757:	    end = buflim;
../inputs/grep1.dat:10758:	  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:10759:	    --beg;
../inputs/grep1.dat:10760:	  save = *end;
../inputs/grep1.dat:10761:	  if (kwsm.index < lastexact)
../inputs/grep1.dat:10762:	    goto success;
../inputs/grep1.dat:10763:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
../inputs/grep1.dat:10764:	    {
../inputs/grep1.dat:10765:	      *end = save;
../inputs/grep1.dat:10766:	      continue;
../inputs/grep1.dat:10767:	    }
../inputs/grep1.dat:10768:	  *end = save;
../inputs/grep1.dat:10769:	  /* Successful, no backreferences encountered. */
../inputs/grep1.dat:10770:	  if (!backref)
../inputs/grep1.dat:10771:	    goto success;
../inputs/grep1.dat:10772:	}
../inputs/grep1.dat:10773:      else
../inputs/grep1.dat:10774:	{
../inputs/grep1.dat:10775:	  /* No good fixed strings; start with DFA. */
../inputs/grep1.dat:10776:	  save = *buflim;
../inputs/grep1.dat:10777:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
../inputs/grep1.dat:10778:	  *buflim = save;
../inputs/grep1.dat:10779:	  if (!beg)
../inputs/grep1.dat:10780:	    goto failure;
../inputs/grep1.dat:10781:	  /* Narrow down to the line we've found. */
../inputs/grep1.dat:10782:	  end = memchr(beg, '\n', buflim - beg);
../inputs/grep1.dat:10783:	  if (!end)
../inputs/grep1.dat:10784:	    end = buflim;
../inputs/grep1.dat:10785:	  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:10786:	    --beg;
../inputs/grep1.dat:10787:	  /* Successful, no backreferences encountered! */
../inputs/grep1.dat:10788:	  if (!backref)
../inputs/grep1.dat:10789:	    goto success;
../inputs/grep1.dat:10790:	}
../inputs/grep1.dat:10791:      /* If we've made it to this point, this means DFA has seen
../inputs/grep1.dat:10792:	 a probable match, and we need to run it through Regex. */
../inputs/grep1.dat:10793:      regex.not_eol = 0;
../inputs/grep1.dat:10794:      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
../inputs/grep1.dat:10795:	{
../inputs/grep1.dat:10796:	  len = regs.end[0] - start;
../inputs/grep1.dat:10797:	  if (!match_lines && !match_words || match_lines && len == end - beg)
../inputs/grep1.dat:10798:	    goto success;
../inputs/grep1.dat:10799:	  /* If -w, check if the match aligns with word boundaries.
../inputs/grep1.dat:10800:	     We do this iteratively because:
../inputs/grep1.dat:10801:	     (a) the line may contain more than one occurence of the pattern, and
../inputs/grep1.dat:10802:	     (b) Several alternatives in the pattern might be valid at a given
../inputs/grep1.dat:10803:	     point, and we may need to consider a shorter one to find a word
../inputs/grep1.dat:10804:	     boundary. */
../inputs/grep1.dat:10805:	  if (match_words)
../inputs/grep1.dat:10806:	    while (start >= 0)
../inputs/grep1.dat:10807:	      {
../inputs/grep1.dat:10808:		if ((start == 0 || !WCHAR(beg[start - 1]))
../inputs/grep1.dat:10809:		    && (len == end - beg || !WCHAR(beg[start + len])))
../inputs/grep1.dat:10810:		  goto success;
../inputs/grep1.dat:10811:		if (len > 0)
../inputs/grep1.dat:10812:		  {
../inputs/grep1.dat:10813:		    /* Try a shorter length anchored at the same place. */
../inputs/grep1.dat:10814:		    --len;
../inputs/grep1.dat:10815:		    regex.not_eol = 1;
../inputs/grep1.dat:10816:		    len = re_match(&regex, beg, start + len, start, &regs);
../inputs/grep1.dat:10817:		  }
../inputs/grep1.dat:10818:		if (len <= 0)
../inputs/grep1.dat:10819:		  {
../inputs/grep1.dat:10820:		    /* Try looking further on. */
../inputs/grep1.dat:10821:		    if (start == end - beg)
../inputs/grep1.dat:10822:		      break;
../inputs/grep1.dat:10823:		    ++start;
../inputs/grep1.dat:10824:		    regex.not_eol = 0;
../inputs/grep1.dat:10825:		    start = re_search(&regex, beg, end - beg,
../inputs/grep1.dat:10826:				      start, end - beg - start, &regs);
../inputs/grep1.dat:10827:		    len = regs.end[0] - start;
../inputs/grep1.dat:10828:		  }
../inputs/grep1.dat:10829:	      }
../inputs/grep1.dat:10830:	}
../inputs/grep1.dat:10831:    }
../inputs/grep1.dat:10832:
../inputs/grep1.dat:10833: failure:
../inputs/grep1.dat:10834:  return 0;
../inputs/grep1.dat:10835:
../inputs/grep1.dat:10836: success:
../inputs/grep1.dat:10837:  *endp = end < buflim ? end + 1 : end;
../inputs/grep1.dat:10838:  return beg;
../inputs/grep1.dat:10839:}
../inputs/grep1.dat:10840:
../inputs/grep1.dat:10841:static void
../inputs/grep1.dat:10842:Fcompile(pattern, size)
../inputs/grep1.dat:10843:     char *pattern;
../inputs/grep1.dat:10844:     size_t size;
../inputs/grep1.dat:10845:{
../inputs/grep1.dat:10846:  char *beg, *lim, *err;
../inputs/grep1.dat:10847:
../inputs/grep1.dat:10848:  kwsinit();
../inputs/grep1.dat:10849:  beg = pattern;
../inputs/grep1.dat:10850:  do
../inputs/grep1.dat:10851:    {
../inputs/grep1.dat:10852:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
../inputs/grep1.dat:10853:	;
../inputs/grep1.dat:10854:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
../inputs/grep1.dat:10855:	fatal(err, 0);
../inputs/grep1.dat:10856:      if (lim < pattern + size)
../inputs/grep1.dat:10857:	++lim;
../inputs/grep1.dat:10858:      beg = lim;
../inputs/grep1.dat:10859:    }
../inputs/grep1.dat:10860:  while (beg < pattern + size);
../inputs/grep1.dat:10861:
../inputs/grep1.dat:10862:  if ((err = kwsprep(kwset)) != 0)
../inputs/grep1.dat:10863:    fatal(err, 0);
../inputs/grep1.dat:10864:}
../inputs/grep1.dat:10865:
../inputs/grep1.dat:10866:static char *
../inputs/grep1.dat:10867:Fexecute(buf, size, endp)
../inputs/grep1.dat:10868:     char *buf;
../inputs/grep1.dat:10869:     size_t size;
../inputs/grep1.dat:10870:     char **endp;
../inputs/grep1.dat:10871:{
../inputs/grep1.dat:10872:  register char *beg, *try, *end;
../inputs/grep1.dat:10873:  register size_t len;
../inputs/grep1.dat:10874:  struct kwsmatch kwsmatch;
../inputs/grep1.dat:10875:
../inputs/grep1.dat:10876:  for (beg = buf; beg <= buf + size; ++beg)
../inputs/grep1.dat:10877:    {
../inputs/grep1.dat:10878:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
../inputs/grep1.dat:10879:	return 0;
../inputs/grep1.dat:10880:      len = kwsmatch.size[0];
../inputs/grep1.dat:10881:      if (match_lines)
../inputs/grep1.dat:10882:	{
../inputs/grep1.dat:10883:	  if (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:10884:	    continue;
../inputs/grep1.dat:10885:	  if (beg + len < buf + size && beg[len] != '\n')
../inputs/grep1.dat:10886:	    continue;
../inputs/grep1.dat:10887:	  goto success;
../inputs/grep1.dat:10888:	}
../inputs/grep1.dat:10889:      else if (match_words)
../inputs/grep1.dat:10890:	for (try = beg; len && try;)
../inputs/grep1.dat:10891:	  {
../inputs/grep1.dat:10892:	    if (try > buf && WCHAR((unsigned char) try[-1]))
../inputs/grep1.dat:10893:	      break;
../inputs/grep1.dat:10894:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
../inputs/grep1.dat:10895:	      {
../inputs/grep1.dat:10896:		try = kwsexec(kwset, beg, --len, &kwsmatch);
../inputs/grep1.dat:10897:		len = kwsmatch.size[0];
../inputs/grep1.dat:10898:	      }
../inputs/grep1.dat:10899:	    else
../inputs/grep1.dat:10900:	      goto success;
../inputs/grep1.dat:10901:	  }
../inputs/grep1.dat:10902:      else
../inputs/grep1.dat:10903:	goto success;
../inputs/grep1.dat:10904:    }
../inputs/grep1.dat:10905:
../inputs/grep1.dat:10906:  return 0;
../inputs/grep1.dat:10907:
../inputs/grep1.dat:10908: success:
../inputs/grep1.dat:10909:  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
../inputs/grep1.dat:10910:    ++end;
../inputs/grep1.dat:10911:  else
../inputs/grep1.dat:10912:    end = buf + size;
../inputs/grep1.dat:10913:  *endp = end;
../inputs/grep1.dat:10914:  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:10915:    --beg;
../inputs/grep1.dat:10916:  return beg;
../inputs/grep1.dat:10917:}
../inputs/grep1.dat:10918:
../inputs/grep1.dat:10919:if (out)
../inputs/grep1.dat:10920:if (gout)
../inputs/grep1.dat:10921:if (gsth)
../inputs/grep1.dat:10922:if out
../inputs/grep1.dat:10923:if gout
../inputs/grep1.dat:10924:if agout
../inputs/grep1.dat:10925:if agout end = buf + size;
../inputs/grep1.dat:10926:if aout
../inputs/grep1.dat:10927:if ag
../inputs/grep1.dat:10928:if g
../inputs/grep1.dat:10929:if a
../inputs/grep1.dat:10930:
../inputs/grep1.dat:10931:swswsif (out)
../inputs/grep1.dat:10932:wwif (gout)
../inputs/grep1.dat:10933:wssif (gsth)
../inputs/grep1.dat:10934:wswswsif out
../inputs/grep1.dat:10935:3if gout
../inputs/grep1.dat:10936:wsif agout
../inputs/grep1.dat:10937:3eif agout end = buf + size;
../inputs/grep1.dat:10938:dseif aout
../inputs/grep1.dat:10939:dsif ag
../inputs/grep1.dat:10940:isxsif g
../inputs/grep1.dat:10941:xxsxif awwsw
../inputs/grep1.dat:10942:
../inputs/grep1.dat:10943:swswsif (out)fvvfvf
../inputs/grep1.dat:10944:wwif (gout)
../inputs/grep1.dat:10945:wssif (gsth)
../inputs/grep1.dat:10946:wswswsif outvfvf
../inputs/grep1.dat:10947:3if goutfvf
../inputs/grep1.dat:10948:wsif agoutvfv
../inputs/grep1.dat:10949:3eif agoutvf end = buf + size;
../inputs/grep1.dat:10950:dseif aoutvfv
../inputs/grep1.dat:10951:dsif agvff
../inputs/grep1.dat:10952:isxsif gvfv
../inputs/grep1.dat:10953:xxsxif awwsw
../inputs/grep1.dat:10954:
../inputs/grep1.dat:10955:s  if (out)
../inputs/grep1.dat:10956:    if (gout)
../inputs/grep1.dat:10957: sds if (gsth)
../inputs/grep1.dat:10958:  if out
../inputs/grep1.dat:10959:dc if gout
../inputs/grep1.dat:10960:dv if agout
../inputs/grep1.dat:10961:argue if agout end = buf + size;
../inputs/grep1.dat:10962:  if aout
../inputs/grep1.dat:10963:          if ag
../inputs/grep1.dat:10964:  argue if g
../inputs/grep1.dat:10965: if a