1:0:/* grep.c - main driver file for grep.
2:39:   Copyright (C) 1992 Free Software Foundation, Inc.
3:92:
4:93:   This program is free software; you can redistribute it and/or modify
5:165:   it under the terms of the GNU General Public License as published by
6:237:   the Free Software Foundation; either version 2, or (at your option)
7:308:   any later version.
8:330:
9:331:   This program is distributed in the hope that it will be useful,
10:398:   but WITHOUT ANY WARRANTY; without even the implied warranty of
11:464:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
12:529:   GNU General Public License for more details.
13:577:
14:578:   You should have received a copy of the GNU General Public License
15:647:   along with this program; if not, write to the Free Software
16:710:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
17:771:
18:772:   Written July 1992 by Mike Haertel.  */
19:814:
20:815:
21:816:/* I added a series define from makefile here in order to run cfe */
22:885:#define GREP 1
23:900:#define STDC_HEADERS 1
24:923:#define HAVE_STRING_H 1
25:947:#define HAVE_SYS_PARAM_H 1
26:974:#define HAVE_UNISTD_H 1
27:998:#define HAVE_ALLOCA_H 1
28:1022:#define HAVE_GETPAGESIZE 1
29:1049:#define HAVE_MEMCHR 1
30:1071:#define HAVE_STRERROR 1
31:1095:#define HAVE_VALLOC 1
32:1117:#define HAVE_WORKING_MMAP 1
33:1145:/*** end of cfe purpose **/
34:1173:
37:1212:
38:1213:#ifndef errno
39:1227:extern int errno;
40:1245:#endif
41:1252:
42:1253:#ifdef STDC_HEADERS
44:1293:#define flag_stdlib 1
45:1315:#else
47:1344:#define flag_systypes 1
48:1368:extern char *malloc(), *realloc();
49:1403:extern void free();
50:1423:#endif
51:1430:
52:1431:#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
54:1503:#define flag_string 1
55:1525:#ifdef NEED_MEMORY_H
57:1566:#define flag_memory 1
58:1588:#endif
59:1595:#else
61:1622:#define flag_strings 1
62:1645:#ifdef __STDC__
63:1661:extern void *memchr();
64:1684:#else
65:1690:extern char *memchr();
66:1713:#endif
67:1720:#define strrchr rindex
68:1743:#endif
69:1750:
70:1751:#ifdef HAVE_UNISTD_H
71:1772:#if flag_systypes==0
73:1816:#define flag_systypes 1
74:1840:#endif
77:1886:#else
78:1892:#define O_RDONLY 0
79:1911:extern int open(), read(), close();
80:1947:#endif
81:1954:
84:1998:
85:1999:#undef MAX
86:2010:#define MAX(A,B) ((A) > (B) ? (A) : (B))
87:2051:
88:2052:/* Provide missing ANSI features if necessary. */
89:2102:
90:2103:#ifndef HAVE_STRERROR
91:2125:extern int sys_nerr;
92:2146:extern char *sys_errlist[];
93:2174:#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
94:2253:#endif
95:2260:
96:2261:#ifndef HAVE_MEMCHR
97:2281:#ifdef __STDC__
98:2297:#define VOID void
99:2315:#else
100:2321:#define VOID char
101:2339:#endif
102:2346:VOID *
103:2353:memchr(vp, c, n)
104:2370:     VOID *vp;
105:2385:     int c;
106:2397:     size_t n;
107:2412:{
108:2414:  unsigned char *p;
109:2434:
110:2435:  for (p = (unsigned char *) vp; n--; ++p)
111:2478:    if (*p == c)
112:2495:      return (VOID *) p;
113:2520:  return 0;
114:2532:}
115:2534:#endif
116:2541:    
117:2546:/* Define flags declared in grep.h. */
118:2585:char *matcher;
119:2600:int match_icase;
120:2617:int match_words;
121:2634:int match_lines;
122:2651:
123:2652:/* Functions we'll use to search. */
124:2689:static void (*compile)();
125:2715:static char *(*execute)();
126:2742:
127:2743:/* For error messages. */
128:2769:static char *prog;
129:2788:static char *filename;
130:2811:static int errseen;
131:2831:
132:2832:/* Print a message and possibly an error string.  Remember
133:2891:   that something awful happened. */
134:2928:static void
135:2940:error(mesg, errnum)
136:2960:#ifdef __STDC__
137:2976:     const
138:2987:#endif
139:2994:     char *mesg;
140:3011:     int errnum;
141:3028:{
142:3030:  if (errnum)
143:3044:    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
144:3111:  else
145:3118:    fprintf(stderr, "%s: %s\n", prog, mesg);
146:3163:  errseen = 1;
147:3178:}
148:3180:
149:3181:/* Like error(), but die horribly after printing. */
150:3234:void
151:3239:fatal(mesg, errnum)
152:3259:#ifdef __STDC__
153:3275:     const
154:3286:#endif
155:3293:     char *mesg;
156:3310:     int errnum;
157:3327:{
158:3329:  error(mesg, errnum);
159:3352:  exit(2);
160:3363:}
161:3365:
162:3366:/* Interface to handle errors and fix library lossage. */
163:3424:char *
164:3431:xmalloc(size)
165:3445:     size_t size;
166:3463:{
167:3465:  char *result;
168:3481:
169:3482:  result = malloc(size);
170:3507:  if (size && !result)
171:3530:    fatal("memory exhausted", 0);
172:3564:  return result;
173:3581:}
174:3583:
175:3584:/* Interface to handle errors and fix some library lossage. */
176:3647:char *
177:3654:xrealloc(ptr, size)
178:3674:     char *ptr;
179:3690:     size_t size;
180:3708:{
181:3710:  char *result;
182:3726:
183:3727:  if (ptr)
184:3738:    result = realloc(ptr, size);
185:3771:  else
186:3778:    result = malloc(size);
187:3805:  if (size && !result)
188:3828:    fatal("memory exhausted", 0);
189:3862:  return result;
190:3879:}
191:3881:
192:3882:#if !defined(HAVE_VALLOC)
193:3908:#define valloc malloc
194:3930:#else
195:3936:#ifdef __STDC__
196:3952:extern void *valloc(size_t);
197:3981:#else
198:3987:extern char *valloc();
199:4010:#endif
200:4017:#endif
201:4024:
202:4025:/* Hairy buffering mechanism for grep.  The intent is to keep
203:4087:   all reads aligned on a page boundary and multiples of the
204:4148:   page size. */
205:4165:
206:4166:static char *buffer;		/* Base of buffer. */
207:4210:static size_t bufsalloc;	/* Allocated size of buffer save region. */
208:4279:static size_t bufalloc;		/* Total buffer size. */
209:4329:static int bufdesc;		/* File descriptor. */
210:4373:static char *bufbeg;		/* Beginning of user-visible stuff. */
211:4434:static char *buflim;		/* Limit of user-visible stuff. */
212:4491:
213:4492:#if defined(HAVE_WORKING_MMAP)
214:4523:#if flag_systypes==0
216:4567:#define flag_systypes 1
217:4591:#endif
220:4642:
221:4643:static int bufmapped;		/* True for ordinary files. */
222:4697:static struct stat bufstat;	/* From fstat(). */
223:4745:static off_t bufoffset;		/* What read() normally remembers. */
224:4808:#endif
225:4815:
226:4816:/* Reset the buffer for a new file.  Initialize
227:4864:   on the first time through. */
228:4897:void
229:4902:reset(fd)
230:4912:     int fd;
231:4925:{
232:4927:  static int initialized;
233:4953:
234:4954:  if (!initialized)
235:4974:    {
236:4980:      initialized = 1;
237:5003:#ifndef BUFSALLOC
238:5021:      bufsalloc = MAX(8192, getpagesize());
239:5065:#else
240:5071:      bufsalloc = BUFSALLOC;
241:5100:#endif
242:5107:      bufalloc = 5 * bufsalloc;
243:5139:      /* The 1 byte of overflow is a kludge for dfaexec(), which
244:5204:	 inserts a sentinel newline at the end of the buffer
245:5258:	 being searched.  There's gotta be a better way... */
246:5313:      buffer = valloc(bufalloc + 1);
247:5350:      if (!buffer)
248:5369:	fatal("memory exhausted", 0);
249:5400:      bufbeg = buffer;
250:5423:      buflim = buffer;
251:5446:    }
252:5452:  bufdesc = fd;
253:5468:#if defined(HAVE_WORKING_MMAP)
254:5499:  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
255:5559:    bufmapped = 0;
256:5578:  else
257:5585:    {
258:5591:      bufmapped = 1;
259:5612:      bufoffset = lseek(fd, 0, 1);
260:5647:    }
261:5653:#endif
262:5660:}
263:5662:
264:5663:/* Read new stuff into the buffer, saving the specified
265:5719:   amount of old stuff.  When we're done, 'bufbeg' points
266:5777:   to the beginning of the buffer contents, and 'buflim'
267:5834:   points just after the end.  Return count of new stuff. */
268:5895:static int
269:5906:fillbuf(save)
270:5920:     size_t save;
271:5938:{
272:5940:  char *nbuffer, *dp, *sp;
273:5967:  int cc;
274:5977:#if defined(HAVE_WORKING_MMAP)
275:6008:  caddr_t maddr;
276:6025:#endif
277:6032:  static int pagesize;
278:6055:
279:6056:  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
280:6112:    abort();
281:6125:
282:6126:  if (save > bufsalloc)
283:6150:    {
284:6156:      while (save > bufsalloc)
285:6187:	bufsalloc *= 2;
286:6204:      bufalloc = 5 * bufsalloc;
287:6236:      nbuffer = valloc(bufalloc + 1);
288:6274:      if (!nbuffer)
289:6294:	fatal("memory exhausted", 0);
290:6325:    }
291:6331:  else
292:6338:    nbuffer = buffer;
293:6360:
294:6361:  sp = buflim - save;
295:6383:  dp = nbuffer + bufsalloc - save;
296:6418:  bufbeg = dp;
297:6433:  while (save--)
298:6450:    *dp++ = *sp++;
299:6469:
300:6470:  /* We may have allocated a new, larger buffer.  Since
301:6526:     there is no portable vfree(), we just have to forget
302:6584:     about the old one.  Sorry. */
303:6619:  buffer = nbuffer;
304:6639:
305:6640:#if defined(HAVE_WORKING_MMAP)
306:6671:  if (bufmapped && bufoffset % pagesize == 0
307:6716:      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
308:6778:    {
309:6784:      maddr = buffer + bufsalloc;
310:6818:      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
311:6890:		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
312:6941:      if (maddr == (caddr_t) -1)
313:6974:	{
314:6977:	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
315:7031:		  strerror(errno));
316:7053:	  goto tryread;
317:7070:	}
318:7073:#if 0
319:7079:      /* You might thing this (or MADV_WILLNEED) would help,
320:7140:	 but it doesn't, at least not on a Sun running 4.1.
321:7193:	 In fact, it actually slows us down about 30%! */
322:7244:      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
323:7305:#endif
324:7312:      cc = bufalloc - bufsalloc;
325:7345:      bufoffset += cc;
326:7368:    }
327:7374:  else
328:7381:    {
329:7387:    tryread:
330:7400:      /* We come here when we're not going to use mmap() any more.
331:7467:	 Note that we need to synchronize the file offset the
332:7522:	 first time through. */
333:7547:      if (bufmapped)
334:7568:	{
335:7571:	  bufmapped = 0;
336:7589:	  lseek(bufdesc, bufoffset, 0);
337:7622:	}
338:7625:      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
339:7693:    }
340:7699:#else
341:7705:  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
342:7769:#endif
343:7776:  if (cc > 0)
344:7790:    buflim = buffer + bufsalloc + cc;
345:7828:  else
346:7835:    buflim = buffer + bufsalloc;
347:7868:  return cc;
348:7881:}
349:7883:
350:7884:/* Flags controlling the style of output. */
351:7929:static int out_quiet;		/* Suppress all normal output. */
352:7986:static int out_invert;		/* Print nonmatching stuff. */
353:8041:static int out_file;		/* Print filenames. */
354:8086:static int out_line;		/* Print line numbers. */
355:8134:static int out_byte;		/* Print byte offsets. */
356:8182:static int out_before;		/* Lines of leading context. */
357:8238:static int out_after;		/* Lines of trailing context. */
358:8294:
359:8295:/* Internal variables to keep track of byte count, context, etc. */
360:8363:static size_t totalcc;		/* Total character count before bufbeg. */
361:8430:static char *lastnl;		/* Pointer after last newline counted. */
362:8494:static char *lastout;		/* Pointer after last character output;
363:8557:				   NULL if no character has been output
364:8601:				   or if it's conceptually before bufbeg. */
365:8650:static size_t totalnl;		/* Total newline count before lastnl. */
366:8715:static int pending;		/* Pending lines of output. */
367:8767:
368:8768:static void
369:8780:nlscan(lim)
370:8792:     char *lim;
371:8808:{
372:8810:  char *beg;
373:8823:
374:8824:  for (beg = lastnl; beg < lim; ++beg)
375:8863:    if (*beg == '\n')
376:8885:      ++totalnl;
377:8902:  lastnl = beg;
378:8918:}
379:8920:
380:8921:static void
381:8933:prline(beg, lim, sep)
382:8955:     char *beg;
383:8971:     char *lim;
384:8987:     char sep;
385:9002:{
386:9004:  if (out_file)
387:9020:    printf("%s%c", filename, sep);
388:9055:  if (out_line)
389:9071:    {
390:9077:      nlscan(beg);
391:9096:      printf("%d%c", ++totalnl, sep);
392:9134:      lastnl = lim;
393:9154:    }
394:9160:  if (out_byte)
395:9176:    printf("%lu%c", totalcc + (beg - bufbeg), sep);
396:9228:  fwrite(beg, 1, lim - beg, stdout);
397:9265:  if (ferror(stdout))
398:9287:    error("writing output", errno);
399:9323:  lastout = lim;
400:9340:}
401:9342:
402:9343:/* Print pending lines of trailing context prior to LIM. */
403:9403:static void
404:9415:prpending(lim)
405:9430:     char *lim;
406:9446:{
407:9448:  char *nl;
408:9460:
409:9461:  if (!lastout)
410:9477:    lastout = bufbeg;
411:9499:  while (pending > 0 && lastout < lim)
412:9538:    {
413:9544:      --pending;
414:9561:      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
415:9621:	++nl;
416:9628:      else
417:9639:	nl = lim;
418:9650:      prline(lastout, nl, '-');
419:9682:    }
420:9688:}
421:9690:
422:9691:/* Print the lines between BEG and LIM.  Deal with context crap.
423:9756:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
424:9830:static void
425:9842:prtext(beg, lim, nlinesp)
426:9868:     char *beg;
427:9884:     char *lim;
428:9900:     int *nlinesp;
429:9919:{
430:9921:  static int used;		/* avoid printing "--" before any output */
431:9985:  char *bp, *p, *nl;
432:10006:  int i, n;
433:10018:
434:10019:  if (!out_quiet && pending > 0)
435:10052:    prpending(beg);
436:10072:
437:10073:  p = beg;
438:10084:
439:10085:  if (!out_quiet)
440:10103:    {
441:10109:      /* Deal with leading context crap. */
442:10153:
443:10154:      bp = lastout ? lastout : bufbeg;
444:10193:      for (i = 0; i < out_before; ++i)
445:10232:	if (p > bp)
446:10245:	  do
447:10251:	    --p;
448:10261:	  while (p > bp && p[-1] != '\n');
449:10297:
450:10298:      /* We only print the "--" separator if our output is
451:10357:	 discontiguous from the last output in the file. */
452:10410:      if ((out_before || out_after) && used && p != lastout)
453:10471:	puts("--");
454:10484:
455:10485:      while (p < beg)
456:10507:	{
457:10510:	  nl = memchr(p, '\n', beg - p);
458:10544:	  prline(p, nl + 1, '-');
459:10571:	  p = nl + 1;
460:10586:	}
461:10589:    }
462:10595:
463:10596:  if (nlinesp)
464:10611:    {
465:10617:      /* Caller wants a line count. */
466:10656:      for (n = 0; p < lim; ++n)
467:10688:	{
468:10691:	  if ((nl = memchr(p, '\n', lim - p)) != 0)
469:10736:	    ++nl;
470:10747:	  else
471:10755:	    nl = lim;
472:10770:	  if (!out_quiet)
473:10789:	    prline(p, nl, ':');
474:10814:	  p = nl;
475:10825:	}
476:10828:      *nlinesp = n;
477:10848:    }
478:10854:  else
479:10861:    if (!out_quiet)
480:10881:      prline(beg, lim, ':');
481:10910:
482:10911:  pending = out_after;
483:10934:  used = 1;
484:10946:}
485:10948:
486:10949:/* Scan the specified portion of the buffer, matching lines (or
487:11013:   between matching lines if OUT_INVERT is true).  Return a count of
488:11082:   lines printed. */
489:11103:static int
490:11114:grepbuf(beg, lim)
491:11132:     char *beg;
492:11148:     char *lim;
493:11164:{
494:11166:  int nlines, n;
495:11183:  register char *p, *b;
496:11207:  char *endp;
497:11221:
498:11222:  nlines = 0;
499:11236:  p = beg;
500:11247:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
501:11298:    {
502:11304:      /* Avoid matching the empty line at the end of the buffer. */
503:11372:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
504:11436:	break;
505:11444:      if (!out_invert)
506:11467:	{
507:11470:	  prtext(b, endp, (int *) 0);
508:11501:	  nlines += 1;
509:11517:	}
510:11520:      else if (p < b)
511:11542:	{
512:11545:	  prtext(p, b, &n);
513:11566:	  nlines += n;
514:11582:	}
515:11585:      p = endp;
516:11601:    }
517:11607:  if (out_invert && p < lim)
518:11636:    {
519:11642:      prtext(p, lim, &n);
520:11668:      nlines += n;
521:11687:    }
522:11693:  return nlines;
523:11710:}
524:11712:
525:11713:/* Search a given file.  Return a count of lines printed. */
526:11774:static int
527:11785:grep(fd)
528:11794:     int fd;
529:11807:{
530:11809:  int nlines, i;
531:11826:  size_t residue, save;
532:11850:  char *beg, *lim;
533:11869:
534:11870:  reset(fd);
535:11883:
536:11884:  totalcc = 0;
537:11899:  lastout = 0;
538:11914:  totalnl = 0;
539:11929:  pending = 0;
540:11944:
541:11945:  nlines = 0;
542:11959:  residue = 0;
543:11974:  save = 0;
544:11986:
545:11987:  for (;;)
546:11998:    {
547:12004:      if (fillbuf(save) < 0)
548:12033:	{
549:12036:	  error(filename, errno);
550:12063:	  return nlines;
551:12081:	}
552:12084:      lastnl = bufbeg;
553:12107:      if (lastout)
554:12126:	lastout = bufbeg;
555:12145:      if (buflim - bufbeg == save)
556:12180:	break;
557:12188:      beg = bufbeg + save - residue;
558:12225:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
559:12287:	;
560:12290:      residue = buflim - lim;
561:12320:      if (beg < lim)
562:12341:	{
563:12344:	  nlines += grepbuf(beg, lim);
564:12376:	  if (pending)
565:12392:	    prpending(lim);
566:12413:	}
567:12416:      i = 0;
568:12429:      beg = lim;
569:12446:      while (i < out_before && beg > bufbeg && beg != lastout)
570:12509:	{
571:12512:	  ++i;
572:12520:	  do
573:12526:	    --beg;
574:12538:	  while (beg > bufbeg && beg[-1] != '\n');
575:12582:	}
576:12585:      if (beg != lastout)
577:12611:	lastout = 0;
578:12625:      save = residue + lim - beg;
579:12659:      totalcc += buflim - bufbeg - save;
580:12700:      if (out_line)
581:12720:	nlscan(beg);
582:12734:    }
583:12740:  if (residue)
584:12755:    {
585:12761:      nlines += grepbuf(bufbeg + save - residue, buflim);
586:12819:      if (pending)
587:12838:	prpending(buflim);
588:12858:    }
589:12864:  return nlines;
590:12881:}
591:12883:
592:12884:static char version[] = "GNU grep version 2.0";
593:12932:
594:12933:#define USAGE \
595:12949:  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
596:13030:
597:13031:static void
598:13043:usage()
599:13051:{
600:13053:  fprintf(stderr, USAGE, prog);
601:13085:  exit(2);
602:13096:}
603:13098:
604:13099:/* Go through the matchers vector and look for the specified matcher.
605:13169:   If we find it, install it in compile and execute, and return 1.  */
606:13240:int
607:13244:setmatcher(name)
608:13261:     char *name;
609:13278:{
610:13280:  int i;
611:13289:
612:13290:  for (i = 0; matchers[i].name; ++i)
613:13327:    if (strcmp(name, matchers[i].name) == 0)
614:13372:      {
615:13380:	compile = matchers[i].compile;
616:13412:	execute = matchers[i].execute;
617:13444:	return 1;
618:13455:      }
619:13463:  return 0;
620:13475:}  
621:13479:
622:13480:int
623:13484:main(argc, argv)
624:13501:     int argc;
625:13516:     char *argv[];
626:13535:{
627:13537:  char *keys;
628:13551:  size_t keycc, oldcc, keyalloc;
629:13584:  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
630:13658:  int opt, cc, desc, count, status;
631:13694:  FILE *fp;
632:13706:  extern char *optarg;
633:13729:  extern int optind;
634:13750:
635:13751:  prog = argv[0];
636:13769:  if (prog && strrchr(prog, '/'))
637:13803:    prog = strrchr(prog, '/') + 1;
638:13838:
639:13839:  keys = NULL;
640:13854:  keycc = 0;
641:13867:  keyfound = 0;
642:13883:  count_matches = 0;
643:13904:  no_filenames = 0;
644:13924:  list_files = 0;
645:13942:  suppress_errors = 0;
646:13965:  matcher = NULL;
647:13983:
648:13984:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
649:14062:	 != EOF)
650:14072:    switch (opt)
651:14089:      {
652:14097:      case '0':
653:14113:      case '1':
654:14129:      case '2':
655:14145:      case '3':
656:14161:      case '4':
657:14177:      case '5':
658:14193:      case '6':
659:14209:      case '7':
660:14225:      case '8':
661:14241:      case '9':
662:14257:	out_before = 10 * out_before + opt - '0';
663:14300:	out_after = 10 * out_after + opt - '0';
664:14341:	break;
665:14349:      case 'A':
666:14365:	out_after = atoi(optarg);
667:14392:	if (out_after < 0)
668:14412:	  usage();
669:14424:	break;
670:14432:      case 'B':
671:14448:	out_before = atoi(optarg);
672:14476:	if (out_before < 0)
673:14497:	  usage();
674:14509:	break;
675:14517:      case 'C':
676:14533:	out_before = out_after = 2;
677:14562:	break;
678:14570:      case 'E':
679:14586:	if (matcher && strcmp(matcher, "egrep") != 0)
680:14633:	  fatal("you may specify only one of -E, -F, or -G", 0);
681:14691:	matcher = "posix-egrep";
682:14717:	break;
683:14725:      case 'F':
684:14741:	if (matcher && strcmp(matcher, "fgrep") != 0)
685:14788:	  fatal("you may specify only one of -E, -F, or -G", 0);;
686:14847:	matcher = "fgrep";
687:14867:	break;
688:14875:      case 'G':
689:14891:	if (matcher && strcmp(matcher, "grep") != 0)
690:14937:	  fatal("you may specify only one of -E, -F, or -G", 0);
691:14995:	matcher = "grep";
692:15014:	break;
693:15022:      case 'V':
694:15038:	fprintf(stderr, "%s\n", version);
695:15073:	break;
696:15081:      case 'X':
697:15097:	if (matcher)
698:15111:	  fatal("matcher already specified", 0);
699:15153:	matcher = optarg;
700:15172:	break;
701:15180:      case 'b':
702:15196:	out_byte = 1;
703:15211:	break;
704:15219:      case 'c':
705:15235:	out_quiet = 1;
706:15251:	count_matches = 1;
707:15271:	break;
708:15279:      case 'e':
709:15295:	cc = strlen(optarg);
710:15317:	keys = xrealloc(keys, keycc + cc + 1);
711:15357:	if (keyfound)
712:15372:	  keys[keycc++] = '\n';
713:15397:	strcpy(&keys[keycc], optarg);
714:15428:	keycc += cc;
715:15442:	keyfound = 1;
716:15457:	break;
717:15465:      case 'f':
718:15481:	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
719:15542:	if (!fp)
720:15552:	  fatal(optarg, errno);
721:15577:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
722:15631:	  ;
723:15636:	keys = xrealloc(keys, keyalloc);
724:15670:	oldcc = keycc;
725:15686:	if (keyfound)
726:15701:	  keys[keycc++] = '\n';
727:15726:	while (!feof(fp)
728:15744:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
729:15812:	  {
730:15817:	    keycc += cc;
731:15835:	    if (keycc == keyalloc)
732:15863:	      keys = xrealloc(keys, keyalloc *= 2);
733:15908:	  }
734:15913:	if (fp != stdin)
735:15931:	  fclose(fp);
736:15946:	/* Nuke the final newline to avoid matching a null string. */
737:16009:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
738:16060:	  --keycc;
739:16072:	keyfound = 1;
740:16087:	break;
741:16095:      case 'h':
742:16111:	no_filenames = 1;
743:16130:	break;
744:16138:      case 'i':
745:16154:      case 'y':			/* For old-timers . . . */
746:16199:	match_icase = 1;
747:16217:	break;
748:16225:      case 'L':
749:16241:	/* Like -l, except list files that don't contain matches.
750:16300:	   Inspired by the same option in Hume's gre. */
751:16350:	out_quiet = 1;
752:16366:	list_files = -1;
753:16384:	break;
754:16392:      case 'l':
755:16408:	out_quiet = 1;
756:16424:	list_files = 1;
757:16441:	break;
758:16449:      case 'n':
759:16465:	out_line = 1;
760:16480:	break;
761:16488:      case 'q':
762:16504:	out_quiet = 1;
763:16520:	break;
764:16528:      case 's':
765:16544:	suppress_errors = 1;
766:16566:	break;
767:16574:      case 'v':
768:16590:	out_invert = 1;
769:16607:	break;
770:16615:      case 'w':
771:16631:	match_words = 1;
772:16649:	break;
773:16657:      case 'x':
774:16673:	match_lines = 1;
775:16691:	break;
776:16699:      default:
777:16714:	usage();
778:16724:	break;
779:16732:      }
780:16740:
781:16741:  if (!keyfound)
782:16758:    if (optind < argc)
783:16781:      {
784:16789:	keys = argv[optind++];
785:16813:	keycc = strlen(keys);
786:16836:      }
787:16844:    else
788:16853:      usage();
789:16868:
790:16869:  if (!matcher)
791:16885:    matcher = prog;
792:16905:
793:16906:  if (!setmatcher(matcher) && !setmatcher("default"))
794:16960:    abort();
795:16973:
796:16974:  (*compile)(keys, keycc);
797:17001:
798:17002:  if (argc - optind > 1 && !no_filenames)
799:17044:    out_file = 1;
800:17062:
801:17063:  status = 1;
802:17077:
803:17078:  if (optind < argc)
804:17099:    while (optind < argc)
805:17125:      {
806:17133:	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
807:17203:	if (desc < 0)
808:17218:	  {
809:17223:	    if (!suppress_errors)
810:17250:	      error(argv[optind], errno);
811:17285:	  }
812:17290:	else
813:17296:	  {
814:17301:	    filename = desc == 0 ? "(standard input)" : argv[optind];
815:17364:	    count = grep(desc);
816:17389:	    if (count_matches)
817:17413:	      {
818:17422:		if (out_file)
819:17438:		  printf("%s:", filename);
820:17467:		printf("%d\n", count);
821:17492:	      }
822:17501:	    if (count)
823:17517:	      {
824:17526:		status = 0;
825:17540:		if (list_files == 1)
826:17563:		  printf("%s\n", filename);
827:17593:	      }
828:17602:	    else if (list_files == -1)
829:17634:	      printf("%s\n", filename);
830:17667:	  }
831:17672:	if (desc != 0)
832:17688:	  close(desc);
833:17704:	++optind;
834:17715:      }
835:17723:  else
836:17730:    {
837:17736:      filename = "(standard input)";
838:17773:      count = grep(0);
839:17796:      if (count_matches)
840:17821:	printf("%d\n", count);
841:17845:      if (count)
842:17862:	{
843:17865:	  status = 0;
844:17880:	  if (list_files == 1)
845:17904:	    printf("(standard input)\n");
846:17939:	}
847:17942:      else if (list_files == -1)
848:17975:	printf("(standard input)\n");
849:18006:    }
850:18012:
851:18013:  exit(errseen ? 2 : status);
852:18043:}
853:18045:/* Getopt for GNU.
854:18064:   NOTE: getopt is now part of the C library, so if you don't know what
855:18136:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
856:18210:   before changing it!
857:18233:
858:18234:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
859:18282:   	Free Software Foundation, Inc.
860:18317:
861:18318:   This program is free software; you can redistribute it and/or modify it
862:18393:   under the terms of the GNU General Public License as published by the
863:18466:   Free Software Foundation; either version 2, or (at your option) any
864:18537:   later version.
865:18555:
866:18556:   This program is distributed in the hope that it will be useful,
867:18623:   but WITHOUT ANY WARRANTY; without even the implied warranty of
868:18689:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
869:18754:   GNU General Public License for more details.
870:18802:
871:18803:   You should have received a copy of the GNU General Public License
872:18872:   along with this program; if not, write to the Free Software
873:18935:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
874:18994:
875:18996:/* NOTE!!!  AIX requires this to be the first thing in the file.
876:19061:   Do not put ANYTHING before it!  */
877:19099:#if !defined (__GNUC__) && defined (_AIX)
878:19141: #pragma alloca
879:19157:#endif
880:19164:
881:19165:#ifdef HAVE_CONFIG_H
883:19206:#define flag_config 1
884:19228:#endif
885:19235:
886:19236:#ifdef __GNUC__
887:19252:#define alloca __builtin_alloca
888:19284:#else /* not __GNUC__ */
889:19309:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
891:19454:#define flag_alloca 1
892:19476:#else
893:19482:#ifndef _AIX
894:19495:char *alloca ();
895:19512:#endif
896:19519:#endif /* alloca.h */
897:19541:#endif /* not __GNUC__ */
898:19567:
899:19568:#if !__STDC__ && !defined(const) && IN_GCC
900:19611:#define const
901:19625:#endif
902:19632:
903:19633:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
904:19710:#ifndef _NO_PROTO
905:19728:#define _NO_PROTO
906:19746:#endif
907:19753:
909:19778:
910:19779:/* Comment out all this code if we are using the GNU C Library, and are not
911:19855:   actually compiling the library itself.  This code is part of the GNU C
913:20003:   and linking in this code is a waste when using the GNU C library
914:20071:   (especially if it is a shared library).  Rather than having every GNU
915:20144:   program understand `configure --with-gnu-libc' and omit the object files,
916:20221:   it is simpler to just do this in the source for each such file.  */
917:20292:
918:20293:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
919:20343:
920:20344:
922:20395:   to get __GNU_LIBRARY__ defined.  */
923:20434:#ifdef	__GNU_LIBRARY__
924:20457:#undef	alloca
926:20542:   contain conflicting prototypes for getopt.  */
927:20592:#if flag_stdlib==0   
929:20634:#define flag_stdlib 1
930:20656:#endif
931:20663:#else	/* Not GNU C library.  */
932:20695:#define	__alloca	alloca
933:20719:#endif	/* GNU C library.  */
934:20748:
935:20749:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
936:20817:   long-named option.  Because this is not POSIX.2 compliant, it is
937:20885:   being phased out.  */
938:20910:/* #define GETOPT_COMPAT */
939:20938:
940:20939:/* This version of `getopt' appears to the caller like standard Unix `getopt'
941:21017:   but it behaves differently for the user, since it allows the user
942:21086:   to intersperse the options with the other arguments.
943:21142:
944:21143:   As `getopt' works, it permutes the elements of ARGV so that,
945:21207:   when it is done, all the options precede everything else.  Thus
946:21274:   all application programs are extended to handle flexible argument order.
947:21350:
948:21351:   Setting the environment variable POSIXLY_CORRECT disables permutation.
949:21425:   Then the behavior is completely standard.
950:21470:
951:21471:   GNU application programs can use a third alternative mode in which
952:21541:   they can distinguish the relative order of options and other arguments.  */
953:21620:
955:21641:
956:21642:/* For communication from `getopt' to the caller.
957:21692:   When `getopt' finds an option that takes an argument,
958:21749:   the argument value is returned here.
959:21789:   Also, when `ordering' is RETURN_IN_ORDER,
960:21834:   each non-option ARGV-element is returned here.  */
961:21888:
962:21889:char *optarg = 0;
963:21907:
964:21908:/* Index in ARGV of the next element to be scanned.
965:21960:   This is used for communication to and from the caller
966:22017:   and for communication between successive calls to `getopt'.
967:22080:
968:22081:   On entry to `getopt', zero means this is the first call; initialize.
969:22153:
970:22154:   When `getopt' returns EOF, this is the index of the first of the
971:22222:   non-option elements that the caller should itself scan.
972:22281:
973:22282:   Otherwise, `optind' communicates from one call to the next
974:22344:   how much of ARGV has been scanned so far.  */
975:22393:
976:22394:/* XXX 1003.2 says this must be 1 before any call.  */
977:22449:int optind = 0;
978:22465:
979:22466:/* The next char to be scanned in the option-element
980:22519:   in which the last option character we returned was found.
981:22580:   This allows us to pick up the scan where we left off.
982:22637:
983:22638:   If this is zero, or a null string, it means resume the scan
984:22701:   by advancing to the next ARGV-element.  */
985:22747:
986:22748:static char *nextchar;
987:22771:
988:22772:/* Callers store zero here to inhibit the error message
989:22828:   for unrecognized options.  */
990:22861:
991:22862:int opterr = 1;
992:22878:
993:22879:/* Set to an option character which was unrecognized.
994:22933:   This must be initialized on some systems to avoid linking in the
995:23001:   system's own getopt implementation.  */
996:23044:
997:23045:int optopt = '?';
998:23063:
999:23064:/* Describe how to deal with options that follow non-option ARGV-elements.
1000:23139:
1001:23140:   If the caller did not specify anything,
1002:23183:   the default is REQUIRE_ORDER if the environment variable
1003:23243:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
1004:23293:
1005:23294:   REQUIRE_ORDER means don't recognize them as options;
1006:23350:   stop option processing when the first non-option is seen.
1007:23411:   This is what Unix does.
1008:23438:   This mode of operation is selected by either setting the environment
1009:23510:   variable POSIXLY_CORRECT, or using `+' as the first character
1010:23575:   of the list of option characters.
1011:23612:
1012:23613:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
1013:23685:   so that eventually all the non-options are at the end.  This allows options
1014:23764:   to be given in any order, even with programs that were not written to
1015:23837:   expect this.
1016:23853:
1017:23854:   RETURN_IN_ORDER is an option available to programs that were written
1018:23926:   to expect options and other ARGV-elements in any order and that care about
1019:24004:   the ordering of the two.  We describe each non-option ARGV-element
1020:24074:   as if it were the argument of an option with character code 1.
1021:24140:   Using `-' as the first character of the list of option characters
1022:24209:   selects this mode of operation.
1023:24244:
1024:24245:   The special argument `--' forces an end of option-scanning regardless
1025:24318:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
1026:24387:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
1027:24455:
1028:24456:static enum
1029:24468:{
1030:24470:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
1031:24512:} ordering;
1032:24524:
1033:24526:#ifdef	__GNU_LIBRARY__
1034:24549:/* We want to avoid inclusion of string.h with non-GNU libraries
1035:24614:   because there are many ways it can cause trouble.
1036:24667:   On some systems, it contains special magic macros that don't work
1037:24736:   in GCC.  */
1038:24751:#if flag_string==0   
1040:24793:#define flag_string 1
1041:24815:#endif
1042:24822:#define	my_index	strchr
1043:24846:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
1044:24903:#else
1045:24909:
1046:24910:/* Avoid depending on library functions or files
1047:24959:   whose names are inconsistent.  */
1048:24996:
1049:24997:char *getenv ();
1050:25014:
1051:25015:static char *
1052:25029:my_index (str, chr)
1053:25049:     const char *str;
1054:25071:     int chr;
1055:25085:{
1056:25087:  while (*str)
1057:25102:    {
1058:25108:      if (*str == chr)
1059:25131:	return (char *) str;
1060:25153:      str++;
1061:25166:    }
1062:25172:  return 0;
1063:25184:}
1064:25186:
1065:25187:static void
1066:25199:my_bcopy (from, to, size)
1067:25225:     const char *from;
1068:25248:     char *to;
1069:25263:     int size;
1070:25278:{
1071:25280:  int i;
1072:25289:  for (i = 0; i < size; i++)
1073:25318:    to[i] = from[i];
1074:25339:}
1075:25341:#endif				/* GNU C library.  */
1076:25373:
1077:25375:/* Handle permutation of arguments.  */
1078:25415:
1079:25416:/* Describe the part of ARGV that contains non-options that have
1080:25481:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
1081:25557:   `last_nonopt' is the index after the last of them.  */
1082:25615:
1083:25616:static int first_nonopt;
1084:25641:static int last_nonopt;
1085:25665:
1086:25666:/* Exchange two adjacent subsequences of ARGV.
1087:25713:   One subsequence is elements [first_nonopt,last_nonopt)
1088:25771:   which contains all the non-options that have been skipped so far.
1089:25840:   The other is elements [last_nonopt,optind), which contains all
1090:25906:   the options processed since those non-options were skipped.
1091:25969:
1092:25970:   `first_nonopt' and `last_nonopt' are relocated so that they describe
1093:26042:   the new indices of the non-options in ARGV after they are moved.  */
1094:26114:
1095:26115:static void
1096:26127:exchange (argv)
1097:26143:     char **argv;
1098:26161:{
1099:26163:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
1100:26232:  char **temp = (char **) __alloca (nonopts_size);
1101:26283:
1102:26284:  /* Interchange the two blocks of data in ARGV.  */
1103:26337:
1104:26338:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
1105:26410:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
1106:26481:	    (optind - last_nonopt) * sizeof (char *));
1107:26529:  my_bcopy ((char *) temp,
1108:26556:	    (char *) &argv[first_nonopt + optind - last_nonopt],
1109:26614:	    nonopts_size);
1110:26634:
1111:26635:  /* Update records for the slots the non-options now occupy.  */
1112:26701:
1113:26702:  first_nonopt += (optind - last_nonopt);
1114:26744:  last_nonopt = optind;
1115:26768:}
1116:26770:
1117:26772:/* Scan elements of ARGV (whose length is ARGC) for option characters
1118:26842:   given in OPTSTRING.
1119:26865:
1120:26866:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
1121:26940:   then it is an option element.  The characters of this element
1122:27005:   (aside from the initial '-') are option characters.  If `getopt'
1123:27073:   is called repeatedly, it returns successively each of the option characters
1124:27152:   from each of the option elements.
1125:27189:
1126:27190:   If `getopt' finds another option character, it returns that character,
1127:27264:   updating `optind' and `nextchar' so that the next call to `getopt' can
1128:27338:   resume the scan with the following option character or ARGV-element.
1129:27410:
1130:27411:   If there are no more option characters, `getopt' returns `EOF'.
1131:27478:   Then `optind' is the index in ARGV of the first ARGV-element
1132:27542:   that is not an option.  (The ARGV-elements have been permuted
1133:27607:   so that those that are not options now come last.)
1134:27661:
1135:27662:   OPTSTRING is a string containing the legitimate option characters.
1136:27732:   If an option character is seen that is not listed in OPTSTRING,
1137:27799:   return '?' after printing an error message.  If you set `opterr' to
1138:27870:   zero, the error message is suppressed but we still return '?'.
1139:27936:
1140:27937:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
1141:28015:   so the following text in the same ARGV-element, or the text of the following
1142:28095:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
1143:28169:   wants an optional arg; if there is text in the current ARGV-element,
1144:28241:   it is returned in `optarg', otherwise `optarg' is set to zero.
1145:28307:
1146:28308:   If OPTSTRING starts with `-' or `+', it requests different methods of
1147:28381:   handling the non-option ARGV-elements.
1148:28423:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
1149:28491:
1150:28492:   Long-named options begin with `--' instead of `-'.
1151:28546:   Their names may be abbreviated as long as the abbreviation is unique
1152:28618:   or is an exact match for some defined option.  If they have an
1153:28684:   argument, it follows the option name in the same ARGV-element, separated
1154:28760:   from the option name by a `=', or else the in next ARGV-element.
1155:28828:   When `getopt' finds a long-named option, it returns 0 if that option's
1156:28902:   `flag' field is nonzero, the value of the option's `val' field
1157:28968:   if the `flag' field is zero.
1158:29000:
1159:29001:   The elements of ARGV aren't really const, because we permute them.
1160:29071:   But we pretend they're const in the prototype to be compatible
1161:29137:   with other systems.
1162:29160:
1163:29161:   LONGOPTS is a vector of `struct option' terminated by an
1164:29221:   element containing a name which is zero.
1165:29265:
1166:29266:   LONGIND returns the index in LONGOPT of the long-named option found.
1167:29338:   It is only valid when a long-named option has been found by the most
1168:29410:   recent call.
1169:29426:
1170:29427:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
1171:29489:   long-named options.  */
1172:29516:
1173:29517:int
1174:29521:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
1175:29592:     int argc;
1176:29607:     char *const *argv;
1177:29631:     const char *optstring;
1178:29659:     const struct option *longopts;
1179:29695:     int *longind;
1180:29714:     int long_only;
1181:29734:{
1182:29736:  int option_index;
1183:29756:
1184:29757:  optarg = 0;
1185:29771:
1186:29772:  /* Initialize the internal data when the first call is made.
1187:29835:     Start processing options with ARGV-element 1 (since ARGV-element 0
1188:29907:     is the program name); the sequence of previously skipped
1189:29969:     non-option ARGV-elements is empty.  */
1190:30013:
1191:30014:  if (optind == 0)
1192:30033:    {
1193:30039:      first_nonopt = last_nonopt = optind = 1;
1194:30086:
1195:30087:      nextchar = NULL;
1196:30110:
1197:30111:      /* Determine how to handle the ordering of options and nonoptions.  */
1198:30188:
1199:30189:      if (optstring[0] == '-')
1200:30220:	{
1201:30223:	  ordering = RETURN_IN_ORDER;
1202:30254:	  ++optstring;
1203:30270:	}
1204:30273:      else if (optstring[0] == '+')
1205:30309:	{
1206:30312:	  ordering = REQUIRE_ORDER;
1207:30341:	  ++optstring;
1208:30357:	}
1209:30360:      else if (getenv ("POSIXLY_CORRECT") != NULL)
1210:30411:	ordering = REQUIRE_ORDER;
1211:30438:      else
1212:30449:	ordering = PERMUTE;
1213:30470:    }
1214:30476:
1215:30477:  if (nextchar == NULL || *nextchar == '\0')
1216:30522:    {
1217:30528:      if (ordering == PERMUTE)
1218:30559:	{
1219:30562:	  /* If we have just processed some options following some non-options,
1220:30635:	     exchange them so that the options come first.  */
1221:30691:
1222:30692:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
1223:30753:	    exchange ((char **) argv);
1224:30785:	  else if (last_nonopt != optind)
1225:30820:	    first_nonopt = optind;
1226:30848:
1227:30849:	  /* Now skip any additional non-options
1228:30891:	     and extend the range of non-options previously skipped.  */
1229:30957:
1230:30958:	  while (optind < argc
1231:30982:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
1232:31040:#ifdef GETOPT_COMPAT
1233:31061:		 && (longopts == NULL
1234:31085:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
1235:31146:#endif				/* GETOPT_COMPAT */
1236:31176:		 )
1237:31181:	    optind++;
1238:31196:	  last_nonopt = optind;
1239:31221:	}
1240:31224:
1241:31225:      /* Special ARGV-element `--' means premature end of options.
1242:31292:	 Skip it like a null option,
1243:31322:	 then exchange with previous non-options as if it were an option,
1244:31389:	 then skip everything else like a non-option.  */
1245:31440:
1246:31441:      if (optind != argc && !strcmp (argv[optind], "--"))
1247:31499:	{
1248:31502:	  optind++;
1249:31515:
1250:31516:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
1251:31577:	    exchange ((char **) argv);
1252:31609:	  else if (first_nonopt == last_nonopt)
1253:31650:	    first_nonopt = optind;
1254:31678:	  last_nonopt = argc;
1255:31701:
1256:31702:	  optind = argc;
1257:31720:	}
1258:31723:
1259:31724:      /* If we have done all the ARGV-elements, stop the scan
1260:31786:	 and back over any non-options that we skipped and permuted.  */
1261:31852:
1262:31853:      if (optind == argc)
1263:31879:	{
1264:31882:	  /* Set the next-arg-index to point at the non-options
1265:31939:	     that we previously skipped, so the caller will digest them.  */
1266:32009:	  if (first_nonopt != last_nonopt)
1267:32045:	    optind = first_nonopt;
1268:32073:	  return EOF;
1269:32088:	}
1270:32091:
1271:32092:      /* If we have come to a non-option and did not permute it,
1272:32157:	 either stop the scan or describe it to the caller and pass it by.  */
1273:32229:
1274:32230:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
1275:32292:#ifdef GETOPT_COMPAT
1276:32313:	  && (longopts == NULL
1277:32337:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
1278:32398:#endif				/* GETOPT_COMPAT */
1279:32428:	  )
1280:32433:	{
1281:32436:	  if (ordering == REQUIRE_ORDER)
1282:32470:	    return EOF;
1283:32487:	  optarg = argv[optind++];
1284:32515:	  return 1;
1285:32528:	}
1286:32531:
1287:32532:      /* We have found another option-ARGV-element.
1288:32584:	 Start decoding its characters.  */
1289:32621:
1290:32622:      nextchar = (argv[optind] + 1
1291:32657:		  + (longopts != NULL && argv[optind][1] == '-'));
1292:32710:    }
1293:32716:
1294:32717:  if (longopts != NULL
1295:32740:      && ((argv[optind][0] == '-'
1296:32774:	   && (argv[optind][1] == '-' || long_only))
1297:32820:#ifdef GETOPT_COMPAT
1298:32841:	  || argv[optind][0] == '+'
1299:32870:#endif				/* GETOPT_COMPAT */
1300:32900:	  ))
1301:32906:    {
1302:32912:      const struct option *p;
1303:32942:      char *s = nextchar;
1304:32968:      int exact = 0;
1305:32989:      int ambig = 0;
1306:33010:      const struct option *pfound = NULL;
1307:33052:      int indfound;
1308:33072:
1309:33073:      while (*s && *s != '=')
1310:33103:	s++;
1311:33109:
1312:33110:      /* Test all options for either exact match or abbreviated matches.  */
1313:33187:      for (p = longopts, option_index = 0; p->name;
1314:33239:	   p++, option_index++)
1315:33264:	if (!strncmp (p->name, nextchar, s - nextchar))
1316:33313:	  {
1317:33318:	    if (s - nextchar == strlen (p->name))
1318:33361:	      {
1319:33370:		/* Exact match found.  */
1320:33398:		pfound = p;
1321:33412:		indfound = option_index;
1322:33439:		exact = 1;
1323:33452:		break;
1324:33461:	      }
1325:33470:	    else if (pfound == NULL)
1326:33500:	      {
1327:33509:		/* First nonexact match found.  */
1328:33546:		pfound = p;
1329:33560:		indfound = option_index;
1330:33587:	      }
1331:33596:	    else
1332:33606:	      /* Second nonexact match found.  */
1333:33649:	      ambig = 1;
1334:33667:	  }
1335:33672:
1336:33673:      if (ambig && !exact)
1337:33700:	{
1338:33703:	  if (opterr)
1339:33718:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
1340:33774:		     argv[0], argv[optind]);
1341:33805:	  nextchar += strlen (nextchar);
1342:33839:	  optind++;
1343:33852:	  return '?';
1344:33867:	}
1345:33870:
1346:33871:      if (pfound != NULL)
1347:33897:	{
1348:33900:	  option_index = indfound;
1349:33928:	  optind++;
1350:33941:	  if (*s)
1351:33952:	    {
1352:33959:	      /* Don't test has_arg with >, because some C compilers don't
1353:34027:		 allow it to be used on enums.  */
1354:34064:	      if (pfound->has_arg)
1355:34092:		optarg = s + 1;
1356:34110:	      else
1357:34122:		{
1358:34126:		  if (opterr)
1359:34142:		    {
1360:34150:		      if (argv[optind - 1][1] == '-')
1361:34190:			/* --option */
1362:34208:			fprintf (stderr,
1363:34228:				 "%s: option `--%s' doesn't allow an argument\n",
1364:34282:				 argv[0], pfound->name);
1365:34311:		      else
1366:34324:			/* +option or -option */
1367:34352:			fprintf (stderr,
1368:34372:			     "%s: option `%c%s' doesn't allow an argument\n",
1369:34429:			     argv[0], argv[optind - 1][0], pfound->name);
1370:34482:		    }
1371:34490:		  nextchar += strlen (nextchar);
1372:34525:		  return '?';
1373:34541:		}
1374:34545:	    }
1375:34552:	  else if (pfound->has_arg == 1)
1376:34586:	    {
1377:34593:	      if (optind < argc)
1378:34619:		optarg = argv[optind++];
1379:34646:	      else
1380:34658:		{
1381:34662:		  if (opterr)
1382:34678:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
1383:34743:			     argv[0], argv[optind - 1]);
1384:34779:		  nextchar += strlen (nextchar);
1385:34814:		  return optstring[0] == ':' ? ':' : '?';
1386:34858:		}
1387:34862:	    }
1388:34869:	  nextchar += strlen (nextchar);
1389:34903:	  if (longind != NULL)
1390:34927:	    *longind = option_index;
1391:34957:	  if (pfound->flag)
1392:34978:	    {
1393:34985:	      *(pfound->flag) = pfound->val;
1394:35023:	      return 0;
1395:35040:	    }
1396:35047:	  return pfound->val;
1397:35070:	}
1398:35073:      /* Can't find it as a long option.  If this is not getopt_long_only,
1399:35148:	 or the option starts with '--' or is not a valid short
1400:35205:	 option, then it's an error.
1401:35235:	 Otherwise interpret it as a short option.  */
1402:35283:      if (!long_only || argv[optind][1] == '-'
1403:35330:#ifdef GETOPT_COMPAT
1404:35351:	  || argv[optind][0] == '+'
1405:35380:#endif				/* GETOPT_COMPAT */
1406:35410:	  || my_index (optstring, *nextchar) == NULL)
1407:35457:	{
1408:35460:	  if (opterr)
1409:35475:	    {
1410:35482:	      if (argv[optind][1] == '-')
1411:35517:		/* --option */
1412:35534:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
1413:35589:			 argv[0], nextchar);
1414:35613:	      else
1415:35625:		/* +option or -option */
1416:35652:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
1417:35707:			 argv[0], argv[optind][0], nextchar);
1418:35748:	    }
1419:35755:	  nextchar = (char *) "";
1420:35782:	  optind++;
1421:35795:	  return '?';
1422:35810:	}
1423:35813:    }
1424:35819:
1425:35820:  /* Look at and handle the next option-character.  */
1426:35875:
1427:35876:  {
1428:35880:    char c = *nextchar++;
1429:35906:    char *temp = my_index (optstring, c);
1430:35948:
1431:35949:    /* Increment `optind' when we start to process its last character.  */
1432:36024:    if (*nextchar == '\0')
1433:36051:      ++optind;
1434:36067:
1435:36068:    if (temp == NULL || c == ':')
1436:36102:      {
1437:36110:	if (opterr)
1438:36123:	  {
1439:36128:#if 0
1440:36134:	    if (c < 040 || c >= 0177)
1441:36165:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
1442:36238:		       argv[0], c);
1443:36260:	    else
1444:36270:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
1445:36342:#else
1446:36348:	    /* 1003.2 specifies the format of this message.  */
1447:36405:	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
1448:36470:#endif
1449:36477:	  }
1450:36482:	optopt = c;
1451:36495:	return '?';
1452:36508:      }
1453:36516:    if (temp[1] == ':')
1454:36540:      {
1455:36548:	if (temp[2] == ':')
1456:36569:	  {
1457:36574:	    /* This is an option that accepts an argument optionally.  */
1458:36641:	    if (*nextchar != '\0')
1459:36669:	      {
1460:36678:		optarg = nextchar;
1461:36699:		optind++;
1462:36711:	      }
1463:36720:	    else
1464:36730:	      optarg = 0;
1465:36749:	    nextchar = NULL;
1466:36771:	  }
1467:36776:	else
1468:36782:	  {
1469:36787:	    /* This is an option that requires an argument.  */
1470:36844:	    if (*nextchar != '\0')
1471:36872:	      {
1472:36881:		optarg = nextchar;
1473:36902:		/* If we end this ARGV-element by taking the rest as an arg,
1474:36965:		   we must advance to the next element now.  */
1475:37015:		optind++;
1476:37027:	      }
1477:37036:	    else if (optind == argc)
1478:37066:	      {
1479:37075:		if (opterr)
1480:37089:		  {
1481:37095:#if 0
1482:37101:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
1483:37167:			     argv[0], c);
1484:37188:#else
1485:37194:		    /* 1003.2 specifies the format of this message.  */
1486:37252:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
1487:37318:			     argv[0], c);
1488:37339:#endif
1489:37346:		  }
1490:37352:		optopt = c;
1491:37366:		if (optstring[0] == ':')
1492:37393:		  c = ':';
1493:37406:		else
1494:37413:		  c = '?';
1495:37426:	      }
1496:37435:	    else
1497:37445:	      /* We already incremented `optind' once;
1498:37493:		 increment it again when taking next ARGV-elt as argument.  */
1499:37558:	      optarg = argv[optind++];
1500:37590:	    nextchar = NULL;
1501:37612:	  }
1502:37617:      }
1503:37625:    return c;
1504:37639:  }
1505:37643:}
1506:37645:
1507:37646:int
1508:37650:getopt (argc, argv, optstring)
1509:37681:     int argc;
1510:37696:     char *const *argv;
1511:37720:     const char *optstring;
1512:37748:{
1513:37750:  return _getopt_internal (argc, argv, optstring,
1514:37800:			   (const struct option *) 0,
1515:37833:			   (int *) 0,
1516:37850:			   0);
1517:37860:}
1518:37862:
1519:37863:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
1520:37907:
1521:37909:#ifdef TEST
1522:37921:
1523:37922:/* Compile with -DTEST to make an executable for use in testing
1524:37986:   the above definition of `getopt'.  */
1525:38027:
1526:38028:int
1527:38032:main (argc, argv)
1528:38050:     int argc;
1529:38065:     char **argv;
1530:38083:{
1531:38085:  int c;
1532:38094:  int digit_optind = 0;
1533:38118:
1534:38119:  while (1)
1535:38131:    {
1536:38137:      int this_option_optind = optind ? optind : 1;
1537:38189:
1538:38190:      c = getopt (argc, argv, "abc:d:0123456789");
1539:38241:      if (c == EOF)
1540:38261:	break;
1541:38269:
1542:38270:      switch (c)
1543:38287:	{
1544:38290:	case '0':
1545:38301:	case '1':
1546:38312:	case '2':
1547:38323:	case '3':
1548:38334:	case '4':
1549:38345:	case '5':
1550:38356:	case '6':
1551:38367:	case '7':
1552:38378:	case '8':
1553:38389:	case '9':
1554:38400:	  if (digit_optind != 0 && digit_optind != this_option_optind)
1555:38464:	    printf ("digits occur in two different argv-elements.\n");
1556:38528:	  digit_optind = this_option_optind;
1557:38566:	  printf ("option %c\n", c);
1558:38596:	  break;
1559:38606:
1560:38607:	case 'a':
1561:38618:	  printf ("option a\n");
1562:38644:	  break;
1563:38654:
1564:38655:	case 'b':
1565:38666:	  printf ("option b\n");
1566:38692:	  break;
1567:38702:
1568:38703:	case 'c':
1569:38714:	  printf ("option c with value `%s'\n", optarg);
1570:38764:	  break;
1571:38774:
1572:38775:	case '?':
1573:38786:	  break;
1574:38796:
1575:38797:	default:
1576:38807:	  printf ("?? getopt returned character code 0%o ??\n", c);
1577:38868:	}
1578:38871:    }
1579:38877:
1580:38878:  if (optind < argc)
1581:38899:    {
1582:38905:      printf ("non-option ARGV-elements: ");
1583:38950:      while (optind < argc)
1584:38978:	printf ("%s ", argv[optind++]);
1585:39011:      printf ("\n");
1586:39032:    }
1587:39038:
1588:39039:  exit (0);
1589:39051:}
1590:39053:
1591:39054:#endif /* TEST */
1592:39072:/* Extended regular expression matching and search library,
1593:39132:   version 0.12.
1594:39149:   (Implements POSIX draft P10003.2/D11.2, except for
1595:39203:   internationalization features.)
1596:39238:
1597:39239:   Copyright (C) 1993 Free Software Foundation, Inc.
1598:39292:
1599:39293:   This program is free software; you can redistribute it and/or modify
1600:39365:   it under the terms of the GNU General Public License as published by
1601:39437:   the Free Software Foundation; either version 2, or (at your option)
1602:39508:   any later version.
1603:39530:
1604:39531:   This program is distributed in the hope that it will be useful,
1605:39598:   but WITHOUT ANY WARRANTY; without even the implied warranty of
1606:39664:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
1607:39729:   GNU General Public License for more details.
1608:39777:
1609:39778:   You should have received a copy of the GNU General Public License
1610:39847:   along with this program; if not, write to the Free Software
1611:39910:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
1612:39975:
1613:39976:/* AIX requires this to be the first thing in the file. */
1614:40035:#if defined (_AIX) && !defined (REGEX_MALLOC)
1615:40081:  #pragma alloca
1616:40098:#endif
1617:40105:
1618:40106:#define _GNU_SOURCE
1619:40126:
1621:40203:#if flag_systypes==0
1623:40247:#define flag_systypes 1
1624:40271:#endif
1625:40278:
1626:40279:#ifdef HAVE_CONFIG_H
1627:40300:#if flag_config==0
1629:40339:#define flag_config 1
1630:40361:#endif
1631:40368:#endif
1632:40375:
1633:40376:/* The `emacs' switch turns on certain matching commands
1634:40433:   that make sense only in Emacs. */
1635:40470:#ifdef emacs
1636:40483:
1640:40542:
1641:40543:/* Emacs uses `NULL' as a predicate.  */
1642:40584:#undef NULL
1643:40596:
1644:40597:#else  /* not emacs */
1645:40620:
1646:40621:/* We used to test for `BSTRING' here, but only GCC and Emacs define
1647:40690:   `BSTRING', as far as I know, and neither of them use this code.  */
1648:40761:#if HAVE_STRING_H || STDC_HEADERS
1649:40795:#if flag_string==0
1651:40834:#define flag_string 1
1652:40856:#endif
1653:40863:#ifndef bcmp
1654:40876:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
1655:40925:#endif
1656:40932:#ifndef bcopy
1657:40946:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
1658:40992:#endif
1659:40999:#ifndef bzero
1660:41013:#define bzero(s, n)	memset ((s), 0, (n))
1661:41054:#endif
1662:41061:#else
1663:41067:#if flag_strings==0
1665:41108:#define flag_strings 1
1666:41131:#endif
1667:41138:#endif
1668:41145:
1669:41146:#ifdef STDC_HEADERS
1670:41166:#if flag_stdlib==0 
1672:41206:#define flag_stdlib 1
1673:41228:#endif
1674:41235:#else
1675:41241:char *malloc ();
1676:41258:char *realloc ();
1677:41276:#endif
1678:41283:
1679:41284:
1680:41285:/* Define the syntax stuff for \<, \>, etc.  */
1681:41333:
1682:41334:/* This must be nonzero for the wordchar and notwordchar pattern
1683:41399:   commands in re_match_2.  */
1684:41430:#ifndef Sword 
1685:41445:#define Sword 1
1686:41461:#endif
1687:41468:
1688:41469:#ifdef SYNTAX_TABLE
1689:41489:
1690:41490:extern char *re_syntax_table;
1691:41520:
1692:41521:#else /* not SYNTAX_TABLE */
1693:41550:
1694:41551:/* How many characters in the character set.  */
1695:41600:#define CHAR_SET_SIZE 256
1696:41626:
1697:41627:static char re_syntax_table[CHAR_SET_SIZE];
1698:41671:
1699:41672:static void
1700:41684:init_syntax_once ()
1701:41704:{
1702:41706:   register int c;
1703:41725:   static int done = 0;
1704:41749:
1705:41750:   if (done)
1706:41763:     return;
1707:41776:
1708:41777:   bzero (re_syntax_table, sizeof re_syntax_table);
1709:41829:
1710:41830:   for (c = 'a'; c <= 'z'; c++)
1711:41862:     re_syntax_table[c] = Sword;
1712:41895:
1713:41896:   for (c = 'A'; c <= 'Z'; c++)
1714:41928:     re_syntax_table[c] = Sword;
1715:41961:
1716:41962:   for (c = '0'; c <= '9'; c++)
1717:41994:     re_syntax_table[c] = Sword;
1718:42027:
1719:42028:   re_syntax_table['_'] = Sword;
1720:42061:
1721:42062:   done = 1;
1722:42075:}
1723:42077:
1724:42078:#endif /* not SYNTAX_TABLE */
1725:42108:
1726:42109:#define SYNTAX(c) re_syntax_table[c]
1727:42146:
1728:42147:#endif /* not emacs */
1729:42170:
1730:42172:/* Get the interface, including the syntax bits.  */
1732:42244:
1733:42245:/* isalpha etc. are used for the character classes.  */
1735:42320:
1736:42321:/* Jim Meyering writes:
1737:42345:
1738:42346:   "... Some ctype macros are valid only for character codes that
1739:42412:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
1740:42482:   using /bin/cc or gcc but without giving an ansi option).  So, all
1741:42551:   ctype uses should be through macros like ISPRINT...  If
1742:42610:   STDC_HEADERS is defined, then autoconf has verified that the ctype
1743:42680:   macros don't need to be guarded with references to isascii. ...
1744:42747:   Defining isascii to 1 should let any compiler worth its salt
1745:42811:   eliminate the && through constant folding."  */
1746:42862:#if ! defined (isascii) || defined (STDC_HEADERS)
1747:42912:#undef isascii
1748:42927:#define isascii(c) 1
1749:42948:#endif
1750:42955:
1751:42956:#ifdef isblank
1752:42971:#define ISBLANK(c) (isascii (c) && isblank (c))
1753:43019:#else
1754:43025:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
1755:43072:#endif
1756:43079:#ifdef isgraph
1757:43094:#define ISGRAPH(c) (isascii (c) && isgraph (c))
1758:43142:#else
1759:43148:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
1760:43212:#endif
1761:43219:
1762:43220:#define ISPRINT(c) (isascii (c) && isprint (c))
1763:43268:#define ISDIGIT(c) (isascii (c) && isdigit (c))
1764:43316:#define ISALNUM(c) (isascii (c) && isalnum (c))
1765:43364:#define ISALPHA(c) (isascii (c) && isalpha (c))
1766:43412:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
1767:43460:#define ISLOWER(c) (isascii (c) && islower (c))
1768:43508:#define ISPUNCT(c) (isascii (c) && ispunct (c))
1769:43556:#define ISSPACE(c) (isascii (c) && isspace (c))
1770:43604:#define ISUPPER(c) (isascii (c) && isupper (c))
1771:43652:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
1772:43702:
1773:43703:#ifndef NULL
1774:43716:#define NULL 0
1775:43731:#endif
1776:43738:
1777:43739:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
1778:43799:   since ours (we hope) works properly with all combinations of
1779:43863:   machines, compilers, `char' and `unsigned char' argument types.
1780:43930:   (Per Bothner suggested the basic approach.)  */
1781:43981:#undef SIGN_EXTEND_CHAR
1782:44005:#if __STDC__
1783:44018:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
1784:44066:#else  /* not __STDC__ */
1785:44092:/* As in Harbison and Steele.  */
1786:44126:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
1787:44192:#endif
1788:44199:
1789:44201:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
1790:44272:   use `alloca' instead of `malloc'.  This is because using malloc in
1791:44342:   re_search* or re_match* could cause memory leaks when C-g is used in
1792:44414:   Emacs; also, malloc is slower and causes storage fragmentation.  On
1793:44485:   the other hand, malloc is more portable, and easier to debug.  
1794:44552:   
1795:44556:   Because we sometimes use alloca, some routines have to be macros,
1796:44625:   not functions -- `alloca'-allocated space disappears at the end of the
1797:44699:   function it is called in.  */
1798:44732:
1799:44733:#ifdef REGEX_MALLOC
1800:44753:
1801:44754:#define REGEX_ALLOCATE malloc
1802:44784:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
1803:44855:
1804:44856:#else /* not REGEX_MALLOC  */
1805:44886:
1806:44887:/* Emacs already defines alloca, sometimes.  */
1807:44935:#ifndef alloca
1808:44950:
1809:44951:/* Make alloca work the best possible way.  */
1810:44998:#ifdef __GNUC__
1811:45014:#define alloca __builtin_alloca
1812:45046:#else /* not __GNUC__ */
1813:45071:#if HAVE_ALLOCA_H
1814:45089:#if flag_alloca==0
1816:45128:#define flag_alloca 1
1817:45150:#endif 
1818:45158:#else /* not __GNUC__ or HAVE_ALLOCA_H */
1819:45200:#ifndef _AIX /* Already did AIX, up at the top.  */
1820:45252:char *alloca ();
1821:45269:#endif /* not _AIX */
1822:45291:#endif /* not HAVE_ALLOCA_H */ 
1823:45323:#endif /* not __GNUC__ */
1824:45349:
1825:45350:#endif /* not alloca */
1826:45374:
1827:45375:#define REGEX_ALLOCATE alloca
1828:45405:
1829:45406:/* Assumes a `char *destination' variable.  */
1830:45453:#define REGEX_REALLOCATE(source, osize, nsize)				\
1831:45505:  (destination = (char *) alloca (nsize),				\
1832:45552:   bcopy (source, destination, osize),					\
1833:45597:   destination)
1834:45613:
1835:45614:#endif /* not REGEX_MALLOC */
1836:45644:
1837:45645:
1838:45646:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
1839:45713:   `string1' or just past its end.  This works if PTR is NULL, which is
1840:45785:   a good thing.  */
1841:45806:#define FIRST_STRING_P(ptr) 					\
1842:45841:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
1843:45899:
1844:45900:/* (Re)Allocate N items of type T using malloc, or fail.  */
1845:45961:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
1846:46016:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
1847:46095:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
1848:46164:
1849:46165:#define BYTEWIDTH 8 /* In bits.  */
1850:46201:
1851:46202:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
1852:46249:
1853:46250:#undef MAX               /****** added later *******/
1854:46304:#define MAX(a, b) ((a) > (b) ? (a) : (b))
1855:46346:#define MIN(a, b) ((a) < (b) ? (a) : (b))
1856:46388:
1857:46389:typedef char boolean;
1858:46411:#define false 0
1859:46427:#define true 1
1860:46442:
1861:46444:/* These are the command codes that appear in compiled regular
1862:46507:   expressions.  Some opcodes are followed by argument bytes.  A
1863:46572:   command code can specify any interpretation whatsoever for its
1864:46638:   arguments.  Zero bytes may appear in the compiled regular expression.
1865:46711:
1866:46712:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
1867:46785:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
1868:46856:   `exactn' we use here must also be 1.  */
1869:46900:
1870:46901:typedef enum
1871:46914:{
1872:46916:  no_op = 0,
1873:46929:
1874:46930:        /* Followed by one byte giving n, then by n literal bytes.  */
1875:47001:  exactn = 1,
1876:47015:
1877:47016:        /* Matches any (more or less) character.  */
1878:47069:  anychar,
1879:47080:
1880:47081:        /* Matches any one char belonging to specified set.  First
1881:47148:           following byte is number of bitmap bytes.  Then come bytes
1882:47218:           for a bitmap saying which chars are in.  Bits in each byte
1883:47288:           are ordered low-bit-first.  A character is in the set if its
1884:47360:           bit is 1.  A character too large to have a bit in the map is
1885:47432:           automatically not in the set.  */
1886:47477:  charset,
1887:47488:
1888:47489:        /* Same parameters as charset, but match any character that is
1889:47560:           not one of those specified.  */
1890:47603:  charset_not,
1891:47618:
1892:47619:        /* Start remembering the text that is matched, for storing in a
1893:47691:           register.  Followed by one byte with the register number, in
1894:47763:           the range 0 to one less than the pattern buffer's re_nsub
1895:47832:           field.  Then followed by one byte with the number of groups
1896:47903:           inner to this one.  (This last has to be part of the
1897:47967:           start_memory only because we need it in the on_failure_jump
1898:48038:           of re_match_2.)  */
1899:48069:  start_memory,
1900:48085:
1901:48086:        /* Stop remembering the text that is matched and store it in a
1902:48157:           memory register.  Followed by one byte with the register
1903:48225:           number, in the range 0 to one less than `re_nsub' in the
1904:48293:           pattern buffer, and one byte with the number of inner groups,
1905:48366:           just like `start_memory'.  (We need the number of inner
1906:48433:           groups here because we don't have any easy way of finding the
1907:48506:           corresponding start_memory when we're at a stop_memory.)  */
1908:48578:  stop_memory,
1909:48593:
1910:48594:        /* Match a duplicate of something remembered. Followed by one
1911:48664:           byte containing the register number.  */
1912:48716:  duplicate,
1913:48729:
1914:48730:        /* Fail unless at beginning of line.  */
1915:48779:  begline,
1916:48790:
1917:48791:        /* Fail unless at end of line.  */
1918:48834:  endline,
1919:48845:
1920:48846:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
1921:48919:           of string to be matched (if not).  */
1922:48968:  begbuf,
1923:48978:
1924:48979:        /* Analogously, for end of buffer/string.  */
1925:49033:  endbuf,
1926:49043: 
1927:49045:        /* Followed by two byte relative address to which to jump.  */
1928:49116:  jump, 
1929:49125:
1930:49126:	/* Same as jump, but marks the end of an alternative.  */
1931:49185:  jump_past_alt,
1932:49202:
1933:49203:        /* Followed by two-byte relative address of place to resume at
1934:49274:           in case of failure.  */
1935:49309:  on_failure_jump,
1936:49328:	
1937:49330:        /* Like on_failure_jump, but pushes a placeholder instead of the
1938:49403:           current string position when executed.  */
1939:49457:  on_failure_keep_string_jump,
1940:49488:  
1941:49491:        /* Throw away latest failure point and then jump to following
1942:49561:           two-byte relative address.  */
1943:49603:  pop_failure_jump,
1944:49623:
1945:49624:        /* Change to pop_failure_jump if know won't have to backtrack to
1946:49697:           match; otherwise change to jump.  This is used to jump
1947:49763:           back to the beginning of a repeat.  If what follows this jump
1948:49836:           clearly won't match what the repeat does, such that we can be
1949:49909:           sure that there is no use backtracking out of repetitions
1950:49978:           already matched, then we change it to a pop_failure_jump.
1951:50047:           Followed by two-byte address.  */
1952:50092:  maybe_pop_jump,
1953:50110:
1954:50111:        /* Jump to following two-byte address, and push a dummy failure
1955:50183:           point. This failure point will be thrown away if an attempt
1956:50254:           is made to use it for a failure.  A `+' construct makes this
1957:50326:           before the first repeat.  Also used as an intermediary kind
1958:50397:           of jump when compiling an alternative.  */
1959:50451:  dummy_failure_jump,
1960:50473:
1961:50474:	/* Push a dummy failure point and continue.  Used at the end of
1962:50539:	   alternatives.  */
1963:50561:  push_dummy_failure,
1964:50583:
1965:50584:        /* Followed by two-byte relative address and two-byte number n.
1966:50656:           After matching N times, jump to the address upon failure.  */
1967:50729:  succeed_n,
1968:50742:
1969:50743:        /* Followed by two-byte relative address, and two-byte number n.
1970:50816:           Jump to the address N times, then fail.  */
1971:50871:  jump_n,
1972:50881:
1973:50882:        /* Set the following two-byte relative address to the
1975:51015:           bytes of number.  */
1976:51047:  set_number_at,
1977:51064:
1978:51065:  wordchar,	/* Matches any word-constituent character.  */
1979:51124:  notwordchar,	/* Matches any char that is not a word-constituent.  */
1980:51195:
1981:51196:  wordbeg,	/* Succeeds if at word beginning.  */
1982:51245:  wordend,	/* Succeeds if at word end.  */
1983:51288:
1984:51289:  wordbound,	/* Succeeds if at a word boundary.  */
1985:51341:  notwordbound	/* Succeeds if not at a word boundary.  */
1986:51399:
1987:51400:#ifdef emacs
1988:51413:  ,before_dot,	/* Succeeds if before point.  */
1989:51461:  at_dot,	/* Succeeds if at point.  */
1990:51500:  after_dot,	/* Succeeds if after point.  */
1991:51545:
1992:51546:	/* Matches any character whose syntax is specified.  Followed by
1993:51612:           a byte which contains a syntax code, e.g., Sword.  */
1994:51677:  syntaxspec,
1995:51691:
1996:51692:	/* Matches any character whose syntax is not that specified.  */
1997:51758:  notsyntaxspec
1998:51774:#endif /* emacs */
1999:51793:} re_opcode_t;
2000:51808:
2001:51810:/* Common operations on the compiled pattern.  */
2002:51860:
2003:51861:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
2004:51930:
2005:51931:#define STORE_NUMBER(destination, number)				\
2006:51978:  do {									\
2007:51995:    (destination)[0] = (number) & 0377;					\
2008:52041:    (destination)[1] = (number) >> 8;					\
2009:52085:  } while (0)
2010:52099:
2011:52100:/* Same as STORE_NUMBER, except increment DESTINATION to
2012:52157:   the byte after where the number is stored.  Therefore, DESTINATION
2013:52227:   must be an lvalue.  */
2014:52253:
2015:52254:#define STORE_NUMBER_AND_INCR(destination, number)			\
2016:52309:  do {									\
2017:52326:    STORE_NUMBER (destination, number);					\
2018:52372:    (destination) += 2;							\
2019:52404:  } while (0)
2020:52418:
2021:52419:/* Put into DESTINATION a number stored in two contiguous bytes starting
2022:52492:   at SOURCE.  */
2023:52510:
2024:52511:#define EXTRACT_NUMBER(destination, source)				\
2025:52560:  do {									\
2026:52577:    (destination) = *(source) & 0377;					\
2027:52621:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
2028:52686:  } while (0)
2029:52700:
2030:52701:#ifdef DEBUG
2031:52714:static void
2032:52726:extract_number (dest, source)
2033:52756:    int *dest;
2034:52771:    unsigned char *source;
2035:52798:{
2036:52800:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
2037:52848:  *dest = *source & 0377;
2038:52874:  *dest += temp << 8;
2039:52896:}
2040:52898:
2041:52899:#ifndef EXTRACT_MACROS /* To debug the macros.  */
2042:52950:#undef EXTRACT_NUMBER
2043:52972:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
2044:53034:#endif /* not EXTRACT_MACROS */
2045:53066:
2046:53067:#endif /* DEBUG */
2047:53086:
2048:53087:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
2049:53159:   SOURCE must be an lvalue.  */
2050:53192:
2051:53193:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
2052:53250:  do {									\
2053:53267:    EXTRACT_NUMBER (destination, source);				\
2054:53314:    (source) += 2; 							\
2055:53342:  } while (0)
2056:53356:
2057:53357:#ifdef DEBUG
2058:53370:static void
2059:53382:extract_number_and_incr (destination, source)
2060:53428:    int *destination;
2061:53450:    unsigned char **source;
2062:53478:{ 
2063:53481:  extract_number (destination, *source);
2064:53522:  *source += 2;
2065:53538:}
2066:53540:
2067:53541:#ifndef EXTRACT_MACROS
2068:53564:#undef EXTRACT_NUMBER_AND_INCR
2069:53595:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
2070:53640:  extract_number_and_incr (&dest, &src)
2071:53680:#endif /* not EXTRACT_MACROS */
2072:53712:
2073:53713:#endif /* DEBUG */
2074:53732:
2075:53734:/* If DEBUG is defined, Regex prints many voluminous messages about what
2076:53807:   it is doing (if the variable `debug' is nonzero).  If linked with the
2077:53880:   main program in `iregex.c', you can enter patterns and strings
2078:53946:   interactively.  And if linked with the main program in `main.c' and
2079:54017:   the other test files, you can run the already-written tests.  */
2080:54085:
2081:54086:#ifdef DEBUG
2082:54099:
2083:54100:/* We use standard I/O for debugging.  */
2085:54165:
2086:54166:/* It is useful to test things that ``must'' be true when debugging.  */
2088:54259:
2089:54260:static int debug = 0;
2090:54282:
2091:54283:#define DEBUG_STATEMENT(e) e
2092:54312:#define DEBUG_PRINT1(x) if (debug) printf (x)
2093:54358:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
2094:54414:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
2095:54478:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
2096:54550:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
2097:54602:  if (debug) print_partial_compiled_pattern (s, e)
2098:54653:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
2099:54712:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
2100:54767:
2101:54768:
2102:54769:extern void printchar ();
2103:54795:
2104:54796:/* Print the fastmap in human-readable form.  */
2105:54845:
2106:54846:void
2107:54851:print_fastmap (fastmap)
2108:54875:    char *fastmap;
2109:54894:{
2110:54896:  unsigned was_a_range = 0;
2111:54924:  unsigned i = 0;  
2112:54944:  
2113:54947:  while (i < (1 << BYTEWIDTH))
2114:54978:    {
2115:54984:      if (fastmap[i++])
2116:55008:	{
2117:55011:	  was_a_range = 0;
2118:55031:          printchar (i - 1);
2119:55060:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
2120:55115:            {
2121:55129:              was_a_range = 1;
2122:55160:              i++;
2123:55179:            }
2124:55193:	  if (was_a_range)
2125:55213:            {
2126:55227:              printf ("-");
2127:55255:              printchar (i - 1);
2128:55288:            }
2129:55302:        }
2130:55312:    }
2131:55318:  putchar ('\n'); 
2132:55337:}
2133:55339:
2134:55340:
2135:55341:/* Print a compiled pattern string in human-readable form, starting at
2136:55412:   the START pointer into it and ending just before the pointer END.  */
2137:55485:
2138:55486:void
2139:55491:print_partial_compiled_pattern (start, end)
2140:55535:    unsigned char *start;
2141:55561:    unsigned char *end;
2142:55585:{
2143:55587:  int mcnt, mcnt2;
2144:55606:  unsigned char *p = start;
2145:55634:  unsigned char *pend = end;
2146:55663:
2147:55664:  if (start == NULL)
2148:55685:    {
2149:55691:      printf ("(null)\n");
2150:55718:      return;
2151:55732:    }
2152:55738:    
2153:55743:  /* Loop over pattern commands.  */
2154:55780:  while (p < pend)
2155:55799:    {
2156:55805:      printf ("%d:\t", p - start);
2157:55840:
2158:55841:      switch ((re_opcode_t) *p++)
2159:55875:	{
2160:55878:        case no_op:
2161:55898:          printf ("/no_op");
2162:55927:          break;
2163:55944:
2164:55945:	case exactn:
2165:55959:	  mcnt = *p++;
2166:55975:          printf ("/exactn/%d", mcnt);
2167:56014:          do
2168:56027:	    {
2169:56034:              putchar ('/');
2170:56063:	      printchar (*p++);
2171:56088:            }
2172:56102:          while (--mcnt);
2173:56128:          break;
2174:56145:
2175:56146:	case start_memory:
2176:56166:          mcnt = *p++;
2177:56189:          printf ("/start_memory/%d/%d", mcnt, *p++);
2178:56243:          break;
2179:56260:
2180:56261:	case stop_memory:
2181:56280:          mcnt = *p++;
2182:56303:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
2183:56349:          break;
2184:56366:
2185:56367:	case duplicate:
2186:56384:	  printf ("/duplicate/%d", *p++);
2187:56419:	  break;
2188:56429:
2189:56430:	case anychar:
2190:56445:	  printf ("/anychar");
2191:56469:	  break;
2192:56479:
2193:56480:	case charset:
2194:56495:        case charset_not:
2195:56521:          {
2196:56533:            register int c, last = -100;
2197:56574:	    register int in_range = 0;
2198:56606:
2199:56607:	    printf ("/charset [%s",
2200:56636:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
2201:56700:            
2202:56713:            assert (p + *p < pend);
2203:56749:
2204:56750:            for (c = 0; c < 256; c++)
2205:56788:	      if (c / 8 < *p
2206:56810:		  && (p[1 + (c/8)] & (1 << (c % 8))))
2207:56850:		{
2208:56854:		  /* Are we starting a range?  */
2209:56890:		  if (last + 1 == c && ! in_range)
2210:56927:		    {
2211:56935:		      putchar ('-');
2212:56958:		      in_range = 1;
2213:56980:		    }
2214:56988:		  /* Have we broken a range?  */
2215:57023:		  else if (last + 1 != c && in_range)
2216:57063:              {
2217:57079:		      printchar (last);
2218:57105:		      in_range = 0;
2219:57127:		    }
2220:57135:                
2221:57152:		  if (! in_range)
2222:57172:		    printchar (c);
2223:57193:
2224:57194:		  last = c;
2225:57208:              }
2226:57224:
2227:57225:	    if (in_range)
2228:57244:	      printchar (last);
2229:57269:
2230:57270:	    putchar (']');
2231:57290:
2232:57291:	    p += 1 + *p;
2233:57309:	  }
2234:57314:	  break;
2235:57324:
2236:57325:	case begline:
2237:57340:	  printf ("/begline");
2238:57364:          break;
2239:57381:
2240:57382:	case endline:
2241:57397:          printf ("/endline");
2242:57428:          break;
2243:57445:
2244:57446:	case on_failure_jump:
2245:57469:          extract_number_and_incr (&mcnt, &p);
2246:57516:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
2247:57574:          break;
2248:57591:
2249:57592:	case on_failure_keep_string_jump:
2250:57627:          extract_number_and_incr (&mcnt, &p);
2251:57674:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
2252:57744:          break;
2253:57761:
2254:57762:	case dummy_failure_jump:
2255:57788:          extract_number_and_incr (&mcnt, &p);
2256:57835:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
2257:57896:          break;
2258:57913:
2259:57914:	case push_dummy_failure:
2260:57940:          printf ("/push_dummy_failure");
2261:57982:          break;
2262:57999:          
2263:58010:        case maybe_pop_jump:
2264:58039:          extract_number_and_incr (&mcnt, &p);
2265:58086:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
2266:58143:	  break;
2267:58153:
2268:58154:        case pop_failure_jump:
2269:58185:	  extract_number_and_incr (&mcnt, &p);
2270:58225:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
2271:58284:	  break;          
2272:58304:          
2273:58315:        case jump_past_alt:
2274:58343:	  extract_number_and_incr (&mcnt, &p);
2275:58383:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
2276:58439:	  break;          
2277:58459:          
2278:58470:        case jump:
2279:58489:	  extract_number_and_incr (&mcnt, &p);
2280:58529:  	  printf ("/jump to %d", p + mcnt - start);
2281:58576:	  break;
2282:58586:
2283:58587:        case succeed_n: 
2284:58612:          extract_number_and_incr (&mcnt, &p);
2285:58659:          extract_number_and_incr (&mcnt2, &p);
2286:58707:	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
2287:58774:          break;
2288:58791:        
2289:58800:        case jump_n: 
2290:58822:          extract_number_and_incr (&mcnt, &p);
2291:58869:          extract_number_and_incr (&mcnt2, &p);
2292:58917:	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
2293:58981:          break;
2294:58998:        
2295:59007:        case set_number_at: 
2296:59036:          extract_number_and_incr (&mcnt, &p);
2297:59083:          extract_number_and_incr (&mcnt2, &p);
2298:59131:	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
2299:59204:          break;
2300:59221:        
2301:59230:        case wordbound:
2302:59254:	  printf ("/wordbound");
2303:59280:	  break;
2304:59290:
2305:59291:	case notwordbound:
2306:59311:	  printf ("/notwordbound");
2307:59340:          break;
2308:59357:
2309:59358:	case wordbeg:
2310:59373:	  printf ("/wordbeg");
2311:59397:	  break;
2312:59407:          
2313:59418:	case wordend:
2314:59433:	  printf ("/wordend");
2315:59457:          
2316:59468:#ifdef emacs
2317:59481:	case before_dot:
2318:59499:	  printf ("/before_dot");
2319:59526:          break;
2320:59543:
2321:59544:	case at_dot:
2322:59558:	  printf ("/at_dot");
2323:59581:          break;
2324:59598:
2325:59599:	case after_dot:
2326:59616:	  printf ("/after_dot");
2327:59642:          break;
2328:59659:
2329:59660:	case syntaxspec:
2330:59678:          printf ("/syntaxspec");
2331:59712:	  mcnt = *p++;
2332:59728:	  printf ("/%d", mcnt);
2333:59753:          break;
2334:59770:	  
2335:59774:	case notsyntaxspec:
2336:59795:          printf ("/notsyntaxspec");
2337:59832:	  mcnt = *p++;
2338:59848:	  printf ("/%d", mcnt);
2339:59873:	  break;
2340:59883:#endif /* emacs */
2341:59902:
2342:59903:	case wordchar:
2343:59919:	  printf ("/wordchar");
2344:59944:          break;
2345:59961:	  
2346:59965:	case notwordchar:
2347:59984:	  printf ("/notwordchar");
2348:60012:          break;
2349:60029:
2350:60030:	case begbuf:
2351:60044:	  printf ("/begbuf");
2352:60067:          break;
2353:60084:
2354:60085:	case endbuf:
2355:60099:	  printf ("/endbuf");
2356:60122:          break;
2357:60139:
2358:60140:        default:
2359:60157:          printf ("?%d", *(p-1));
2360:60191:	}
2361:60194:
2362:60195:      putchar ('\n');
2363:60217:    }
2364:60223:
2365:60224:  printf ("%d:\tend of pattern.\n", p - start);
2366:60272:}
2367:60274:
2368:60275:
2369:60276:void
2370:60281:print_compiled_pattern (bufp)
2371:60311:    struct re_pattern_buffer *bufp;
2372:60347:{
2373:60349:  unsigned char *buffer = bufp->buffer;
2374:60389:
2375:60390:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
2376:60454:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
2377:60533:
2378:60534:  if (bufp->fastmap_accurate && bufp->fastmap)
2379:60581:    {
2380:60587:      printf ("fastmap: ");
2381:60615:      print_fastmap (bufp->fastmap);
2382:60652:    }
2383:60658:
2384:60659:  printf ("re_nsub: %d\t", bufp->re_nsub);
2385:60702:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
2386:60755:  printf ("can_be_null: %d\t", bufp->can_be_null);
2387:60806:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
2388:60863:  printf ("no_sub: %d\t", bufp->no_sub);
2389:60904:  printf ("not_bol: %d\t", bufp->not_bol);
2390:60947:  printf ("not_eol: %d\t", bufp->not_eol);
2391:60990:  printf ("syntax: %d\n", bufp->syntax);
2392:61031:  /* Perhaps we should print the translate table?  */
2393:61085:}
2394:61087:
2395:61088:
2396:61089:void
2397:61094:print_double_string (where, string1, size1, string2, size2)
2398:61154:    const char *where;
2399:61177:    const char *string1;
2400:61202:    const char *string2;
2401:61227:    int size1;
2402:61242:    int size2;
2403:61257:{
2404:61259:  unsigned this_char;
2405:61281:  
2406:61284:  if (where == NULL)
2407:61305:    printf ("(null)");
2408:61328:  else
2409:61335:    {
2410:61341:      if (FIRST_STRING_P (where))
2411:61375:        {
2412:61385:          for (this_char = where - string1; this_char < size1; this_char++)
2413:61461:            printchar (string1[this_char]);
2414:61505:
2415:61506:          where = string2;    
2416:61537:        }
2417:61547:
2418:61548:      for (this_char = where - string2; this_char < size2; this_char++)
2419:61620:        printchar (string2[this_char]);
2420:61660:    }
2421:61666:}
2422:61668:
2423:61669:#else /* not DEBUG */
2424:61691:
2425:61692:#undef assert
2426:61706:#define assert(e)
2427:61724:
2428:61725:#define DEBUG_STATEMENT(e)
2429:61752:#define DEBUG_PRINT1(x)
2430:61776:#define DEBUG_PRINT2(x1, x2)
2431:61805:#define DEBUG_PRINT3(x1, x2, x3)
2432:61838:#define DEBUG_PRINT4(x1, x2, x3, x4)
2433:61875:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
2434:61921:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
2435:61976:
2436:61977:#endif /* not DEBUG */
2437:62000:
2438:62002:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
2439:62076:   also be assigned to arbitrarily: each pattern buffer stores its own
2440:62147:   syntax, so it can be changed between regex compilations.  */
2441:62211:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
2442:62261:
2443:62262:
2444:62263:/* Specify the precise syntax of regexps for compilation.  This provides
2445:62336:   for compatibility for various utilities which historically have
2446:62403:   different, incompatible syntaxes.
2447:62440:
2448:62441:   The argument SYNTAX is a bit mask comprised of the various bits
2449:62508:   defined in regex.h.  We return the old syntax.  */
2450:62562:
2451:62563:reg_syntax_t
2452:62576:re_set_syntax (syntax)
2453:62599:    reg_syntax_t syntax;
2454:62624:{
2455:62626:  reg_syntax_t ret = re_syntax_options;
2456:62666:  
2457:62669:  re_syntax_options = syntax;
2458:62699:  return ret;
2459:62713:}
2460:62715:
2461:62717:/* This table gives an error message for each of the error codes listed
2462:62789:   in regex.h.  Obviously the order here has to be same as there.  */
2463:62859:
2464:62860:static const char *re_error_msg[] =
2465:62896:  { NULL,					/* REG_NOERROR */
2466:62928:    "No match",					/* REG_NOMATCH */
2467:62966:    "Invalid regular expression",		/* REG_BADPAT */
2468:63018:    "Invalid collation character",		/* REG_ECOLLATE */
2469:63073:    "Invalid character class name",		/* REG_ECTYPE */
2470:63127:    "Trailing backslash",			/* REG_EESCAPE */
2471:63173:    "Invalid back reference",			/* REG_ESUBREG */
2472:63223:    "Unmatched [ or [^",			/* REG_EBRACK */
2473:63267:    "Unmatched ( or \\(",			/* REG_EPAREN */
2474:63312:    "Unmatched \\{",				/* REG_EBRACE */
2475:63353:    "Invalid content of \\{\\}",		/* REG_BADBR */
2476:63403:    "Invalid range end",			/* REG_ERANGE */
2477:63447:    "Memory exhausted",				/* REG_ESPACE */
2478:63491:    "Invalid preceding regular expression",	/* REG_BADRPT */
2479:63552:    "Premature end of regular expression",	/* REG_EEND */
2480:63610:    "Regular expression too big",		/* REG_ESIZE */
2481:63661:    "Unmatched ) or \\)",			/* REG_ERPAREN */
2482:63707:  };
2483:63712:
2484:63714:/* Subroutine declarations and macros for regex_compile.  */
2485:63775:
2486:63776:static void store_op1 (), store_op2 ();
2487:63816:static void insert_op1 (), insert_op2 ();
2488:63858:static boolean at_begline_loc_p (), at_endline_loc_p ();
2489:63915:static boolean group_in_compile_stack ();
2490:63957:static reg_errcode_t compile_range ();
2491:63996:
2492:63997:/* Fetch the next character in the uncompiled pattern---translating it 
2493:64069:   if necessary.  Also cast from a signed character in the constant
2494:64137:   string passed to us by the user to an unsigned char that we can use
2495:64208:   as an array index (in, e.g., `translate').  */
2496:64258:#define PATFETCH(c)							\
2497:64286:  do {if (p == pend) return REG_EEND;					\
2498:64330:    c = (unsigned char) *p++;						\
2499:64367:    if (translate) c = translate[c]; 					\
2500:64411:  } while (0)
2501:64425:
2502:64426:/* Fetch the next character in the uncompiled pattern, with no
2503:64489:   translation.  */
2504:64509:#define PATFETCH_RAW(c)							\
2505:64541:  do {if (p == pend) return REG_EEND;					\
2506:64585:    c = (unsigned char) *p++; 						\
2507:64623:  } while (0)
2508:64637:
2509:64638:/* Go backwards one character in the pattern.  */
2510:64688:#define PATUNFETCH p--
2511:64711:
2512:64712:
2513:64713:/* If `translate' is non-null, return translate[D], else just D.  We
2514:64782:   cast the subscript to translate because some data is declared as
2515:64850:   `char *', to avoid warnings when a string constant is passed.  But
2516:64920:   when we use a character as a subscript we must make it unsigned.  */
2517:64992:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
2518:65064:
2519:65065:
2520:65066:/* Macros for outputting the compiled pattern into `buffer'.  */
2521:65131:
2522:65132:/* If the buffer isn't allocated when it comes in, use this.  */
2523:65197:#define INIT_BUF_SIZE  32
2524:65223:
2525:65224:/* Make sure we have at least N more bytes of space in buffer.  */
2526:65291:#define GET_BUFFER_SPACE(n)						\
2527:65326:    while (b - bufp->buffer + (n) > bufp->allocated)			\
2528:65383:      EXTEND_BUFFER ()
2529:65406:
2530:65407:/* Make sure we have one more byte of buffer space and then add C to it.  */
2531:65484:#define BUF_PUSH(c)							\
2532:65512:  do {									\
2533:65529:    GET_BUFFER_SPACE (1);						\
2534:65562:    *b++ = (unsigned char) (c);						\
2535:65601:  } while (0)
2536:65615:
2537:65616:
2538:65617:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
2539:65697:#define BUF_PUSH_2(c1, c2)						\
2540:65731:  do {									\
2541:65748:    GET_BUFFER_SPACE (2);						\
2542:65781:    *b++ = (unsigned char) (c1);					\
2543:65820:    *b++ = (unsigned char) (c2);					\
2544:65859:  } while (0)
2545:65873:
2546:65874:
2547:65875:/* As with BUF_PUSH_2, except for three bytes.  */
2548:65926:#define BUF_PUSH_3(c1, c2, c3)						\
2549:65964:  do {									\
2550:65981:    GET_BUFFER_SPACE (3);						\
2551:66014:    *b++ = (unsigned char) (c1);					\
2552:66053:    *b++ = (unsigned char) (c2);					\
2553:66092:    *b++ = (unsigned char) (c3);					\
2554:66131:  } while (0)
2555:66145:
2556:66146:
2557:66147:/* Store a jump with opcode OP at LOC to location TO.  We store a
2558:66213:   relative address offset by the three bytes the jump itself occupies.  */
2559:66289:#define STORE_JUMP(op, loc, to) \
2560:66323:  store_op1 (op, loc, (to) - (loc) - 3)
2561:66363:
2562:66364:/* Likewise, for a two-argument jump.  */
2563:66406:#define STORE_JUMP2(op, loc, to, arg) \
2564:66446:  store_op2 (op, loc, (to) - (loc) - 3, arg)
2565:66491:
2566:66492:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
2567:66568:#define INSERT_JUMP(op, loc, to) \
2568:66603:  insert_op1 (op, loc, (to) - (loc) - 3, b)
2569:66647:
2570:66648:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
2571:66725:#define INSERT_JUMP2(op, loc, to, arg) \
2572:66766:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
2573:66815:
2574:66816:
2575:66817:/* This is not an arbitrary limit: the arguments which represent offsets
2576:66890:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
2577:66961:   be too small, many things would have to change.  */
2578:67016:#define MAX_BUF_SIZE (1L << 16)
2579:67048:
2580:67049:
2581:67050:/* Extend the buffer by twice its current size via realloc and
2582:67113:   reset the pointers that pointed into the old block to point to the
2583:67183:   correct places in the new one.  If extending the buffer results in it
2584:67256:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
2585:67323:#define EXTEND_BUFFER()							\
2586:67355:  do { 									\
2587:67373:    unsigned char *old_buffer = bufp->buffer;				\
2588:67424:    if (bufp->allocated == MAX_BUF_SIZE) 				\
2589:67471:      return REG_ESIZE;							\
2590:67503:    bufp->allocated <<= 1;						\
2591:67537:    if (bufp->allocated > MAX_BUF_SIZE)					\
2592:67583:      bufp->allocated = MAX_BUF_SIZE; 					\
2593:67628:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
2594:67707:    if (bufp->buffer == NULL)						\
2595:67744:      return REG_ESPACE;						\
2596:67776:    /* If the buffer moved, move all the pointers into it.  */		\
2597:67842:    if (old_buffer != bufp->buffer)					\
2598:67884:      {									\
2599:67902:        b = (b - old_buffer) + bufp->buffer;				\
2600:67952:        begalt = (begalt - old_buffer) + bufp->buffer;			\
2601:68011:        if (fixup_alt_jump)						\
2602:68046:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
2603:68120:        if (laststart)							\
2604:68151:          laststart = (laststart - old_buffer) + bufp->buffer;		\
2605:68217:        if (pending_exact)						\
2606:68251:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
2607:68324:      }									\
2608:68342:  } while (0)
2609:68356:
2610:68357:
2611:68358:/* Since we have one byte reserved for the register number argument to
2612:68429:   {start,stop}_memory, the maximum number of groups we can report
2613:68496:   things about is what fits in that byte.  */
2614:68543:#define MAX_REGNUM 255
2615:68566:
2616:68567:/* But patterns can have more than `MAX_REGNUM' registers.  We just
2617:68635:   ignore the excess.  */
2618:68661:typedef unsigned regnum_t;
2619:68688:
2620:68689:
2621:68690:/* Macros for the compile stack.  */
2622:68727:
2623:68728:/* Since offsets can go either forwards or backwards, this type needs to
2624:68801:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
2625:68877:typedef int pattern_offset_t;
2626:68907:
2627:68908:typedef struct
2628:68923:{
2629:68925:  pattern_offset_t begalt_offset;
2630:68959:  pattern_offset_t fixup_alt_jump;
2631:68994:  pattern_offset_t inner_group_offset;
2632:69033:  pattern_offset_t laststart_offset;  
2633:69072:  regnum_t regnum;
2634:69091:} compile_stack_elt_t;
2635:69114:
2636:69115:
2637:69116:typedef struct
2638:69131:{
2639:69133:  compile_stack_elt_t *stack;
2640:69163:  unsigned size;
2641:69180:  unsigned avail;			/* Offset of next open position.  */
2642:69237:} compile_stack_type;
2643:69259:
2644:69260:
2645:69261:#define INIT_COMPILE_STACK_SIZE 32
2646:69296:
2647:69297:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
2648:69353:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
2649:69425:
2650:69426:/* The next available element.  */
2651:69461:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
2652:69530:
2653:69531:
2654:69532:/* Set the bit for character C in a list.  */
2655:69578:#define SET_LIST_BIT(c)                               \
2656:69634:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
2657:69690:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
2658:69736:
2659:69737:
2660:69738:/* Get the next unsigned number in the uncompiled pattern.  */
2661:69801:#define GET_UNSIGNED_NUMBER(num) 					\
2662:69841:  { if (p != pend)							\
2663:69868:     {									\
2664:69885:       PATFETCH (c); 							\
2665:69915:       while (ISDIGIT (c)) 						\
2666:69950:         { 								\
2667:69971:           if (num < 0)							\
2668:70003:              num = 0;							\
2669:70034:           num = num * 10 + c - '0'; 					\
2670:70078:           if (p == pend) 						\
2671:70112:              break; 							\
2672:70142:           PATFETCH (c);						\
2673:70174:         } 								\
2674:70195:       } 								\
2675:70214:    }		
2676:70222:
2677:70223:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
2678:70281:
2679:70282:#define IS_CHAR_CLASS(string)						\
2680:70319:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
2681:70378:    || STREQ (string, "lower") || STREQ (string, "digit")		\
2682:70439:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
2683:70501:    || STREQ (string, "space") || STREQ (string, "print")		\
2684:70562:    || STREQ (string, "punct") || STREQ (string, "graph")		\
2685:70623:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
2686:70682:
2687:70684:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
2688:70758:   Returns one of error codes defined in `regex.h', or zero for success.
2689:70831:
2690:70832:   Assumes the `allocated' (and perhaps `buffer') and `translate'
2691:70898:   fields are set in BUFP on entry.
2692:70934:
2693:70935:   If it succeeds, results are put in BUFP (if it returns an error, the
2694:71007:   contents of BUFP are undefined):
2695:71043:     `buffer' is the compiled pattern;
2696:71082:     `syntax' is set to SYNTAX;
2697:71114:     `used' is set to the length of the compiled pattern;
2698:71172:     `fastmap_accurate' is zero;
2699:71205:     `re_nsub' is the number of subexpressions in PATTERN;
2700:71264:     `not_bol' and `not_eol' are zero;
2701:71303:   
2702:71307:   The `fastmap' and `newline_anchor' fields are neither
2703:71364:   examined nor set.  */
2704:71389:
2705:71390:static reg_errcode_t
2706:71411:regex_compile (pattern, size, syntax, bufp)
2707:71455:     const char *pattern;
2708:71481:     int size;
2709:71496:     reg_syntax_t syntax;
2710:71522:     struct re_pattern_buffer *bufp;
2711:71559:{
2712:71561:  /* We fetch characters from PATTERN here.  Even though PATTERN is
2713:71629:     `char *' (i.e., signed), we declare these variables as unsigned, so
2714:71702:     they can be reliably used as array indices.  */
2715:71755:  register unsigned char c, c1;
2716:71787:  
2717:71790:  /* A random tempory spot in PATTERN.  */
2718:71833:  const char *p1;
2719:71851:
2720:71852:  /* Points to the end of the buffer, where we should append.  */
2721:71918:  register unsigned char *b;
2722:71947:  
2723:71950:  /* Keeps track of unclosed groups.  */
2724:71991:  compile_stack_type compile_stack;
2725:72027:
2726:72028:  /* Points to the current (ending) position in the pattern.  */
2727:72093:  const char *p = pattern;
2728:72120:  const char *pend = pattern + size;
2729:72157:  
2730:72160:  /* How to translate the characters in the pattern.  */
2731:72217:  char *translate = bufp->translate;
2732:72254:
2733:72255:  /* Address of the count-byte of the most recently inserted `exactn'
2734:72325:     command.  This makes it possible to tell if a new exact-match
2735:72392:     character can be added to that command or if the character requires
2736:72465:     a new `exactn' command.  */
2737:72498:  unsigned char *pending_exact = 0;
2738:72534:
2739:72535:  /* Address of start of the most recently finished expression.
2740:72599:     This tells, e.g., postfix * where to find the start of its
2741:72663:     operand.  Reset at the beginning of groups and alternatives.  */
2742:72733:  unsigned char *laststart = 0;
2743:72765:
2744:72766:  /* Address of beginning of regexp, or inside of last group.  */
2745:72832:  unsigned char *begalt;
2746:72857:
2747:72858:  /* Place in the uncompiled pattern (i.e., the {) to
2748:72912:     which to go back if the interval is invalid.  */
2749:72966:  const char *beg_interval;
2750:72994:                
2751:73011:  /* Address of the place where a forward jump should go to the end of
2752:73082:     the containing expression.  Each alternative of an `or' -- except the
2753:73157:     last -- ends with a forward jump of this sort.  */
2754:73213:  unsigned char *fixup_alt_jump = 0;
2755:73250:
2756:73251:  /* Counts open-groups as they are encountered.  Remembered for the
2757:73320:     matching close-group on the compile stack, so the same register
2758:73389:     number is put in the stop_memory as the start_memory.  */
2759:73452:  regnum_t regnum = 0;
2760:73475:
2761:73476:#ifdef DEBUG
2762:73489:  DEBUG_PRINT1 ("\nCompiling pattern: ");
2763:73531:  if (debug)
2764:73544:    {
2765:73550:      unsigned debug_count;
2766:73578:      
2767:73585:      for (debug_count = 0; debug_count < size; debug_count++)
2768:73648:        printchar (pattern[debug_count]);
2769:73690:      putchar ('\n');
2770:73712:    }
2771:73718:#endif /* DEBUG */
2772:73737:
2773:73738:  /* Initialize the compile stack.  */
2774:73777:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
2775:73856:  if (compile_stack.stack == NULL)
2776:73891:    return REG_ESPACE;
2777:73914:
2778:73915:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
2779:73963:  compile_stack.avail = 0;
2780:73990:
2781:73991:  /* Initialize the pattern buffer.  */
2782:74031:  bufp->syntax = syntax;
2783:74056:  bufp->fastmap_accurate = 0;
2784:74086:  bufp->not_bol = bufp->not_eol = 0;
2785:74123:
2786:74124:  /* Set `used' to zero, so that if we return an error, the pattern
2787:74192:     printer (for debugging) will think there's no pattern.  We reset it
2788:74265:     at the end.  */
2789:74286:  bufp->used = 0;
2790:74304:  
2791:74307:  /* Always count groups, whether or not bufp->no_sub is set.  */
2792:74373:  bufp->re_nsub = 0;				
2793:74398:
2794:74399:#if !defined (emacs) && !defined (SYNTAX_TABLE)
2795:74447:  /* Initialize the syntax table.  */
2796:74485:   init_syntax_once ();
2797:74509:#endif
2798:74516:
2799:74517:  if (bufp->allocated == 0)
2800:74545:    {
2801:74551:      if (bufp->buffer)
2802:74575:	{ /* If zero allocated, but buffer is non-null, try to realloc
2803:74639:             enough space.  This loses if buffer's address is bogus, but
2804:74712:             that is the user's responsibility.  */
2805:74764:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
2806:74829:        }
2807:74839:      else
2808:74850:        { /* Caller did not allocate a buffer.  Do it for them.  */
2809:74918:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
2810:74982:        }
2811:74992:      if (!bufp->buffer) return REG_ESPACE;
2812:75036:
2813:75037:      bufp->allocated = INIT_BUF_SIZE;
2814:75076:    }
2815:75082:
2816:75083:  begalt = b = bufp->buffer;
2817:75112:
2818:75113:  /* Loop through the uncompiled pattern until we're at the end.  */
2819:75182:  while (p != pend)
2820:75202:    {
2821:75208:      PATFETCH (c);
2822:75228:
2823:75229:      switch (c)
2824:75246:        {
2825:75256:        case '^':
2826:75274:          {
2827:75286:            if (   /* If at start of pattern, it's an operator.  */
2828:75354:                   p == pattern + 1
2829:75390:                   /* If context independent, it's an operator.  */
2830:75458:                || syntax & RE_CONTEXT_INDEP_ANCHORS
2831:75511:                   /* Otherwise, depends on what's come before.  */
2832:75579:                || at_begline_loc_p (pattern, p, syntax))
2833:75637:              BUF_PUSH (begline);
2834:75671:            else
2835:75688:              goto normal_char;
2836:75720:          }
2837:75732:          break;
2838:75749:
2839:75750:
2840:75751:        case '$':
2841:75769:          {
2842:75781:            if (   /* If at end of pattern, it's an operator.  */
2843:75847:                   p == pend 
2844:75877:                   /* If context independent, it's an operator.  */
2845:75945:                || syntax & RE_CONTEXT_INDEP_ANCHORS
2846:75998:                   /* Otherwise, depends on what's next.  */
2847:76059:                || at_endline_loc_p (p, pend, syntax))
2848:76114:               BUF_PUSH (endline);
2849:76149:             else
2850:76167:               goto normal_char;
2851:76200:           }
2852:76213:           break;
2853:76231:
2854:76232:
2855:76233:	case '+':
2856:76244:        case '?':
2857:76262:          if ((syntax & RE_BK_PLUS_QM)
2858:76301:              || (syntax & RE_LIMITED_OPS))
2859:76345:            goto normal_char;
2860:76375:        handle_plus:
2861:76396:        case '*':
2862:76414:          /* If there is no previous pattern... */
2863:76465:          if (!laststart)
2864:76491:            {
2865:76505:              if (syntax & RE_CONTEXT_INVALID_OPS)
2866:76556:                return REG_BADRPT;
2867:76591:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
2868:76648:                goto normal_char;
2869:76682:            }
2870:76696:
2871:76697:          {
2872:76709:            /* Are we optimizing this jump?  */
2873:76757:            boolean keep_string_p = false;
2874:76800:            
2875:76813:            /* 1 means zero (many) matches is allowed.  */
2876:76872:            char zero_times_ok = 0, many_times_ok = 0;
2877:76927:
2878:76928:            /* If there is a sequence of repetition chars, collapse it
2879:76999:               down to just one (the right one).  We can't combine
2880:77066:               interval operators with these because of, e.g., `a{2}*',
2881:77138:               which should only match an even number of `a's.  */
2882:77205:
2883:77206:            for (;;)
2884:77227:              {
2885:77243:                zero_times_ok |= c != '+';
2886:77286:                many_times_ok |= c != '?';
2887:77329:
2888:77330:                if (p == pend)
2889:77361:                  break;
2890:77386:
2891:77387:                PATFETCH (c);
2892:77417:
2893:77418:                if (c == '*'
2894:77447:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
2895:77525:                  ;
2896:77545:
2897:77546:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
2898:77610:                  {
2899:77630:                    if (p == pend) return REG_EESCAPE;
2900:77685:
2901:77686:                    PATFETCH (c1);
2902:77721:                    if (!(c1 == '+' || c1 == '?'))
2903:77772:                      {
2904:77796:                        PATUNFETCH;
2905:77832:                        PATUNFETCH;
2906:77868:                        break;
2907:77899:                      }
2908:77923:
2909:77924:                    c = c1;
2910:77952:                  }
2911:77972:                else
2912:77993:                  {
2913:78013:                    PATUNFETCH;
2914:78045:                    break;
2915:78072:                  }
2916:78092:
2917:78093:                /* If we get here, we found another repeat character.  */
2918:78167:               }
2919:78184:
2920:78185:            /* Star, etc. applied to an empty pattern is equivalent
2921:78253:               to an empty pattern.  */
2922:78293:            if (!laststart)  
2923:78323:              break;
2924:78344:
2925:78345:            /* Now we know whether or not zero matches is allowed
2926:78411:               and also whether or not two or more matches is allowed.  */
2927:78486:            if (many_times_ok)
2928:78517:              { /* More than one repetition is allowed, so put in at the
2929:78590:                   end a backward relative jump from `b' to before the next
2930:78666:                   jump we're going to put in below (which jumps from
2931:78736:                   laststart to after this jump).  
2932:78788:
2933:78789:                   But if we are at the `*' in the exact sequence `.*\n',
2934:78863:                   insert an unconditional jump backwards to the .,
2935:78931:                   instead of the beginning of the loop.  This way we only
2936:79006:                   push a failure point once, instead of every time
2937:79074:                   through the loop.  */
2938:79115:                assert (p - 1 > pattern);
2939:79157:
2940:79158:                /* Allocate the space for the jump.  */
2941:79214:                GET_BUFFER_SPACE (3);
2942:79252:
2943:79253:                /* We know we are not at the first character of the pattern,
2944:79330:                   because laststart was nonzero.  And we've already
2945:79399:                   incremented `p', by the way, to be the character after
2946:79473:                   the `*'.  Do we have to do something analogous here
2947:79544:                   for null bytes, because of RE_DOT_NOT_NULL?  */
2948:79611:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
2949:79671:		    && zero_times_ok
2950:79694:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
2951:79764:                    && !(syntax & RE_DOT_NEWLINE))
2952:79815:                  { /* We have .*\n.  */
2953:79856:                    STORE_JUMP (jump, b, laststart);
2954:79909:                    keep_string_p = true;
2955:79951:                  }
2956:79971:                else
2957:79992:                  /* Anything else.  */
2958:80032:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
2959:80097:
2960:80098:                /* We've added more stuff to the buffer.  */
2961:80159:                b += 3;
2962:80183:              }
2963:80199:
2964:80200:            /* On failure, jump from laststart to b + 3, which will be the
2965:80275:               end of the buffer after this jump is inserted.  */
2966:80341:            GET_BUFFER_SPACE (3);
2967:80375:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
2968:80444:                                       : on_failure_jump,
2969:80502:                         laststart, b + 3);
2970:80546:            pending_exact = 0;
2971:80577:            b += 3;
2972:80597:
2973:80598:            if (!zero_times_ok)
2974:80630:              {
2975:80646:                /* At least one repetition is required, so insert a
2976:80714:                   `dummy_failure_jump' before the initial
2977:80773:                   `on_failure_jump' instruction of the loop. This
2978:80840:                   effects a skip over that instruction the first time
2979:80911:                   we hit that loop.  */
2980:80952:                GET_BUFFER_SPACE (3);
2981:80990:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
2982:81066:                b += 3;
2983:81090:              }
2984:81106:            }
2985:81120:	  break;
2986:81130:
2987:81131:
2988:81132:	case '.':
2989:81143:          laststart = b;
2990:81168:          BUF_PUSH (anychar);
2991:81198:          break;
2992:81215:
2993:81216:
2994:81217:        case '[':
2995:81235:          {
2996:81247:            boolean had_char_class = false;
2997:81291:
2998:81292:            if (p == pend) return REG_EBRACK;
2999:81338:
3000:81339:            /* Ensure that we have enough space to push a charset: the
3001:81410:               opcode, the length count, and the bitset; 34 bytes in all.  */
3002:81488:	    GET_BUFFER_SPACE (34);
3003:81516:
3004:81517:            laststart = b;
3005:81544:
3006:81545:            /* We test `*p == '^' twice, instead of using an if
3007:81609:               statement, so we only need one BUF_PUSH.  */
3008:81669:            BUF_PUSH (*p == '^' ? charset_not : charset); 
3009:81728:            if (*p == '^')
3010:81755:              p++;
3011:81774:
3012:81775:            /* Remember the first position in the bracket expression.  */
3013:81849:            p1 = p;
3014:81869:
3015:81870:            /* Push the number of bytes in the bitmap.  */
3016:81929:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
3017:81982:
3018:81983:            /* Clear the whole map.  */
3019:82023:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
3020:82076:
3021:82077:            /* charset_not matches newline according to a syntax bit.  */
3022:82151:            if ((re_opcode_t) b[-2] == charset_not
3023:82202:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
3024:82258:              SET_LIST_BIT ('\n');
3025:82293:
3026:82294:            /* Read in characters and ranges, setting map bits.  */
3027:82362:            for (;;)
3028:82383:              {
3029:82399:                if (p == pend) return REG_EBRACK;
3030:82449:
3031:82450:                PATFETCH (c);
3032:82480:
3033:82481:                /* \ might escape characters inside [...] and [^...].  */
3034:82555:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
3035:82629:                  {
3036:82649:                    if (p == pend) return REG_EESCAPE;
3037:82704:
3038:82705:                    PATFETCH (c1);
3039:82740:                    SET_LIST_BIT (c1);
3040:82779:                    continue;
3041:82809:                  }
3042:82829:
3043:82830:                /* Could be the end of the bracket expression.  If it's
3044:82902:                   not (i.e., when the bracket expression is `[]' so
3045:82971:                   far), the ']' character bit gets set way below.  */
3046:83042:                if (c == ']' && p != p1 + 1)
3047:83087:                  break;
3048:83112:
3049:83113:                /* Look ahead to see if it's a range when the last thing
3050:83186:                   was a character class.  */
3051:83232:                if (had_char_class && c == '-' && *p != ']')
3052:83293:                  return REG_ERANGE;
3053:83330:
3054:83331:                /* Look ahead to see if it's a range when the last thing
3055:83404:                   was a character: if this is a hyphen not at the
3056:83471:                   beginning or the end of a list, then it's the range
3057:83542:                   operator.  */
3058:83575:                if (c == '-' 
3059:83605:                    && !(p - 2 >= pattern && p[-2] == '[') 
3060:83665:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
3061:83740:                    && *p != ']')
3062:83774:                  {
3063:83794:                    reg_errcode_t ret
3064:83832:                      = compile_range (&p, pend, translate, syntax, b);
3065:83904:                    if (ret != REG_NOERROR) return ret;
3066:83960:                  }
3067:83980:
3068:83981:                else if (p[0] == '-' && p[1] != ']')
3069:84034:                  { /* This handles ranges made up of characters only.  */
3070:84109:                    reg_errcode_t ret;
3071:84148:
3072:84149:		    /* Move past the `-'.  */
3073:84181:                    PATFETCH (c1);
3074:84216:                    
3075:84237:                    ret = compile_range (&p, pend, translate, syntax, b);
3076:84311:                    if (ret != REG_NOERROR) return ret;
3077:84367:                  }
3078:84387:
3079:84388:                /* See if we're at the beginning of a possible character
3080:84461:                   class.  */
3081:84491:
3082:84492:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
3083:84568:                  { /* Leave room for the null.  */
3084:84620:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
3085:84677:
3086:84678:                    PATFETCH (c);
3087:84712:                    c1 = 0;
3088:84740:
3089:84741:                    /* If pattern is `[[:'.  */
3090:84789:                    if (p == pend) return REG_EBRACK;
3091:84843:
3092:84844:                    for (;;)
3093:84873:                      {
3094:84897:                        PATFETCH (c);
3095:84935:                        if (c == ':' || c == ']' || p == pend
3096:84997:                            || c1 == CHAR_CLASS_MAX_LENGTH)
3097:85057:                          break;
3098:85090:                        str[c1++] = c;
3099:85129:                      }
3100:85153:                    str[c1] = '\0';
3101:85189:
3102:85190:                    /* If isn't a word bracketed by `[:' and:`]':
3103:85256:                       undo the ending character, the letters, and leave 
3104:85330:                       the leading `:' and `[' (but set bits for them).  */
3105:85406:                    if (c == ':' && *p == ']')
3106:85453:                      {
3107:85477:                        int ch;
3108:85509:                        boolean is_alnum = STREQ (str, "alnum");
3109:85574:                        boolean is_alpha = STREQ (str, "alpha");
3110:85639:                        boolean is_blank = STREQ (str, "blank");
3111:85704:                        boolean is_cntrl = STREQ (str, "cntrl");
3112:85769:                        boolean is_digit = STREQ (str, "digit");
3113:85834:                        boolean is_graph = STREQ (str, "graph");
3114:85899:                        boolean is_lower = STREQ (str, "lower");
3115:85964:                        boolean is_print = STREQ (str, "print");
3116:86029:                        boolean is_punct = STREQ (str, "punct");
3117:86094:                        boolean is_space = STREQ (str, "space");
3118:86159:                        boolean is_upper = STREQ (str, "upper");
3119:86224:                        boolean is_xdigit = STREQ (str, "xdigit");
3120:86291:                        
3121:86316:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
3122:86385:
3123:86386:                        /* Throw away the ] at the end of the character
3124:86458:                           class.  */
3125:86496:                        PATFETCH (c);					
3126:86539:
3127:86540:                        if (p == pend) return REG_EBRACK;
3128:86598:
3129:86599:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
3130:86663:                          {
3131:86691:                            if (   (is_alnum  && ISALNUM (ch))
3132:86754:                                || (is_alpha  && ISALPHA (ch))
3133:86817:                                || (is_blank  && ISBLANK (ch))
3134:86880:                                || (is_cntrl  && ISCNTRL (ch))
3135:86943:                                || (is_digit  && ISDIGIT (ch))
3136:87006:                                || (is_graph  && ISGRAPH (ch))
3137:87069:                                || (is_lower  && ISLOWER (ch))
3138:87132:                                || (is_print  && ISPRINT (ch))
3139:87195:                                || (is_punct  && ISPUNCT (ch))
3140:87258:                                || (is_space  && ISSPACE (ch))
3141:87321:                                || (is_upper  && ISUPPER (ch))
3142:87384:                                || (is_xdigit && ISXDIGIT (ch)))
3143:87449:                            SET_LIST_BIT (ch);
3144:87496:                          }
3145:87524:                        had_char_class = true;
3146:87571:                      }
3147:87595:                    else
3148:87620:                      {
3149:87644:                        c1++;
3150:87674:                        while (c1--)    
3151:87715:                          PATUNFETCH;
3152:87753:                        SET_LIST_BIT ('[');
3153:87797:                        SET_LIST_BIT (':');
3154:87841:                        had_char_class = false;
3155:87889:                      }
3156:87913:                  }
3157:87933:                else
3158:87954:                  {
3159:87974:                    had_char_class = false;
3160:88018:                    SET_LIST_BIT (c);
3161:88056:                  }
3162:88076:              }
3163:88092:
3164:88093:            /* Discard any (non)matching list bytes that are all 0 at the
3165:88167:               end of the map.  Decrease the map-length byte too.  */
3166:88237:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
3167:88295:              b[-1]--; 
3168:88319:            b += b[-1];
3169:88343:          }
3170:88355:          break;
3171:88372:
3172:88373:
3173:88374:	case '(':
3174:88385:          if (syntax & RE_NO_BK_PARENS)
3175:88425:            goto handle_open;
3176:88455:          else
3177:88470:            goto normal_char;
3178:88500:
3179:88501:
3180:88502:        case ')':
3181:88520:          if (syntax & RE_NO_BK_PARENS)
3182:88560:            goto handle_close;
3183:88591:          else
3184:88606:            goto normal_char;
3185:88636:
3186:88637:
3187:88638:        case '\n':
3188:88657:          if (syntax & RE_NEWLINE_ALT)
3189:88696:            goto handle_alt;
3190:88725:          else
3191:88740:            goto normal_char;
3192:88770:
3193:88771:
3194:88772:	case '|':
3195:88783:          if (syntax & RE_NO_BK_VBAR)
3196:88821:            goto handle_alt;
3197:88850:          else
3198:88865:            goto normal_char;
3199:88895:
3200:88896:
3201:88897:        case '{':
3202:88915:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
3203:88981:             goto handle_interval;
3204:89016:           else
3205:89032:             goto normal_char;
3206:89063:
3207:89064:
3208:89065:        case '\\':
3209:89084:          if (p == pend) return REG_EESCAPE;
3210:89129:
3211:89130:          /* Do not translate the character after the \, so that we can
3212:89202:             distinguish, e.g., \B from \b, even if we normally would
3213:89272:             translate, e.g., B to b.  */
3214:89314:          PATFETCH_RAW (c);
3215:89342:
3216:89343:          switch (c)
3217:89364:            {
3218:89378:            case '(':
3219:89400:              if (syntax & RE_NO_BK_PARENS)
3220:89444:                goto normal_backslash;
3221:89483:
3222:89484:            handle_open:
3223:89509:              bufp->re_nsub++;
3224:89540:              regnum++;
3225:89564:
3226:89565:              if (COMPILE_STACK_FULL)
3227:89603:                { 
3228:89622:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
3229:89696:                            compile_stack_elt_t);
3230:89746:                  if (compile_stack.stack == NULL) return REG_ESPACE;
3231:89816:
3232:89817:                  compile_stack.size <<= 1;
3233:89861:                }
3234:89879:
3235:89880:              /* These are the values to restore when we hit end of this
3236:89953:                 group.  They are all relative offsets, so that if the
3237:90024:                 whole pattern moves because of realloc, they will still
3238:90097:                 be valid.  */
3239:90128:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
3240:90199:              COMPILE_STACK_TOP.fixup_alt_jump 
3241:90247:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
3242:90321:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
3243:90390:              COMPILE_STACK_TOP.regnum = regnum;
3244:90439:
3245:90440:              /* We will eventually replace the 0 with the number of
3246:90509:                 groups inner to this one.  But do not push a
3247:90571:                 start_memory for groups beyond the last one we can
3248:90639:                 represent in the compiled pattern.  */
3249:90695:              if (regnum <= MAX_REGNUM)
3250:90735:                {
3251:90753:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
3252:90832:                  BUF_PUSH_3 (start_memory, regnum, 0);
3253:90888:                }
3254:90906:                
3255:90923:              compile_stack.avail++;
3256:90960:
3257:90961:              fixup_alt_jump = 0;
3258:90995:              laststart = 0;
3259:91024:              begalt = b;
3260:91050:	      /* If we've reached MAX_REGNUM groups, then this open
3261:91111:		 won't actually generate any code, so we'll have to
3262:91165:		 clear pending_exact explicitly.  */
3263:91204:	      pending_exact = 0;
3264:91230:              break;
3265:91251:
3266:91252:
3267:91253:            case ')':
3268:91275:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
3269:91342:
3270:91343:              if (COMPILE_STACK_EMPTY)
3271:91382:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
3272:91441:                  goto normal_backslash;
3273:91482:                else
3274:91503:                  return REG_ERPAREN;
3275:91541:
3276:91542:            handle_close:
3277:91568:              if (fixup_alt_jump)
3278:91602:                { /* Push a dummy failure point at the end of the
3279:91668:                     alternative for a possible future
3280:91723:                     `pop_failure_jump' to pop.  See comments at
3281:91788:                     `push_dummy_failure' in `re_match_2'.  */
3282:91851:                  BUF_PUSH (push_dummy_failure);
3283:91900:                  
3284:91919:                  /* We allocated space for this jump when we assigned
3285:91990:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
3286:92068:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
3287:92137:                }
3288:92155:
3289:92156:              /* See similar code for backslashed left paren above.  */
3290:92228:              if (COMPILE_STACK_EMPTY)
3291:92267:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
3292:92326:                  goto normal_char;
3293:92362:                else
3294:92383:                  return REG_ERPAREN;
3295:92421:
3296:92422:              /* Since we just checked for an empty stack above, this
3297:92492:                 ``can't happen''.  */
3298:92531:              assert (compile_stack.avail != 0);
3299:92580:              {
3300:92596:                /* We don't just want to restore into `regnum', because
3301:92668:                   later groups should continue to be numbered higher,
3302:92739:                   as in `(ab)c(de)' -- the second group is #2.  */
3303:92807:                regnum_t this_group_regnum;
3304:92851:
3305:92852:                compile_stack.avail--;		
3306:92893:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
3307:92966:                fixup_alt_jump
3308:92997:                  = COMPILE_STACK_TOP.fixup_alt_jump
3309:93050:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
3310:93125:                    : 0;
3311:93150:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
3312:93229:                this_group_regnum = COMPILE_STACK_TOP.regnum;
3313:93291:		/* If we've reached MAX_REGNUM groups, then this open
3314:93347:		   won't actually generate any code, so we'll have to
3315:93403:		   clear pending_exact explicitly.  */
3316:93444:		pending_exact = 0;
3317:93465:
3318:93466:                /* We're at the end of the group, so now we know how many
3319:93540:                   groups were inside this one.  */
3320:93592:                if (this_group_regnum <= MAX_REGNUM)
3321:93645:                  {
3322:93665:                    unsigned char *inner_group_loc
3323:93716:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
3324:93793:                    
3325:93814:                    *inner_group_loc = regnum - this_group_regnum;
3326:93881:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
3327:93945:                                regnum - this_group_regnum);
3328:94006:                  }
3329:94026:              }
3330:94042:              break;
3331:94063:
3332:94064:
3333:94065:            case '|':					/* `\|'.  */
3334:94104:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
3335:94173:                goto normal_backslash;
3336:94212:            handle_alt:
3337:94236:              if (syntax & RE_LIMITED_OPS)
3338:94279:                goto normal_char;
3339:94313:
3340:94314:              /* Insert before the previous alternative a jump which
3341:94383:                 jumps to this alternative if the former fails.  */
3342:94451:              GET_BUFFER_SPACE (3);
3343:94487:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
3344:94547:              pending_exact = 0;
3345:94580:              b += 3;
3346:94602:
3347:94603:              /* The alternative before this one has a jump after it
3348:94672:                 which gets executed if it gets matched.  Adjust that
3349:94742:                 jump so it will jump to this alternative's analogous
3350:94812:                 jump (put in below, which in turn will jump to the next
3351:94885:                 (if any) alternative's such jump, etc.).  The last such
3352:94958:                 jump jumps to the correct final destination.  A picture:
3353:95032:                          _____ _____ 
3354:95071:                          |   | |   |   
3355:95112:                          |   v |   v 
3356:95151:                         a | b   | c   
3357:95191:
3358:95192:                 If we are at `b', then fixup_alt_jump right now points to a
3359:95269:                 three-byte space after `a'.  We'll put in the jump, set
3360:95342:                 fixup_alt_jump to right after `b', and leave behind three
3361:95417:                 bytes which we'll fill in when we get to after `c'.  */
3362:95490:
3363:95491:              if (fixup_alt_jump)
3364:95525:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
3365:95588:
3366:95589:              /* Mark and leave space for a jump after this alternative,
3367:95662:                 to be filled in later either by next alternative or
3368:95731:                 when know we're at the end of a series of alternatives.  */
3369:95808:              fixup_alt_jump = b;
3370:95842:              GET_BUFFER_SPACE (3);
3371:95878:              b += 3;
3372:95900:
3373:95901:              laststart = 0;
3374:95930:              begalt = b;
3375:95956:              break;
3376:95977:
3377:95978:
3378:95979:            case '{': 
3379:96002:              /* If \{ is a literal.  */
3380:96043:              if (!(syntax & RE_INTERVALS)
3381:96086:                     /* If we're at `\{' and it's not the open-interval 
3382:96159:                        operator.  */
3383:96197:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
3384:96274:                  || (p - 2 == pattern  &&  p == pend))
3385:96330:                goto normal_backslash;
3386:96369:
3387:96370:            handle_interval:
3388:96399:              {
3389:96415:                /* If got here, then the syntax allows intervals.  */
3390:96485:
3391:96486:                /* At least (most) this many matches must be made.  */
3392:96557:                int lower_bound = -1, upper_bound = -1;
3393:96613:
3394:96614:                beg_interval = p - 1;
3395:96652:
3396:96653:                if (p == pend)
3397:96684:                  {
3398:96704:                    if (syntax & RE_NO_BK_BRACES)
3399:96754:                      goto unfetch_interval;
3400:96799:                    else
3401:96824:                      return REG_EBRACE;
3402:96865:                  }
3403:96885:
3404:96886:                GET_UNSIGNED_NUMBER (lower_bound);
3405:96937:
3406:96938:                if (c == ',')
3407:96968:                  {
3408:96988:                    GET_UNSIGNED_NUMBER (upper_bound);
3409:97043:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
3410:97110:                  }
3411:97130:                else
3412:97151:                  /* Interval such as `{1}' => match exactly once. */
3413:97221:                  upper_bound = lower_bound;
3414:97266:
3415:97267:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
3416:97331:                    || lower_bound > upper_bound)
3417:97381:                  {
3418:97401:                    if (syntax & RE_NO_BK_BRACES)
3419:97451:                      goto unfetch_interval;
3420:97496:                    else 
3421:97522:                      return REG_BADBR;
3422:97562:                  }
3423:97582:
3424:97583:                if (!(syntax & RE_NO_BK_BRACES)) 
3425:97633:                  {
3426:97653:                    if (c != '\\') return REG_EBRACE;
3427:97707:
3428:97708:                    PATFETCH (c);
3429:97742:                  }
3430:97762:
3431:97763:                if (c != '}')
3432:97793:                  {
3433:97813:                    if (syntax & RE_NO_BK_BRACES)
3434:97863:                      goto unfetch_interval;
3435:97908:                    else 
3436:97934:                      return REG_BADBR;
3437:97974:                  }
3438:97994:
3439:97995:                /* We just parsed a valid interval.  */
3440:98051:
3441:98052:                /* If it's invalid to have no preceding re.  */
3442:98116:                if (!laststart)
3443:98148:                  {
3444:98168:                    if (syntax & RE_CONTEXT_INVALID_OPS)
3445:98225:                      return REG_BADRPT;
3446:98266:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
3447:98326:                      laststart = b;
3448:98363:                    else
3449:98388:                      goto unfetch_interval;
3450:98433:                  }
3451:98453:
3452:98454:                /* If the upper bound is zero, don't want to succeed at
3453:98526:                   all; jump from `laststart' to `b + 3', which will be
3454:98598:                   the end of the buffer after we insert the jump.  */
3455:98669:                 if (upper_bound == 0)
3456:98708:                   {
3457:98729:                     GET_BUFFER_SPACE (3);
3458:98772:                     INSERT_JUMP (jump, laststart, b + 3);
3459:98831:                     b += 3;
3460:98860:                   }
3461:98881:
3462:98882:                 /* Otherwise, we have a nontrivial interval.  When
3463:98950:                    we're all done, the pattern will look like:
3464:99014:                      set_number_at <jump count> <upper bound>
3465:99077:                      set_number_at <succeed_n count> <lower bound>
3466:99145:                      succeed_n <after jump addr> <succed_n count>
3467:99212:                      <body of loop>
3468:99249:                      jump_n <succeed_n addr> <jump count>
3469:99308:                    (The upper bound and `jump_n' are omitted if
3470:99373:                    `upper_bound' is 1, though.)  */
3471:99426:                 else 
3472:99449:                   { /* If the upper bound is > 1, we need to insert
3473:99518:                        more at the end of the loop.  */
3474:99575:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
3475:99643:
3476:99644:                     GET_BUFFER_SPACE (nbytes);
3477:99692:
3478:99693:                     /* Initialize lower bound of the `succeed_n', even
3479:99765:                        though it will be set during matching by its
3480:99834:                        attendant `set_number_at' (inserted next),
3481:99901:                        because `re_compile_fastmap' needs to know.
3482:99969:                        Jump to the `jump_n' we might insert below.  */
3483:100041:                     INSERT_JUMP2 (succeed_n, laststart,
3484:100098:                                   b + 5 + (upper_bound > 1) * 5,
3485:100164:                                   lower_bound);
3486:100213:                     b += 5;
3487:100242:
3488:100243:                     /* Code to initialize the lower bound.  Insert 
3489:100312:                        before the `succeed_n'.  The `5' is the last two
3490:100385:                        bytes of this `set_number_at', plus 3 bytes of
3491:100456:                        the following `succeed_n'.  */
3492:100511:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
3493:100590:                     b += 5;
3494:100619:
3495:100620:                     if (upper_bound > 1)
3496:100662:                       { /* More than one repetition is allowed, so
3497:100730:                            append a backward jump to the `succeed_n'
3498:100800:                            that starts this interval.
3499:100855:                            
3500:100884:                            When we've reached this during matching,
3501:100953:                            we'll have matched the interval once, so
3502:101022:                            jump back only `upper_bound - 1' times.  */
3503:101094:                         STORE_JUMP2 (jump_n, b, laststart + 5,
3504:101158:                                      upper_bound - 1);
3505:101214:                         b += 5;
3506:101247:
3507:101248:                         /* The location we want to set is the second
3508:101318:                            parameter of the `jump_n'; that is `b-2' as
3509:101390:                            an absolute address.  `laststart' will be
3510:101460:                            the `set_number_at' we're about to insert;
3511:101531:                            `laststart+3' the number to set, the source
3512:101603:                            for the relative address.  But we are
3513:101669:                            inserting into the middle of the pattern --
3514:101741:                            so everything is getting moved up by 5.
3515:101809:                            Conclusion: (b - 2) - (laststart + 3) + 5,
3516:101880:                            i.e., b - laststart.
3517:101929:                            
3518:101958:                            We insert this at the beginning of the loop
3519:102030:                            so that if we fail during matching, we'll
3520:102100:                            reinitialize the bounds.  */
3521:102157:                         insert_op2 (set_number_at, laststart, b - laststart,
3522:102235:                                     upper_bound - 1, b);
3523:102293:                         b += 5;
3524:102326:                       }
3525:102351:                   }
3526:102372:                pending_exact = 0;
3527:102407:                beg_interval = NULL;
3528:102444:              }
3529:102460:              break;
3530:102481:
3531:102482:            unfetch_interval:
3532:102512:              /* If an invalid interval, match the characters as literals.  */
3533:102591:               assert (beg_interval);
3534:102629:               p = beg_interval;
3535:102662:               beg_interval = NULL;
3536:102698:
3537:102699:               /* normal_char and normal_backslash need `c'.  */
3538:102764:               PATFETCH (c);	
3539:102794:
3540:102795:               if (!(syntax & RE_NO_BK_BRACES))
3541:102843:                 {
3542:102862:                   if (p > pattern  &&  p[-1] == '\\')
3543:102917:                     goto normal_backslash;
3544:102961:                 }
3545:102980:               goto normal_char;
3546:103013:
3547:103014:#ifdef emacs
3548:103027:            /* There is no way to specify the before_dot and after_dot
3549:103098:               operators.  rms says this is ok.  --karl  */
3550:103158:            case '=':
3551:103180:              BUF_PUSH (at_dot);
3552:103213:              break;
3553:103234:
3554:103235:            case 's':	
3555:103258:              laststart = b;
3556:103287:              PATFETCH (c);
3557:103315:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
3558:103375:              break;
3559:103396:
3560:103397:            case 'S':
3561:103419:              laststart = b;
3562:103448:              PATFETCH (c);
3563:103476:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
3564:103539:              break;
3565:103560:#endif /* emacs */
3566:103579:
3567:103580:
3568:103581:            case 'w':
3569:103603:              laststart = b;
3570:103632:              BUF_PUSH (wordchar);
3571:103667:              break;
3572:103688:
3573:103689:
3574:103690:            case 'W':
3575:103712:              laststart = b;
3576:103741:              BUF_PUSH (notwordchar);
3577:103779:              break;
3578:103800:
3579:103801:
3580:103802:            case '<':
3581:103824:              BUF_PUSH (wordbeg);
3582:103858:              break;
3583:103879:
3584:103880:            case '>':
3585:103902:              BUF_PUSH (wordend);
3586:103936:              break;
3587:103957:
3588:103958:            case 'b':
3589:103980:              BUF_PUSH (wordbound);
3590:104016:              break;
3591:104037:
3592:104038:            case 'B':
3593:104060:              BUF_PUSH (notwordbound);
3594:104099:              break;
3595:104120:
3596:104121:            case '`':
3597:104143:              BUF_PUSH (begbuf);
3598:104176:              break;
3599:104197:
3600:104198:            case '\'':
3601:104221:              BUF_PUSH (endbuf);
3602:104254:              break;
3603:104275:
3604:104276:            case '1': case '2': case '3': case '4': case '5':
3605:104338:            case '6': case '7': case '8': case '9':
3606:104390:              if (syntax & RE_NO_BK_REFS)
3607:104432:                goto normal_char;
3608:104466:
3609:104467:              c1 = c - '0';
3610:104495:
3611:104496:              if (c1 > regnum)
3612:104527:                return REG_ESUBREG;
3613:104563:
3614:104564:              /* Can't back reference to a subexpression if inside of it.  */
3615:104642:              if (group_in_compile_stack (compile_stack, c1))
3616:104704:                goto normal_char;
3617:104738:
3618:104739:              laststart = b;
3619:104768:              BUF_PUSH_2 (duplicate, c1);
3620:104810:              break;
3621:104831:
3622:104832:
3623:104833:            case '+':
3624:104855:            case '?':
3625:104877:              if (syntax & RE_BK_PLUS_QM)
3626:104919:                goto handle_plus;
3627:104953:              else
3628:104972:                goto normal_backslash;
3629:105011:
3630:105012:            default:
3631:105033:            normal_backslash:
3632:105063:              /* You might think it would be useful for \ to mean
3633:105129:                 not to translate; but if we don't translate it
3634:105193:                 it will never match anything.  */
3635:105244:              c = TRANSLATE (c);
3636:105277:              goto normal_char;
3637:105309:            }
3638:105323:          break;
3639:105340:
3640:105341:
3641:105342:	default:
3642:105352:        /* Expects the character in `c'.  */
3643:105397:	normal_char:
3644:105411:	      /* If no exactn currently being built.  */
3645:105461:          if (!pending_exact 
3646:105491:
3647:105492:              /* If last exactn not at current position.  */
3648:105553:              || pending_exact + *pending_exact + 1 != b
3649:105610:              
3650:105625:              /* We have only one byte following the exactn for the count.  */
3651:105704:	      || *pending_exact == (1 << BYTEWIDTH) - 1
3652:105753:
3653:105754:              /* If followed by a repetition operator.  */
3654:105813:              || *p == '*' || *p == '^'
3655:105853:	      || ((syntax & RE_BK_PLUS_QM)
3656:105889:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
3657:105938:		  : (*p == '+' || *p == '?'))
3658:105970:	      || ((syntax & RE_INTERVALS)
3659:106005:                  && ((syntax & RE_NO_BK_BRACES)
3660:106054:		      ? *p == '{'
3661:106074:                      : (p[0] == '\\' && p[1] == '{'))))
3662:106131:	    {
3663:106138:	      /* Start building a new exactn.  */
3664:106181:              
3665:106196:              laststart = b;
3666:106225:
3667:106226:	      BUF_PUSH_2 (exactn, 0);
3668:106257:	      pending_exact = b - 1;
3669:106287:            }
3670:106301:            
3671:106314:	  BUF_PUSH (c);
3672:106331:          (*pending_exact)++;
3673:106361:	  break;
3674:106371:        } /* switch (c) */
3675:106398:    } /* while p != pend */
3676:106426:
3677:106427:  
3678:106430:  /* Through the pattern now.  */
3679:106464:  
3680:106467:  if (fixup_alt_jump)
3681:106489:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
3682:106540:
3683:106541:  if (!COMPILE_STACK_EMPTY) 
3684:106570:    return REG_EPAREN;
3685:106593:
3686:106594:  free (compile_stack.stack);
3687:106624:
3688:106625:  /* We have succeeded; set the length of the buffer.  */
3689:106683:  bufp->used = b - bufp->buffer;
3690:106716:
3691:106717:#ifdef DEBUG
3692:106730:  if (debug)
3693:106743:    {
3694:106749:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
3695:106796:      print_compiled_pattern (bufp);
3696:106833:    }
3697:106839:#endif /* DEBUG */
3698:106858:
3699:106859:  return REG_NOERROR;
3700:106881:} /* regex_compile */
3701:106903:
3702:106905:/* Subroutines for `regex_compile'.  */
3703:106945:
3704:106946:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
3705:107013:
3706:107014:static void
3707:107026:store_op1 (op, loc, arg)
3708:107051:    re_opcode_t op;
3709:107071:    unsigned char *loc;
3710:107095:    int arg;
3711:107108:{
3712:107110:  *loc = (unsigned char) op;
3713:107139:  STORE_NUMBER (loc + 1, arg);
3714:107170:}
3715:107172:
3716:107173:
3717:107174:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
3718:107248:
3719:107249:static void
3720:107261:store_op2 (op, loc, arg1, arg2)
3721:107293:    re_opcode_t op;
3722:107313:    unsigned char *loc;
3723:107337:    int arg1, arg2;
3724:107357:{
3725:107359:  *loc = (unsigned char) op;
3726:107388:  STORE_NUMBER (loc + 1, arg1);
3727:107420:  STORE_NUMBER (loc + 3, arg2);
3728:107452:}
3729:107454:
3730:107455:
3731:107456:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
3732:107529:   for OP followed by two-byte integer parameter ARG.  */
3733:107587:
3734:107588:static void
3735:107600:insert_op1 (op, loc, arg, end)
3736:107631:    re_opcode_t op;
3737:107651:    unsigned char *loc;
3738:107675:    int arg;
3739:107688:    unsigned char *end;    
3740:107716:{
3741:107718:  register unsigned char *pfrom = end;
3742:107757:  register unsigned char *pto = end + 3;
3743:107798:
3744:107799:  while (pfrom != loc)
3745:107822:    *--pto = *--pfrom;
3746:107845:    
3747:107850:  store_op1 (op, loc, arg);
3748:107878:}
3749:107880:
3750:107881:
3751:107882:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
3752:107955:
3753:107956:static void
3754:107968:insert_op2 (op, loc, arg1, arg2, end)
3755:108006:    re_opcode_t op;
3756:108026:    unsigned char *loc;
3757:108050:    int arg1, arg2;
3758:108070:    unsigned char *end;    
3759:108098:{
3760:108100:  register unsigned char *pfrom = end;
3761:108139:  register unsigned char *pto = end + 5;
3762:108180:
3763:108181:  while (pfrom != loc)
3764:108204:    *--pto = *--pfrom;
3765:108227:    
3766:108232:  store_op2 (op, loc, arg1, arg2);
3767:108267:}
3768:108269:
3769:108270:
3770:108271:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
3771:108342:   after an alternative or a begin-subexpression.  We assume there is at
3772:108415:   least one character before the ^.  */
3773:108456:
3774:108457:static boolean
3775:108472:at_begline_loc_p (pattern, p, syntax)
3776:108510:    const char *pattern, *p;
3777:108539:    reg_syntax_t syntax;
3778:108564:{
3779:108566:  const char *prev = p - 2;
3780:108594:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
3781:108662:  
3782:108665:  return
3783:108674:       /* After a subexpression?  */
3784:108711:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
3785:108786:       /* After an alternative?  */
3786:108822:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
3787:108896:}
3788:108898:
3789:108899:
3790:108900:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
3791:108973:   at least one character after the $, i.e., `P < PEND'.  */
3792:109034:
3793:109035:static boolean
3794:109050:at_endline_loc_p (p, pend, syntax)
3795:109085:    const char *p, *pend;
3796:109111:    int syntax;
3797:109127:{
3798:109129:  const char *next = p;
3799:109153:  boolean next_backslash = *next == '\\';
3800:109195:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
3801:109250:  
3802:109253:  return
3803:109262:       /* Before a subexpression?  */
3804:109300:       (syntax & RE_NO_BK_PARENS ? *next == ')'
3805:109348:        : next_backslash && next_next && *next_next == ')')
3806:109408:       /* Before an alternative?  */
3807:109445:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
3808:109491:        : next_backslash && next_next && *next_next == '|');
3809:109552:}
3810:109554:
3811:109555:
3812:109556:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
3813:109625:   false if it's not.  */
3814:109651:
3815:109652:static boolean
3816:109667:group_in_compile_stack (compile_stack, regnum)
3817:109714:    compile_stack_type compile_stack;
3818:109752:    regnum_t regnum;
3819:109773:{
3820:109775:  int this_element;
3821:109795:
3822:109796:  for (this_element = compile_stack.avail - 1;  
3823:109845:       this_element >= 0; 
3824:109872:       this_element--)
3825:109895:    if (compile_stack.stack[this_element].regnum == regnum)
3826:109955:      return true;
3827:109974:
3828:109975:  return false;
3829:109991:}
3830:109993:
3831:109994:
3832:109995:/* Read the ending character of a range (in a bracket expression) from the
3833:110070:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
3834:110136:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
3835:110206:   Then we set the translation of all bits between the starting and
3836:110274:   ending characters (inclusive) in the compiled pattern B.
3837:110334:   
3838:110338:   Return an error code.
3839:110363:   
3840:110367:   We use these short variable names so we can use the same macros as
3841:110437:   `regex_compile' itself.  */
3842:110468:
3843:110469:static reg_errcode_t
3844:110490:compile_range (p_ptr, pend, translate, syntax, b)
3845:110540:    const char **p_ptr, *pend;
3846:110571:    char *translate;
3847:110592:    reg_syntax_t syntax;
3848:110617:    unsigned char *b;
3849:110639:{
3850:110641:  unsigned this_char;
3851:110663:
3852:110664:  const char *p = *p_ptr;
3853:110690:  int range_start, range_end;
3854:110720:  
3855:110723:  if (p == pend)
3856:110740:    return REG_ERANGE;
3857:110763:
3858:110764:  /* Even though the pattern is a signed `char *', we need to fetch
3859:110832:     with unsigned char *'s; if the high bit of the pattern character
3860:110902:     is set, the range endpoints will be negative if we fetch using a
3861:110972:     signed char *.
3862:110992:
3863:110993:     We also want to fetch the endpoints without translating them; the 
3864:111065:     appropriate translation is done in the bit-setting loop below.  */
3865:111137:  range_start = ((unsigned char *) p)[-2];
3866:111180:  range_end   = ((unsigned char *) p)[0];
3867:111222:
3868:111223:  /* Have to increment the pointer into the pattern string, so the
3869:111290:     caller isn't still at the ending character.  */
3870:111343:  (*p_ptr)++;
3871:111357:
3872:111358:  /* If the start is after the end, the range is empty.  */
3873:111418:  if (range_start > range_end)
3874:111449:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
3875:111516:
3876:111517:  /* Here we see why `this_char' has to be larger than an `unsigned
3877:111585:     char' -- the range is inclusive, so if `range_end' == 0xff
3878:111649:     (assuming 8-bit characters), we would otherwise go into an infinite
3879:111722:     loop, since all characters <= 0xff.  */
3880:111767:  for (this_char = range_start; this_char <= range_end; this_char++)
3881:111836:    {
3882:111842:      SET_LIST_BIT (TRANSLATE (this_char));
3883:111886:    }
3884:111892:  
3885:111895:  return REG_NOERROR;
3886:111917:}
3887:111919:
3888:111921:/* Failure stack declarations and macros; both re_compile_fastmap and
3889:111991:   re_match_2 use a failure stack.  These have to be macros because of
3890:112062:   REGEX_ALLOCATE.  */
3891:112085:   
3892:112089:
3893:112090:/* Number of failure points for which to initially allocate space
3894:112156:   when matching.  If this number is exceeded, we allocate more
3895:112220:   space, so it is not a hard limit.  */
3896:112261:#ifndef INIT_FAILURE_ALLOC
3897:112288:#define INIT_FAILURE_ALLOC 5
3898:112317:#endif
3899:112324:
3900:112325:/* Roughly the maximum number of failure points on the stack.  Would be
3901:112397:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
3902:112467:   This is a variable only so users of regex can assign to it; we never
3903:112539:   change it ourselves.  */
3904:112567:int re_max_failures = 2000;
3905:112595:
3906:112596:typedef const unsigned char *fail_stack_elt_t;
3907:112643:
3908:112644:typedef struct
3909:112659:{
3910:112661:  fail_stack_elt_t *stack;
3911:112688:  unsigned size;
3912:112705:  unsigned avail;			/* Offset of next open position.  */
3913:112762:} fail_stack_type;
3914:112781:
3915:112782:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
3916:112837:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
3917:112897:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
3918:112966:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
3919:113034:
3920:113035:
3921:113036:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
3922:113104:
3923:113105:#define INIT_FAIL_STACK()						\
3924:113138:  do {									\
3925:113155:    fail_stack.stack = (fail_stack_elt_t *)				\
3926:113204:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
3927:113277:									\
3928:113288:    if (fail_stack.stack == NULL)					\
3929:113328:      return -2;							\
3930:113353:									\
3931:113364:    fail_stack.size = INIT_FAILURE_ALLOC;				\
3932:113411:    fail_stack.avail = 0;						\
3933:113444:  } while (0)
3934:113458:
3935:113459:
3936:113460:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
3937:113539:
3938:113540:   Return 1 if succeeds, and 0 if either ran out of memory
3939:113599:   allocating space for it or it was already too large.  
3940:113657:   
3941:113661:   REGEX_REALLOCATE requires `destination' be declared.   */
3942:113722:
3943:113723:#define DOUBLE_FAIL_STACK(fail_stack)					\
3944:113767:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
3945:113829:   ? 0									\
3946:113846:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
3947:113899:        REGEX_REALLOCATE ((fail_stack).stack, 				\
3948:113951:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
3949:114011:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
3950:114078:									\
3951:114089:      (fail_stack).stack == NULL					\
3952:114128:      ? 0								\
3953:114147:      : ((fail_stack).size <<= 1, 					\
3954:114188:         1)))
3955:114202:
3956:114203:
3957:114204:/* Push PATTERN_OP on FAIL_STACK. 
3958:114239:
3959:114240:   Return 1 if was able to do so and 0 if ran out of memory allocating
3960:114311:   space to do so.  */
3961:114334:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
3962:114387:  ((FAIL_STACK_FULL ()							\
3963:114418:    && !DOUBLE_FAIL_STACK (fail_stack))					\
3964:114464:    ? 0									\
3965:114482:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
3966:114547:       1))
3967:114558:
3968:114559:/* This pushes an item onto the failure stack.  Must be a four-byte
3969:114627:   value.  Assumes the variable `fail_stack'.  Probably should only
3970:114695:   be called from within `PUSH_FAILURE_POINT'.  */
3971:114746:#define PUSH_FAILURE_ITEM(item)						\
3972:114785:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
3973:114850:
3974:114851:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
3975:114919:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
3976:114983:
3977:114984:/* Used to omit pushing failure point id's when we're not debugging.  */
3978:115057:#ifdef DEBUG
3979:115070:#define DEBUG_PUSH PUSH_FAILURE_ITEM
3980:115107:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
3981:115171:#else
3982:115177:#define DEBUG_PUSH(item)
3983:115202:#define DEBUG_POP(item_addr)
3984:115231:#endif
3985:115238:
3986:115239:
3987:115240:/* Push the information about the state we will need
3988:115293:   if we ever fail back to it.  
3989:115326:   
3990:115330:   Requires variables fail_stack, regstart, regend, reg_info, and
3991:115396:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
3992:115466:   declared.
3993:115479:   
3994:115483:   Does `return FAILURE_CODE' if runs out of memory.  */
3995:115540:
3996:115541:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
3997:115613:  do {									\
3998:115630:    char *destination;							\
3999:115661:    /* Must be int, so when we don't save any registers, the arithmetic	\
4000:115735:       of 0 + -1 isn't done as unsigned.  */				\
4001:115785:    int this_reg;							\
4002:115811:    									\
4003:115826:    DEBUG_STATEMENT (failure_id++);					\
4004:115868:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
4005:115921:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
4006:115986:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
4007:116061:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
4008:116135:									\
4009:116146:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
4010:116211:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
4011:116279:									\
4012:116290:    /* Ensure we have enough space allocated for what we will push.  */	\
4013:116364:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
4014:116422:      {									\
4015:116440:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
4016:116489:          return failure_code;						\
4017:116527:									\
4018:116538:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
4019:116600:		       (fail_stack).size);				\
4020:116634:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
4021:116708:      }									\
4022:116726:									\
4023:116737:    /* Push the info, starting with the registers.  */			\
4024:116796:    DEBUG_PRINT1 ("\n");						\
4025:116828:									\
4026:116839:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
4027:116912:         this_reg++)							\
4028:116941:      {									\
4029:116959:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
4030:117012:        DEBUG_STATEMENT (num_regs_pushed++);				\
4031:117062:									\
4032:117073:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
4033:117133:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
4034:117186:                                                                        \
4035:117260:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
4036:117316:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
4037:117367:									\
4038:117378:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
4039:117442:        DEBUG_PRINT2 (" match_null=%d",					\
4040:117488:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
4041:117559:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
4042:117630:        DEBUG_PRINT2 (" matched_something=%d",				\
4043:117682:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
4044:117748:        DEBUG_PRINT2 (" ever_matched=%d",				\
4045:117795:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
4046:117865:	DEBUG_PRINT1 ("\n");						\
4047:117894:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
4048:117951:      }									\
4049:117969:									\
4050:117980:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
4051:118054:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
4052:118102:									\
4053:118113:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
4054:118188:    PUSH_FAILURE_ITEM (highest_active_reg);				\
4055:118237:									\
4056:118248:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
4057:118313:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
4058:118378:    PUSH_FAILURE_ITEM (pattern_place);					\
4059:118423:									\
4060:118434:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
4061:118498:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
4062:118572:				 size2);				\
4063:118590:    DEBUG_PRINT1 ("'\n");						\
4064:118623:    PUSH_FAILURE_ITEM (string_place);					\
4065:118667:									\
4066:118678:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
4067:118742:    DEBUG_PUSH (failure_id);						\
4068:118778:  } while (0)
4069:118792:
4070:118793:/* This is the number of items that are pushed and popped on the stack
4071:118864:   for each register.  */
4072:118890:#define NUM_REG_ITEMS  3
4073:118915:
4074:118916:/* Individual items aside from the registers.  */
4075:118966:#ifdef DEBUG
4076:118979:#define NUM_NONREG_ITEMS 5 /* Includes failure point id.  */
4077:119040:#else
4078:119046:#define NUM_NONREG_ITEMS 4
4079:119073:#endif
4080:119080:
4081:119081:/* We push at most this many items on the stack.  */
4082:119134:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
4083:119212:
4084:119213:/* We actually push this many items.  */
4085:119254:#define NUM_FAILURE_ITEMS						\
4086:119287:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
4087:119354:    + NUM_NONREG_ITEMS)
4088:119378:
4089:119379:/* How many items can still be added to the stack without overflowing it.  */
4090:119457:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
4091:119528:
4092:119529:
4093:119530:/* Pops what PUSH_FAIL_STACK pushes.
4094:119567:
4095:119568:   We restore into the parameters, all of which should be lvalues:
4096:119635:     STR -- the saved data position.
4097:119672:     PAT -- the saved pattern position.
4098:119712:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
4099:119779:     REGSTART, REGEND -- arrays of string positions.
4100:119832:     REG_INFO -- array of information about each subexpression.
4101:119896:   
4102:119900:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
4103:119971:   `pend', `string1', `size1', `string2', and `size2'.  */
4104:120030:
4105:120031:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
4106:120115:{									\
4107:120127:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
4108:120180:  int this_reg;								\
4109:120205:  const unsigned char *string_temp;					\
4110:120247:									\
4111:120258:  assert (!FAIL_STACK_EMPTY ());					\
4112:120297:									\
4113:120308:  /* Remove failure points and point to how many regs pushed.  */	\
4114:120376:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
4115:120422:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
4116:120493:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
4117:120563:									\
4118:120574:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
4119:120627:									\
4120:120638:  DEBUG_POP (&failure_id);						\
4121:120672:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
4122:120734:									\
4123:120745:  /* If the saved string location is NULL, it came from an		\
4124:120807:     on_failure_keep_string_jump opcode, and we want to throw away the	\
4125:120880:     saved NULL, thus retaining our current position in the string.  */	\
4126:120954:  string_temp = POP_FAILURE_ITEM ();					\
4127:120997:  if (string_temp != NULL)						\
4128:121031:    str = (const char *) string_temp;					\
4129:121075:									\
4130:121086:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
4131:121140:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
4132:121209:  DEBUG_PRINT1 ("'\n");							\
4133:121241:									\
4134:121252:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
4135:121304:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
4136:121358:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
4137:121412:									\
4138:121423:  /* Restore register info.  */						\
4139:121462:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
4140:121512:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
4141:121577:									\
4142:121588:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
4143:121637:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
4144:121701:									\
4145:121712:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
4146:121776:    {									\
4147:121792:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
4148:121852:									\
4149:121863:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
4150:121920:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
4151:121986:									\
4152:121997:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
4153:122061:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
4154:122124:									\
4155:122135:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
4156:122201:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
4157:122268:    }									\
4158:122284:									\
4159:122295:  DEBUG_STATEMENT (nfailure_points_popped++);				\
4160:122346:} /* POP_FAILURE_POINT */
4161:122372:
4162:122374:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
4163:122447:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
4164:122514:   characters can start a string that matches the pattern.  This fastmap
4165:122587:   is used by re_search to skip quickly over impossible starting points.
4166:122660:
4167:122661:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
4168:122731:   area as BUFP->fastmap.
4169:122757:   
4170:122761:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
4171:122834:   the pattern buffer.
4172:122857:
4173:122858:   Returns 0 if we succeed, -2 if an internal error.   */
4174:122916:
4175:122917:int
4176:122921:re_compile_fastmap (bufp)
4177:122947:     struct re_pattern_buffer *bufp;
4178:122984:{
4179:122986:  int j, k;
4180:122998:  fail_stack_type fail_stack;
4181:123028:#ifndef REGEX_MALLOC
4182:123049:  char *destination;
4183:123070:#endif
4184:123077:  /* We don't push any register information onto the failure stack.  */
4185:123149:  unsigned num_regs = 0;
4186:123174:  
4187:123177:  register char *fastmap = bufp->fastmap;
4188:123219:  unsigned char *pattern = bufp->buffer;
4189:123260:  unsigned long size = bufp->used;
4190:123295:  const unsigned char *p = pattern;
4191:123331:  register unsigned char *pend = pattern + size;
4192:123380:
4193:123381:  /* Assume that each path through the pattern can be null until
4194:123446:     proven otherwise.  We set this false at the bottom of switch
4195:123512:     statement, to which we get only if a particular path doesn't
4196:123578:     match the empty string.  */
4197:123611:  boolean path_can_be_null = true;
4198:123646:
4199:123647:  /* We aren't doing a `succeed_n' to begin with.  */
4200:123701:  boolean succeed_n_p = false;
4201:123732:
4202:123733:  assert (fastmap != NULL && p != NULL);
4203:123774:  
4204:123777:  INIT_FAIL_STACK ();
4205:123799:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
4206:123866:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
4207:123935:  bufp->can_be_null = 0;
4208:123960:      
4209:123967:  while (p != pend || !FAIL_STACK_EMPTY ())
4210:124011:    {
4211:124017:      if (p == pend)
4212:124038:        {
4213:124048:          bufp->can_be_null |= path_can_be_null;
4214:124097:          
4215:124108:          /* Reset for next path.  */
4216:124146:          path_can_be_null = true;
4217:124181:          
4218:124192:          p = fail_stack.stack[--fail_stack.avail];
4219:124244:	}
4220:124247:
4221:124248:      /* We should never be about to go beyond the end of the pattern.  */
4222:124323:      assert (p < pend);
4223:124348:      
4224:124355:#ifdef SWITCH_ENUM_BUG
4225:124378:      switch ((int) ((re_opcode_t) *p++))
4226:124420:#else
4227:124426:      switch ((re_opcode_t) *p++)
4228:124460:#endif
4229:124467:	{
4230:124470:
4231:124471:        /* I guess the idea here is to simply not bother with a fastmap
4232:124543:           if a backreference is used, since it's too hard to figure out
4233:124616:           the fastmap for the corresponding group.  Setting
4234:124677:           `can_be_null' stops `re_search_2' from using the fastmap, so
4235:124749:           that is all we do.  */
4236:124783:	case duplicate:
4237:124800:	  bufp->can_be_null = 1;
4238:124826:          return 0;
4239:124846:
4240:124847:
4241:124848:      /* Following are the cases which match a character.  These end
4242:124917:         with `break'.  */
4243:124944:
4244:124945:	case exactn:
4245:124959:          fastmap[p[1]] = 1;
4246:124988:	  break;
4247:124998:
4248:124999:
4249:125000:        case charset:
4250:125022:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4251:125076:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
4252:125128:              fastmap[j] = 1;
4253:125158:	  break;
4254:125168:
4255:125169:
4256:125170:	case charset_not:
4257:125189:	  /* Chars beyond end of map must be allowed.  */
4258:125240:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
4259:125295:            fastmap[j] = 1;
4260:125323:
4261:125324:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4262:125371:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
4263:125426:              fastmap[j] = 1;
4264:125456:          break;
4265:125473:
4266:125474:
4267:125475:	case wordchar:
4268:125491:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4269:125533:	    if (SYNTAX (j) == Sword)
4270:125563:	      fastmap[j] = 1;
4271:125586:	  break;
4272:125596:
4273:125597:
4274:125598:	case notwordchar:
4275:125617:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4276:125659:	    if (SYNTAX (j) != Sword)
4277:125689:	      fastmap[j] = 1;
4278:125712:	  break;
4279:125722:
4280:125723:
4281:125724:        case anychar:
4282:125746:          /* `.' matches anything ...  */
4283:125788:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4284:125830:            fastmap[j] = 1;
4285:125858:
4286:125859:          /* ... except perhaps newline.  */
4287:125904:          if (!(bufp->syntax & RE_DOT_NEWLINE))
4288:125952:            fastmap['\n'] = 0;
4289:125983:
4290:125984:          /* Return if we have already set `can_be_null'; if we have,
4291:126054:             then the fastmap is irrelevant.  Something's wrong here.  */
4292:126128:	  else if (bufp->can_be_null)
4293:126159:	    return 0;
4294:126174:
4295:126175:          /* Otherwise, have to check alternative paths.  */
4296:126236:	  break;
4297:126246:
4298:126247:
4299:126248:#ifdef emacs
4300:126261:        case syntaxspec:
4301:126286:	  k = *p++;
4302:126299:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4303:126341:	    if (SYNTAX (j) == (enum syntaxcode) k)
4304:126385:	      fastmap[j] = 1;
4305:126408:	  break;
4306:126418:
4307:126419:
4308:126420:	case notsyntaxspec:
4309:126441:	  k = *p++;
4310:126454:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4311:126496:	    if (SYNTAX (j) != (enum syntaxcode) k)
4312:126540:	      fastmap[j] = 1;
4313:126563:	  break;
4314:126573:
4315:126574:
4316:126575:      /* All cases after this match the empty string.  These end with
4317:126645:         `continue'.  */
4318:126670:
4319:126671:
4320:126672:	case before_dot:
4321:126690:	case at_dot:
4322:126704:	case after_dot:
4323:126721:          continue;
4324:126741:#endif /* not emacs */
4325:126764:
4326:126765:
4327:126766:        case no_op:
4328:126786:        case begline:
4329:126808:        case endline:
4330:126830:	case begbuf:
4331:126844:	case endbuf:
4332:126858:	case wordbound:
4333:126875:	case notwordbound:
4334:126895:	case wordbeg:
4335:126910:	case wordend:
4336:126925:        case push_dummy_failure:
4337:126958:          continue;
4338:126978:
4339:126979:
4340:126980:	case jump_n:
4341:126994:        case pop_failure_jump:
4342:127025:	case maybe_pop_jump:
4343:127047:	case jump:
4344:127059:        case jump_past_alt:
4345:127087:	case dummy_failure_jump:
4346:127113:          EXTRACT_NUMBER_AND_INCR (j, p);
4347:127155:	  p += j;	
4348:127167:	  if (j > 0)
4349:127181:	    continue;
4350:127196:            
4351:127209:          /* Jump backward implies we just went through the body of a
4352:127279:             loop and matched nothing.  Opcode jumped to should be
4353:127346:             `on_failure_jump' or `succeed_n'.  Just treat it like an
4354:127416:             ordinary jump.  For a * loop, it has pushed its failure
4355:127485:             point already; if so, discard that as redundant.  */
4356:127551:          if ((re_opcode_t) *p != on_failure_jump
4357:127601:	      && (re_opcode_t) *p != succeed_n)
4358:127642:	    continue;
4359:127657:
4360:127658:          p++;
4361:127673:          EXTRACT_NUMBER_AND_INCR (j, p);
4362:127715:          p += j;		
4363:127735:	  
4364:127739:          /* If what's on the stack is where we are now, pop it.  */
4365:127808:          if (!FAIL_STACK_EMPTY () 
4366:127844:	      && fail_stack.stack[fail_stack.avail - 1] == p)
4367:127899:            fail_stack.avail--;
4368:127931:
4369:127932:          continue;
4370:127952:
4371:127953:
4372:127954:        case on_failure_jump:
4373:127984:        case on_failure_keep_string_jump:
4374:128026:	handle_on_failure_jump:
4375:128051:          EXTRACT_NUMBER_AND_INCR (j, p);
4376:128093:
4377:128094:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
4378:128166:             end of the pattern.  We don't want to push such a point,
4379:128236:             since when we restore it above, entering the switch will
4380:128306:             increment `p' past the end of the pattern.  We don't need
4381:128377:             to push such a point since we obviously won't find any more
4382:128450:             fastmap entries beyond `pend'.  Such a pattern can match
4383:128520:             the null string, though.  */
4384:128562:          if (p + j < pend)
4385:128590:            {
4386:128604:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
4387:128660:                return -2;
4388:128687:            }
4389:128701:          else
4390:128716:            bufp->can_be_null = 1;
4391:128751:
4392:128752:          if (succeed_n_p)
4393:128779:            {
4394:128793:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
4395:128858:              succeed_n_p = false;
4396:128893:	    }
4397:128900:
4398:128901:          continue;
4399:128921:
4400:128922:
4401:128923:	case succeed_n:
4402:128940:          /* Get to the number of times to succeed.  */
4403:128996:          p += 2;		
4404:129016:
4405:129017:          /* Increment p past the n for when k != 0.  */
4406:129074:          EXTRACT_NUMBER_AND_INCR (k, p);
4407:129116:          if (k == 0)
4408:129138:	    {
4409:129145:              p -= 4;
4410:129167:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
4411:129226:              goto handle_on_failure_jump;
4412:129269:            }
4413:129283:          continue;
4414:129303:
4415:129304:
4416:129305:	case set_number_at:
4417:129326:          p += 4;
4418:129344:          continue;
4419:129364:
4420:129365:
4421:129366:	case start_memory:
4422:129386:        case stop_memory:
4423:129412:	  p += 2;
4424:129423:	  continue;
4425:129436:
4426:129437:
4427:129438:	default:
4428:129448:          abort (); /* We have listed all the cases.  */
4429:129505:        } /* switch *p++ */
4430:129533:
4431:129534:      /* Getting here means we have found the possible starting
4432:129598:         characters for one path of the pattern -- and that the empty
4433:129668:         string does not match.  We need not follow this path further.
4434:129739:         Instead, look at the next alternative (remembered on the
4435:129805:         stack), or quit if no more.  The test at the top of the loop
4436:129875:         does these things.  */
4437:129907:      path_can_be_null = false;
4438:129939:      p = pend;
4439:129955:    } /* while p */
4440:129975:
4441:129976:  /* Set `can_be_null' for the last path (also the first path, if the
4442:130046:     pattern is empty).  */
4443:130074:  bufp->can_be_null |= path_can_be_null;
4444:130115:  return 0;
4445:130127:} /* re_compile_fastmap */
4446:130154:
4447:130156:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
4448:130223:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
4449:130291:   this memory for recording register information.  STARTS and ENDS
4450:130359:   must be allocated using the malloc library routine, and must each
4451:130428:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
4452:130484:
4453:130485:   If NUM_REGS == 0, then subsequent matches should allocate their own
4454:130556:   register data.
4455:130574:
4456:130575:   Unless this function is called, the first search or match using
4457:130642:   PATTERN_BUFFER will allocate its own register data, without
4458:130705:   freeing the old data.  */
4459:130734:
4460:130735:void
4461:130740:re_set_registers (bufp, regs, num_regs, starts, ends)
4462:130794:    struct re_pattern_buffer *bufp;
4463:130830:    struct re_registers *regs;
4464:130861:    unsigned num_regs;
4465:130884:    regoff_t *starts, *ends;
4466:130913:{
4467:130915:  if (num_regs)
4468:130931:    {
4469:130937:      bufp->regs_allocated = REGS_REALLOCATE;
4470:130983:      regs->num_regs = num_regs;
4471:131016:      regs->start = starts;
4472:131044:      regs->end = ends;
4473:131068:    }
4474:131074:  else
4475:131081:    {
4476:131087:      bufp->regs_allocated = REGS_UNALLOCATED;
4477:131134:      regs->num_regs = 0;
4478:131160:      regs->start = regs->end = (regoff_t) 0;
4479:131206:    }
4480:131212:}
4481:131214:
4482:131216:/* Searching routines.  */
4483:131243:
4484:131244:/* Like re_search_2, below, but only one string is specified, and
4485:131310:   doesn't let you say where to stop matching. */
4486:131360:
4487:131361:int
4488:131365:re_search (bufp, string, size, startpos, range, regs)
4489:131419:     struct re_pattern_buffer *bufp;
4490:131456:     const char *string;
4491:131481:     int size, startpos, range;
4492:131513:     struct re_registers *regs;
4493:131545:{
4494:131547:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
4495:131616:		      regs, size);
4496:131637:}
4497:131639:
4498:131640:
4499:131641:/* Using the compiled pattern in BUFP->buffer, first tries to match the
4500:131713:   virtual concatenation of STRING1 and STRING2, starting first at index
4501:131786:   STARTPOS, then at STARTPOS + 1, and so on.
4502:131832:   
4503:131836:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
4504:131902:   
4505:131906:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
4506:131978:   only at STARTPOS; in general, the last start tried is STARTPOS +
4507:132046:   RANGE.
4508:132056:   
4509:132060:   In REGS, return the indices of the virtual concatenation of STRING1
4510:132131:   and STRING2 that matched the entire BUFP->buffer and its contained
4511:132201:   subexpressions.
4512:132220:   
4513:132224:   Do not consider matching one past the index STOP in the virtual
4514:132291:   concatenation of STRING1 and STRING2.
4515:132332:
4516:132333:   We return either the position in the strings at which the match was
4517:132404:   found, -1 if no match, or -2 if error (such as failure
4518:132462:   stack overflow).  */
4519:132486:
4520:132487:int
4521:132491:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
4522:132571:     struct re_pattern_buffer *bufp;
4523:132608:     const char *string1, *string2;
4524:132644:     int size1, size2;
4525:132667:     int startpos;
4526:132686:     int range;
4527:132702:     struct re_registers *regs;
4528:132734:     int stop;
4529:132749:{
4530:132751:  int val;
4531:132762:  register char *fastmap = bufp->fastmap;
4532:132804:  register char *translate = bufp->translate;
4533:132850:  int total_size = size1 + size2;
4534:132884:  int endpos = startpos + range;
4535:132917:
4536:132918:  /* Check for out-of-range STARTPOS.  */
4537:132960:  if (startpos < 0 || startpos > total_size)
4538:133005:    return -1;
4539:133020:    
4540:133025:  /* Fix up RANGE if it might eventually take us outside
4541:133082:     the virtual concatenation of STRING1 and STRING2.  */
4542:133141:  if (endpos < -1)
4543:133160:    range = -1 - startpos;
4544:133187:  else if (endpos > total_size)
4545:133219:    range = total_size - startpos;
4546:133254:
4547:133255:  /* If the search isn't to be a backwards one, don't waste time in a
4548:133325:     search for a pattern that must be anchored.  */
4549:133378:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
4550:133456:    {
4551:133462:      if (startpos > 0)
4552:133486:	return -1;
4553:133498:      else
4554:133509:	range = 1;
4555:133521:    }
4556:133527:
4557:133528:  /* Update the fastmap now if not correct already.  */
4558:133584:  if (fastmap && !bufp->fastmap_accurate)
4559:133626:    if (re_compile_fastmap (bufp) == -2)
4560:133667:      return -2;
4561:133684:  
4562:133687:  /* Loop through the string, looking for a place to start matching.  */
4563:133760:  for (;;)
4564:133771:    { 
4565:133778:      /* If a fastmap is supplied, skip quickly over characters that
4566:133847:         cannot be the start of a match.  If the pattern can match the
4567:133918:         null string, however, we don't need to skip characters; we want
4568:133991:         the first null string.  */
4569:134027:      if (fastmap && startpos < total_size && !bufp->can_be_null)
4570:134093:	{
4571:134096:	  if (range > 0)	/* Searching forwards.  */
4572:134141:	    {
4573:134148:	      register const char *d;
4574:134179:	      register int lim = 0;
4575:134208:	      int irange = range;
4576:134235:
4577:134236:              if (startpos < size1 && startpos + range >= size1)
4578:134301:                lim = range - (size1 - startpos);
4579:134351:
4580:134352:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
4581:134423:   
4582:134427:              /* Written out as an if-else to avoid testing `translate'
4583:134499:                 inside the loop.  */
4584:134537:	      if (translate)
4585:134559:                while (range > lim
4586:134594:                       && !fastmap[(unsigned char)
4587:134645:				   translate[(unsigned char) *d++]])
4588:134686:                  range--;
4589:134713:	      else
4590:134725:                while (range > lim && !fastmap[(unsigned char) *d++])
4591:134795:                  range--;
4592:134822:
4593:134823:	      startpos += irange - range;
4594:134858:	    }
4595:134865:	  else				/* Searching backwards.  */
4596:134904:	    {
4597:134911:	      register char c = (size1 == 0 || startpos >= size1
4598:134969:                                 ? string2[startpos - size1] 
4599:135031:                                 : string1[startpos]);
4600:135086:
4601:135087:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
4602:135139:		goto advance;
4603:135155:	    }
4604:135162:	}
4605:135165:
4606:135166:      /* If can't match the null string, and that's all we have left, fail.  */
4607:135246:      if (range >= 0 && startpos == total_size && fastmap
4608:135304:          && !bufp->can_be_null)
4609:135337:	return -1;
4610:135349:
4611:135350:      val = re_match_2 (bufp, string1, size1, string2, size2,
4612:135412:	                startpos, regs, stop);
4613:135452:      if (val >= 0)
4614:135472:	return startpos;
4615:135490:        
4616:135499:      if (val == -2)
4617:135520:	return -2;
4618:135532:
4619:135533:    advance:
4620:135546:      if (!range) 
4621:135565:        break;
4622:135580:      else if (range > 0) 
4623:135607:        {
4624:135617:          range--; 
4625:135637:          startpos++;
4626:135659:        }
4627:135669:      else
4628:135680:        {
4629:135690:          range++; 
4630:135710:          startpos--;
4631:135732:        }
4632:135742:    }
4633:135748:  return -1;
4634:135761:} /* re_search_2 */
4635:135781:
4636:135783:/* Declarations and macros for re_match_2.  */
4637:135830:
4638:135831:static int bcmp_translate ();
4639:135861:static boolean alt_match_null_string_p (),
4640:135904:               common_op_match_null_string_p (),
4641:135953:               group_match_null_string_p ();
4642:135998:
4643:135999:/* Structure for per-register (a.k.a. per-group) information.
4644:136061:   This must not be longer than one word, because we push this value
4645:136130:   onto the failure stack.  Other register information, such as the
4646:136198:   starting and ending positions (which are addresses), and the list of
4647:136270:   inner groups (which is a bits list) are maintained in separate
4648:136336:   variables.  
4649:136352:   
4650:136356:   We are making a (strictly speaking) nonportable assumption here: that
4651:136429:   the compiler will pack our bit fields into something that fits into
4652:136500:   the type of `word', i.e., is something that fits into one item on the
4653:136573:   failure stack.  */
4654:136595:typedef union
4655:136609:{
4656:136611:  fail_stack_elt_t word;
4657:136636:  struct
4658:136645:  {
4659:136649:      /* This field is one if this group can match the empty string,
4660:136718:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
4661:136795:#define MATCH_NULL_UNSET_VALUE 3
4662:136828:    unsigned match_null_string_p : 2;
4663:136866:    unsigned is_active : 1;
4664:136894:    unsigned matched_something : 1;
4665:136930:    unsigned ever_matched_something : 1;
4666:136971:  } bits;
4667:136981:} register_info_type;
4668:137003:
4669:137004:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
4670:137071:#define IS_ACTIVE(R)  ((R).bits.is_active)
4671:137114:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
4672:137173:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
4673:137242:
4674:137243:
4675:137244:/* Call this when have matched a real character; it sets `matched' flags
4676:137317:   for the subexpressions which we are currently inside.  Also records
4677:137388:   that those subexprs have matched.  */
4678:137429:#define SET_REGS_MATCHED()						\
4679:137463:  do									\
4680:137478:    {									\
4681:137494:      unsigned r;							\
4682:137520:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
4683:137587:        {								\
4684:137606:          MATCHED_SOMETHING (reg_info[r])				\
4685:137653:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
4686:137708:            = 1;							\
4687:137733:        }								\
4688:137752:    }									\
4689:137768:  while (0)
4690:137780:
4691:137781:
4692:137782:/* This converts PTR, a pointer into one of the search strings `string1'
4693:137855:   and `string2' into an offset from the beginning of that string.  */
4694:137926:#define POINTER_TO_OFFSET(ptr)						\
4695:137964:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
4696:138033:
4697:138034:/* Registers are set to a sentinel when they haven't yet matched.  */
4698:138104:#define REG_UNSET_VALUE ((char *) -1)
4699:138142:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
4700:138188:
4701:138189:
4702:138190:/* Macros for dealing with the split strings in re_match_2.  */
4703:138254:
4704:138255:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
4705:138311:
4706:138312:/* Call before fetching a character with *d.  This switches over to
4707:138380:   string2 if necessary.  */
4708:138409:#define PREFETCH()							\
4709:138436:  while (d == dend)						    	\
4710:138468:    {									\
4711:138484:      /* End of string2 => fail.  */					\
4712:138527:      if (dend == end_match_2) 						\
4713:138566:        goto fail;							\
4714:138593:      /* End of string1 => advance to string2.  */ 			\
4715:138649:      d = string2;						        \
4716:138683:      dend = end_match_2;						\
4717:138716:    }
4718:138722:
4719:138723:
4720:138724:/* Test if at very beginning or at very end of the virtual concatenation
4721:138797:   of `string1' and `string2'.  If only one string, it's `string2'.  */
4722:138869:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
4723:138942:#define AT_STRINGS_END(d) ((d) == end2)	
4724:138983:
4725:138984:
4726:138985:/* Test if D points to a character which is word-constituent.  We have
4727:139056:   two special cases to check for: if past the end of string1, look at
4728:139127:   the first character in string2; and if before the beginning of
4729:139193:   string2, look at the last character in string1.  */
4730:139248:#define WORDCHAR_P(d)							\
4731:139278:  (SYNTAX ((d) == end1 ? *string2					\
4732:139318:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
4733:139376:   == Sword)
4734:139389:
4735:139390:/* Test if the character before D and the one at D differ with respect
4736:139461:   to being word-constituent.  */
4737:139495:#define AT_WORD_BOUNDARY(d)						\
4738:139530:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
4739:139579:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
4740:139623:
4741:139624:
4742:139625:/* Free everything we malloc.  */
4743:139659:#ifdef REGEX_MALLOC
4744:139679:#define FREE_VAR(var) if (var) free (var); var = NULL
4745:139733:#define FREE_VARIABLES()						\
4746:139765:  do {									\
4747:139782:    FREE_VAR (fail_stack.stack);					\
4748:139821:    FREE_VAR (regstart);						\
4749:139853:    FREE_VAR (regend);							\
4750:139884:    FREE_VAR (old_regstart);						\
4751:139920:    FREE_VAR (old_regend);						\
4752:139954:    FREE_VAR (best_regstart);						\
4753:139991:    FREE_VAR (best_regend);						\
4754:140026:    FREE_VAR (reg_info);						\
4755:140058:    FREE_VAR (reg_dummy);						\
4756:140091:    FREE_VAR (reg_info_dummy);						\
4757:140129:  } while (0)
4758:140143:#else /* not REGEX_MALLOC */
4759:140172:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
4760:140244:#define FREE_VARIABLES() alloca (0)
4761:140280:#endif /* not REGEX_MALLOC */
4762:140310:
4763:140311:
4764:140312:/* These values must meet several constraints.  They must not be valid
4765:140383:   register values; since we have a limit of 255 registers (because
4766:140451:   we use only one byte in the pattern for the register number), we can
4767:140523:   use numbers larger than 255.  They must differ by 1, because of
4768:140590:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
4769:140662:   be larger than the value for the highest register, so we do not try
4770:140733:   to actually save any registers when none are active.  */
4771:140793:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
4772:140840:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
4773:140897:
4774:140899:/* Matching routines.  */
4775:140925:
4776:140926:#ifndef emacs   /* Emacs never uses this.  */
4777:140972:/* re_match is like re_match_2 except it takes only a single string.  */
4778:141045:
4779:141046:int
4780:141050:re_match (bufp, string, size, pos, regs)
4781:141091:     struct re_pattern_buffer *bufp;
4782:141128:     const char *string;
4783:141153:     int size, pos;
4784:141173:     struct re_registers *regs;
4785:141205: {
4786:141208:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
4787:141277:}
4788:141279:#endif /* not emacs */
4789:141302:
4790:141303:
4791:141304:/* re_match_2 matches the compiled pattern in BUFP against the
4792:141367:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
4793:141438:   and SIZE2, respectively).  We start matching at POS, and stop
4794:141503:   matching at STOP.
4795:141524:   
4796:141528:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
4797:141597:   store offsets for the substring each group matched in REGS.  See the
4798:141669:   documentation for exactly how many groups we fill.
4799:141723:
4800:141724:   We return -1 if no match, -2 if an internal error (such as the
4801:141790:   failure stack overflowing).  Otherwise, we return the length of the
4802:141861:   matched substring.  */
4803:141887:
4804:141888:int
4805:141892:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
4806:141959:     struct re_pattern_buffer *bufp;
4807:141996:     const char *string1, *string2;
4808:142032:     int size1, size2;
4809:142055:     int pos;
4810:142069:     struct re_registers *regs;
4811:142101:     int stop;
4812:142116:{
4813:142118:  /* General temporaries.  */
4814:142148:  int mcnt;
4815:142160:  unsigned char *p1;
4816:142181:
4817:142182:  /* Just past the end of the corresponding string.  */
4818:142238:  const char *end1, *end2;
4819:142265:
4820:142266:  /* Pointers into string1 and string2, just past the last characters in
4821:142339:     each to consider matching.  */
4822:142375:  const char *end_match_1, *end_match_2;
4823:142416:
4824:142417:  /* Where we are in the data, and the end of the current string.  */
4825:142487:  const char *d, *dend;
4826:142511:  
4827:142514:  /* Where we are in the pattern, and the end of the pattern.  */
4828:142580:  unsigned char *p = bufp->buffer;
4829:142615:  register unsigned char *pend = p + bufp->used;
4830:142664:
4831:142665:  /* We use this to map every character in the string.  */
4832:142724:  char *translate = bufp->translate;
4833:142761:
4834:142762:  /* Failure point stack.  Each place that can handle a failure further
4835:142834:     down the line pushes a failure point on this stack.  It consists of
4836:142907:     restart, regend, and reg_info for all registers corresponding to
4837:142977:     the subexpressions we're currently inside, plus the number of such
4838:143049:     registers, and, finally, two char *'s.  The first char * is where
4839:143120:     to resume scanning the pattern; the second one is where to resume
4840:143191:     scanning the strings.  If the latter is zero, the failure point is
4841:143263:     a ``dummy''; if a failure happens and the failure point is a dummy,
4842:143336:     it gets discarded and the next next one is tried.  */
4843:143395:  fail_stack_type fail_stack;
4844:143425:#ifdef DEBUG
4845:143438:  static unsigned failure_id = 0;
4846:143472:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
4847:143539:#endif
4848:143546:
4849:143547:  /* We fill all the registers internally, independent of what we
4851:143679:     an element for register zero.  */
4852:143718:  unsigned num_regs = bufp->re_nsub + 1;
4853:143759:  
4854:143762:  /* The currently active registers.  */
4855:143803:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
4856:143856:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
4857:143911:
4858:143912:  /* Information on the contents of registers. These are pointers into
4859:143983:     the input strings; they record just what was matched (on this
4860:144050:     attempt) by a subexpression part of the pattern, that is, the
4861:144117:     regnum-th regstart pointer points to where in the pattern we began
4862:144189:     matching and the regnum-th regend points to right after where we
4863:144259:     stopped matching the regnum-th subexpression.  (The zeroth register
4864:144332:     keeps track of what the whole pattern matches.)  */
4865:144389:  const char **regstart, **regend;
4866:144424:
4867:144425:  /* If a group that's operated upon by a repetition operator fails to
4868:144496:     match anything, then the register for its start will need to be
4869:144565:     restored because it will have been set to wherever in the string we
4870:144638:     are when we last see its open-group operator.  Similarly for a
4871:144706:     register's end.  */
4872:144731:  const char **old_regstart, **old_regend;
4873:144774:
4874:144775:  /* The is_active field of reg_info helps us keep track of which (possibly
4875:144851:     nested) subexpressions we are currently in. The matched_something
4876:144922:     field of reg_info[reg_num] helps us tell whether or not we have
4877:144991:     matched any of the pattern so far this time through the reg_num-th
4878:145063:     subexpression.  These two fields get reset each time through any
4879:145133:     loop their register is in.  */
4880:145169:  register_info_type *reg_info; 
4881:145202:
4882:145203:  /* The following record the register info as found in the above
4883:145269:     variables when we find a match better than any we've seen before. 
4884:145341:     This happens as we backtrack through the failure points, which in
4885:145412:     turn happens only if we have not yet matched the entire string. */
4886:145484:  unsigned best_regs_set = false;
4887:145518:  const char **best_regstart, **best_regend;
4888:145563:  
4889:145566:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
4890:145638:     allocate space for that if we're not allocating space for anything
4891:145710:     else (see below).  Also, we never need info about register 0 for
4892:145780:     any of the other register vectors, and it seems rather a kludge to
4893:145852:     treat `best_regend' differently than the rest.  So we keep track of
4894:145925:     the end of the best match so far in a separate variable.  We
4895:145991:     initialize this to NULL so that when we backtrack the first time
4896:146061:     and need to test it, it's not garbage.  */
4897:146109:  const char *match_end = NULL;
4898:146141:
4899:146142:  /* Used when we pop values we don't care about.  */
4900:146196:  const char **reg_dummy;
4901:146222:  register_info_type *reg_info_dummy;
4902:146260:
4903:146261:#ifdef DEBUG
4904:146274:  /* Counts the total number of registers pushed.  */
4905:146328:  unsigned num_regs_pushed = 0; 	
4906:146362:#endif
4907:146369:
4908:146370:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
4909:146417:  
4910:146420:  INIT_FAIL_STACK ();
4911:146442:  
4912:146445:  /* Do not bother to initialize all the register variables if there are
4913:146518:     no groups in the pattern, as it takes a fair amount of time.  If
4915:146654:     pattern), even though we never use it, since it simplifies the
4916:146722:     array indexing.  We should fix this.  */
4917:146768:  if (bufp->re_nsub)
4918:146789:    {
4919:146795:      regstart = REGEX_TALLOC (num_regs, const char *);
4920:146851:      regend = REGEX_TALLOC (num_regs, const char *);
4921:146905:      old_regstart = REGEX_TALLOC (num_regs, const char *);
4922:146965:      old_regend = REGEX_TALLOC (num_regs, const char *);
4923:147023:      best_regstart = REGEX_TALLOC (num_regs, const char *);
4924:147084:      best_regend = REGEX_TALLOC (num_regs, const char *);
4925:147143:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
4926:147205:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
4927:147262:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
4928:147330:
4929:147331:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
4930:147405:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
4931:147483:        {
4932:147493:          FREE_VARIABLES ();
4933:147522:          return -2;
4934:147543:        }
4935:147553:    }
4936:147559:#ifdef REGEX_MALLOC
4937:147579:  else
4938:147586:    {
4939:147592:      /* We must initialize all our variables to NULL, so that
4940:147655:         `FREE_VARIABLES' doesn't try to free them.  */
4941:147711:      regstart = regend = old_regstart = old_regend = best_regstart
4942:147779:        = best_regend = reg_dummy = NULL;
4943:147821:      reg_info = reg_info_dummy = (register_info_type *) NULL;
4944:147884:    }
4945:147890:#endif /* REGEX_MALLOC */
4946:147916:
4947:147917:  /* The starting position is bogus.  */
4948:147958:  if (pos < 0 || pos > size1 + size2)
4949:147996:    {
4950:148002:      FREE_VARIABLES ();
4951:148027:      return -1;
4952:148044:    }
4953:148050:    
4954:148055:  /* Initialize subexpression text positions to -1 to mark ones that no
4955:148127:     start_memory/stop_memory has been seen for. Also initialize the
4956:148196:     register information struct.  */
4957:148234:  for (mcnt = 1; mcnt < num_regs; mcnt++)
4958:148276:    {
4959:148282:      regstart[mcnt] = regend[mcnt] 
4960:148319:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
4961:148386:        
4962:148395:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
4963:148468:      IS_ACTIVE (reg_info[mcnt]) = 0;
4964:148506:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
4965:148552:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
4966:148603:    }
4967:148609:  
4968:148612:  /* We move `string1' into `string2' if the latter's empty -- but not if
4969:148686:     `string1' is null.  */
4970:148714:  if (size2 == 0 && string1 != NULL)
4971:148751:    {
4972:148757:      string2 = string1;
4973:148782:      size2 = size1;
4974:148803:      string1 = 0;
4975:148822:      size1 = 0;
4976:148839:    }
4977:148845:  end1 = string1 + size1;
4978:148871:  end2 = string2 + size2;
4979:148897:
4980:148898:  /* Compute where to stop matching, within the two strings.  */
4981:148963:  if (stop <= size1)
4982:148984:    {
4983:148990:      end_match_1 = string1 + stop;
4984:149026:      end_match_2 = string2;
4985:149055:    }
4986:149061:  else
4987:149068:    {
4988:149074:      end_match_1 = end1;
4989:149100:      end_match_2 = string2 + stop - size1;
4990:149144:    }
4991:149150:
4992:149151:  /* `p' scans through the pattern as `d' scans through the data. 
4993:149218:     `dend' is the end of the input string that `d' points within.  `d'
4994:149290:     is advanced into the following input string whenever necessary, but
4995:149363:     this happens before fetching; therefore, at the beginning of the
4996:149433:     loop, `d' can be pointing at the end of a string, but it cannot
4997:149502:     equal `string2'.  */
4998:149528:  if (size1 > 0 && pos <= size1)
4999:149561:    {
5000:149567:      d = string1 + pos;
5001:149592:      dend = end_match_1;
5002:149618:    }
5003:149624:  else
5004:149631:    {
5005:149637:      d = string2 + pos - size1;
5006:149670:      dend = end_match_2;
5007:149696:    }
5008:149702:
5009:149703:  DEBUG_PRINT1 ("The compiled pattern is: ");
5010:149749:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
5011:149797:  DEBUG_PRINT1 ("The string to match is: `");
5012:149843:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
5013:149908:  DEBUG_PRINT1 ("'\n");
5014:149932:  
5015:149935:  /* This loops over pattern commands.  It exits by returning from the
5016:150006:     function if the match is complete, or it drops through if the match
5017:150079:     fails at this starting point in the input data.  */
5018:150136:  for (;;)
5019:150147:    {
5020:150153:      DEBUG_PRINT2 ("\n0x%x: ", p);
5021:150189:
5022:150190:      if (p == pend)
5023:150211:	{ /* End of pattern means we might have succeeded.  */
5024:150267:          DEBUG_PRINT1 ("end of pattern ... ");
5025:150315:          
5026:150326:	  /* If we haven't matched the entire string, and we want the
5027:150389:             longest match, try backtracking.  */
5028:150439:          if (d != end_match_2)
5029:150471:	    {
5030:150478:              DEBUG_PRINT1 ("backtracking.\n");
5031:150526:              
5032:150541:              if (!FAIL_STACK_EMPTY ())
5033:150581:                { /* More failure points to try.  */
5034:150634:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
5035:150702:	        	                == MATCHING_IN_FIRST_STRING);
5036:150758:
5037:150759:                  /* If exceeds best match so far, save it.  */
5038:150823:                  if (!best_regs_set
5039:150860:                      || (same_str_p && d > match_end)
5040:150915:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
5041:150984:                    {
5042:151006:                      best_regs_set = true;
5043:151050:                      match_end = d;
5044:151087:                      
5045:151110:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
5046:151183:                      
5047:151206:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
5048:151268:                        {
5049:151294:                          best_regstart[mcnt] = regstart[mcnt];
5050:151358:                          best_regend[mcnt] = regend[mcnt];
5051:151418:                        }
5052:151444:                    }
5053:151466:                  goto fail;	       
5054:151503:                }
5055:151521:
5056:151522:              /* If no failure points, don't restore garbage.  */
5057:151588:              else if (best_regs_set)   
5058:151629:                {
5059:151647:  	        restore_best_regs:
5060:151677:                  /* Restore best match.  It may happen that `dend ==
5061:151747:                     end_match_1' while the restored d is in string2.
5062:151817:                     For example, the pattern `x.*y.*z' against the
5063:151885:                     strings `x-' and `y-z-', if the two strings are
5064:151954:                     not consecutive in memory.  */
5065:152006:                  DEBUG_PRINT1 ("Restoring best registers.\n");
5066:152070:                  
5067:152089:                  d = match_end;
5068:152122:                  dend = ((d >= string1 && d <= end1)
5069:152176:		           ? end_match_1 : end_match_2);
5070:152219:
5071:152220:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
5072:152264:		    {
5073:152272:		      regstart[mcnt] = best_regstart[mcnt];
5074:152318:		      regend[mcnt] = best_regend[mcnt];
5075:152360:		    }
5076:152368:                }
5077:152386:            } /* d != end_match_2 */
5078:152423:
5079:152424:          DEBUG_PRINT1 ("Accepting match.\n");
5080:152471:
5081:152472:          /* If caller wants register contents data back, do it.  */
5082:152541:          if (regs && !bufp->no_sub)
5083:152578:	    {
5084:152585:              /* Have the register data arrays been allocated?  */
5085:152652:              if (bufp->regs_allocated == REGS_UNALLOCATED)
5086:152712:                { /* No.  So allocate them with malloc.  We need one
5087:152781:                     extra element beyond `num_regs' for the `-1' marker
5088:152854:                     GNU code uses.  */
5089:152894:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
5090:152959:                  regs->start = TALLOC (regs->num_regs, regoff_t);
5091:153026:                  regs->end = TALLOC (regs->num_regs, regoff_t);
5092:153091:                  if (regs->start == NULL || regs->end == NULL)
5093:153155:                    return -2;
5094:153186:                  bufp->regs_allocated = REGS_REALLOCATE;
5095:153244:                }
5096:153262:              else if (bufp->regs_allocated == REGS_REALLOCATE)
5097:153326:                { /* Yes.  If we need more elements than were already
5098:153396:                     allocated, reallocate them.  If we need fewer, just
5099:153469:                     leave it alone.  */
5100:153510:                  if (regs->num_regs < num_regs + 1)
5101:153563:                    {
5102:153585:                      regs->num_regs = num_regs + 1;
5103:153638:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
5104:153710:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
5105:153780:                      if (regs->start == NULL || regs->end == NULL)
5106:153848:                        return -2;
5107:153883:                    }
5108:153905:                }
5109:153923:              else
5110:153942:		{
5111:153946:		  /* These braces fend off a "empty body in an else-statement"
5112:154011:		     warning under GCC when assert expands to nothing.  */
5113:154072:		  assert (bufp->regs_allocated == REGS_FIXED);
5114:154121:		}
5115:154125:
5116:154126:              /* Convert the pointer data in `regstart' and `regend' to
5117:154198:                 indices.  Register zero has to be set differently,
5118:154266:                 since we haven't kept track of any info for it.  */
5119:154335:              if (regs->num_regs > 0)
5120:154373:                {
5121:154391:                  regs->start[0] = pos;
5122:154431:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
5123:154504:			          : d - string2 + size1);
5124:154541:                }
5125:154559:              
5126:154574:              /* Go through the first `min (num_regs, regs->num_regs)'
5127:154645:                 registers, since that is all we initialized.  */
5128:154711:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
5129:154780:		{
5130:154784:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
5131:154862:                    regs->start[mcnt] = regs->end[mcnt] = -1;
5132:154924:                  else
5133:154947:                    {
5134:154969:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
5135:155033:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
5136:155107:                    }
5137:155129:		}
5138:155133:              
5139:155148:              /* If the regs structure we return has more elements than
5140:155220:                 were in the pattern, set the extra elements to -1.  If
5141:155292:                 we (re)allocated the registers, this is the case,
5142:155359:                 because we always allocate enough to have at least one
5143:155431:                 -1 at the end.  */
5144:155467:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
5145:155534:                regs->start[mcnt] = regs->end[mcnt] = -1;
5146:155592:	    } /* regs && !bufp->no_sub */
5147:155627:
5148:155628:          FREE_VARIABLES ();
5149:155657:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
5150:155735:                        nfailure_points_pushed, nfailure_points_popped,
5151:155807:                        nfailure_points_pushed - nfailure_points_popped);
5152:155881:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
5153:155949:
5154:155950:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
5155:156004:			    ? string1 
5156:156022:			    : string2 - size1);
5157:156049:
5158:156050:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
5159:156116:
5160:156117:          return mcnt;
5161:156140:        }
5162:156150:
5163:156151:      /* Otherwise match next pattern command.  */
5164:156202:#ifdef SWITCH_ENUM_BUG
5165:156225:      switch ((int) ((re_opcode_t) *p++))
5166:156267:#else
5167:156273:      switch ((re_opcode_t) *p++)
5168:156307:#endif
5169:156314:	{
5170:156317:        /* Ignore these.  Used to ignore the n of succeed_n's which
5171:156385:           currently have n == 0.  */
5172:156423:        case no_op:
5173:156443:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
5174:156490:          break;
5175:156507:
5176:156508:
5177:156509:        /* Match the next n pattern characters exactly.  The following
5178:156580:           byte in the pattern defines n, and the n bytes after that
5179:156649:           are the characters to match.  */
5180:156693:	case exactn:
5181:156707:	  mcnt = *p++;
5182:156723:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
5183:156780:
5184:156781:          /* This is written out as an if-else so we don't waste time
5185:156851:             testing `translate' inside the loop.  */
5186:156905:          if (translate)
5187:156930:	    {
5188:156937:	      do
5189:156947:		{
5190:156951:		  PREFETCH ();
5191:156968:		  if (translate[(unsigned char) *d++] != (char) *p++)
5192:157024:                    goto fail;
5193:157055:		}
5194:157059:	      while (--mcnt);
5195:157082:	    }
5196:157089:	  else
5197:157097:	    {
5198:157104:	      do
5199:157114:		{
5200:157118:		  PREFETCH ();
5201:157135:		  if (*d++ != (char) *p++) goto fail;
5202:157175:		}
5203:157179:	      while (--mcnt);
5204:157202:	    }
5205:157209:	  SET_REGS_MATCHED ();
5206:157233:          break;
5207:157250:
5208:157251:
5209:157252:        /* Match any character except possibly a newline or a null.  */
5210:157324:	case anychar:
5211:157339:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
5212:157388:
5213:157389:          PREFETCH ();
5214:157412:
5215:157413:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
5216:157488:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
5217:157567:	    goto fail;
5218:157583:
5219:157584:          SET_REGS_MATCHED ();
5220:157615:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
5221:157665:          d++;
5222:157680:	  break;
5223:157690:
5224:157691:
5225:157692:	case charset:
5226:157707:	case charset_not:
5227:157726:	  {
5228:157731:	    register unsigned char c;
5229:157762:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
5230:157820:
5231:157821:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
5232:157893:
5233:157894:	    PREFETCH ();
5234:157912:	    c = TRANSLATE (*d); /* The character to match.  */
5235:157968:
5236:157969:            /* Cast to `unsigned' instead of `unsigned char' in case the
5237:158042:               bit list is a full 32 bytes long.  */
5238:158095:	    if (c < (unsigned) (*p * BYTEWIDTH)
5239:158136:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5240:158188:	      not = !not;
5241:158207:
5242:158208:	    p += 1 + *p;
5243:158226:
5244:158227:	    if (!not) goto fail;
5245:158253:            
5246:158266:	    SET_REGS_MATCHED ();
5247:158292:            d++;
5248:158309:	    break;
5249:158321:	  }
5250:158326:
5251:158327:
5252:158328:        /* The beginning of a group is represented by start_memory.
5253:158396:           The arguments are the register number in the next byte, and the
5254:158471:           number of groups inner to this one in the next.  The text
5255:158540:           matched within the group is recorded (in the internal
5256:158605:           registers data structure) under the register number.  */
5257:158673:        case start_memory:
5258:158700:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
5259:158765:
5260:158766:          /* Find out if this group can match the empty string.  */
5261:158834:	  p1 = p;		/* To send to group_match_null_string_p.  */
5262:158891:          
5263:158902:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
5264:158982:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
5265:159034:              = group_match_null_string_p (&p1, pend, reg_info);
5266:159099:
5267:159100:          /* Save the position in the string where we were the last time
5268:159173:             we were at this open-group operator in case the group is
5269:159243:             operated upon by a repetition operator, e.g., with `(a*)*b'
5270:159316:             against `ab'; then we want to ignore where we are now in
5271:159386:             the string in case this attempt to match fails.  */
5272:159451:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
5273:159519:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
5274:159594:                             : regstart[*p];
5275:159639:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
5276:159681:			 POINTER_TO_OFFSET (old_regstart[*p]));
5277:159724:
5278:159725:          regstart[*p] = d;
5279:159753:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
5280:159825:
5281:159826:          IS_ACTIVE (reg_info[*p]) = 1;
5282:159866:          MATCHED_SOMETHING (reg_info[*p]) = 0;
5283:159914:          
5284:159925:          /* This is the new highest active register.  */
5285:159983:          highest_active_reg = *p;
5286:160018:          
5287:160029:          /* If nothing was active before, this is the new lowest active
5288:160102:             register.  */
5289:160129:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
5290:160186:            lowest_active_reg = *p;
5291:160222:
5292:160223:          /* Move past the register number and inner group count.  */
5293:160293:          p += 2;
5294:160311:          break;
5295:160328:
5296:160329:
5297:160330:        /* The stop_memory opcode represents the end of a group.  Its
5298:160400:           arguments are the same as start_memory's: the register
5299:160466:           number, and the number of inner groups.  */
5300:160521:	case stop_memory:
5301:160540:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
5302:160604:             
5303:160618:          /* We need to save the string position the last time we were at
5304:160692:             this close-group operator in case the group is operated
5305:160761:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
5306:160832:             against `aba'; then we want to ignore where we are now in
5307:160903:             the string in case this attempt to match fails.  */
5308:160968:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
5309:161034:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
5310:161103:			   : regend[*p];
5311:161123:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
5312:161167:			 POINTER_TO_OFFSET (old_regend[*p]));
5313:161208:
5314:161209:          regend[*p] = d;
5315:161235:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
5316:161307:
5317:161308:          /* This register isn't active anymore.  */
5318:161361:          IS_ACTIVE (reg_info[*p]) = 0;
5319:161401:          
5320:161412:          /* If this was the only register active, nothing is active
5321:161481:             anymore.  */
5322:161507:          if (lowest_active_reg == highest_active_reg)
5323:161562:            {
5324:161576:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
5325:161632:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
5326:161690:            }
5327:161704:          else
5328:161719:            { /* We must scan for the new highest active register, since
5329:161792:                 it isn't necessarily one less than now: consider
5330:161858:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
5331:161930:                 new highest active register is 1.  */
5332:161985:              unsigned char r = *p - 1;
5333:162025:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
5334:162081:                r--;
5335:162102:              
5336:162117:              /* If we end up at register zero, that means that we saved
5337:162190:                 the registers as the result of an `on_failure_jump', not
5338:162264:                 a `start_memory', and we jumped to past the innermost
5339:162335:                 `stop_memory'.  For example, in ((.)*) we save
5340:162399:                 registers 1 and 2 as a result of the *, but when we pop
5341:162472:                 back to the second ), we are at the stop_memory 1.
5342:162540:                 Thus, nothing is active.  */
5343:162586:	      if (r == 0)
5344:162605:                {
5345:162623:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
5346:162683:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
5347:162745:                }
5348:162763:              else
5349:162782:                highest_active_reg = r;
5350:162822:            }
5351:162836:          
5352:162847:          /* If just failed to match something this time around with a
5353:162918:             group that's operated on by a repetition operator, try to
5354:162989:             force exit from the ``loop'', and restore the register
5355:163057:             information for this group that we had before trying this
5356:163128:             last match.  */
5357:163157:          if ((!MATCHED_SOMETHING (reg_info[*p])
5358:163206:               || (re_opcode_t) p[-3] == start_memory)
5359:163261:	      && (p + 2) < pend)              
5360:163301:            {
5361:163315:              boolean is_a_jump_n = false;
5362:163358:              
5363:163373:              p1 = p + 2;
5364:163399:              mcnt = 0;
5365:163423:              switch ((re_opcode_t) *p1++)
5366:163466:                {
5367:163484:                  case jump_n:
5368:163515:		    is_a_jump_n = true;
5369:163541:                  case pop_failure_jump:
5370:163582:		  case maybe_pop_jump:
5371:163607:		  case jump:
5372:163622:		  case dummy_failure_jump:
5373:163651:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5374:163707:		    if (is_a_jump_n)
5375:163730:		      p1 += 2;
5376:163747:                    break;
5377:163774:                  
5378:163793:                  default:
5379:163820:                    /* do nothing */ ;
5380:163859:                }
5381:163877:	      p1 += mcnt;
5382:163896:        
5383:163905:              /* If the next operation is a jump backwards in the pattern
5384:163979:	         to an on_failure_jump right before the start_memory
5385:164041:                 corresponding to this stop_memory, exit from the loop
5386:164112:                 by forcing a failure after pushing on the stack the
5387:164181:                 on_failure_jump's jump in the pattern, and d.  */
5388:164248:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
5389:164315:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
5390:164388:		{
5391:164392:                  /* If this group ever matched anything, then restore
5392:164463:                     what its registers were before trying this last
5393:164532:                     failed match, e.g., with `(a*)*b' against `ab' for
5394:164604:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
5395:164670:                     against `aba' for regend[3].
5396:164720:                     
5397:164742:                     Also restore the registers for inner groups for,
5398:164812:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
5399:164885:                     otherwise get trashed).  */
5400:164934:                     
5401:164956:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
5402:165017:		    {
5403:165025:		      unsigned r; 
5404:165046:        
5405:165055:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
5406:165120:                      
5407:165143:		      /* Restore this and inner groups' (if any) registers.  */
5408:165209:                      for (r = *p; r < *p + *(p + 1); r++)
5409:165268:                        {
5410:165294:                          regstart[r] = old_regstart[r];
5411:165351:
5412:165352:                          /* xx why this test?  */
5413:165403:                          if ((int) old_regend[r] >= (int) regstart[r])
5414:165475:                            regend[r] = old_regend[r];
5415:165530:                        }     
5416:165561:                    }
5417:165583:		  p1++;
5418:165593:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5419:165647:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
5420:165704:
5421:165705:                  goto fail;
5422:165734:                }
5423:165752:            }
5424:165766:          
5425:165777:          /* Move past the register number and the inner group count.  */
5426:165851:          p += 2;
5427:165869:          break;
5428:165886:
5429:165887:
5430:165888:	/* \<digit> has been turned into a `duplicate' command which is
5431:165953:           followed by the numeric value of <digit> as the register number.  */
5432:166033:        case duplicate:
5433:166057:	  {
5434:166062:	    register const char *d2, *dend2;
5435:166100:	    int regno = *p++;   /* Get which register to match against.  */
5436:166169:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
5437:166225:
5438:166226:	    /* Can't back reference a group which we've never matched.  */
5439:166294:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
5440:166368:              goto fail;
5441:166393:              
5442:166408:            /* Where in input to try to start matching.  */
5443:166468:            d2 = regstart[regno];
5444:166502:            
5445:166515:            /* Where to stop matching; if both the place to start and
5446:166585:               the place to stop matching are in the same string, then
5447:166656:               set to the place to stop, otherwise, for now have to use
5448:166728:               the end of the first string.  */
5449:166776:
5450:166777:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
5451:166833:		      == FIRST_STRING_P (regend[regno]))
5452:166876:		     ? regend[regno] : end_match_1);
5453:166915:	    for (;;)
5454:166929:	      {
5455:166938:		/* If necessary, advance to next segment in register
5456:166993:                   contents.  */
5457:167026:		while (d2 == dend2)
5458:167048:		  {
5459:167054:		    if (dend2 == end_match_2) break;
5460:167093:		    if (dend2 == regend[regno]) break;
5461:167134:
5462:167135:                    /* End of string1 => advance to string2. */
5463:167199:                    d2 = string2;
5464:167233:                    dend2 = regend[regno];
5465:167276:		  }
5466:167282:		/* At end of register contents => success */
5467:167329:		if (d2 == dend2) break;
5468:167355:
5469:167356:		/* If necessary, advance to next segment in data.  */
5470:167412:		PREFETCH ();
5471:167427:
5472:167428:		/* How many characters left in this segment to match.  */
5473:167488:		mcnt = dend - d;
5474:167507:                
5475:167524:		/* Want how many consecutive characters we can match in
5476:167582:                   one shot, so, if necessary, adjust the count.  */
5477:167651:                if (mcnt > dend2 - d2)
5478:167690:		  mcnt = dend2 - d2;
5479:167713:                  
5480:167732:		/* Compare that many; failure if mismatch, else move
5481:167787:                   past them.  */
5482:167821:		if (translate 
5483:167838:                    ? bcmp_translate (d, d2, mcnt, translate) 
5484:167901:                    : bcmp (d, d2, mcnt))
5485:167943:		  goto fail;
5486:167958:		d += mcnt, d2 += mcnt;
5487:167983:	      }
5488:167992:	  }
5489:167997:	  break;
5490:168007:
5491:168008:
5492:168009:        /* begline matches the empty string at the beginning of the string
5493:168084:           (unless `not_bol' is set in `bufp'), and, if
5494:168140:           `newline_anchor' is set, after newlines.  */
5495:168196:	case begline:
5496:168211:          DEBUG_PRINT1 ("EXECUTING begline.\n");
5497:168260:          
5498:168271:          if (AT_STRINGS_BEG (d))
5499:168305:            {
5500:168319:              if (!bufp->not_bol) break;
5501:168360:            }
5502:168374:          else if (d[-1] == '\n' && bufp->newline_anchor)
5503:168432:            {
5504:168446:              break;
5505:168467:            }
5506:168481:          /* In all other cases, we fail.  */
5507:168527:          goto fail;
5508:168548:
5509:168549:
5510:168550:        /* endline is the dual of begline.  */
5511:168597:	case endline:
5512:168612:          DEBUG_PRINT1 ("EXECUTING endline.\n");
5513:168661:
5514:168662:          if (AT_STRINGS_END (d))
5515:168696:            {
5516:168710:              if (!bufp->not_eol) break;
5517:168751:            }
5518:168765:          
5519:168776:          /* We have to ``prefetch'' the next character.  */
5520:168837:          else if ((d == end1 ? *string2 : *d) == '\n'
5521:168892:                   && bufp->newline_anchor)
5522:168936:            {
5523:168950:              break;
5524:168971:            }
5525:168985:          goto fail;
5526:169006:
5527:169007:
5528:169008:	/* Match at the very beginning of the data.  */
5529:169057:        case begbuf:
5530:169078:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
5531:169126:          if (AT_STRINGS_BEG (d))
5532:169160:            break;
5533:169179:          goto fail;
5534:169200:
5535:169201:
5536:169202:	/* Match at the very end of the data.  */
5537:169245:        case endbuf:
5538:169266:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
5539:169314:	  if (AT_STRINGS_END (d))
5540:169341:	    break;
5541:169353:          goto fail;
5542:169374:
5543:169375:
5544:169376:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
5545:169447:           pushes NULL as the value for the string on the stack.  Then
5546:169518:           `pop_failure_point' will keep the current value for the
5547:169585:           string, instead of restoring it.  To see why, consider
5548:169651:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
5549:169723:           then the . fails against the \n.  But the next thing we want
5550:169795:           to do is match the \n against the \n; if we restored the
5551:169863:           string value, we would be back at the foo.
5552:169917:           
5553:169929:           Because this is used only in specific cases, we don't need to
5554:170002:           check all the things that `on_failure_jump' does, to make
5555:170071:           sure the right things get saved on the stack.  Hence we don't
5556:170144:           share its code.  The only reason to push anything on the
5557:170212:           stack at all is that otherwise we would have to change
5558:170278:           `anychar's code to do something besides goto fail in this
5559:170347:           case; that seems worse than this.  */
5560:170396:        case on_failure_keep_string_jump:
5561:170438:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
5562:170504:          
5563:170515:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5564:170560:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
5565:170621:
5566:170622:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
5567:170673:          break;
5568:170690:
5569:170691:
5570:170692:	/* Uses of on_failure_jump:
5571:170721:        
5572:170730:           Each alternative starts with an on_failure_jump that points
5573:170801:           to the beginning of the next alternative.  Each alternative
5574:170872:           except the last ends with a jump that in effect jumps past
5575:170942:           the rest of the alternatives.  (They really jump to the
5576:171009:           ending jump of the following alternative, because tensioning
5577:171081:           these jumps is a hassle.)
5578:171118:
5579:171119:           Repeats start with an on_failure_jump that points past both
5580:171190:           the repetition text and either the following jump or
5581:171254:           pop_failure_jump back to this on_failure_jump.  */
5582:171316:	case on_failure_jump:
5583:171339:        on_failure:
5584:171359:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
5585:171413:
5586:171414:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5587:171459:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
5588:171517:
5589:171518:          /* If this on_failure_jump comes right before a group (i.e.,
5590:171589:             the original * applied to a group), save the information
5591:171659:             for that group and all inner ones, so that if we fail back
5592:171731:             to this point, the group's information will be correct.
5593:171800:             For example, in \(a*\)*\1, we need the preceding group,
5594:171869:             and in \(\(a*\)b*\)\2, we need the inner group.  */
5595:171934:
5596:171935:          /* We can't use `p' to check ahead because we push
5597:171996:             a failure point to `p + mcnt' after we do this.  */
5598:172061:          p1 = p;
5599:172079:
5600:172080:          /* We need to skip no_op's before we look for the
5601:172140:             start_memory in case this on_failure_jump is happening as
5602:172211:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
5603:172283:             against aba.  */
5604:172313:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
5605:172371:            p1++;
5606:172389:
5607:172390:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
5608:172452:            {
5609:172466:              /* We have a new highest active register now.  This will
5610:172537:                 get reset at the start_memory we are about to get to,
5611:172608:                 but we will have saved all the registers relevant to
5612:172678:                 this repetition op, as described above.  */
5613:172739:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
5614:172797:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
5615:172858:                lowest_active_reg = *(p1 + 1);
5616:172905:            }
5617:172919:
5618:172920:          DEBUG_PRINT1 (":\n");
5619:172952:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
5620:173000:          break;
5621:173017:
5622:173018:
5623:173019:        /* A smart repeat ends with `maybe_pop_jump'.
5624:173073:	   We change it to either `pop_failure_jump' or `jump'.  */
5625:173134:        case maybe_pop_jump:
5626:173163:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5627:173208:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
5628:173273:          {
5629:173285:	    register unsigned char *p2 = p;
5630:173322:
5631:173323:            /* Compare the beginning of the repeat with what in the
5632:173391:               pattern follows its end. If we can establish that there
5633:173462:               is nothing that they would both match, i.e., that we
5634:173530:               would have to backtrack because of (as in, e.g., `a*a')
5635:173601:               then we can change to pop_failure_jump, because we'll
5636:173670:               never have to backtrack.
5637:173710:               
5638:173726:               This is not true in the case of alternatives: in
5639:173790:               `(a|ab)*' we do need to backtrack to the `ab' alternative
5640:173863:               (e.g., if the string was `ab').  But instead of trying to
5641:173936:               detect that here, the alternative has put on a dummy
5642:174004:               failure point which is what we will end up popping.  */
5643:174075:
5644:174076:	    /* Skip over open/close-group commands.  */
5645:174125:	    while (p2 + 2 < pend
5646:174151:		   && ((re_opcode_t) *p2 == stop_memory
5647:174193:		       || (re_opcode_t) *p2 == start_memory))
5648:174241:	      p2 += 3;			/* Skip over args, too.  */
5649:174287:
5650:174288:            /* If we're at the end of the pattern, we can change.  */
5651:174358:            if (p2 == pend)
5652:174386:	      {
5653:174395:		/* Consider what happens when matching ":\(.*\)"
5654:174446:		   against ":/".  I don't really understand this code
5655:174502:		   yet.  */
5656:174516:  	        p[-3] = (unsigned char) pop_failure_jump;
5657:174569:                DEBUG_PRINT1
5658:174598:                  ("  End of pattern: change to `pop_failure_jump'.\n");
5659:174671:              }
5660:174687:
5661:174688:            else if ((re_opcode_t) *p2 == exactn
5662:174737:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
5663:174803:	      {
5664:174812:		register unsigned char c
5665:174839:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
5666:174906:		p1 = p + mcnt;
5667:174923:
5668:174924:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
5669:174999:                   to the `maybe_finalize_jump' of this case.  Examine what 
5670:175076:                   follows.  */
5671:175108:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
5672:175173:                  {
5673:175193:  		    p[-3] = (unsigned char) pop_failure_jump;
5674:175243:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
5675:175314:                                  c, p1[5]);
5676:175359:                  }
5677:175379:                  
5678:175398:		else if ((re_opcode_t) p1[3] == charset
5679:175440:			 || (re_opcode_t) p1[3] == charset_not)
5680:175483:		  {
5681:175489:		    int not = (re_opcode_t) p1[3] == charset_not;
5682:175541:                    
5683:175562:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
5684:175612:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5685:175666:		      not = !not;
5686:175686:
5687:175687:                    /* `not' is equal to 1 if c would match, which means
5688:175760:                        that we can't change to pop_failure_jump.  */
5689:175830:		    if (!not)
5690:175846:                      {
5691:175870:  		        p[-3] = (unsigned char) pop_failure_jump;
5692:175924:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
5693:176000:                      }
5694:176024:		  }
5695:176030:	      }
5696:176039:	  }
5697:176044:	  p -= 2;		/* Point at relative address again.  */
5698:176096:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
5699:176144:	    {
5700:176151:	      p[-1] = (unsigned char) jump;
5701:176188:              DEBUG_PRINT1 ("  Match => jump.\n");
5702:176239:	      goto unconditional_jump;
5703:176271:	    }
5704:176278:        /* Note fall through.  */
5705:176312:
5706:176313:
5707:176314:	/* The end of a simple repeat has a pop_failure_jump back to
5708:176376:           its matching on_failure_jump, where the latter will push a
5709:176446:           failure point.  The pop_failure_jump takes off failure
5710:176512:           points put on by this pop_failure_jump's matching
5711:176573:           on_failure_jump; we got through the pattern to here from the
5712:176645:           matching on_failure_jump, so didn't fail.  */
5713:176702:        case pop_failure_jump:
5714:176733:          {
5715:176745:            /* We need to pass separate storage for the lowest and
5716:176812:               highest registers, even though we don't care about the
5717:176882:               actual values.  Otherwise, we will restore only one
5718:176949:               register from the stack, since lowest will == highest in
5719:177021:               `pop_failure_point'.  */
5720:177061:            unsigned dummy_low_reg, dummy_high_reg;
5721:177113:            unsigned char *pdummy;
5722:177148:            const char *sdummy;
5723:177180:
5724:177181:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
5725:177241:            POP_FAILURE_POINT (sdummy, pdummy,
5726:177288:                               dummy_low_reg, dummy_high_reg,
5727:177350:                               reg_dummy, reg_dummy, reg_info_dummy);
5728:177420:          }
5729:177432:          /* Note fall through.  */
5730:177468:
5731:177469:          
5732:177480:        /* Unconditionally jump (without popping any failure points).  */
5733:177554:        case jump:
5734:177573:	unconditional_jump:
5735:177594:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
5736:177663:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
5737:177716:	  p += mcnt;				/* Do the jump.  */
5738:177753:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
5739:177797:	  break;
5740:177807:
5741:177808:	
5742:177810:        /* We need this opcode so we can detect where alternatives end
5743:177881:           in `group_match_null_string_p' et al.  */
5744:177934:        case jump_past_alt:
5745:177962:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
5746:178017:          goto unconditional_jump;
5747:178052:
5748:178053:
5749:178054:        /* Normally, the on_failure_jump pushes a failure point, which
5750:178125:           then gets popped at pop_failure_jump.  We will end up at
5751:178193:           pop_failure_jump, also, and with a pattern of, say, `a+', we
5752:178265:           are skipping over the on_failure_jump, so we have to push
5753:178334:           something meaningless for pop_failure_jump to pop.  */
5754:178400:        case dummy_failure_jump:
5755:178433:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
5756:178493:          /* It doesn't matter what we push for the string here.  What
5757:178564:             the code at `fail' tests is the value for the pattern.  */
5758:178636:          PUSH_FAILURE_POINT (0, 0, -2);
5759:178677:          goto unconditional_jump;
5760:178712:
5761:178713:
5762:178714:        /* At the end of an alternative, we need to push a dummy failure
5763:178787:           point in case we are followed by a `pop_failure_jump', because
5764:178861:           we don't want the failure point for the alternative to be
5765:178930:           popped.  For example, matching `(a|ab)*' against `aab'
5766:178996:           requires that we match the `ab' alternative.  */
5767:179056:        case push_dummy_failure:
5768:179089:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
5769:179149:          /* See comments just above at `dummy_failure_jump' about the
5770:179220:             two zeroes.  */
5771:179249:          PUSH_FAILURE_POINT (0, 0, -2);
5772:179290:          break;
5773:179307:
5774:179308:        /* Have to succeed matching what follows at least n times.
5775:179375:           After that, handle like `on_failure_jump'.  */
5776:179433:        case succeed_n: 
5777:179458:          EXTRACT_NUMBER (mcnt, p + 2);
5778:179498:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
5779:179558:
5780:179559:          assert (mcnt >= 0);
5781:179589:          /* Originally, this is how many times we HAVE to succeed.  */
5782:179661:          if (mcnt > 0)
5783:179685:            {
5784:179699:               mcnt--;
5785:179722:	       p += 2;
5786:179738:               STORE_NUMBER_AND_INCR (p, mcnt);
5787:179786:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
5788:179852:            }
5789:179866:	  else if (mcnt == 0)
5790:179889:            {
5791:179903:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
5792:179982:	      p[2] = (unsigned char) no_op;
5793:180019:              p[3] = (unsigned char) no_op;
5794:180063:              goto on_failure;
5795:180094:            }
5796:180108:          break;
5797:180125:        
5798:180134:        case jump_n: 
5799:180156:          EXTRACT_NUMBER (mcnt, p + 2);
5800:180196:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
5801:180253:
5802:180254:          /* Originally, this is how many times we CAN jump.  */
5803:180319:          if (mcnt)
5804:180339:            {
5805:180353:               mcnt--;
5806:180376:               STORE_NUMBER (p + 2, mcnt);
5807:180419:	       goto unconditional_jump;	     
5808:180458:            }
5809:180472:          /* If don't have to jump any more, skip over the rest of command.  */
5810:180552:	  else      
5811:180566:	    p += 4;		     
5812:180586:          break;
5813:180603:        
5814:180612:	case set_number_at:
5815:180633:	  {
5816:180638:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
5817:180695:
5818:180696:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
5819:180743:            p1 = p + mcnt;
5820:180770:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
5821:180817:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
5822:180881:	    STORE_NUMBER (p1, mcnt);
5823:180911:            break;
5824:180930:          }
5825:180942:
5826:180943:        case wordbound:
5827:180967:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
5828:181018:          if (AT_WORD_BOUNDARY (d))
5829:181054:	    break;
5830:181066:          goto fail;
5831:181087:
5832:181088:	case notwordbound:
5833:181108:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
5834:181162:	  if (AT_WORD_BOUNDARY (d))
5835:181191:	    goto fail;
5836:181207:          break;
5837:181224:
5838:181225:	case wordbeg:
5839:181240:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
5840:181289:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
5841:181359:	    break;
5842:181371:          goto fail;
5843:181392:
5844:181393:	case wordend:
5845:181408:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
5846:181457:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
5847:181506:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
5848:181564:	    break;
5849:181576:          goto fail;
5850:181597:
5851:181598:#ifdef emacs
5852:181611:#ifdef emacs19
5853:181626:  	case before_dot:
5854:181646:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
5855:181698: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
5856:181751:  	    goto fail;
5857:181769:  	  break;
5858:181781:  
5859:181784:  	case at_dot:
5860:181800:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5861:181848: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
5862:181901:  	    goto fail;
5863:181919:  	  break;
5864:181931:  
5865:181934:  	case after_dot:
5866:181953:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
5867:182004:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
5868:182063:  	    goto fail;
5869:182081:  	  break;
5870:182093:#else /* not emacs19 */
5871:182117:	case at_dot:
5872:182131:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5873:182179:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
5874:182235:	    goto fail;
5875:182251:	  break;
5876:182261:#endif /* not emacs19 */
5877:182286:
5878:182287:	case syntaxspec:
5879:182305:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
5880:182366:	  mcnt = *p++;
5881:182382:	  goto matchsyntax;
5882:182403:
5883:182404:        case wordchar:
5884:182427:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
5885:182483:	  mcnt = (int) Sword;
5886:182506:        matchsyntax:
5887:182527:	  PREFETCH ();
5888:182543:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
5889:182591:            goto fail;
5890:182614:          SET_REGS_MATCHED ();
5891:182645:	  break;
5892:182655:
5893:182656:	case notsyntaxspec:
5894:182677:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
5895:182741:	  mcnt = *p++;
5896:182757:	  goto matchnotsyntax;
5897:182781:
5898:182782:        case notwordchar:
5899:182808:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
5900:182867:	  mcnt = (int) Sword;
5901:182890:        matchnotsyntax:
5902:182914:	  PREFETCH ();
5903:182930:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
5904:182978:            goto fail;
5905:183001:	  SET_REGS_MATCHED ();
5906:183025:          break;
5907:183042:
5908:183043:#else /* not emacs */
5909:183065:	case wordchar:
5910:183081:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
5911:183141:	  PREFETCH ();
5912:183157:          if (!WORDCHAR_P (d))
5913:183188:            goto fail;
5914:183211:	  SET_REGS_MATCHED ();
5915:183235:          d++;
5916:183250:	  break;
5917:183260:	  
5918:183264:	case notwordchar:
5919:183283:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
5920:183346:	  PREFETCH ();
5921:183362:	  if (WORDCHAR_P (d))
5922:183385:            goto fail;
5923:183408:          SET_REGS_MATCHED ();
5924:183439:          d++;
5925:183454:	  break;
5926:183464:#endif /* not emacs */
5927:183487:          
5928:183498:        default:
5929:183515:          abort ();
5930:183535:	}
5931:183538:      continue;  /* Successfully executed one pattern command; keep going.  */
5932:183617:
5933:183618:
5934:183619:    /* We goto here if a matching operation fails. */
5935:183673:    fail:
5936:183683:      if (!FAIL_STACK_EMPTY ())
5937:183715:	{ /* A restart point is known.  Restore to that state.  */
5938:183775:          DEBUG_PRINT1 ("\nFAIL:\n");
5939:183813:          POP_FAILURE_POINT (d, p,
5940:183848:                             lowest_active_reg, highest_active_reg,
5941:183916:                             regstart, regend, reg_info);
5942:183974:
5943:183975:          /* If this failure point is a dummy, try the next one.  */
5944:184044:          if (!p)
5945:184062:	    goto fail;
5946:184078:
5947:184079:          /* If we failed to the end of the pattern, don't examine *p.  */
5948:184154:	  assert (p <= pend);
5949:184177:          if (p < pend)
5950:184201:            {
5951:184215:              boolean is_a_jump_n = false;
5952:184258:              
5953:184273:              /* If failed to a backwards jump that's part of a repetition
5954:184348:                 loop, need to pop this failure point and use the next one.  */
5955:184428:              switch ((re_opcode_t) *p)
5956:184468:                {
5957:184486:                case jump_n:
5958:184515:                  is_a_jump_n = true;
5959:184553:                case maybe_pop_jump:
5960:184590:                case pop_failure_jump:
5961:184629:                case jump:
5962:184656:                  p1 = p + 1;
5963:184686:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5964:184740:                  p1 += mcnt;	
5965:184771:
5966:184772:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
5967:184842:                      || (!is_a_jump_n
5968:184881:                          && (re_opcode_t) *p1 == on_failure_jump))
5969:184949:                    goto fail;
5970:184980:                  break;
5971:185005:                default:
5972:185030:                  /* do nothing */ ;
5973:185067:                }
5974:185085:            }
5975:185099:
5976:185100:          if (d >= string1 && d <= end1)
5977:185141:	    dend = end_match_1;
5978:185166:        }
5979:185176:      else
5980:185187:        break;   /* Matching at this starting point really fails.  */
5981:185257:    } /* for (;;) */
5982:185278:
5983:185279:  if (best_regs_set)
5984:185300:    goto restore_best_regs;
5985:185328:
5986:185329:  FREE_VARIABLES ();
5987:185350:
5988:185351:  return -1;         			/* Failure to match.  */
5989:185400:} /* re_match_2 */
5990:185419:
5991:185421:/* Subroutine definitions for re_match_2.  */
5992:185467:
5993:185468:
5994:185469:/* We are passed P pointing to a register number after a start_memory.
5995:185540:   
5996:185544:   Return true if the pattern up to the corresponding stop_memory can
5997:185614:   match the empty string, and false otherwise.
5998:185662:   
5999:185666:   If we find the matching stop_memory, sets P to point to one past its number.
6000:185746:   Otherwise, sets P to an undefined byte less than or equal to END.
6001:185815:
6002:185816:   We don't handle duplicates properly (yet).  */
6003:185866:
6004:185867:static boolean
6005:185882:group_match_null_string_p (p, end, reg_info)
6006:185927:    unsigned char **p, *end;
6007:185956:    register_info_type *reg_info;
6008:185990:{
6009:185992:  int mcnt;
6010:186004:  /* Point to after the args to the start_memory.  */
6011:186058:  unsigned char *p1 = *p + 2;
6012:186088:  
6013:186091:  while (p1 < end)
6014:186110:    {
6015:186116:      /* Skip over opcodes that can match nothing, and return true or
6016:186186:	 false, as appropriate, when we get to one that can't, or to the
6017:186252:         matching stop_memory.  */
6018:186287:      
6019:186294:      switch ((re_opcode_t) *p1)
6020:186327:        {
6021:186337:        /* Could be either a loop or a series of alternatives.  */
6022:186404:        case on_failure_jump:
6023:186434:          p1++;
6024:186450:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6025:186496:          
6026:186507:          /* If the next operation is not a jump backwards in the
6027:186573:	     pattern.  */
6028:186592:
6029:186593:	  if (mcnt >= 0)
6030:186611:	    {
6031:186618:              /* Go through the on_failure_jumps of the alternatives,
6032:186688:                 seeing if any of the alternatives cannot match nothing.
6033:186761:                 The last alternative starts with only a jump,
6034:186824:                 whereas the rest start with on_failure_jump and end
6035:186893:                 with a jump, e.g., here is the pattern for `a|b|c':
6036:186962:
6037:186963:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
6038:187030:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
6039:187097:                 /exactn/1/c						
6040:187132:
6041:187133:                 So, we have to first go through the first (n-1)
6042:187198:                 alternatives and then deal with the last one separately.  */
6043:187276:
6044:187277:
6045:187278:              /* Deal with the first (n-1) alternatives, which start
6046:187347:                 with an on_failure_jump (see above) that jumps to right
6047:187420:                 past a jump_past_alt.  */
6048:187463:
6049:187464:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
6050:187528:                {
6051:187546:                  /* `mcnt' holds how many bytes long the alternative
6052:187616:                     is, including the ending `jump_past_alt' and
6053:187682:                     its number.  */
6054:187719:
6055:187720:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
6056:187788:				                      reg_info))
6057:187825:                    return false;
6058:187859:
6059:187860:                  /* Move to right after this alternative, including the
6060:187933:		     jump_past_alt.  */
6061:187959:                  p1 += mcnt;	
6062:187990:
6063:187991:                  /* Break if it's the beginning of an n-th alternative
6064:188063:                     that doesn't begin with an on_failure_jump.  */
6065:188132:                  if ((re_opcode_t) *p1 != on_failure_jump)
6066:188192:                    break;
6067:188219:		
6068:188222:		  /* Still have to check that it's not an n-th
6069:188271:		     alternative that starts with an on_failure_jump.  */
6070:188331:		  p1++;
6071:188341:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6072:188395:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
6073:188460:                    {
6074:188482:		      /* Get to the beginning of the n-th alternative.  */
6075:188543:                      p1 -= 3;
6076:188574:                      break;
6077:188603:                    }
6078:188625:                }
6079:188643:
6080:188644:              /* Deal with the last alternative: go back and get number
6081:188716:                 of the `jump_past_alt' just before it.  `mcnt' contains
6082:188789:                 the length of the alternative.  */
6083:188841:              EXTRACT_NUMBER (mcnt, p1 - 2);
6084:188886:
6085:188887:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
6086:188957:                return false;
6087:188987:
6088:188988:              p1 += mcnt;	/* Get past the n-th alternative.  */
6089:189052:            } /* if mcnt > 0 */
6090:189084:          break;
6091:189101:
6092:189102:          
6093:189113:        case stop_memory:
6094:189139:	  assert (p1[1] == **p);
6095:189165:          *p = p1 + 2;
6096:189188:          return true;
6097:189211:
6098:189212:        
6099:189221:        default: 
6100:189239:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6101:189306:            return false;
6102:189332:        }
6103:189342:    } /* while p1 < end */
6104:189369:
6105:189370:  return false;
6106:189386:} /* group_match_null_string_p */
6107:189420:
6108:189421:
6109:189422:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
6110:189499:   It expects P to be the first byte of a single alternative and END one
6111:189572:   byte past the last. The alternative can contain groups.  */
6112:189635:   
6113:189639:static boolean
6114:189654:alt_match_null_string_p (p, end, reg_info)
6115:189697:    unsigned char *p, *end;
6116:189725:    register_info_type *reg_info;
6117:189759:{
6118:189761:  int mcnt;
6119:189773:  unsigned char *p1 = p;
6120:189798:  
6121:189801:  while (p1 < end)
6122:189820:    {
6123:189826:      /* Skip over opcodes that can match nothing, and break when we get 
6124:189900:         to one that can't.  */
6125:189932:      
6126:189939:      switch ((re_opcode_t) *p1)
6127:189972:        {
6128:189982:	/* It's a loop.  */
6129:190003:        case on_failure_jump:
6130:190033:          p1++;
6131:190049:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6132:190095:          p1 += mcnt;
6133:190117:          break;
6134:190134:          
6135:190145:	default: 
6136:190156:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6137:190223:            return false;
6138:190249:        }
6139:190259:    }  /* while p1 < end */
6140:190287:
6141:190288:  return true;
6142:190303:} /* alt_match_null_string_p */
6143:190335:
6144:190336:
6145:190337:/* Deals with the ops common to group_match_null_string_p and
6146:190399:   alt_match_null_string_p.  
6147:190429:   
6148:190433:   Sets P to one after the op and its arguments, if any.  */
6149:190494:
6150:190495:static boolean
6151:190510:common_op_match_null_string_p (p, end, reg_info)
6152:190559:    unsigned char **p, *end;
6153:190588:    register_info_type *reg_info;
6154:190622:{
6155:190624:  int mcnt;
6156:190636:  boolean ret;
6157:190651:  int reg_no;
6158:190665:  unsigned char *p1 = *p;
6159:190691:
6160:190692:  switch ((re_opcode_t) *p1++)
6161:190723:    {
6162:190729:    case no_op:
6163:190745:    case begline:
6164:190763:    case endline:
6165:190781:    case begbuf:
6166:190798:    case endbuf:
6167:190815:    case wordbeg:
6168:190833:    case wordend:
6169:190851:    case wordbound:
6170:190871:    case notwordbound:
6171:190894:#ifdef emacs
6172:190907:    case before_dot:
6173:190928:    case at_dot:
6174:190945:    case after_dot:
6175:190965:#endif
6176:190972:      break;
6177:190985:
6178:190986:    case start_memory:
6179:191009:      reg_no = *p1;
6180:191029:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
6181:191080:      ret = group_match_null_string_p (&p1, end, reg_info);
6182:191140:      
6183:191147:      /* Have to set this here in case we're checking a group which
6184:191215:         contains a group and a back reference to it.  */
6185:191273:
6186:191274:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
6187:191354:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
6188:191412:
6189:191413:      if (!ret)
6190:191429:        return false;
6191:191451:      break;
6192:191464:          
6193:191475:    /* If this is an optimized succeed_n for zero times, make the jump.  */
6194:191551:    case jump:
6195:191566:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6196:191608:      if (mcnt >= 0)
6197:191629:        p1 += mcnt;
6198:191649:      else
6199:191660:        return false;
6200:191682:      break;
6201:191695:
6202:191696:    case succeed_n:
6203:191716:      /* Get to the number of times to succeed.  */
6204:191768:      p1 += 2;		
6205:191785:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6206:191827:
6207:191828:      if (mcnt == 0)
6208:191849:        {
6209:191859:          p1 -= 4;
6210:191878:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6211:191924:          p1 += mcnt;
6212:191946:        }
6213:191956:      else
6214:191967:        return false;
6215:191989:      break;
6216:192002:
6217:192003:    case duplicate: 
6218:192024:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
6219:192076:        return false;
6220:192098:      break;
6221:192111:
6222:192112:    case set_number_at:
6223:192136:      p1 += 4;
6224:192151:
6225:192152:    default:
6226:192165:      /* All other opcodes mean we cannot match the empty string.  */
6227:192235:      return false;
6228:192255:  }
6229:192259:
6230:192260:  *p = p1;
6231:192271:  return true;
6232:192286:} /* common_op_match_null_string_p */
6233:192324:
6234:192325:
6235:192326:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
6236:192398:   bytes; nonzero otherwise.  */
6237:192431:   
6238:192435:static int
6239:192446:bcmp_translate (s1, s2, len, translate)
6240:192486:     unsigned char *s1, *s2;
6241:192515:     register int len;
6242:192538:     char *translate;
6243:192560:{
6244:192562:  register unsigned char *p1 = s1, *p2 = s2;
6245:192607:  while (len)
6246:192621:    {
6247:192627:      if (translate[*p1++] != translate[*p2++]) return 1;
6248:192685:      len--;
6249:192698:    }
6250:192704:  return 0;
6251:192716:}
6252:192718:
6253:192720:/* Entry points for GNU code.  */
6254:192754:
6255:192755:/* re_compile_pattern is the GNU regular expression compiler: it
6256:192820:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
6257:192886:   Returns 0 if the pattern was valid, otherwise an error string.
6258:192952:   
6259:192956:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
6260:193029:   are set in BUFP on entry.
6261:193058:   
6262:193062:   We call regex_compile to do the actual compilation.  */
6263:193121:
6264:193122:const char *
6265:193135:re_compile_pattern (pattern, length, bufp)
6266:193178:     const char *pattern;
6267:193204:     int length;
6268:193221:     struct re_pattern_buffer *bufp;
6269:193258:{
6270:193260:  reg_errcode_t ret;
6271:193281:  
6272:193284:  /* GNU code is written to assume at least RE_NREGS registers will be set
6273:193359:     (and at least one extra will be -1).  */
6274:193405:  bufp->regs_allocated = REGS_UNALLOCATED;
6275:193448:  
6276:193451:  /* And GNU code determines whether or not to get register information
6277:193523:     by passing null for the REGS argument to re_match, etc., not by
6278:193592:     setting no_sub.  */
6279:193617:  bufp->no_sub = 0;
6280:193637:  
6281:193640:  /* Match anchors at newline.  */
6282:193675:  bufp->newline_anchor = 1;
6283:193703:  
6284:193706:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
6285:193772:
6286:193773:  return re_error_msg[(int) ret];
6287:193807:}     
6288:193814:
6289:193816:/* Entry points compatible with 4.2 BSD regex library.  We don't define
6290:193888:   them if this is an Emacs or POSIX compilation.  */
6291:193942:
6292:193943:#if !defined (emacs) && !defined (_POSIX_SOURCE)
6293:193992:
6294:193993:/* BSD has one and only one pattern buffer.  */
6295:194041:static struct re_pattern_buffer re_comp_buf;
6296:194086:
6297:194087:char *
6298:194094:re_comp (s)
6299:194106:    const char *s;
6300:194125:{
6301:194127:  reg_errcode_t ret;
6302:194148:  
6303:194151:  if (!s)
6304:194161:    {
6305:194167:      if (!re_comp_buf.buffer)
6306:194198:	return "No previous regular expression";
6307:194240:      return 0;
6308:194256:    }
6309:194262:
6310:194263:  if (!re_comp_buf.buffer)
6311:194290:    {
6312:194296:      re_comp_buf.buffer = (unsigned char *) malloc (200);
6313:194355:      if (re_comp_buf.buffer == NULL)
6314:194393:        return "Memory exhausted";
6315:194428:      re_comp_buf.allocated = 200;
6316:194463:
6317:194464:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
6318:194526:      if (re_comp_buf.fastmap == NULL)
6319:194565:	return "Memory exhausted";
6320:194593:    }
6321:194599:
6322:194600:  /* Since `re_exec' always passes NULL for the `regs' argument, we
6323:194668:     don't need to initialize the pattern buffer fields which affect it.  */
6324:194745:
6325:194746:  /* Match anchors at newlines.  */
6326:194782:  re_comp_buf.newline_anchor = 1;
6327:194816:
6328:194817:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
6329:194889:  
6330:194892:  /* Yes, we're discarding `const' here.  */
6331:194937:  return (char *) re_error_msg[(int) ret];
6332:194980:}
6333:194982:
6334:194983:
6335:194984:int
6336:194988:re_exec (s)
6337:195000:    const char *s;
6338:195019:{
6339:195021:  const int len = strlen (s);
6340:195051:  return
6341:195060:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
6342:195138:}
6343:195140:#endif /* not emacs and not _POSIX_SOURCE */
6344:195185:
6345:195187:/* POSIX.2 functions.  Don't define these for Emacs.  */
6346:195244:
6347:195245:#ifndef emacs
6348:195259:
6349:195260:/* regcomp takes a regular expression as a string and compiles it.
6350:195327:
6351:195328:   PREG is a regex_t *.  We do not expect any fields to be initialized,
6352:195400:   since POSIX says we shouldn't.  Thus, we set
6353:195448:
6354:195449:     `buffer' to the compiled pattern;
6355:195488:     `used' to the length of the compiled pattern;
6356:195539:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
6357:195588:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
6358:195644:       RE_SYNTAX_POSIX_BASIC;
6359:195674:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
6360:195732:     `fastmap' and `fastmap_accurate' to zero;
6361:195779:     `re_nsub' to the number of subexpressions in PATTERN.
6362:195838:
6363:195839:   PATTERN is the address of the pattern string.
6364:195888:
6365:195889:   CFLAGS is a series of bits which affect compilation.
6366:195945:
6367:195946:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
6368:196019:     use POSIX basic syntax.
6369:196048:
6370:196049:     If REG_NEWLINE is set, then . and [^...] don't match newline.
6371:196116:     Also, regexec will try a match beginning after every newline.
6372:196183:
6373:196184:     If REG_ICASE is set, then we considers upper- and lowercase
6374:196249:     versions of letters to be equivalent when matching.
6375:196306:
6376:196307:     If REG_NOSUB is set, then when PREG is passed to regexec, that
6377:196375:     routine will report only success or failure, and nothing about the
6378:196447:     registers.
6379:196463:
6380:196464:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
6381:196537:   the return codes and their meanings.)  */
6382:196582:
6383:196583:int
6384:196587:regcomp (preg, pattern, cflags)
6385:196619:    regex_t *preg;
6386:196638:    const char *pattern; 
6387:196664:    int cflags;
6388:196680:{
6389:196682:  reg_errcode_t ret;
6390:196703:  unsigned syntax
6391:196721:    = (cflags & REG_EXTENDED) ?
6392:196753:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
6393:196809:
6394:196810:  /* regex_compile will allocate the space for the compiled pattern.  */
6395:196883:  preg->buffer = 0;
6396:196903:  preg->allocated = 0;
6397:196926:  preg->used = 0;
6398:196944:  
6399:196947:  /* Don't bother to use a fastmap when searching.  This simplifies the
6400:197019:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
6401:197089:     characters after newlines into the fastmap.  This way, we just try
6402:197161:     every character.  */
6403:197187:  preg->fastmap = 0;
6404:197208:  
6405:197211:  if (cflags & REG_ICASE)
6406:197237:    {
6407:197243:      unsigned i;
6408:197261:      
6409:197268:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
6410:197325:      if (preg->translate == NULL)
6411:197360:        return (int) REG_ESPACE;
6412:197393:
6413:197394:      /* Map uppercase characters to corresponding lowercase ones.  */
6414:197465:      for (i = 0; i < CHAR_SET_SIZE; i++)
6415:197507:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
6416:197567:    }
6417:197573:  else
6418:197580:    preg->translate = NULL;
6419:197608:
6420:197609:  /* If REG_NEWLINE is set, newlines are treated differently.  */
6421:197675:  if (cflags & REG_NEWLINE)
6422:197703:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
6423:197772:      syntax &= ~RE_DOT_NEWLINE;
6424:197805:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
6425:197847:      /* It also changes the matching behavior.  */
6426:197899:      preg->newline_anchor = 1;
6427:197931:    }
6428:197937:  else
6429:197944:    preg->newline_anchor = 0;
6430:197974:
6431:197975:  preg->no_sub = !!(cflags & REG_NOSUB);
6432:198016:
6433:198017:  /* POSIX says a null character in the pattern terminates it, so we 
6434:198087:     can use strlen here in compiling the pattern.  */
6435:198142:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
6436:198207:  
6437:198210:  /* POSIX doesn't distinguish between an unmatched open-group and an
6438:198280:     unmatched close-group: both are REG_EPAREN.  */
6439:198333:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
6440:198377:  
6441:198380:  return (int) ret;
6442:198400:}
6443:198402:
6444:198403:
6445:198404:/* regexec searches for a given pattern, specified by PREG, in the
6446:198471:   string STRING.
6447:198489:   
6448:198493:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
6449:198561:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
6450:198629:   least NMATCH elements, and we set them to the offsets of the
6451:198693:   corresponding matched substrings.
6452:198730:   
6453:198734:   EFLAGS specifies `execution flags' which affect matching: if
6454:198798:   REG_NOTBOL is set, then ^ does not match at the beginning of the
6455:198866:   string; if REG_NOTEOL is set, then $ does not match at the end.
6456:198933:   
6457:198937:   We return 0 if we find a match and REG_NOMATCH if not.  */
6458:198999:
6459:199000:int
6460:199004:regexec (preg, string, nmatch, pmatch, eflags)
6461:199051:    const regex_t *preg;
6462:199076:    const char *string; 
6463:199101:    size_t nmatch; 
6464:199121:    regmatch_t pmatch[]; 
6465:199147:    int eflags;
6466:199163:{
6467:199165:  int ret;
6468:199176:  struct re_registers regs;
6469:199204:  regex_t private_preg;
6470:199228:  int len = strlen (string);
6471:199257:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
6472:199312:
6473:199313:  private_preg = *preg;
6474:199337:  
6475:199340:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
6476:199390:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
6477:199440:  
6478:199443:  /* The user has told us exactly how many registers to return
6479:199506:     information about, via `nmatch'.  We have to pass that on to the
6480:199576:     matching routines.  */
6481:199604:  private_preg.regs_allocated = REGS_FIXED;
6482:199648:  
6483:199651:  if (want_reg_info)
6484:199672:    {
6485:199678:      regs.num_regs = nmatch;
6486:199708:      regs.start = TALLOC (nmatch, regoff_t);
6487:199754:      regs.end = TALLOC (nmatch, regoff_t);
6488:199798:      if (regs.start == NULL || regs.end == NULL)
6489:199848:        return (int) REG_NOMATCH;
6490:199882:    }
6491:199888:
6492:199889:  /* Perform the searching operation.  */
6493:199931:  ret = re_search (&private_preg, string, len,
6494:199978:                   /* start: */ 0, /* range: */ len,
6495:200031:                   want_reg_info ? &regs : (struct re_registers *) 0);
6496:200102:  
6497:200105:  /* Copy the register information to the POSIX structure.  */
6498:200168:  if (want_reg_info)
6499:200189:    {
6500:200195:      if (ret >= 0)
6501:200215:        {
6502:200225:          unsigned r;
6503:200247:
6504:200248:          for (r = 0; r < nmatch; r++)
6505:200287:            {
6506:200301:              pmatch[r].rm_so = regs.start[r];
6507:200348:              pmatch[r].rm_eo = regs.end[r];
6508:200393:            }
6509:200407:        }
6510:200417:
6511:200418:      /* If we needed the temporary register info, free the space now.  */
6512:200493:      free (regs.start);
6513:200518:      free (regs.end);
6514:200541:    }
6515:200547:
6516:200548:  /* We want zero return to mean success, unlike `re_search'.  */
6517:200614:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
6518:200673:}
6519:200675:
6520:200676:
6521:200677:/* Returns a message corresponding to an error code, ERRCODE, returned
6522:200748:   from either regcomp or regexec.   We don't use PREG here.  */
6523:200813:
6524:200814:size_t
6525:200821:regerror (errcode, preg, errbuf, errbuf_size)
6526:200867:    int errcode;
6527:200884:    const regex_t *preg;
6528:200909:    char *errbuf;
6529:200927:    size_t errbuf_size;
6530:200951:{
6531:200953:  const char *msg;
6532:200972:  size_t msg_size;
6533:200991:
6534:200992:  if (errcode < 0
6535:201010:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
6536:201082:    /* Only error codes returned by the rest of the code should be passed 
6537:201157:       to this routine.  If we are given anything else, or if other regex
6538:201231:       code generates an invalid error code, then the program has a bug.
6539:201304:       Dump core so we can fix it.  */
6540:201343:    abort ();
6541:201357:
6542:201358:  msg = re_error_msg[errcode];
6543:201389:
6544:201390:  /* POSIX doesn't require that we do anything in this case, but why
6545:201459:     not be nice.  */
6546:201481:  if (! msg)
6547:201494:    msg = "Success";
6548:201515:
6549:201516:  msg_size = strlen (msg) + 1; /* Includes the null.  */
6550:201573:  
6551:201576:  if (errbuf_size != 0)
6552:201600:    {
6553:201606:      if (msg_size > errbuf_size)
6554:201640:        {
6555:201650:          strncpy (errbuf, msg, errbuf_size - 1);
6556:201700:          errbuf[errbuf_size - 1] = 0;
6557:201739:        }
6558:201749:      else
6559:201760:        strcpy (errbuf, msg);
6560:201790:    }
6561:201796:
6562:201797:  return msg_size;
6563:201816:}
6564:201818:
6565:201819:
6566:201820:/* Free dynamically allocated space used by PREG.  */
6567:201874:
6568:201875:void
6569:201880:regfree (preg)
6570:201895:    regex_t *preg;
6571:201914:{
6572:201916:  if (preg->buffer != NULL)
6573:201944:    free (preg->buffer);
6574:201969:  preg->buffer = NULL;
6575:201992:  
6576:201995:  preg->allocated = 0;
6577:202018:  preg->used = 0;
6578:202036:
6579:202037:  if (preg->fastmap != NULL)
6580:202066:    free (preg->fastmap);
6581:202092:  preg->fastmap = NULL;
6582:202116:  preg->fastmap_accurate = 0;
6583:202146:
6584:202147:  if (preg->translate != NULL)
6585:202178:    free (preg->translate);
6586:202206:  preg->translate = NULL;
6587:202232:}
6588:202234:
6589:202235:#endif /* not emacs  */
6590:202259:
6591:202261:/*
6592:202264:Local variables:
6593:202281:make-backup-files: t
6594:202302:version-control: t
6595:202321:trim-versions-without-asking: nil
6596:202355:End:
6597:202360:*/
6598:202363:/* dfa.c - deterministic extended regexp routines for GNU
6599:202421:   Copyright (C) 1988 Free Software Foundation, Inc.
6600:202474:
6601:202475:   This program is free software; you can redistribute it and/or modify
6602:202547:   it under the terms of the GNU General Public License as published by
6603:202619:   the Free Software Foundation; either version 2, or (at your option)
6604:202690:   any later version.
6605:202712:
6606:202713:   This program is distributed in the hope that it will be useful,
6607:202780:   but WITHOUT ANY WARRANTY; without even the implied warranty of
6608:202846:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
6609:202911:   GNU General Public License for more details.
6610:202959:
6611:202960:   You should have received a copy of the GNU General Public License
6612:203029:   along with this program; if not, write to the Free Software
6613:203092:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
6614:203157:
6615:203158:/* Written June, 1988 by Mike Haertel
6616:203196:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
6617:203268:
6621:203342:
6622:203343:#ifdef STDC_HEADERS
6623:203363:#if flag_stdlib==0
6625:203402:#define flag_stdlib 1
6626:203424:#endif
6627:203431:#else
6628:203437:#if flag_systypes==0 
6630:203482:#define flag_systypes 1
6631:203506:#endif
6632:203513:extern char *calloc(), *malloc(), *realloc();
6633:203559:extern void free();
6634:203579:#endif
6635:203586:
6636:203587:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
6637:203639:#if flag_string==0
6639:203678:#define flag_string 1
6640:203700:#endif
6641:203707:#undef index
6642:203720:#define index strchr
6643:203741:#else
6644:203747:#if flag_strings==0
6646:203788:#define flag_strings 1
6647:203811:#endif
6648:203818:#endif
6649:203825:
6650:203826:#ifndef isgraph
6651:203842:#define isgraph(C) (isprint(C) && !isspace(C))
6652:203889:#endif
6653:203896:
6654:203897:#undef ISALPHA
6655:203912:#undef ISUPPER
6656:203927:#undef ISLOWER
6657:203942:#undef ISDIGIT
6658:203957:#undef ISXDIGIT
6659:203973:#undef ISSPACE
6660:203988:#undef ISPUNCT
6661:204003:#undef ISALNUM
6662:204018:#undef ISPRINT
6663:204033:#undef ISGRAPH
6664:204048:#undef ISCNTRL
6665:204063:
6666:204064:
6667:204065:#ifdef isascii
6668:204080:#define ISALPHA(C) (isascii(C) && isalpha(C))
6669:204126:#define ISUPPER(C) (isascii(C) && isupper(C))
6670:204172:#define ISLOWER(C) (isascii(C) && islower(C))
6671:204218:#define ISDIGIT(C) (isascii(C) && isdigit(C))
6672:204264:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
6673:204312:#define ISSPACE(C) (isascii(C) && isspace(C))
6674:204358:#define ISPUNCT(C) (isascii(C) && ispunct(C))
6675:204404:#define ISALNUM(C) (isascii(C) && isalnum(C))
6676:204450:#define ISPRINT(C) (isascii(C) && isprint(C))
6677:204496:#define ISGRAPH(C) (isascii(C) && isgraph(C))
6678:204542:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
6679:204588:#else
6680:204594:#define ISALPHA(C) isalpha(C)
6681:204624:#define ISUPPER(C) isupper(C)
6682:204654:#define ISLOWER(C) islower(C)
6683:204684:#define ISDIGIT(C) isdigit(C)
6684:204714:#define ISXDIGIT(C) isxdigit(C)
6685:204746:#define ISSPACE(C) isspace(C)
6686:204776:#define ISPUNCT(C) ispunct(C)
6687:204806:#define ISALNUM(C) isalnum(C)
6688:204836:#define ISPRINT(C) isprint(C)
6689:204866:#define ISGRAPH(C) isgraph(C)
6690:204896:#define ISCNTRL(C) iscntrl(C)
6691:204926:#endif
6692:204933:
6695:204974:
6696:204975:#if __STDC__
6697:204988:typedef void *ptr_t;
6698:205009:#else
6699:205015:typedef char *ptr_t;
6700:205036:#endif
6701:205043:
6702:205044:static void	dfamust();
6703:205067:
6704:205068:static ptr_t
6705:205081:xcalloc(n, s)
6706:205095:     int n;
6707:205107:     size_t s;
6708:205122:{
6709:205124:  ptr_t r = calloc(n, s);
6710:205150:
6711:205151:  if (!r)
6712:205161:    dfaerror("Memory exhausted");
6713:205195:  return r;
6714:205207:}
6715:205209:
6716:205210:static ptr_t
6717:205223:xmalloc_1(n)
6718:205236:     size_t n;
6719:205251:{
6720:205253:  ptr_t r = malloc(n);
6721:205276:
6722:205277:  assert(n != 0);
6723:205295:  if (!r)
6724:205305:    dfaerror("Memory exhausted");
6725:205339:  return r;
6726:205351:}
6727:205353:
6728:205354:static ptr_t
6729:205367:xrealloc_1(p, n)
6730:205384:     ptr_t p;
6731:205398:     size_t n;
6732:205413:{
6733:205415:  ptr_t r = realloc(p, n);
6734:205442:
6735:205443:  assert(n != 0);
6736:205461:  if (!r)
6737:205471:    dfaerror("Memory exhausted");
6738:205505:  return r;
6739:205517:}
6740:205519:
6741:205520:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
6742:205583:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
6743:205649:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
6744:205730:
6745:205731:/* Reallocate an array of type t if nalloc is too small for index. */
6746:205801:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
6747:205853:  if ((index) >= (nalloc))			  \
6748:205886:    {						  \
6749:205901:      while ((index) >= (nalloc))		  \
6750:205940:	(nalloc) *= 2;				  \
6751:205963:      REALLOC(p, t, nalloc);			  \
6752:205998:    }
6753:206004:
6754:206005:#ifdef DEBUG
6755:206018:
6756:206019:static void
6757:206031:prtok(t)
6758:206040:     token t;
6759:206054:{
6760:206056:  char *s;
6761:206067:
6762:206068:  if (t < 0)
6763:206081:    fprintf(stderr, "END");
6764:206109:  else if (t < NOTCHAR)
6765:206133:    fprintf(stderr, "%c", t);
6766:206163:  else
6767:206170:    {
6768:206176:      switch (t)
6769:206193:	{
6770:206196:	case EMPTY: s = "EMPTY"; break;
6771:206229:	case BACKREF: s = "BACKREF"; break;
6772:206266:	case BEGLINE: s = "BEGLINE"; break;
6773:206303:	case ENDLINE: s = "ENDLINE"; break;
6774:206340:	case BEGWORD: s = "BEGWORD"; break;
6775:206377:	case ENDWORD: s = "ENDWORD"; break;
6776:206414:	case LIMWORD: s = "LIMWORD"; break;
6777:206451:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
6778:206494:	case QMARK: s = "QMARK"; break;
6779:206527:	case STAR: s = "STAR"; break;
6780:206558:	case PLUS: s = "PLUS"; break;
6781:206589:	case CAT: s = "CAT"; break;
6782:206618:	case OR: s = "OR"; break;
6783:206645:	case ORTOP: s = "ORTOP"; break;
6784:206678:	case LPAREN: s = "LPAREN"; break;
6785:206713:	case RPAREN: s = "RPAREN"; break;
6786:206748:	default: s = "CSET"; break;
6787:206777:	}
6788:206780:      fprintf(stderr, "%s", s);
6789:206812:    }
6790:206818:}
6791:206820:#endif /* DEBUG */
6792:206839:
6793:206840:/* Stuff pertaining to charclasses. */
6794:206879:
6795:206880:static int
6796:206891:tstbit(b, c)
6797:206904:     int b;
6798:206916:     charclass c;
6799:206934:{
6800:206936:  return c[b / INTBITS] & 1 << b % INTBITS;
6801:206980:}
6802:206982:
6803:206983:static void
6804:206995:setbit(b, c)
6805:207008:     int b;
6806:207020:     charclass c;
6807:207038:{
6808:207040:  c[b / INTBITS] |= 1 << b % INTBITS;
6809:207078:}
6810:207080:
6811:207081:static void
6812:207093:clrbit(b, c)
6813:207106:     int b;
6814:207118:     charclass c;
6815:207136:{
6816:207138:  c[b / INTBITS] &= ~(1 << b % INTBITS);
6817:207179:}
6818:207181:
6819:207182:static void
6820:207194:copyset(src, dst)
6821:207212:     charclass src;
6822:207232:     charclass dst;
6823:207252:{
6824:207254:  int i;
6825:207263:
6826:207264:  for (i = 0; i < CHARCLASS_INTS; ++i)
6827:207303:    dst[i] = src[i];
6828:207324:}
6829:207326:
6830:207327:static void
6831:207339:zeroset(s)
6832:207350:     charclass s;
6833:207368:{
6834:207370:  int i;
6835:207379:
6836:207380:  for (i = 0; i < CHARCLASS_INTS; ++i)
6837:207419:    s[i] = 0;
6838:207433:}
6839:207435:
6840:207436:static void
6841:207448:notset(s)
6842:207458:     charclass s;
6843:207476:{
6844:207478:  int i;
6845:207487:
6846:207488:  for (i = 0; i < CHARCLASS_INTS; ++i)
6847:207527:    s[i] = ~s[i];
6848:207545:}
6849:207547:
6850:207548:static int
6851:207559:equal(s1, s2)
6852:207573:     charclass s1;
6853:207592:     charclass s2;
6854:207611:{
6855:207613:  int i;
6856:207622:
6857:207623:  for (i = 0; i < CHARCLASS_INTS; ++i)
6858:207662:    if (s1[i] != s2[i])
6859:207686:      return 0;
6860:207702:  return 1;
6861:207714:}
6862:207716:
6863:207717:/* A pointer to the current dfa is kept here during parsing. */
6864:207781:static struct dfa *dfa;
6865:207805:
6866:207806:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
6867:207892:static int
6868:207903:charclass_index(s)
6869:207922:     charclass s;
6870:207940:{
6871:207942:  int i;
6872:207951:
6873:207952:  for (i = 0; i < dfa->cindex; ++i)
6874:207988:    if (equal(s, dfa->charclasses[i]))
6875:208027:      return i;
6876:208043:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
6877:208122:  ++dfa->cindex;
6878:208139:  copyset(s, dfa->charclasses[i]);
6879:208174:  return i;
6880:208186:}
6881:208188:
6882:208189:/* Syntax bits controlling the behavior of the lexical analyzer. */
6883:208257:static int syntax_bits, syntax_bits_set;
6884:208298:
6885:208299:/* Flag for case-folding letters into sets. */
6886:208346:static int case_fold;
6887:208368:
6888:208369:/* Entry point to set syntax options. */
6889:208410:void
6890:208415:dfasyntax(bits, fold)
6891:208437:     int bits;
6892:208452:     int fold;
6893:208467:{
6894:208469:  syntax_bits_set = 1;
6895:208492:  syntax_bits = bits;
6896:208514:  case_fold = fold;
6897:208534:}
6898:208536:
6899:208537:/* Lexical analyzer.  All the dross that deals with the obnoxious
6900:208603:   GNU Regex syntax bits is located here.  The poor, suffering
6901:208666:   reader is referred to the GNU Regex documentation for the
6902:208727:   meaning of the @#%!@#%^!@ syntax bits. */
6903:208772:
6904:208773:static char *lexstart;		/* Pointer to beginning of input string. */
6905:208841:static char *lexptr;		/* Pointer to next input character. */
6906:208902:static lexleft;			/* Number of characters remaining. */
6907:208958:static token lasttok;		/* Previous token returned; initially END. */
6908:209027:static int laststart;		/* True if we're separated from beginning or (, |
6909:209100:				   only by zero-width characters. */
6910:209141:static int parens;		/* Count of outstanding left parens. */
6911:209201:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
6912:209259:
6913:209260:/* Note that characters become unsigned here. */
6914:209309:#define FETCH(c, eoferr)   	      \
6915:209345:  {			   	      \
6916:209363:    if (! lexleft)	   	      \
6917:209394:      if (eoferr != 0)	   	      \
6918:209429:	dfaerror(eoferr);  	      \
6919:209458:      else		   	      \
6920:209482:	return END;	   	      \
6921:209507:    (c) = (unsigned char) *lexptr++;  \
6922:209547:    --lexleft;		   	      \
6923:209575:  }
6924:209579:
6925:209580:#define FUNC(F, P) static int F(c) int c; { return P(c); }
6926:209639:
6927:209640:FUNC(is_alpha, ISALPHA)
6928:209664:FUNC(is_upper, ISUPPER)
6929:209688:FUNC(is_lower, ISLOWER)
6930:209712:FUNC(is_digit, ISDIGIT)
6931:209736:FUNC(is_xdigit, ISXDIGIT)
6932:209762:FUNC(is_space, ISSPACE)
6933:209786:FUNC(is_punct, ISPUNCT)
6934:209810:FUNC(is_alnum, ISALNUM)
6935:209834:FUNC(is_print, ISPRINT)
6936:209858:FUNC(is_graph, ISGRAPH)
6937:209882:FUNC(is_cntrl, ISCNTRL)
6938:209906:
6939:209907:/* The following list maps the names of the Posix named character classes
6940:209981:   to predicate functions that determine whether a given character is in
6941:210054:   the class.  The leading [ has already been eaten by the lexical analyzer. */
6942:210134:static struct {
6943:210150:  char *name;
6944:210164:  int (*pred)();
6945:210181:} prednames[] = {
6946:210199:  ":alpha:]", is_alpha,
6947:210223:  ":upper:]", is_upper,
6948:210247:  ":lower:]", is_lower,
6949:210271:  ":digit:]", is_digit,
6950:210295:  ":xdigit:]", is_xdigit,
6951:210321:  ":space:]", is_space,
6952:210345:  ":punct:]", is_punct,
6953:210369:  ":alnum:]", is_alnum,
6954:210393:  ":print:]", is_print,
6955:210417:  ":graph:]", is_graph,
6956:210441:  ":cntrl:]", is_cntrl,
6957:210465:  0
6958:210469:};
6959:210472:
6960:210473:static int
6961:210484:looking_at(s)
6962:210498:     char *s;
6963:210512:{
6964:210514:  int len;
6965:210525:
6966:210526:  len = strlen(s);
6967:210545:  if (lexleft < len)
6968:210566:    return 0;
6969:210580:  return strncmp(s, lexptr, len) == 0;
6970:210619:}
6971:210621:
6972:210622:static token
6973:210635:lex()
6974:210641:{
6975:210643:  token c, c1, c2;
6976:210662:  int backslash = 0, invert;
6977:210691:  charclass ccl;
6978:210708:  int i;
6979:210717:
6980:210718:  /* Basic plan: We fetch a character.  If it's a backslash,
6981:210779:     we set the backslash flag and go through the loop again.
6982:210841:     On the plus side, this avoids having a duplicate of the
6983:210902:     main switch inside the backslash case.  On the minus side,
6984:210966:     it means that just about every case begins with
6985:211019:     "if (backslash) ...".  */
6986:211050:  for (i = 0; i < 2; ++i)
6987:211076:    {
6988:211082:      FETCH(c, 0);
6989:211101:      switch (c)
6990:211118:	{
6991:211121:	case '\\':
6992:211133:	  if (backslash)
6993:211151:	    goto normal_char;
6994:211174:	  if (lexleft == 0)
6995:211195:	    dfaerror("Unfinished \\ escape");
6996:211234:	  backslash = 1;
6997:211252:	  break;
6998:211262:
6999:211263:	case '^':
7000:211274:	  if (backslash)
7001:211292:	    goto normal_char;
7002:211315:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
7003:211361:	      || lasttok == END
7004:211386:	      || lasttok == LPAREN
7005:211414:	      || lasttok == OR)
7006:211439:	    return lasttok = BEGLINE;
7007:211470:	  goto normal_char;
7008:211491:
7009:211492:	case '$':
7010:211503:	  if (backslash)
7011:211521:	    goto normal_char;
7012:211544:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
7013:211590:	      || lexleft == 0
7014:211613:	      || (syntax_bits & RE_NO_BK_PARENS
7015:211654:		  ? lexleft > 0 && *lexptr == ')'
7016:211690:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
7017:211750:	      || (syntax_bits & RE_NO_BK_VBAR
7018:211789:		  ? lexleft > 0 && *lexptr == '|'
7019:211825:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
7020:211885:	      || ((syntax_bits & RE_NEWLINE_ALT)
7021:211927:	          && lexleft > 0 && *lexptr == '\n'))
7022:211974:	    return lasttok = ENDLINE;
7023:212005:	  goto normal_char;
7024:212026:
7025:212027:	case '1':
7026:212038:	case '2':
7027:212049:	case '3':
7028:212060:	case '4':
7029:212071:	case '5':
7030:212082:	case '6':
7031:212093:	case '7':
7032:212104:	case '8':
7033:212115:	case '9':
7034:212126:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
7035:212178:	    {
7036:212185:	      laststart = 0;
7037:212207:	      return lasttok = BACKREF;
7038:212240:	    }
7039:212247:	  goto normal_char;
7040:212268:
7041:212269:	case '<':
7042:212280:	  if (backslash)
7043:212298:	    return lasttok = BEGWORD;
7044:212329:	  goto normal_char;
7045:212350:
7046:212351:	case '>':
7047:212362:	  if (backslash)
7048:212380:	    return lasttok = ENDWORD;
7049:212411:	  goto normal_char;
7050:212432:
7051:212433:	case 'b':
7052:212444:	  if (backslash)
7053:212462:	    return lasttok = LIMWORD;
7054:212493:	  goto normal_char;
7055:212514:
7056:212515:	case 'B':
7057:212526:	  if (backslash)
7058:212544:	    return lasttok = NOTLIMWORD;
7059:212578:	  goto normal_char;
7060:212599:
7061:212600:	case '?':
7062:212611:	  if (syntax_bits & RE_LIMITED_OPS)
7063:212648:	    goto normal_char;
7064:212671:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
7065:212729:	    goto normal_char;
7066:212752:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7067:212811:	    goto normal_char;
7068:212834:	  return lasttok = QMARK;
7069:212861:
7070:212862:	case '*':
7071:212873:	  if (backslash)
7072:212891:	    goto normal_char;
7073:212914:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7074:212973:	    goto normal_char;
7075:212996:	  return lasttok = STAR;
7076:213022:
7077:213023:	case '+':
7078:213034:	  if (syntax_bits & RE_LIMITED_OPS)
7079:213071:	    goto normal_char;
7080:213094:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
7081:213152:	    goto normal_char;
7082:213175:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7083:213234:	    goto normal_char;
7084:213257:	  return lasttok = PLUS;
7085:213283:
7086:213284:	case '{':
7087:213295:	  if (!(syntax_bits & RE_INTERVALS))
7088:213333:	    goto normal_char;
7089:213356:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
7090:213416:	    goto normal_char;
7091:213439:	  minrep = maxrep = 0;
7092:213463:	  /* Cases:
7093:213476:	     {M} - exact count
7094:213500:	     {M,} - minimum count, maximum is infinity
7095:213548:	     {,M} - 0 through M
7096:213573:	     {M,N} - M through N */
7097:213602:	  FETCH(c, "unfinished repeat count");
7098:213642:	  if (ISDIGIT(c))
7099:213661:	    {
7100:213668:	      minrep = c - '0';
7101:213693:	      for (;;)
7102:213709:		{
7103:213713:		  FETCH(c, "unfinished repeat count");
7104:213754:		  if (!ISDIGIT(c))
7105:213775:		    break;
7106:213788:		  minrep = 10 * minrep + c - '0';
7107:213824:		}
7108:213828:	    }
7109:213835:	  else if (c != ',')
7110:213857:	    dfaerror("malformed repeat count");
7111:213898:	  if (c == ',')
7112:213915:	    for (;;)
7113:213929:	      {
7114:213938:		FETCH(c, "unfinished repeat count");
7115:213977:		if (!ISDIGIT(c))
7116:213996:		  break;
7117:214007:		maxrep = 10 * maxrep + c - '0';
7118:214041:	      }
7119:214050:	  else
7120:214058:	    maxrep = minrep;
7121:214080:	  if (!(syntax_bits & RE_NO_BK_BRACES))
7122:214121:	    {
7123:214128:	      if (c != '\\')
7124:214150:		dfaerror("malformed repeat count");
7125:214188:	      FETCH(c, "unfinished repeat count");
7126:214232:	    }
7127:214239:	  if (c != '}')
7128:214256:	    dfaerror("malformed repeat count");
7129:214297:	  laststart = 0;
7130:214315:	  return lasttok = REPMN;
7131:214342:
7132:214343:	case '|':
7133:214354:	  if (syntax_bits & RE_LIMITED_OPS)
7134:214391:	    goto normal_char;
7135:214414:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
7136:214472:	    goto normal_char;
7137:214495:	  laststart = 1;
7138:214513:	  return lasttok = OR;
7139:214537:
7140:214538:	case '\n':
7141:214550:	  if (syntax_bits & RE_LIMITED_OPS
7142:214586:	      || backslash
7143:214606:	      || !(syntax_bits & RE_NEWLINE_ALT))
7144:214649:	    goto normal_char;
7145:214672:	  laststart = 1;
7146:214690:	  return lasttok = OR;
7147:214714:
7148:214715:	case '(':
7149:214726:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
7150:214786:	    goto normal_char;
7151:214809:	  ++parens;
7152:214822:	  laststart = 1;
7153:214840:	  return lasttok = LPAREN;
7154:214868:
7155:214869:	case ')':
7156:214880:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
7157:214940:	    goto normal_char;
7158:214963:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
7159:215029:	    goto normal_char;
7160:215052:	  --parens;
7161:215065:	  laststart = 0;
7162:215083:	  return lasttok = RPAREN;
7163:215111:
7164:215112:	case '.':
7165:215123:	  if (backslash)
7166:215141:	    goto normal_char;
7167:215164:	  zeroset(ccl);
7168:215181:	  notset(ccl);
7169:215197:	  if (!(syntax_bits & RE_DOT_NEWLINE))
7170:215237:	    clrbit('\n', ccl);
7171:215261:	  if (syntax_bits & RE_DOT_NOT_NULL)
7172:215299:	    clrbit('\0', ccl);
7173:215323:	  laststart = 0;
7174:215341:	  return lasttok = CSET + charclass_index(ccl);
7175:215390:
7176:215391:	case 'w':
7177:215402:	case 'W':
7178:215413:	  if (!backslash)
7179:215432:	    goto normal_char;
7180:215455:	  zeroset(ccl);
7181:215472:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
7182:215508:	    if (ISALNUM(c2))
7183:215530:	      setbit(c2, ccl);
7184:215554:	  if (c == 'W')
7185:215571:	    notset(ccl);
7186:215589:	  laststart = 0;
7187:215607:	  return lasttok = CSET + charclass_index(ccl);
7188:215656:	
7189:215658:	case '[':
7190:215669:	  if (backslash)
7191:215687:	    goto normal_char;
7192:215710:	  zeroset(ccl);
7193:215727:	  FETCH(c, "Unbalanced [");
7194:215756:	  if (c == '^')
7195:215773:	    {
7196:215780:	      FETCH(c, "Unbalanced [");
7197:215813:	      invert = 1;
7198:215832:	    }
7199:215839:	  else
7200:215847:	    invert = 0;
7201:215864:	  do
7202:215870:	    {
7203:215877:	      /* Nobody ever said this had to be fast. :-)
7204:215929:		 Note that if we're looking at some other [:...:]
7205:215981:		 construct, we just treat it as a bunch of ordinary
7206:216035:		 characters.  We can do this because we assume
7207:216084:		 regex has checked for syntax errors before
7208:216130:		 dfa is ever called. */
7209:216156:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
7210:216212:		for (c1 = 0; prednames[c1].name; ++c1)
7211:216253:		  if (looking_at(prednames[c1].name))
7212:216293:		    {
7213:216301:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
7214:216342:			if ((*prednames[c1].pred)(c2))
7215:216376:			  setbit(c2, ccl);
7216:216398:		      lexptr += strlen(prednames[c1].name);
7217:216444:		      lexleft -= strlen(prednames[c1].name);
7218:216491:		      FETCH(c1, "Unbalanced [");
7219:216526:		      goto skip;
7220:216545:		    }
7221:216553:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
7222:216623:		FETCH(c, "Unbalanced [");
7223:216651:	      FETCH(c1, "Unbalanced [");
7224:216685:	      if (c1 == '-')
7225:216707:		{
7226:216711:		  FETCH(c2, "Unbalanced [");
7227:216742:		  if (c2 == ']')
7228:216761:		    {
7229:216769:		      /* In the case [x-], the - is an ordinary hyphen,
7230:216827:			 which is left in c1, the lookahead character. */
7231:216880:		      --lexptr;
7232:216898:		      ++lexleft;
7233:216917:		      c2 = c;
7234:216933:		    }
7235:216941:		  else
7236:216950:		    {
7237:216958:		      if (c2 == '\\'
7238:216981:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
7239:217035:			FETCH(c2, "Unbalanced [");
7240:217065:		      FETCH(c1, "Unbalanced [");
7241:217100:		    }
7242:217108:		}
7243:217112:	      else
7244:217124:		c2 = c;
7245:217134:	      while (c <= c2)
7246:217157:		{
7247:217161:		  setbit(c, ccl);
7248:217181:		  if (case_fold)
7249:217200:		    if (ISUPPER(c))
7250:217222:		      setbit(tolower(c), ccl);
7251:217255:		    else if (ISLOWER(c))
7252:217282:		      setbit(toupper(c), ccl);
7253:217315:		  ++c;
7254:217324:		}
7255:217328:	    skip:
7256:217339:	      ;
7257:217348:	    }
7258:217355:	  while ((c = c1) != ']');
7259:217383:	  if (invert)
7260:217398:	    {
7261:217405:	      notset(ccl);
7262:217425:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
7263:217476:		clrbit('\n', ccl);
7264:217497:	    }
7265:217504:	  laststart = 0;
7266:217522:	  return lasttok = CSET + charclass_index(ccl);
7267:217571:
7268:217572:	default:
7269:217582:	normal_char:
7270:217596:	  laststart = 0;
7271:217614:	  if (case_fold && ISALPHA(c))
7272:217646:	    {
7273:217653:	      zeroset(ccl);
7274:217674:	      setbit(c, ccl);
7275:217697:	      if (isupper(c))
7276:217720:		setbit(tolower(c), ccl);
7277:217747:	      else
7278:217759:		setbit(toupper(c), ccl);
7279:217786:	      return lasttok = CSET + charclass_index(ccl);
7280:217839:	    }
7281:217846:	  return c;
7282:217859:	}
7283:217862:    }
7284:217868:
7285:217869:  /* The above loop should consume at most a backslash
7286:217924:     and some other character. */
7287:217958:  abort();
7288:217969:}
7289:217971:
7290:217972:/* Recursive descent parser for regular expressions. */
7291:218028:
7292:218029:static token tok;		/* Lookahead token. */
7293:218071:static depth;			/* Current depth of a hypothetical stack
7294:218128:				   holding deferred productions.  This is
7295:218174:				   used to determine the depth that will be
7296:218222:				   required of the real stack later on in
7297:218268:				   dfaanalyze(). */
7298:218292:
7299:218293:/* Add the given token to the parse tree, maintaining the depth count and
7300:218367:   updating the maximum depth if necessary. */
7301:218414:static void
7302:218426:addtok(t)
7303:218436:     token t;
7304:218450:{
7305:218452:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
7306:218522:  dfa->tokens[dfa->tindex++] = t;
7307:218556:
7308:218557:  switch (t)
7309:218570:    {
7310:218576:    case QMARK:
7311:218592:    case STAR:
7312:218607:    case PLUS:
7313:218622:      break;
7314:218635:
7315:218636:    case CAT:
7316:218650:    case OR:
7317:218663:    case ORTOP:
7318:218679:      --depth;
7319:218694:      break;
7320:218707:
7321:218708:    default:
7322:218721:      ++dfa->nleaves;
7323:218743:    case EMPTY:
7324:218759:      ++depth;
7325:218774:      break;
7326:218787:    }
7327:218793:  if (depth > dfa->depth)
7328:218819:    dfa->depth = depth;
7329:218843:}
7330:218845:
7331:218846:/* The grammar understood by the parser is as follows.
7332:218901:
7333:218902:   regexp:
7334:218913:     regexp OR branch
7335:218935:     branch
7336:218947:
7337:218948:   branch:
7338:218959:     branch closure
7339:218979:     closure
7340:218992:
7341:218993:   closure:
7342:219005:     closure QMARK
7343:219024:     closure STAR
7344:219042:     closure PLUS
7345:219060:     atom
7346:219070:
7347:219071:   atom:
7348:219080:     <normal character>
7349:219104:     CSET
7350:219114:     BACKREF
7351:219127:     BEGLINE
7352:219140:     ENDLINE
7353:219153:     BEGWORD
7354:219166:     ENDWORD
7355:219179:     LIMWORD
7356:219192:     NOTLIMWORD
7357:219208:     <empty>
7358:219221:
7359:219222:   The parser builds a parse tree in postfix form in an array of tokens. */
7360:219298:
7361:219299:#if __STDC__
7362:219312:static void regexp(int);
7363:219337:#else
7364:219343:static void regexp();
7365:219365:#endif
7366:219372:
7367:219373:static void
7368:219385:atom()
7369:219392:{
7370:219394:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
7371:219461:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
7372:219521:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
7373:219585:    {
7374:219591:      addtok(tok);
7375:219610:      tok = lex();
7376:219629:    }
7377:219635:  else if (tok == LPAREN)
7378:219661:    {
7379:219667:      tok = lex();
7380:219686:      regexp(0);
7381:219703:      if (tok != RPAREN)
7382:219728:	dfaerror("Unbalanced (");
7383:219755:      tok = lex();
7384:219774:    }
7385:219780:  else
7386:219787:    addtok(EMPTY);
7387:219806:}
7388:219808:
7389:219809:/* Return the number of tokens in the given subexpression. */
7390:219871:static int
7391:219882:nsubtoks(tindex)
7392:219899:{
7393:219901:  int ntoks1;
7394:219915:
7395:219916:  switch (dfa->tokens[tindex - 1])
7396:219951:    {
7397:219957:    default:
7398:219970:      return 1;
7399:219986:    case QMARK:
7400:220002:    case STAR:
7401:220017:    case PLUS:
7402:220032:      return 1 + nsubtoks(tindex - 1);
7403:220071:    case CAT:
7404:220085:    case OR:
7405:220098:    case ORTOP:
7406:220114:      ntoks1 = nsubtoks(tindex - 1);
7407:220151:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
7408:220208:    }
7409:220214:}
7410:220216:
7411:220217:/* Copy the given subexpression to the top of the tree. */
7412:220276:static void
7413:220288:copytoks(tindex, ntokens)
7414:220314:     int tindex, ntokens;
7415:220340:{
7416:220342:  int i;
7417:220351:
7418:220352:  for (i = 0; i < ntokens; ++i)
7419:220384:    addtok(dfa->tokens[tindex + i]);
7420:220421:}
7421:220423:
7422:220424:static void
7423:220436:closure()
7424:220446:{
7425:220448:  int tindex, ntokens, i;
7426:220474:
7427:220475:  atom();
7428:220485:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
7429:220554:    if (tok == REPMN)
7430:220576:      {
7431:220584:	ntokens = nsubtoks(dfa->tindex);
7432:220618:	tindex = dfa->tindex - ntokens;
7433:220651:	if (maxrep == 0)
7434:220669:	  addtok(PLUS);
7435:220686:	if (minrep == 0)
7436:220704:	  addtok(QMARK);
7437:220722:	for (i = 1; i < minrep; ++i)
7438:220752:	  {
7439:220757:	    copytoks(tindex, ntokens);
7440:220789:	    addtok(CAT);
7441:220807:	  }
7442:220812:	for (; i < maxrep; ++i)
7443:220837:	  {
7444:220842:	    copytoks(tindex, ntokens);
7445:220874:	    addtok(QMARK);
7446:220894:	    addtok(CAT);
7447:220912:	  }
7448:220917:	tok = lex();
7449:220931:      }
7450:220939:    else
7451:220948:      {
7452:220956:	addtok(tok);
7453:220970:	tok = lex();
7454:220984:      }
7455:220992:}
7456:220994:
7457:220995:static void
7458:221007:branch()
7459:221016:{
7460:221018:  closure();
7461:221031:  while (tok != RPAREN && tok != OR && tok >= 0)
7462:221080:    {
7463:221086:      closure();
7464:221103:      addtok(CAT);
7465:221122:    }
7466:221128:}
7467:221130:
7468:221131:static void
7469:221143:regexp(toplevel)
7470:221160:     int toplevel;
7471:221179:{
7472:221181:  branch();
7473:221193:  while (tok == OR)
7474:221213:    {
7475:221219:      tok = lex();
7476:221238:      branch();
7477:221254:      if (toplevel)
7478:221274:	addtok(ORTOP);
7479:221290:      else
7480:221301:	addtok(OR);
7481:221314:    }
7482:221320:}
7483:221322:
7484:221323:/* Main entry point for the parser.  S is a string to be parsed, len is the
7486:221476:   the struct dfa to parse into. */
7487:221512:void
7488:221517:dfaparse(s, len, d)
7489:221537:     char *s;
7490:221551:     size_t len;
7491:221568:     struct dfa *d;
7492:221588:
7493:221589:{
7494:221591:  dfa = d;
7495:221602:  lexstart = lexptr = s;
7496:221627:  lexleft = len;
7497:221644:  lasttok = END;
7498:221661:  laststart = 1;
7499:221678:  parens = 0;
7500:221692:
7501:221693:  if (! syntax_bits_set)
7502:221718:    dfaerror("No syntax specified");
7503:221755:
7504:221756:  tok = lex();
7505:221771:  depth = d->depth;
7506:221791:
7507:221792:  regexp(1);
7508:221805:
7509:221806:  if (tok != END)
7510:221824:    dfaerror("Unbalanced )");
7511:221854:
7512:221855:  addtok(END - d->nregexps);
7513:221884:  addtok(CAT);
7514:221899:
7515:221900:  if (d->nregexps)
7516:221919:    addtok(ORTOP);
7517:221938:
7518:221939:  ++d->nregexps;
7519:221956:}
7520:221958:
7521:221959:/* Some primitives for operating on sets of positions. */
7522:222017:
7523:222018:/* Copy one set to another; the destination must be large enough. */
7524:222087:static void
7525:222099:copy(src, dst)
7526:222114:     position_set *src;
7527:222138:     position_set *dst;
7528:222162:{
7529:222164:  int i;
7530:222173:
7531:222174:  for (i = 0; i < src->nelem; ++i)
7532:222209:    dst->elems[i] = src->elems[i];
7533:222244:  dst->nelem = src->nelem;
7534:222271:}
7535:222273:
7536:222274:/* Insert a position in a set.  Position sets are maintained in sorted
7537:222345:   order according to index.  If position already exists in the set with
7538:222418:   the same index then their constraints are logically or'd together.
7539:222488:   S->elems must point to an array large enough to hold the resulting set. */
7540:222566:static void
7541:222578:insert(p, s)
7542:222591:     position p;
7543:222608:     position_set *s;
7544:222630:{
7545:222632:  int i;
7546:222641:  position t1, t2;
7547:222660:
7548:222661:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
7549:222725:    ;
7550:222731:  if (i < s->nelem && p.index == s->elems[i].index)
7551:222783:    s->elems[i].constraint |= p.constraint;
7552:222827:  else
7553:222834:    {
7554:222840:      t1 = p;
7555:222854:      ++s->nelem;
7556:222872:      while (i < s->nelem)
7557:222899:	{
7558:222902:	  t2 = s->elems[i];
7559:222923:	  s->elems[i++] = t1;
7560:222946:	  t1 = t2;
7561:222958:	}
7562:222961:    }
7563:222967:}
7564:222969:
7565:222970:/* Merge two sets of positions into a third.  The result is exactly as if
7566:223044:   the positions of both sets were inserted into an initially empty set. */
7567:223120:static void
7568:223132:merge(s1, s2, m)
7569:223149:     position_set *s1;
7570:223172:     position_set *s2;
7571:223195:     position_set *m;
7572:223217:{
7573:223219:  int i = 0, j = 0;
7574:223239:
7575:223240:  m->nelem = 0;
7576:223256:  while (i < s1->nelem && j < s2->nelem)
7577:223297:    if (s1->elems[i].index > s2->elems[j].index)
7578:223346:      m->elems[m->nelem++] = s1->elems[i++];
7579:223391:    else if (s1->elems[i].index < s2->elems[j].index)
7580:223445:      m->elems[m->nelem++] = s2->elems[j++];
7581:223490:    else
7582:223499:      {
7583:223507:	m->elems[m->nelem] = s1->elems[i++];
7584:223545:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
7585:223608:      }
7586:223616:  while (i < s1->nelem)
7587:223640:    m->elems[m->nelem++] = s1->elems[i++];
7588:223683:  while (j < s2->nelem)
7589:223707:    m->elems[m->nelem++] = s2->elems[j++];
7590:223750:}
7591:223752:
7592:223753:/* Delete a position from a set. */
7593:223789:static void
7594:223801:delete(p, s)
7595:223814:     position p;
7596:223831:     position_set *s;
7597:223853:{
7598:223855:  int i;
7599:223864:
7600:223865:  for (i = 0; i < s->nelem; ++i)
7601:223898:    if (p.index == s->elems[i].index)
7602:223936:      break;
7603:223949:  if (i < s->nelem)
7604:223969:    for (--s->nelem; i < s->nelem; ++i)
7605:224009:      s->elems[i] = s->elems[i + 1];
7606:224046:}
7607:224048:
7608:224049:/* Find the index of the state corresponding to the given position set with
7609:224125:   the given preceding context, or create a new state if there is no such
7610:224199:   state.  Newline and letter tell whether we got here on a newline or
7611:224270:   letter, respectively. */
7612:224298:static int
7613:224309:state_index(d, s, newline, letter)
7614:224344:     struct dfa *d;
7615:224364:     position_set *s;
7616:224386:     int newline;
7617:224404:     int letter;
7618:224421:{
7619:224423:  int hash = 0;
7620:224439:  int constraint;
7621:224457:  int i, j;
7622:224469:
7623:224470:  newline = newline ? 1 : 0;
7624:224499:  letter = letter ? 1 : 0;
7625:224526:
7626:224527:  for (i = 0; i < s->nelem; ++i)
7627:224560:    hash ^= s->elems[i].index + s->elems[i].constraint;
7628:224616:
7629:224617:  /* Try to find a state that exactly matches the proposed one. */
7630:224684:  for (i = 0; i < d->sindex; ++i)
7631:224718:    {
7632:224724:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
7633:224800:	  || newline != d->states[i].newline || letter != d->states[i].letter)
7634:224872:	continue;
7635:224883:      for (j = 0; j < s->nelem; ++j)
7636:224920:	if (s->elems[j].constraint
7637:224948:	    != d->states[i].elems.elems[j].constraint
7638:224995:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
7639:225059:	  break;
7640:225069:      if (j == s->nelem)
7641:225094:	return i;
7642:225105:    }
7643:225111:
7644:225112:  /* We'll have to create a new state. */
7645:225154:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
7646:225222:  d->states[i].hash = hash;
7647:225250:  MALLOC(d->states[i].elems.elems, position, s->nelem);
7648:225306:  copy(s, &d->states[i].elems);
7649:225338:  d->states[i].newline = newline;
7650:225372:  d->states[i].letter = letter;
7651:225404:  d->states[i].backref = 0;
7652:225432:  d->states[i].constraint = 0;
7653:225463:  d->states[i].first_end = 0;
7654:225493:  for (j = 0; j < s->nelem; ++j)
7655:225526:    if (d->tokens[s->elems[j].index] < 0)
7656:225568:      {
7657:225576:	constraint = s->elems[j].constraint;
7658:225614:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
7659:225674:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
7660:225737:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
7661:225800:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
7662:225864:	  d->states[i].constraint |= constraint;
7663:225906:	if (! d->states[i].first_end)
7664:225937:	  d->states[i].first_end = d->tokens[s->elems[j].index];
7665:225995:      }
7666:226003:    else if (d->tokens[s->elems[j].index] == BACKREF)
7667:226057:      {
7668:226065:	d->states[i].constraint = NO_CONSTRAINT;
7669:226107:	d->states[i].backref = 1;
7670:226134:      }
7671:226142:
7672:226143:  ++d->sindex;
7673:226158:
7674:226159:  return i;
7675:226171:}
7676:226173:
7677:226174:/* Find the epsilon closure of a set of positions.  If any position of the set
7678:226253:   contains a symbol that matches the empty string in some context, replace
7679:226329:   that position with the elements of its follow labeled with an appropriate
7680:226406:   constraint.  Repeat exhaustively until no funny positions are left.
7681:226477:   S->elems must be large enough to hold the result. */
7682:226533:void
7683:226538:epsclosure(s, d)
7684:226555:     position_set *s;
7685:226577:     struct dfa *d;
7686:226597:{
7687:226599:  int i, j;
7688:226611:  int *visited;
7689:226627:  position p, old;
7690:226646:
7691:226647:  MALLOC(visited, int, d->tindex);
7692:226682:  for (i = 0; i < d->tindex; ++i)
7693:226716:    visited[i] = 0;
7694:226736:
7695:226737:  for (i = 0; i < s->nelem; ++i)
7696:226770:    if (d->tokens[s->elems[i].index] >= NOTCHAR
7697:226818:	&& d->tokens[s->elems[i].index] != BACKREF
7698:226862:	&& d->tokens[s->elems[i].index] < CSET)
7699:226903:      {
7700:226911:	old = s->elems[i];
7701:226931:	p.constraint = old.constraint;
7702:226963:	delete(s->elems[i], s);
7703:226988:	if (visited[old.index])
7704:227013:	  {
7705:227018:	    --i;
7706:227028:	    continue;
7707:227043:	  }
7708:227048:	visited[old.index] = 1;
7709:227073:	switch (d->tokens[old.index])
7710:227104:	  {
7711:227109:	  case BEGLINE:
7712:227126:	    p.constraint &= BEGLINE_CONSTRAINT;
7713:227167:	    break;
7714:227179:	  case ENDLINE:
7715:227196:	    p.constraint &= ENDLINE_CONSTRAINT;
7716:227237:	    break;
7717:227249:	  case BEGWORD:
7718:227266:	    p.constraint &= BEGWORD_CONSTRAINT;
7719:227307:	    break;
7720:227319:	  case ENDWORD:
7721:227336:	    p.constraint &= ENDWORD_CONSTRAINT;
7722:227377:	    break;
7723:227389:	  case LIMWORD:
7724:227406:	    p.constraint &= LIMWORD_CONSTRAINT;
7725:227447:	    break;
7726:227459:	  case NOTLIMWORD:
7727:227479:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
7728:227523:	    break;
7729:227535:	  default:
7730:227547:	    break;
7731:227559:	  }
7732:227564:	for (j = 0; j < d->follows[old.index].nelem; ++j)
7733:227615:	  {
7734:227620:	    p.index = d->follows[old.index].elems[j].index;
7735:227673:	    insert(p, s);
7736:227692:	  }
7737:227697:	/* Force rescan to start at the beginning. */
7738:227744:	i = -1;
7739:227753:      }
7740:227761:
7741:227762:  free(visited);
7742:227779:}
7743:227781:
7744:227782:/* Perform bottom-up analysis on the parse tree, computing various functions.
7745:227860:   Note that at this point, we're pretending constructs like \< are real
7746:227933:   characters rather than constraints on what can follow them.
7747:227996:
7748:227997:   Nullable:  A node is nullable if it is at the root of a regexp that can
7749:228072:   match the empty string.
7750:228099:   *  EMPTY leaves are nullable.
7751:228132:   * No other leaf is nullable.
7752:228164:   * A QMARK or STAR node is nullable.
7753:228203:   * A PLUS node is nullable if its argument is nullable.
7754:228261:   * A CAT node is nullable if both its arguments are nullable.
7755:228325:   * An OR node is nullable if either argument is nullable.
7756:228385:
7757:228386:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
7758:228465:   that could correspond to the first character of a string matching the
7759:228538:   regexp rooted at the given node.
7760:228574:   * EMPTY leaves have empty firstpos.
7761:228613:   * The firstpos of a nonempty leaf is that leaf itself.
7762:228671:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
7763:228743:     argument.
7764:228758:   * The firstpos of a CAT node is the firstpos of the left argument, union
7765:228834:     the firstpos of the right if the left argument is nullable.
7766:228899:   * The firstpos of an OR node is the union of firstpos of each argument.
7767:228974:
7768:228975:   Lastpos:  The lastpos of a node is the set of positions that could
7769:229045:   correspond to the last character of a string matching the regexp at
7770:229116:   the given node.
7771:229135:   * EMPTY leaves have empty lastpos.
7772:229173:   * The lastpos of a nonempty leaf is that leaf itself.
7773:229230:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
7774:229300:     argument.
7775:229315:   * The lastpos of a CAT node is the lastpos of its right argument, union
7776:229390:     the lastpos of the left if the right argument is nullable.
7777:229454:   * The lastpos of an OR node is the union of the lastpos of each argument.
7778:229531:
7779:229532:   Follow:  The follow of a position is the set of positions that could
7780:229604:   correspond to the character following a character matching the node in
7781:229678:   a string matching the regexp.  At this point we consider special symbols
7782:229754:   that match the empty string in some context to be just normal characters.
7783:229831:   Later, if we find that a special symbol is in a follow set, we will
7784:229902:   replace it with the elements of its follow, labeled with an appropriate
7785:229977:   constraint.
7786:229992:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
7787:230069:     the follow of every node in the lastpos.
7788:230115:   * Every node in the firstpos of the second argument of a CAT node is in
7789:230190:     the follow of every node in the lastpos of the first argument.
7790:230258:
7791:230259:   Because of the postfix representation of the parse tree, the depth-first
7792:230335:   analysis is conveniently done by a linear scan with the aid of a stack.
7793:230410:   Sets are stored as arrays of the elements, obeying a stack-like allocation
7794:230488:   scheme; the number of elements in each set deeper in the stack can be
7795:230561:   used to determine the address of a particular set's array. */
7796:230626:void
7797:230631:dfaanalyze(d, searchflag)
7798:230657:     struct dfa *d;
7799:230677:     int searchflag;
7800:230698:{
7801:230700:  int *nullable;		/* Nullable stack. */
7802:230740:  int *nfirstpos;		/* Element count stack for firstpos sets. */
7803:230804:  position *firstpos;		/* Array where firstpos elements are stored. */
7804:230875:  int *nlastpos;		/* Element count stack for lastpos sets. */
7805:230937:  position *lastpos;		/* Array where lastpos elements are stored. */
7806:231006:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
7807:231071:  position_set tmp;		/* Temporary set for merging sets. */
7808:231130:  position_set merged;		/* Result of merging sets. */
7809:231184:  int wants_newline;		/* True if some position wants newline info. */
7810:231254:  int *o_nullable;
7811:231273:  int *o_nfirst, *o_nlast;
7812:231300:  position *o_firstpos, *o_lastpos;
7813:231336:  int i, j;
7814:231348:  position *pos;
7815:231365:
7816:231366:#ifdef DEBUG
7817:231379:  fprintf(stderr, "dfaanalyze:\n");
7818:231415:  for (i = 0; i < d->tindex; ++i)
7819:231449:    {
7820:231455:      fprintf(stderr, " %d:", i);
7821:231489:      prtok(d->tokens[i]);
7822:231516:    }
7823:231522:  putc('\n', stderr);
7824:231544:#endif
7825:231551:
7826:231552:  d->searchflag = searchflag;
7827:231582:
7828:231583:  MALLOC(nullable, int, d->depth);
7829:231618:  o_nullable = nullable;
7830:231643:  MALLOC(nfirstpos, int, d->depth);
7831:231679:  o_nfirst = nfirstpos;
7832:231703:  MALLOC(firstpos, position, d->nleaves);
7833:231745:  o_firstpos = firstpos, firstpos += d->nleaves;
7834:231794:  MALLOC(nlastpos, int, d->depth);
7835:231829:  o_nlast = nlastpos;
7836:231851:  MALLOC(lastpos, position, d->nleaves);
7837:231892:  o_lastpos = lastpos, lastpos += d->nleaves;
7838:231938:  MALLOC(nalloc, int, d->tindex);
7839:231972:  for (i = 0; i < d->tindex; ++i)
7840:232006:    nalloc[i] = 0;
7841:232025:  MALLOC(merged.elems, position, d->nleaves);
7842:232071:
7843:232072:  CALLOC(d->follows, position_set, d->tindex);
7844:232119:
7845:232120:  for (i = 0; i < d->tindex; ++i)
7846:232154:#ifdef DEBUG
7847:232167:    {				/* Nonsyntactic #ifdef goo... */
7848:232209:#endif
7849:232216:    switch (d->tokens[i])
7850:232242:      {
7851:232250:      case EMPTY:
7852:232268:	/* The empty set is nullable. */
7853:232302:	*nullable++ = 1;
7854:232320:
7855:232321:	/* The firstpos and lastpos of the empty leaf are both empty. */
7856:232387:	*nfirstpos++ = *nlastpos++ = 0;
7857:232420:	break;
7858:232428:
7859:232429:      case STAR:
7860:232446:      case PLUS:
7861:232463:	/* Every element in the firstpos of the argument is in the follow
7862:232530:	   of every element in the lastpos. */
7863:232570:	tmp.nelem = nfirstpos[-1];
7864:232598:	tmp.elems = firstpos;
7865:232621:	pos = lastpos;
7866:232637:	for (j = 0; j < nlastpos[-1]; ++j)
7867:232673:	  {
7868:232678:	    merge(&tmp, &d->follows[pos[j].index], &merged);
7869:232732:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
7870:232800:				 nalloc[pos[j].index], merged.nelem - 1);
7871:232846:	    copy(&merged, &d->follows[pos[j].index]);
7872:232893:	  }
7873:232898:
7874:232899:      case QMARK:
7875:232917:	/* A QMARK or STAR node is automatically nullable. */
7876:232972:	if (d->tokens[i] != PLUS)
7877:232999:	  nullable[-1] = 1;
7878:233020:	break;
7879:233028:
7880:233029:      case CAT:
7881:233045:	/* Every element in the firstpos of the second argument is in the
7882:233112:	   follow of every element in the lastpos of the first argument. */
7883:233181:	tmp.nelem = nfirstpos[-1];
7884:233209:	tmp.elems = firstpos;
7885:233232:	pos = lastpos + nlastpos[-1];
7886:233263:	for (j = 0; j < nlastpos[-2]; ++j)
7887:233299:	  {
7888:233304:	    merge(&tmp, &d->follows[pos[j].index], &merged);
7889:233358:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
7890:233426:				 nalloc[pos[j].index], merged.nelem - 1);
7891:233472:	    copy(&merged, &d->follows[pos[j].index]);
7892:233519:	  }
7893:233524:
7894:233525:	/* The firstpos of a CAT node is the firstpos of the first argument,
7895:233595:	   union that of the second argument if the first is nullable. */
7896:233662:	if (nullable[-2])
7897:233681:	  nfirstpos[-2] += nfirstpos[-1];
7898:233716:	else
7899:233722:	  firstpos += nfirstpos[-1];
7900:233752:	--nfirstpos;
7901:233766:
7902:233767:	/* The lastpos of a CAT node is the lastpos of the second argument,
7903:233836:	   union that of the first argument if the second is nullable. */
7904:233903:	if (nullable[-1])
7905:233922:	  nlastpos[-2] += nlastpos[-1];
7906:233955:	else
7907:233961:	  {
7908:233966:	    pos = lastpos + nlastpos[-2];
7909:234001:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
7910:234046:	      pos[j] = lastpos[j];
7911:234074:	    lastpos += nlastpos[-2];
7912:234104:	    nlastpos[-2] = nlastpos[-1];
7913:234138:	  }
7914:234143:	--nlastpos;
7915:234156:
7916:234157:	/* A CAT node is nullable if both arguments are nullable. */
7917:234219:	nullable[-2] = nullable[-1] && nullable[-2];
7918:234265:	--nullable;
7919:234278:	break;
7920:234286:
7921:234287:      case OR:
7922:234302:      case ORTOP:
7923:234320:	/* The firstpos is the union of the firstpos of each argument. */
7924:234387:	nfirstpos[-2] += nfirstpos[-1];
7925:234420:	--nfirstpos;
7926:234434:
7927:234435:	/* The lastpos is the union of the lastpos of each argument. */
7928:234500:	nlastpos[-2] += nlastpos[-1];
7929:234531:	--nlastpos;
7930:234544:
7931:234545:	/* An OR node is nullable if either argument is nullable. */
7932:234607:	nullable[-2] = nullable[-1] || nullable[-2];
7933:234653:	--nullable;
7934:234666:	break;
7935:234674:
7936:234675:      default:
7937:234690:	/* Anything else is a nonempty position.  (Note that special
7938:234752:	   constructs like \< are treated as nonempty strings here;
7939:234813:	   an "epsilon closure" effectively makes them nullable later.
7940:234877:	   Backreferences have to get a real position so we can detect
7941:234941:	   transitions on them later.  But they are nullable. */
7942:234999:	*nullable++ = d->tokens[i] == BACKREF;
7943:235039:
7944:235040:	/* This position is in its own firstpos and lastpos. */
7945:235097:	*nfirstpos++ = *nlastpos++ = 1;
7946:235130:	--firstpos, --lastpos;
7947:235154:	firstpos->index = lastpos->index = i;
7948:235193:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
7949:235254:
7950:235255:	/* Allocate the follow set for this position. */
7951:235305:	nalloc[i] = 1;
7952:235321:	MALLOC(d->follows[i].elems, position, nalloc[i]);
7953:235372:	break;
7954:235380:      }
7955:235388:#ifdef DEBUG
7956:235401:    /* ... balance the above nonsyntactic #ifdef goo... */
7957:235460:      fprintf(stderr, "node %d:", i);
7958:235498:      prtok(d->tokens[i]);
7959:235525:      putc('\n', stderr);
7960:235551:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
7961:235629:      fprintf(stderr, " firstpos:");
7962:235666:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
7963:235713:	{
7964:235716:	  fprintf(stderr, " %d:", firstpos[j].index);
7965:235763:	  prtok(d->tokens[firstpos[j].index]);
7966:235803:	}
7967:235806:      fprintf(stderr, "\n lastpos:");
7968:235844:      for (j = nlastpos[-1] - 1; j >= 0; --j)
7969:235890:	{
7970:235893:	  fprintf(stderr, " %d:", lastpos[j].index);
7971:235939:	  prtok(d->tokens[lastpos[j].index]);
7972:235978:	}
7973:235981:      putc('\n', stderr);
7974:236007:    }
7975:236013:#endif
7976:236020:
7977:236021:  /* For each follow set that is the follow set of a real position, replace
7978:236097:     it with its epsilon closure. */
7979:236134:  for (i = 0; i < d->tindex; ++i)
7980:236168:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
7981:236226:	|| d->tokens[i] >= CSET)
7982:236252:      {
7983:236260:#ifdef DEBUG
7984:236273:	fprintf(stderr, "follows(%d:", i);
7985:236309:	prtok(d->tokens[i]);
7986:236331:	fprintf(stderr, "):");
7987:236355:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
7988:236403:	  {
7989:236408:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
7990:236468:	    prtok(d->tokens[d->follows[i].elems[j].index]);
7991:236521:	  }
7992:236526:	putc('\n', stderr);
7993:236547:#endif
7994:236554:	copy(&d->follows[i], &merged);
7995:236586:	epsclosure(&merged, d);
7996:236611:	if (d->follows[i].nelem < merged.nelem)
7997:236652:	  REALLOC(d->follows[i].elems, position, merged.nelem);
7998:236709:	copy(&merged, &d->follows[i]);
7999:236741:      }
8000:236749:
8001:236750:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
8002:236827:     be the set of positions of state 0. */
8003:236871:  merged.nelem = 0;
8004:236891:  for (i = 0; i < nfirstpos[-1]; ++i)
8005:236929:    insert(firstpos[i], &merged);
8006:236963:  epsclosure(&merged, d);
8007:236989:
8008:236990:  /* Check if any of the positions of state 0 will want newline context. */
8009:237066:  wants_newline = 0;
8010:237087:  for (i = 0; i < merged.nelem; ++i)
8011:237124:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
8012:237184:      wants_newline = 1;
8013:237209:
8014:237210:  /* Build the initial state. */
8015:237243:  d->salloc = 1;
8016:237260:  d->sindex = 0;
8017:237277:  MALLOC(d->states, dfa_state, d->salloc);
8018:237320:  state_index(d, &merged, wants_newline, 0);
8019:237365:
8020:237366:  free(o_nullable);
8021:237386:  free(o_nfirst);
8022:237404:  free(o_firstpos);
8023:237424:  free(o_nlast);
8024:237441:  free(o_lastpos);
8025:237460:  free(nalloc);
8026:237476:  free(merged.elems);
8027:237498:}
8028:237500:
8029:237501:/* Find, for each character, the transition out of state s of d, and store
8030:237576:   it in the appropriate slot of trans.
8031:237616:
8032:237617:   We divide the positions of s into groups (positions can appear in more
8033:237691:   than one group).  Each group is labeled with a set of characters that
8034:237764:   every position in the group matches (taking into account, if necessary,
8035:237839:   preceding context information of s).  For each group, find the union
8036:237911:   of the its elements' follows.  This set is the set of positions of the
8037:237985:   new state.  For each character in the group's label, set the transition
8038:238060:   on this character to be to a state corresponding to the set's positions,
8039:238136:   and its associated backward context information, if necessary.
8040:238202:
8042:238280:   0 in every state.
8043:238301:
8044:238302:   The collection of groups is constructed by building an equivalence-class
8045:238378:   partition of the positions of s.
8046:238414:
8047:238415:   For each position, find the set of characters C that it matches.  Eliminate
8048:238494:   any characters from C that fail on grounds of backward context.
8049:238561:
8050:238562:   Search through the groups, looking for a group whose label L has nonempty
8051:238639:   intersection with C.  If L - C is nonempty, create a new group labeled
8052:238713:   L - C and having the same positions as the current group, and set L to
8053:238787:   the intersection of L and C.  Insert the position in this group, set
8054:238859:   C = C - L, and resume scanning.
8055:238894:
8056:238895:   If after comparing with every group there are characters remaining in C,
8057:238971:   create a new group labeled with the characters of C and insert this
8058:239042:   position in that group. */
8059:239072:void
8060:239077:dfastate(s, d, trans)
8061:239099:     int s;
8062:239111:     struct dfa *d;
8063:239131:     int trans[];
8064:239149:{
8065:239151:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
8066:239219:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
8067:239290:  int ngrps = 0;		/* Number of groups actually used. */
8068:239346:  position pos;			/* Current position being considered. */
8069:239405:  charclass matches;		/* Set of matching characters. */
8070:239461:  int matchesf;			/* True if matches is nonempty. */
8071:239514:  charclass intersect;		/* Intersection with some label set. */
8072:239578:  int intersectf;		/* True if intersect is nonempty. */
8073:239634:  charclass leftovers;		/* Stuff in the label that didn't match. */
8074:239702:  int leftoversf;		/* True if leftovers is nonempty. */
8075:239758:  static charclass letters;	/* Set of characters considered letters. */
8076:239830:  static charclass newline;	/* Set of characters that aren't newline. */
8077:239903:  position_set follows;		/* Union of the follows of some group. */
8078:239970:  position_set tmp;		/* Temporary space for merging sets. */
8079:240031:  int state;			/* New state. */
8080:240063:  int wants_newline;		/* New state wants to know newline context. */
8081:240132:  int state_newline;		/* New state on a newline transition. */
8082:240195:  int wants_letter;		/* New state wants to know letter context. */
8083:240262:  int state_letter;		/* New state on a letter transition. */
8084:240323:  static initialized;		/* Flag for static initialization. */
8085:240384:  int i, j, k;
8086:240399:
8087:240400:  /* Initialize the set of letters, if necessary. */
8088:240453:  if (! initialized)
8089:240474:    {
8090:240480:      initialized = 1;
8091:240503:      for (i = 0; i < NOTCHAR; ++i)
8092:240539:	if (ISALNUM(i))
8093:240556:	  setbit(i, letters);
8094:240579:      setbit('\n', newline);
8095:240608:    }
8096:240614:
8097:240615:  zeroset(matches);
8098:240635:
8099:240636:  for (i = 0; i < d->states[s].elems.nelem; ++i)
8100:240685:    {
8101:240691:      pos = d->states[s].elems.elems[i];
8102:240732:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
8103:240803:	setbit(d->tokens[pos.index], matches);
8104:240843:      else if (d->tokens[pos.index] >= CSET)
8105:240888:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
8106:240952:      else
8107:240963:	continue;
8108:240974:
8109:240975:      /* Some characters may need to be eliminated from matches because
8110:241047:	 they fail in the current context. */
8111:241086:      if (pos.constraint != 0xFF)
8112:241120:	{
8113:241123:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
8114:241172:					 d->states[s].newline, 1))
8115:241204:	    clrbit('\n', matches);
8116:241232:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
8117:241281:					 d->states[s].newline, 0))
8118:241313:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8119:241355:	      matches[j] &= newline[j];
8120:241388:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
8121:241436:					d->states[s].letter, 1))
8122:241466:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8123:241508:	      matches[j] &= ~letters[j];
8124:241542:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
8125:241590:					d->states[s].letter, 0))
8126:241620:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8127:241662:	      matches[j] &= letters[j];
8128:241695:
8129:241696:	  /* If there are no characters left, there's no point in going on. */
8130:241768:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
8131:241823:	    ;
8132:241830:	  if (j == CHARCLASS_INTS)
8133:241858:	    continue;
8134:241873:	}
8135:241876:
8136:241877:      for (j = 0; j < ngrps; ++j)
8137:241911:	{
8138:241914:	  /* If matches contains a single character only, and the current
8139:241981:	     group's label doesn't contain that character, go on to the
8140:242046:	     next group. */
8141:242067:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
8142:242134:	      && !tstbit(d->tokens[pos.index], labels[j]))
8143:242186:	    continue;
8144:242201:
8145:242202:	  /* Check if this group's label has a nonempty intersection with
8146:242269:	     matches. */
8147:242287:	  intersectf = 0;
8148:242306:	  for (k = 0; k < CHARCLASS_INTS; ++k)
8149:242346:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
8150:242416:	  if (! intersectf)
8151:242437:	    continue;
8152:242452:
8153:242453:	  /* It does; now find the set differences both ways. */
8154:242511:	  leftoversf = matchesf = 0;
8155:242541:	  for (k = 0; k < CHARCLASS_INTS; ++k)
8156:242581:	    {
8157:242588:	      /* Even an optimizing compiler can't know this for sure. */
8158:242655:	      int match = matches[k], label = labels[j][k];
8159:242708:
8160:242709:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
8161:242770:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
8162:242827:	    }
8163:242834:
8164:242835:	  /* If there were leftovers, create a new group labeled with them. */
8165:242907:	  if (leftoversf)
8166:242926:	    {
8167:242933:	      copyset(leftovers, labels[ngrps]);
8168:242975:	      copyset(intersect, labels[j]);
8169:243013:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
8170:243069:	      copy(&grps[j], &grps[ngrps]);
8171:243106:	      ++ngrps;
8172:243122:	    }
8173:243129:
8174:243130:	  /* Put the position in the current group.  Note that there is no
8175:243198:	     reason to call insert() here. */
8176:243237:	  grps[j].elems[grps[j].nelem++] = pos;
8177:243278:
8178:243279:	  /* If every character matching the current position has been
8179:243343:	     accounted for, we're done. */
8180:243379:	  if (! matchesf)
8181:243398:	    break;
8182:243410:	}
8183:243413:
8184:243414:      /* If we've passed the last group, and there are still characters
8185:243486:	 unaccounted for, then we'll have to create a new group. */
8186:243547:      if (j == ngrps)
8187:243569:	{
8188:243572:	  copyset(matches, labels[ngrps]);
8189:243608:	  zeroset(matches);
8190:243629:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
8191:243681:	  grps[ngrps].nelem = 1;
8192:243707:	  grps[ngrps].elems[0] = pos;
8193:243738:	  ++ngrps;
8194:243750:	}
8195:243753:    }
8196:243759:
8197:243760:  MALLOC(follows.elems, position, d->nleaves);
8198:243807:  MALLOC(tmp.elems, position, d->nleaves);
8199:243850:
8200:243851:  /* If we are a searching matcher, the default transition is to a state
8201:243924:     containing the positions of state 0, otherwise the default transition
8202:243999:     is to fail miserably. */
8203:244029:  if (d->searchflag)
8204:244050:    {
8205:244056:      wants_newline = 0;
8206:244081:      wants_letter = 0;
8207:244105:      for (i = 0; i < d->states[0].elems.nelem; ++i)
8208:244158:	{
8209:244161:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
8210:244232:	    wants_newline = 1;
8211:244256:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
8212:244326:	    wants_letter = 1;
8213:244349:	}
8214:244352:      copy(&d->states[0].elems, &follows);
8215:244395:      state = state_index(d, &follows, 0, 0);
8216:244441:      if (wants_newline)
8217:244466:	state_newline = state_index(d, &follows, 1, 0);
8218:244515:      else
8219:244526:	state_newline = state;
8220:244550:      if (wants_letter)
8221:244574:	state_letter = state_index(d, &follows, 0, 1);
8222:244622:      else
8223:244633:	state_letter = state;
8224:244656:      for (i = 0; i < NOTCHAR; ++i)
8225:244692:	if (i == '\n')
8226:244708:	  trans[i] = state_newline;
8227:244737:	else if (ISALNUM(i))
8228:244759:	  trans[i] = state_letter;
8229:244787:	else
8230:244793:	  trans[i] = state;
8231:244814:    }
8232:244820:  else
8233:244827:    for (i = 0; i < NOTCHAR; ++i)
8234:244861:      trans[i] = -1;
8235:244882:
8236:244883:  for (i = 0; i < ngrps; ++i)
8237:244913:    {
8238:244919:      follows.nelem = 0;
8239:244944:
8240:244945:      /* Find the union of the follows of the positions of the group.
8241:245015:	 This is a hideously inefficient loop.  Fix it someday. */
8242:245075:      for (j = 0; j < grps[i].nelem; ++j)
8243:245117:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
8244:245181:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
8245:245247:
8246:245248:      /* If we are building a searching matcher, throw in the positions
8247:245320:	 of state 0 as well. */
8248:245345:      if (d->searchflag)
8249:245370:	for (j = 0; j < d->states[0].elems.nelem; ++j)
8250:245418:	  insert(d->states[0].elems.elems[j], &follows);
8251:245468:
8252:245469:      /* Find out if the new state will want any context information. */
8253:245542:      wants_newline = 0;
8254:245567:      if (tstbit('\n', labels[i]))
8255:245602:	for (j = 0; j < follows.nelem; ++j)
8256:245639:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
8257:245699:	    wants_newline = 1;
8258:245723:
8259:245724:      wants_letter = 0;
8260:245748:      for (j = 0; j < CHARCLASS_INTS; ++j)
8261:245791:	if (labels[i][j] & letters[j])
8262:245823:	  break;
8263:245833:      if (j < CHARCLASS_INTS)
8264:245863:	for (j = 0; j < follows.nelem; ++j)
8265:245900:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
8266:245959:	    wants_letter = 1;
8267:245982:
8268:245983:      /* Find the state(s) corresponding to the union of the follows. */
8269:246056:      state = state_index(d, &follows, 0, 0);
8270:246102:      if (wants_newline)
8271:246127:	state_newline = state_index(d, &follows, 1, 0);
8272:246176:      else
8273:246187:	state_newline = state;
8274:246211:      if (wants_letter)
8275:246235:	state_letter = state_index(d, &follows, 0, 1);
8276:246283:      else
8277:246294:	state_letter = state;
8278:246317:
8279:246318:      /* Set the transitions for each character in the current label. */
8280:246391:      for (j = 0; j < CHARCLASS_INTS; ++j)
8281:246434:	for (k = 0; k < INTBITS; ++k)
8282:246465:	  if (labels[i][j] & 1 << k)
8283:246495:	    {
8284:246502:	      int c = j * INTBITS + k;
8285:246534:
8286:246535:	      if (c == '\n')
8287:246557:		trans[c] = state_newline;
8288:246585:	      else if (ISALNUM(c))
8289:246613:		trans[c] = state_letter;
8290:246640:	      else if (c < NOTCHAR)
8291:246669:		trans[c] = state;
8292:246689:	    }
8293:246696:    }
8294:246702:
8295:246703:  for (i = 0; i < ngrps; ++i)
8296:246733:    free(grps[i].elems);
8297:246758:  free(follows.elems);
8298:246781:  free(tmp.elems);
8299:246800:}
8300:246802:
8301:246803:/* Some routines for manipulating a compiled dfa's transition tables.
8302:246873:   Each state may or may not have a transition table; if it does, and it
8303:246946:   is a non-accepting state, then d->trans[state] points to its table.
8304:247017:   If it is an accepting state then d->fails[state] points to its table.
8305:247090:   If it has no table at all, then d->trans[state] is NULL.
8306:247150:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
8307:247223:
8308:247224:static void
8309:247236:build_state(s, d)
8310:247254:     int s;
8311:247266:     struct dfa *d;
8312:247286:{
8313:247288:  int *trans;			/* The new transition table. */
8314:247336:  int i;
8315:247345:
8316:247346:  /* Set an upper limit on the number of transition tables that will ever
8317:247420:     exist at once.  1024 is arbitrary.  The idea is that the frequently
8318:247493:     used transition tables will be quickly rebuilt, whereas the ones that
8319:247568:     were only needed once or twice will be cleared away. */
8320:247629:  if (d->trcount >= 1024)
8321:247655:    {
8322:247661:      for (i = 0; i < d->tralloc; ++i)
8323:247700:	if (d->trans[i])
8324:247718:	  {
8325:247723:	    free((ptr_t) d->trans[i]);
8326:247755:	    d->trans[i] = NULL;
8327:247780:	  }
8328:247785:	else if (d->fails[i])
8329:247808:	  {
8330:247813:	    free((ptr_t) d->fails[i]);
8331:247845:	    d->fails[i] = NULL;
8332:247870:	  }
8333:247875:      d->trcount = 0;
8334:247897:    }
8335:247903:
8336:247904:  ++d->trcount;
8337:247920:
8338:247921:  /* Set up the success bits for this state. */
8339:247969:  d->success[s] = 0;
8340:247990:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
8341:248064:      s, *d))
8342:248078:    d->success[s] |= 4;
8343:248102:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
8344:248176:      s, *d))
8345:248190:    d->success[s] |= 2;
8346:248214:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
8347:248288:      s, *d))
8348:248302:    d->success[s] |= 1;
8349:248326:
8350:248327:  MALLOC(trans, int, NOTCHAR);
8351:248358:  dfastate(s, d, trans);
8352:248383:
8353:248384:  /* Now go through the new transition table, and make sure that the trans
8354:248459:     and fail arrays are allocated large enough to hold a pointer for the
8355:248533:     largest state mentioned in the table. */
8356:248579:  for (i = 0; i < NOTCHAR; ++i)
8357:248611:    if (trans[i] >= d->tralloc)
8358:248643:      {
8359:248651:	int oldalloc = d->tralloc;
8360:248679:
8361:248680:	while (trans[i] >= d->tralloc)
8362:248712:	  d->tralloc *= 2;
8363:248732:	REALLOC(d->realtrans, int *, d->tralloc + 1);
8364:248779:	d->trans = d->realtrans + 1;
8365:248809:	REALLOC(d->fails, int *, d->tralloc);
8366:248848:	REALLOC(d->success, int, d->tralloc);
8367:248887:	REALLOC(d->newlines, int, d->tralloc);
8368:248927:	while (oldalloc < d->tralloc)
8369:248958:	  {
8370:248963:	    d->trans[oldalloc] = NULL;
8371:248995:	    d->fails[oldalloc++] = NULL;
8372:249029:	  }
8373:249034:      }
8374:249042:
8375:249043:  /* Keep the newline transition in a special place so we can use it as
8376:249115:     a sentinel. */
8377:249135:  d->newlines[s] = trans['\n'];
8378:249167:  trans['\n'] = -1;
8379:249187:
8380:249188:  if (ACCEPTING(s, *d))
8381:249212:    d->fails[s] = trans;
8382:249237:  else
8383:249244:    d->trans[s] = trans;
8384:249269:}
8385:249271:
8386:249272:static void
8387:249284:build_state_zero(d)
8388:249304:     struct dfa *d;
8389:249324:{
8390:249326:  d->tralloc = 1;
8391:249344:  d->trcount = 0;
8392:249362:  CALLOC(d->realtrans, int *, d->tralloc + 1);
8393:249409:  d->trans = d->realtrans + 1;
8394:249440:  CALLOC(d->fails, int *, d->tralloc);
8395:249479:  MALLOC(d->success, int, d->tralloc);
8396:249518:  MALLOC(d->newlines, int, d->tralloc);
8397:249558:  build_state(0, d);
8398:249579:}
8399:249581:
8400:249582:/* Search through a buffer looking for a match to the given struct dfa.
8401:249654:   Find the first occurrence of a string matching the regexp in the buffer,
8402:249730:   and the shortest possible version thereof.  Return a pointer to the first
8403:249807:   character after the match, or NULL if none is found.  Begin points to
8404:249880:   the beginning of the buffer, and end points to the first character after
8405:249956:   its end.  We store a newline in *end to act as a sentinel, so end had
8406:250029:   better point somewhere valid.  Newline is a flag indicating whether to
8407:250103:   allow newlines to be in the matching string.  If count is non-
8408:250169:   NULL it points to a place we're supposed to increment every time we
8409:250240:   see a newline.  Finally, if backref is non-NULL it points to a place
8410:250312:   where we're supposed to store a 1 if backreferencing happened and the
8411:250385:   match needs to be verified by a backtracking matcher.  Otherwise
8412:250453:   we store a 0 in *backref. */
8413:250485:char *
8414:250492:dfaexec(d, begin, end, newline, count, backref)
8415:250540:     struct dfa *d;
8416:250560:     char *begin;
8417:250578:     char *end;
8418:250594:     int newline;
8419:250612:     int *count;
8420:250629:     int *backref;
8421:250648:{
8422:250650:  register s, s1, tmp;		/* Current state. */
8423:250695:  register unsigned char *p;	/* Current input character. */
8424:250755:  register **trans, *t;		/* Copy of d->trans so it can be optimized
8425:250823:				   into a register. */
8426:250850:  static sbit[NOTCHAR];	/* Table for anding with d->success. */
8427:250914:  static sbit_init;
8428:250934:
8429:250935:  if (! sbit_init)
8430:250954:    {
8431:250960:      int i;
8432:250973:
8433:250974:      sbit_init = 1;
8434:250995:      for (i = 0; i < NOTCHAR; ++i)
8435:251031:	if (i == '\n')
8436:251047:	  sbit[i] = 4;
8437:251063:	else if (ISALNUM(i))
8438:251085:	  sbit[i] = 2;
8439:251101:	else
8440:251107:	  sbit[i] = 1;
8441:251123:    }
8442:251129:
8443:251130:  if (! d->tralloc)
8444:251150:    build_state_zero(d);
8445:251175:
8446:251176:  s = s1 = 0;
8447:251190:  p = (unsigned char *) begin;
8448:251221:  trans = d->trans;
8449:251241:  *end = '\n';
8450:251256:
8451:251257:  for (;;)
8452:251268:    {
8453:251274:      /* The dreaded inner loop. */
8454:251310:      if ((t = trans[s]) != 0)
8455:251341:	do
8456:251345:	  {
8457:251350:	    s1 = t[*p++];
8458:251369:	    if (! (t = trans[s1]))
8459:251397:	      goto last_was_s;
8460:251421:	    s = t[*p++];
8461:251439:	  }
8462:251444:        while ((t = trans[s]) != 0);
8463:251481:      goto last_was_s1;
8464:251505:    last_was_s:
8465:251521:      tmp = s, s = s1, s1 = tmp;
8466:251554:    last_was_s1:
8467:251571:
8468:251572:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
8469:251635:	{
8470:251638:	  if (d->success[s] & sbit[*p])
8471:251671:	    {
8472:251678:	      if (backref)
8473:251698:		if (d->states[s].backref)
8474:251726:		  *backref = 1;
8475:251744:		else
8476:251751:		  *backref = 0;
8477:251769:	      return (char *) p;
8478:251795:	    }
8479:251802:
8480:251803:	  s1 = s;
8481:251814:	  s = d->fails[s][*p++];
8482:251840:	  continue;
8483:251853:	}
8484:251856:
8485:251857:      /* If the previous character was a newline, count it. */
8486:251920:      if (count && (char *) p <= end && p[-1] == '\n')
8487:251975:	++*count;
8488:251986:
8489:251987:      /* Check if we've run off the end of the buffer. */
8490:252045:      if ((char *) p > end)
8491:252073:	return NULL;
8492:252087:
8493:252088:      if (s >= 0)
8494:252106:	{
8495:252109:	  build_state(s, d);
8496:252131:	  trans = d->trans;
8497:252152:	  continue;
8498:252165:	}
8499:252168:
8500:252169:      if (p[-1] == '\n' && newline)
8501:252205:	{
8502:252208:	  s = d->newlines[s1];
8503:252232:	  continue;
8504:252245:	}
8505:252248:
8506:252249:      s = 0;
8507:252262:    }
8508:252268:}
8509:252270:
8510:252271:/* Initialize the components of a dfa that the other routines don't
8511:252339:   initialize for themselves. */
8512:252372:void
8513:252377:dfainit(d)
8514:252388:     struct dfa *d;
8515:252408:{
8516:252410:  d->calloc = 1;
8517:252427:  MALLOC(d->charclasses, charclass, d->calloc);
8518:252475:  d->cindex = 0;
8519:252492:
8520:252493:  d->talloc = 1;
8521:252510:  MALLOC(d->tokens, token, d->talloc);
8522:252549:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
8523:252604:
8524:252605:  d->searchflag = 0;
8525:252626:  d->tralloc = 0;
8526:252644:
8527:252645:  d->musts = 0;
8528:252661:}
8529:252663:
8530:252664:/* Parse and analyze a single string of the given length. */
8531:252725:void
8532:252730:dfacomp(s, len, d, searchflag)
8533:252761:     char *s;
8534:252775:     size_t len;
8535:252792:     struct dfa *d;
8536:252812:     int searchflag;
8537:252833:{
8538:252835:  if (case_fold)	/* dummy folding in service of dfamust() */
8539:252896:    {
8540:252902:      char *copy;
8541:252920:      int i;
8542:252933:
8543:252934:      copy = malloc(len);
8544:252960:      if (!copy)
8545:252977:	dfaerror("out of memory");
8546:253005:      
8547:253012:      /* This is a kludge. */
8548:253042:      case_fold = 0;
8549:253063:      for (i = 0; i < len; ++i)
8550:253095:	if (ISUPPER(s[i]))
8551:253115:	  copy[i] = tolower(s[i]);
8552:253143:	else
8553:253149:	  copy[i] = s[i];
8554:253168:
8555:253169:      dfainit(d);
8556:253187:      dfaparse(copy, len, d);
8557:253217:      free(copy);
8558:253235:      dfamust(d);
8559:253253:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
8560:253324:      case_fold = 1;
8561:253345:      dfaparse(s, len, d);
8562:253372:      dfaanalyze(d, searchflag);
8563:253405:    }
8564:253411:  else
8565:253418:    {
8566:253424:        dfainit(d);
8567:253444:        dfaparse(s, len, d);
8568:253473:	dfamust(d);
8569:253486:        dfaanalyze(d, searchflag);
8570:253521:    }
8571:253527:}
8572:253529:
8573:253530:/* Free the storage held by the components of a dfa. */
8574:253586:void
8575:253591:dfafree(d)
8576:253602:     struct dfa *d;
8577:253622:{
8578:253624:  int i;
8579:253633:  struct dfamust *dm, *ndm;
8580:253661:
8581:253662:  free((ptr_t) d->charclasses);
8582:253694:  free((ptr_t) d->tokens);
8583:253721:  for (i = 0; i < d->sindex; ++i)
8584:253755:    free((ptr_t) d->states[i].elems.elems);
8585:253799:  free((ptr_t) d->states);
8586:253826:  for (i = 0; i < d->tindex; ++i)
8587:253860:    if (d->follows[i].elems)
8588:253889:      free((ptr_t) d->follows[i].elems);
8589:253930:  free((ptr_t) d->follows);
8590:253958:  for (i = 0; i < d->tralloc; ++i)
8591:253993:    if (d->trans[i])
8592:254014:      free((ptr_t) d->trans[i]);
8593:254047:    else if (d->fails[i])
8594:254073:      free((ptr_t) d->fails[i]);
8595:254106:  free((ptr_t) d->realtrans);
8596:254136:  free((ptr_t) d->fails);
8597:254162:  free((ptr_t) d->newlines);
8598:254191:  for (dm = d->musts; dm; dm = ndm)
8599:254227:    {
8600:254233:      ndm = dm->next;
8601:254255:      free(dm->must);
8602:254277:      free((ptr_t) dm);
8603:254301:    }
8604:254307:}
8605:254309:
8606:254310:/* Having found the postfix representation of the regular expression,
8607:254380:   try to find a long sequence of characters that must appear in any line
8608:254454:   containing the r.e.
8609:254477:   Finding a "longest" sequence is beyond the scope here;
8610:254535:   we take an easy way out and hope for the best.
8611:254585:   (Take "(ab|a)b"--please.)
8612:254614:
8613:254615:   We do a bottom-up calculation of sequences of characters that must appear
8614:254692:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
8615:254772:   representation:
8616:254791:	sequences that must appear at the left of the match ("left")
8617:254853:	sequences that must appear at the right of the match ("right")
8618:254917:	lists of sequences that must appear somewhere in the match ("in")
8619:254984:	sequences that must constitute the match ("is")
8620:255033:
8621:255034:   When we get to the root of the tree, we use one of the longest of its
8622:255107:   calculated "in" sequences as our answer.  The sequence we find is returned in
8623:255188:   d->must (where "d" is the single argument passed to "dfamust");
8624:255255:   the length of the sequence is returned in d->mustn.
8625:255310:
8626:255311:   The sequences calculated for the various types of node (in pseudo ANSI c)
8627:255388:   are shown below.  "p" is the operand of unary operators (and the left-hand
8628:255466:   operand of binary operators); "q" is the right-hand operand of binary
8629:255539:   operators.
8630:255553:
8631:255554:   "ZERO" means "a zero-length sequence" below.
8632:255602:
8633:255603:	Type	left		right		is		in
8634:255629:	----	----		-----		--		--
8635:255655:	char c	# c		# c		# c		# c
8636:255682:	
8637:255684:	CSET	ZERO		ZERO		ZERO		ZERO
8638:255713:	
8639:255715:	STAR	ZERO		ZERO		ZERO		ZERO
8640:255744:
8641:255745:	QMARK	ZERO		ZERO		ZERO		ZERO
8642:255775:
8643:255776:	PLUS	p->left		p->right	ZERO		p->in
8644:255812:
8645:255813:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
8646:255875:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
8647:255924:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
8648:255990:						ZERO
8649:256001:					
8650:256007:	OR	longest common	longest common	(do p->is and	substrings common to
8651:256076:		leading		trailing	q->is have same	p->in and q->in
8652:256128:		(sub)sequence	(sub)sequence	length and	
8653:256170:		of p->left	of p->right	content) ?	
8654:256207:		and q->left	and q->right	p->is : NULL	
8655:256248:
8656:256249:   If there's anything else we recognize in the tree, all four sequences get set
8657:256330:   to zero-length sequences.  If there's something we don't recognize in the tree,
8658:256413:   we just return a zero-length sequence.
8659:256455:
8660:256456:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
8661:256534:   'aaa')?
8662:256545:
8663:256546:   And. . .is it here or someplace that we might ponder "optimizations" such as
8664:256626:	egrep 'psi|epsilon'	->	egrep 'psi'
8665:256662:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
8666:256701:					(Yes, we now find "epsi" as a "string
8667:256744:					that must occur", but we might also
8668:256785:					simplify the *entire* r.e. being sought)
8669:256831:	grep '[c]'		->	grep 'c'
8670:256856:	grep '(ab|a)b'		->	grep 'ab'
8671:256886:	grep 'ab*'		->	grep 'a'
8672:256911:	grep 'a*b'		->	grep 'b'
8673:256936:
8674:256937:   There are several issues:
8675:256966:
8676:256967:   Is optimization easy (enough)?
8677:257001:
8678:257002:   Does optimization actually accomplish anything,
8679:257053:   or is the automaton you get from "psi|epsilon" (for example)
8680:257117:   the same as the one you get from "psi" (for example)?
8681:257174:  
8682:257177:   Are optimizable r.e.'s likely to be used in real-life situations
8683:257245:   (something like 'ab*' is probably unlikely; something like is
8684:257310:   'psi|epsilon' is likelier)? */
8685:257344:
8686:257345:static char *
8687:257359:icatalloc(old, new)
8688:257379:     char *old;
8689:257395:     char *new;
8690:257411:{
8691:257413:  char *result;
8692:257429:  int oldsize, newsize;
8693:257453:
8694:257454:  newsize = (new == NULL) ? 0 : strlen(new);
8695:257499:  if (old == NULL)
8696:257518:    oldsize = 0;
8697:257535:  else if (newsize == 0)
8698:257560:    return old;
8699:257576:  else	oldsize = strlen(old);
8700:257606:  if (old == NULL)
8701:257625:    result = (char *) malloc(newsize + 1);
8702:257668:  else
8703:257675:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
8704:257743:  if (result != NULL && new != NULL)
8705:257780:    (void) strcpy(result + oldsize, new);
8706:257822:  return result;
8707:257839:}
8708:257841:
8709:257842:static char *
8710:257856:icpyalloc(string)
8711:257874:     char *string;
8712:257893:{
8713:257895:  return icatalloc((char *) NULL, string);
8714:257938:}
8715:257940:
8716:257941:static char *
8717:257955:istrstr(lookin, lookfor)
8718:257980:     char *lookin;
8719:257999:     char *lookfor;
8720:258019:{
8721:258021:  char *cp;
8722:258033:  int len;
8723:258044:
8724:258045:  len = strlen(lookfor);
8725:258070:  for (cp = lookin; *cp != '\0'; ++cp)
8726:258109:    if (strncmp(cp, lookfor, len) == 0)
8727:258149:      return cp;
8728:258166:  return NULL;
8729:258181:}
8730:258183:
8731:258184:static void
8732:258196:ifree(cp)
8733:258206:     char *cp;
8734:258221:{
8735:258223:  if (cp != NULL)
8736:258241:    free(cp);
8737:258255:}
8738:258257:
8739:258258:static void
8740:258270:freelist(cpp)
8741:258284:     char **cpp;
8742:258301:{
8743:258303:  int i;
8744:258312:
8745:258313:  if (cpp == NULL)
8746:258332:    return;
8747:258344:  for (i = 0; cpp[i] != NULL; ++i)
8748:258379:    {
8749:258385:      free(cpp[i]);
8750:258405:      cpp[i] = NULL;
8751:258426:    }
8752:258432:}
8753:258434:
8754:258435:static char **
8755:258450:enlist(cpp, new, len)
8756:258472:     char **cpp;
8757:258489:     char *new;
8758:258505:     int len;
8759:258519:{
8760:258521:  int i, j;
8761:258533:
8762:258534:  if (cpp == NULL)
8763:258553:    return NULL;
8764:258570:  if ((new = icpyalloc(new)) == NULL)
8765:258608:    {
8766:258614:      freelist(cpp);
8767:258635:      return NULL;
8768:258654:    }
8769:258660:  new[len] = '\0';
8770:258679:  /* Is there already something in the list that's new (or longer)? */
8771:258750:  for (i = 0; cpp[i] != NULL; ++i)
8772:258785:    if (istrstr(cpp[i], new) != NULL)
8773:258823:      {
8774:258831:	free(new);
8775:258843:	return cpp;
8776:258856:      }
8777:258864:  /* Eliminate any obsoleted strings. */
8778:258905:  j = 0;
8779:258914:  while (cpp[j] != NULL)
8780:258939:    if (istrstr(new, cpp[j]) == NULL)
8781:258977:      ++j;
8782:258988:    else
8783:258997:      {
8784:259005:	free(cpp[j]);
8785:259020:	if (--i == j)
8786:259035:	  break;
8787:259045:	cpp[j] = cpp[i];
8788:259063:	cpp[i] = NULL;
8789:259079:      }
8790:259087:  /* Add the new string. */
8791:259115:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
8792:259179:  if (cpp == NULL)
8793:259198:    return NULL;
8794:259215:  cpp[i] = new;
8795:259231:  cpp[i + 1] = NULL;
8796:259252:  return cpp;
8797:259266:}
8798:259268:
8799:259269:/* Given pointers to two strings, return a pointer to an allocated
8800:259336:   list of their distinct common substrings. Return NULL if something
8801:259406:   seems wild. */
8802:259424:static char **
8803:259439:comsubs(left, right)
8804:259460:     char *left;
8805:259477:     char *right;
8806:259495:{
8807:259497:  char **cpp;
8808:259511:  char *lcp;
8809:259524:  char *rcp;
8810:259537:  int i, len;
8811:259551:
8812:259552:  if (left == NULL || right == NULL)
8813:259589:    return NULL;
8814:259606:  cpp = (char **) malloc(sizeof *cpp);
8815:259645:  if (cpp == NULL)
8816:259664:    return NULL;
8817:259681:  cpp[0] = NULL;
8818:259698:  for (lcp = left; *lcp != '\0'; ++lcp)
8819:259738:    {
8820:259744:      len = 0;
8821:259759:      rcp = index(right, *lcp);
8822:259791:      while (rcp != NULL)
8823:259817:	{
8824:259820:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
8825:259876:	    ;
8826:259883:	  if (i > len)
8827:259899:	    len = i;
8828:259913:	  rcp = index(rcp + 1, *lcp);
8829:259944:	}
8830:259947:      if (len == 0)
8831:259967:	continue;
8832:259978:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
8833:260027:	break;
8834:260035:    }
8835:260041:  return cpp;
8836:260055:}
8837:260057:
8838:260058:static char **
8839:260073:addlists(old, new)
8840:260092:char **old;
8841:260104:char **new;
8842:260116:{
8843:260118:  int i;
8844:260127:
8845:260128:  if (old == NULL || new == NULL)
8846:260162:    return NULL;
8847:260179:  for (i = 0; new[i] != NULL; ++i)
8848:260214:    {
8849:260220:      old = enlist(old, new[i], strlen(new[i]));
8850:260269:      if (old == NULL)
8851:260292:	break;
8852:260300:    }
8853:260306:  return old;
8854:260320:}
8855:260322:
8856:260323:/* Given two lists of substrings, return a new list giving substrings
8857:260393:   common to both. */
8858:260415:static char **
8859:260430:inboth(left, right)
8860:260450:     char **left;
8861:260468:     char **right;
8862:260487:{
8863:260489:  char **both;
8864:260504:  char **temp;
8865:260519:  int lnum, rnum;
8866:260537:
8867:260538:  if (left == NULL || right == NULL)
8868:260575:    return NULL;
8869:260592:  both = (char **) malloc(sizeof *both);
8870:260633:  if (both == NULL)
8871:260653:    return NULL;
8872:260670:  both[0] = NULL;
8873:260688:  for (lnum = 0; left[lnum] != NULL; ++lnum)
8874:260733:    {
8875:260739:      for (rnum = 0; right[rnum] != NULL; ++rnum)
8876:260789:	{
8877:260792:	  temp = comsubs(left[lnum], right[rnum]);
8878:260836:	  if (temp == NULL)
8879:260857:	    {
8880:260864:	      freelist(both);
8881:260887:	      return NULL;
8882:260907:	    }
8883:260914:	  both = addlists(both, temp);
8884:260946:	  freelist(temp);
8885:260965:	  if (both == NULL)
8886:260986:	    return NULL;
8887:261004:	}
8888:261007:    }
8889:261013:  return both;
8890:261028:}
8891:261030:
8892:261031:typedef struct
8893:261046:{
8894:261048:  char **in;
8895:261061:  char *left;
8896:261075:  char *right;
8897:261090:  char *is;
8898:261102:} must;
8899:261110:
8900:261111:static void
8901:261123:resetmust(mp)
8902:261137:must *mp;
8903:261147:{
8904:261149:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
8905:261198:  freelist(mp->in);
8906:261218:}
8907:261220:
8908:261221:static void
8909:261233:dfamust(dfa)
8910:261246:struct dfa *dfa;
8911:261263:{
8912:261265:  must *musts;
8913:261280:  must *mp;
8914:261292:  char *result;
8915:261308:  int ri;
8916:261318:  int i;
8917:261327:  int exact;
8918:261340:  token t;
8919:261351:  static must must0;
8920:261372:  struct dfamust *dm;
8921:261394:
8922:261395:  result = "";
8923:261410:  exact = 0;
8924:261423:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
8925:261485:  if (musts == NULL)
8926:261506:    return;
8927:261518:  mp = musts;
8928:261532:  for (i = 0; i <= dfa->tindex; ++i)
8929:261569:    mp[i] = must0;
8930:261588:  for (i = 0; i <= dfa->tindex; ++i)
8931:261625:    {
8932:261631:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
8933:261684:      mp[i].left = malloc(2);
8934:261714:      mp[i].right = malloc(2);
8935:261745:      mp[i].is = malloc(2);
8936:261773:      if (mp[i].in == NULL || mp[i].left == NULL ||
8937:261825:	  mp[i].right == NULL || mp[i].is == NULL)
8938:261869:	goto done;
8939:261881:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
8940:261940:      mp[i].in[0] = NULL;
8941:261966:    }
8942:261972:#ifdef DEBUG
8943:261985:  fprintf(stderr, "dfamust:\n");
8944:262018:  for (i = 0; i < dfa->tindex; ++i)
8945:262054:    {
8946:262060:      fprintf(stderr, " %d:", i);
8947:262094:      prtok(dfa->tokens[i]);
8948:262123:    }
8949:262129:  putc('\n', stderr);
8950:262151:#endif
8951:262158:  for (ri = 0; ri < dfa->tindex; ++ri)
8952:262197:    {
8953:262203:      switch (t = dfa->tokens[ri])
8954:262238:	{
8955:262241:	case LPAREN:
8956:262255:	case RPAREN:
8957:262269:	  goto done;		/* "cannot happen" */
8958:262306:	case EMPTY:
8959:262319:	case BEGLINE:
8960:262334:	case ENDLINE:
8961:262349:	case BEGWORD:
8962:262364:	case ENDWORD:
8963:262379:	case LIMWORD:
8964:262394:	case NOTLIMWORD:
8965:262412:	case BACKREF:
8966:262427:	  resetmust(mp);
8967:262445:	  break;
8968:262455:	case STAR:
8969:262467:	case QMARK:
8970:262480:	  if (mp <= musts)
8971:262500:	    goto done;		/* "cannot happen" */
8972:262539:	  --mp;
8973:262548:	  resetmust(mp);
8974:262566:	  break;
8975:262576:	case OR:
8976:262586:	case ORTOP:
8977:262599:	  if (mp < &musts[2])
8978:262622:	    goto done;		/* "cannot happen" */
8979:262661:	  {
8980:262666:	    char **new;
8981:262683:	    must *lmp;
8982:262699:	    must *rmp;
8983:262715:	    int j, ln, rn, n;
8984:262738:
8985:262739:	    rmp = --mp;
8986:262756:	    lmp = --mp;
8987:262773:	    /* Guaranteed to be.  Unlikely, but. . . */
8988:262822:	    if (strcmp(lmp->is, rmp->is) != 0)
8989:262862:	      lmp->is[0] = '\0';
8990:262888:	    /* Left side--easy */
8991:262915:	    i = 0;
8992:262927:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
8993:262993:	      ++i;
8994:263005:	    lmp->left[i] = '\0';
8995:263031:	    /* Right side */
8996:263053:	    ln = strlen(lmp->right);
8997:263083:	    rn = strlen(rmp->right);
8998:263113:	    n = ln;
8999:263126:	    if (n > rn)
9000:263143:	      n = rn;
9001:263158:	    for (i = 0; i < n; ++i)
9002:263187:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
9003:263248:		break;
9004:263257:	    for (j = 0; j < i; ++j)
9005:263286:	      lmp->right[j] = lmp->right[(ln - i) + j];
9006:263335:	    lmp->right[j] = '\0';
9007:263362:	    new = inboth(lmp->in, rmp->in);
9008:263399:	    if (new == NULL)
9009:263421:	      goto done;
9010:263439:	    freelist(lmp->in);
9011:263463:	    free((char *) lmp->in);
9012:263492:	    lmp->in = new;
9013:263512:	  }
9014:263517:	  break;
9015:263527:	case PLUS:
9016:263539:	  if (mp <= musts)
9017:263559:	    goto done;		/* "cannot happen" */
9018:263598:	  --mp;
9019:263607:	  mp->is[0] = '\0';
9020:263628:	  break;
9021:263638:	case END:
9022:263649:	  if (mp != &musts[1])
9023:263673:	    goto done;		/* "cannot happen" */
9024:263712:	  for (i = 0; musts[0].in[i] != NULL; ++i)
9025:263756:	    if (strlen(musts[0].in[i]) > strlen(result))
9026:263806:	      result = musts[0].in[i];
9027:263838:	  if (strcmp(result, musts[0].is) == 0)
9028:263879:	    exact = 1;
9029:263895:	  goto done;
9030:263909:	case CAT:
9031:263920:	  if (mp < &musts[2])
9032:263943:	    goto done;		/* "cannot happen" */
9033:263982:	  {
9034:263987:	    must *lmp;
9035:264003:	    must *rmp;
9036:264019:
9037:264020:	    rmp = --mp;
9038:264037:	    lmp = --mp;
9039:264054:	    /* In.  Everything in left, plus everything in
9040:264106:	       right, plus catenation of
9041:264140:	       left's right and right's left. */
9042:264182:	    lmp->in = addlists(lmp->in, rmp->in);
9043:264225:	    if (lmp->in == NULL)
9044:264251:	      goto done;
9045:264269:	    if (lmp->right[0] != '\0' &&
9046:264303:		rmp->left[0] != '\0')
9047:264327:	      {
9048:264336:		char *tp;
9049:264348:
9050:264349:		tp = icpyalloc(lmp->right);
9051:264379:		if (tp == NULL)
9052:264397:		  goto done;
9053:264412:		tp = icatalloc(tp, rmp->left);
9054:264445:		if (tp == NULL)
9055:264463:		  goto done;
9056:264478:		lmp->in = enlist(lmp->in, tp,
9057:264510:				 strlen(tp));
9058:264528:		free(tp);
9059:264540:		if (lmp->in == NULL)
9060:264563:		  goto done;
9061:264578:	      }
9062:264587:	    /* Left-hand */
9063:264608:	    if (lmp->is[0] != '\0')
9064:264637:	      {
9065:264646:		lmp->left = icatalloc(lmp->left,
9066:264681:				      rmp->left);
9067:264703:		if (lmp->left == NULL)
9068:264728:		  goto done;
9069:264743:	      }
9070:264752:	    /* Right-hand */
9071:264774:	    if (rmp->is[0] == '\0')
9072:264803:	      lmp->right[0] = '\0';
9073:264832:	    lmp->right = icatalloc(lmp->right, rmp->right);
9074:264885:	    if (lmp->right == NULL)
9075:264914:	      goto done;
9076:264932:	    /* Guaranteed to be */
9077:264960:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
9078:265011:	      {
9079:265020:		lmp->is = icatalloc(lmp->is, rmp->is);
9080:265061:		if (lmp->is == NULL)
9081:265084:		  goto done;
9082:265099:	      }
9083:265108:	    else
9084:265118:	      lmp->is[0] = '\0';
9085:265144:	  }
9086:265149:	  break;
9087:265159:	default:
9088:265169:	  if (t < END)
9089:265185:	    {
9090:265192:	      /* "cannot happen" */
9091:265221:	      goto done;
9092:265239:	    }
9093:265246:	  else if (t == '\0')
9094:265269:	    {
9095:265276:	      /* not on *my* shift */
9096:265307:	      goto done;
9097:265325:	    }
9098:265332:	  else if (t >= CSET)
9099:265355:	    {
9100:265362:	      /* easy enough */
9101:265387:	      resetmust(mp);
9102:265409:	    }
9103:265416:	  else
9104:265424:	    {
9105:265431:	      /* plain character */
9106:265460:	      resetmust(mp);
9107:265482:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
9108:265533:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
9109:265587:	      mp->in = enlist(mp->in, mp->is, 1);
9110:265630:	      if (mp->in == NULL)
9111:265657:		goto done;
9112:265670:	    }
9113:265677:	  break;
9114:265687:	}
9115:265690:#ifdef DEBUG
9116:265703:      fprintf(stderr, " node: %d:", ri);
9117:265744:      prtok(dfa->tokens[ri]);
9118:265774:      fprintf(stderr, "\n  in:");
9119:265808:      for (i = 0; mp->in[i]; ++i)
9120:265842:	fprintf(stderr, " \"%s\"", mp->in[i]);
9121:265882:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
9122:265933:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
9123:265986:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
9124:266041:#endif
9125:266048:      ++mp;
9126:266060:    }
9127:266066: done:
9128:266073:  if (strlen(result))
9129:266095:    {
9130:266101:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
9131:266164:      dm->exact = exact;
9132:266189:      dm->must = malloc(strlen(result) + 1);
9133:266234:      strcpy(dm->must, result);
9134:266266:      dm->next = dfa->musts;
9135:266295:      dfa->musts = dm;
9136:266318:    }
9137:266324:  mp = musts;
9138:266338:  for (i = 0; i <= dfa->tindex; ++i)
9139:266375:    {
9140:266381:      freelist(mp[i].in);
9141:266407:      ifree((char *) mp[i].in);
9142:266439:      ifree(mp[i].left);
9143:266464:      ifree(mp[i].right);
9144:266490:      ifree(mp[i].is);
9145:266513:    }
9146:266519:  free((char *) mp);
9147:266540:}
9148:266542:/* kwset.c - search for any of a set of keywords.
9149:266592:   Copyright 1989 Free Software Foundation
9150:266635:		  Written August 1989 by Mike Haertel.
9151:266676:
9152:266677:   This program is free software; you can redistribute it and/or modify
9153:266749:   it under the terms of the GNU General Public License as published by
9154:266821:   the Free Software Foundation; either version 1, or (at your option)
9155:266892:   any later version.
9156:266914:
9157:266915:   This program is distributed in the hope that it will be useful,
9158:266982:   but WITHOUT ANY WARRANTY; without even the implied warranty of
9159:267048:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
9160:267113:   GNU General Public License for more details.
9161:267161:
9162:267162:   You should have received a copy of the GNU General Public License
9163:267231:   along with this program; if not, write to the Free Software
9164:267294:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
9165:267355:
9166:267356:   The author may be reached (Email) at the address mike@ai.mit.edu,
9167:267425:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
9168:267490:
9169:267491:/* The algorithm implemented by these routines bears a startling resemblence
9170:267568:   to one discovered by Beate Commentz-Walter, although it is not identical.
9171:267645:   See "A String Matching Algorithm Fast on the Average," Technical Report,
9172:267721:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
9173:267796:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
9174:267869:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
9175:267939:   Vol. 18, No. 6, which describes the failure function used below. */
9176:268010:
9177:268011:
9178:268012:#ifdef STDC_HEADERS
9179:268032:#undef RE_DUP_MAX
9181:268070:#define flag_limits 1
9182:268092:#if flag_stdlib==0 
9184:268132:#define flag_stdlib 1
9185:268154:#endif
9186:268161:#else
9187:268167:#define INT_MAX 2147483647
9188:268194:#define UCHAR_MAX 255
9189:268216:#ifdef __STDC__
9191:268252:#else
9192:268258:#if flag_systypes==0
9194:268302:#define flag_systypes 1
9195:268326:#endif
9196:268333:#endif
9197:268340:extern char *malloc();
9198:268363:extern void free();
9199:268383:#endif
9200:268390:
9201:268391:#ifdef HAVE_MEMCHR
9202:268410:#if flag_string==0
9204:268449:#define flag_string 1
9205:268471:#endif
9206:268478:#ifdef NEED_MEMORY_H
9207:268499:#if flag_memory==0
9209:268538:#define flag_memory 1
9210:268560:#endif
9211:268567:#endif
9212:268574:#else
9213:268580:#ifdef __STDC__
9214:268596:extern void *memchr();
9215:268619:#else
9216:268625:extern char *memchr();
9217:268648:#endif
9218:268655:#endif
9219:268662:
9220:268663:#ifdef GREP
9221:268675:extern char *xmalloc();
9222:268699:#define malloc xmalloc
9223:268722:#endif
9224:268729:
9227:268770:
9228:268771:#define NCHAR (UCHAR_MAX + 1)
9229:268801:#define obstack_chunk_alloc malloc
9230:268836:#define obstack_chunk_free free
9231:268868:
9232:268869:/* Balanced tree of edges and labels leaving a given trie node. */
9233:268936:struct tree
9234:268948:{
9235:268950:  struct tree *llink;		/* Left link; MUST be first field. */
9236:269011:  struct tree *rlink;		/* Right link (to larger labels). */
9237:269071:  struct trie *trie;		/* Trie node pointed to by this edge. */
9238:269134:  unsigned char label;		/* Label on this edge. */
9239:269184:  char balance;			/* Difference in depths of subtrees. */
9240:269242:};
9241:269245:
9242:269246:/* Node of a trie representing a set of reversed keywords. */
9243:269308:struct trie
9244:269320:{
9245:269322:  unsigned int accepting;	/* Word index of accepted word, or zero. */
9246:269392:  struct tree *links;		/* Tree of edges leaving this node. */
9247:269454:  struct trie *parent;		/* Parent of this node. */
9248:269505:  struct trie *next;		/* List of all trie nodes in level order. */
9249:269572:  struct trie *fail;		/* Aho-Corasick failure function. */
9250:269631:  int depth;			/* Depth of this node from the root. */
9251:269686:  int shift;			/* Shift function for search failures. */
9252:269743:  int maxshift;			/* Max shift of self and descendents. */
9253:269802:};
9254:269805:
9255:269806:/* Structure returned opaquely to the caller, containing everything. */
9256:269878:struct kwset
9257:269891:{
9258:269893:  struct obstack obstack;	/* Obstack for node allocation. */
9259:269954:  int words;			/* Number of words in the trie. */
9260:270004:  struct trie *trie;		/* The trie itself. */
9261:270049:  int mind;			/* Minimum depth of an accepting node. */
9262:270105:  int maxd;			/* Maximum depth of any node. */
9263:270152:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
9264:270218:  struct trie *next[NCHAR];	/* Table of children of the root. */
9265:270283:  char *target;			/* Target string if there's only one. */
9266:270342:  int mind2;			/* Used in Boyer-Moore search for one string. */
9267:270406:  char *trans;			/* Character translation table. */
9268:270458:};
9269:270461:
9270:270462:/* Allocate and initialize a keyword set object, returning an opaque
9271:270531:   pointer to it.  Return NULL if memory is not available. */
9272:270593:kwset_t
9273:270601:kwsalloc(trans)
9274:270617:     char *trans;
9275:270635:{
9276:270637:  struct kwset *kwset;
9277:270660:
9278:270661:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
9279:270719:  if (!kwset)
9280:270733:    return 0;
9281:270747:
9282:270748:  obstack_init(&kwset->obstack);
9283:270781:  kwset->words = 0;
9284:270801:  kwset->trie
9285:270815:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
9286:270891:  if (!kwset->trie)
9287:270911:    {
9288:270917:      kwsfree((kwset_t) kwset);
9289:270949:      return 0;
9290:270965:    }
9291:270971:  kwset->trie->accepting = 0;
9292:271001:  kwset->trie->links = 0;
9293:271027:  kwset->trie->parent = 0;
9294:271054:  kwset->trie->next = 0;
9295:271079:  kwset->trie->fail = 0;
9296:271104:  kwset->trie->depth = 0;
9297:271130:  kwset->trie->shift = 0;
9298:271156:  kwset->mind = INT_MAX;
9299:271181:  kwset->maxd = -1;
9300:271201:  kwset->target = 0;
9301:271222:  kwset->trans = trans;
9302:271246:
9303:271247:  return (kwset_t) kwset;
9304:271273:}
9305:271275:
9306:271276:/* Add the given string to the contents of the keyword set.  Return NULL
9307:271349:   for success, an error message otherwise. */
9308:271396:char *
9309:271403:kwsincr(kws, text, len)
9310:271427:     kwset_t kws;
9311:271445:     char *text;
9312:271462:     size_t len;
9313:271479:{
9314:271481:  struct kwset *kwset;
9315:271504:  register struct trie *trie;
9316:271534:  register unsigned char label;
9317:271566:  register struct tree *link;
9318:271596:  register int depth;
9319:271618:  struct tree *links[12];
9320:271644:  enum { L, R } dirs[12];
9321:271670:  struct tree *t, *r, *l, *rl, *lr;
9322:271706:
9323:271707:  kwset = (struct kwset *) kws;
9324:271739:  trie = kwset->trie;
9325:271761:  text += len;
9326:271776:
9327:271777:  /* Descend the trie (built of reversed keywords) character-by-character,
9328:271852:     installing new nodes when necessary. */
9329:271897:  while (len--)
9330:271913:    {
9331:271919:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
9332:271997:
9333:271998:      /* Descend the tree of outgoing links for this trie node,
9334:272062:	 looking for the current character and keeping track
9335:272116:	 of the path followed. */
9336:272143:      link = trie->links;
9337:272169:      links[0] = (struct tree *) &trie->links;
9338:272216:      dirs[0] = L;
9339:272235:      depth = 1;
9340:272252:
9341:272253:      while (link && label != link->label)
9342:272296:	{
9343:272299:	  links[depth] = link;
9344:272323:	  if (label < link->label)
9345:272351:	    dirs[depth++] = L, link = link->llink;
9346:272395:	  else
9347:272403:	    dirs[depth++] = R, link = link->rlink;
9348:272447:	}
9349:272450:
9350:272451:      /* The current character doesn't have an outgoing link at
9351:272515:	 this trie node, so build a new trie node and install
9352:272570:	 a link in the current trie node's tree. */
9353:272615:      if (!link)
9354:272632:	{
9355:272635:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
9356:272692:					       sizeof (struct tree));
9357:272727:	  if (!link)
9358:272741:	    return "memory exhausted";
9359:272773:	  link->llink = 0;
9360:272793:	  link->rlink = 0;
9361:272813:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
9362:272876:						     sizeof (struct trie));
9363:272910:	  if (!link->trie)
9364:272930:	    return "memory exhausted";
9365:272962:	  link->trie->accepting = 0;
9366:272992:	  link->trie->links = 0;
9367:273018:	  link->trie->parent = trie;
9368:273048:	  link->trie->next = 0;
9369:273073:	  link->trie->fail = 0;
9370:273098:	  link->trie->depth = trie->depth + 1;
9371:273138:	  link->trie->shift = 0;
9372:273164:	  link->label = label;
9373:273188:	  link->balance = 0;
9374:273210:
9375:273211:	  /* Install the new tree node in its parent. */
9376:273261:	  if (dirs[--depth] == L)
9377:273288:	    links[depth]->llink = link;
9378:273321:	  else
9379:273329:	    links[depth]->rlink = link;
9380:273362:
9381:273363:	  /* Back up the tree fixing the balance flags. */
9382:273415:	  while (depth && !links[depth]->balance)
9383:273458:	    {
9384:273465:	      if (dirs[depth] == L)
9385:273494:		--links[depth]->balance;
9386:273521:	      else
9387:273533:		++links[depth]->balance;
9388:273560:	      --depth;
9389:273576:	    }
9390:273583:
9391:273584:	  /* Rebalance the tree by pointer rotations if necessary. */
9392:273647:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
9393:273710:			|| (dirs[depth] == R && ++links[depth]->balance)))
9394:273764:	    {
9395:273771:	      switch (links[depth]->balance)
9396:273809:		{
9397:273813:		case (char) -2:
9398:273831:		  switch (dirs[depth + 1])
9399:273860:		    {
9400:273868:		    case L:
9401:273882:		      r = links[depth], t = r->llink, rl = t->rlink;
9402:273937:		      t->rlink = r, r->llink = rl;
9403:273974:		      t->balance = r->balance = 0;
9404:274011:		      break;
9405:274026:		    case R:
9406:274040:		      r = links[depth], l = r->llink, t = l->rlink;
9407:274094:		      rl = t->rlink, lr = t->llink;
9408:274132:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
9409:274198:		      l->balance = t->balance != 1 ? 0 : -1;
9410:274245:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9411:274299:		      t->balance = 0;
9412:274323:		      break;
9413:274338:		    }
9414:274346:		  break;
9415:274357:		case 2:
9416:274367:		  switch (dirs[depth + 1])
9417:274396:		    {
9418:274404:		    case R:
9419:274418:		      l = links[depth], t = l->rlink, lr = t->llink;
9420:274473:		      t->llink = l, l->rlink = lr;
9421:274510:		      t->balance = l->balance = 0;
9422:274547:		      break;
9423:274562:		    case L:
9424:274576:		      l = links[depth], r = l->rlink, t = r->llink;
9425:274630:		      lr = t->llink, rl = t->rlink;
9426:274668:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
9427:274734:		      l->balance = t->balance != 1 ? 0 : -1;
9428:274781:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9429:274835:		      t->balance = 0;
9430:274859:		      break;
9431:274874:		    }
9432:274882:		  break;
9433:274893:		}
9434:274897:
9435:274898:	      if (dirs[depth - 1] == L)
9436:274931:		links[depth - 1]->llink = t;
9437:274962:	      else
9438:274974:		links[depth - 1]->rlink = t;
9439:275005:	    }
9440:275012:	}
9441:275015:
9442:275016:      trie = link->trie;
9443:275041:    }
9444:275047:
9445:275048:  /* Mark the node we finally reached as accepting, encoding the
9446:275113:     index number of this word in the keyword set so far. */
9447:275174:  if (!trie->accepting)
9448:275198:    trie->accepting = 1 + 2 * kwset->words;
9449:275242:  ++kwset->words;
9450:275260:
9451:275261:  /* Keep track of the longest and shortest string of the keyword set. */
9452:275335:  if (trie->depth < kwset->mind)
9453:275368:    kwset->mind = trie->depth;
9454:275399:  if (trie->depth > kwset->maxd)
9455:275432:    kwset->maxd = trie->depth;
9456:275463:
9457:275464:  return 0;
9458:275476:}
9459:275478:
9460:275479:/* Enqueue the trie nodes referenced from the given tree in the
9461:275543:   given queue. */
9462:275562:static void
9463:275574:enqueue(tree, last)
9464:275594:     struct tree *tree;
9465:275618:     struct trie **last;
9466:275643:{
9467:275645:  if (!tree)
9468:275658:    return;
9469:275670:  enqueue(tree->llink, last);
9470:275700:  enqueue(tree->rlink, last);
9471:275730:  (*last) = (*last)->next = tree->trie;
9472:275770:}
9473:275772:
9474:275773:/* Compute the Aho-Corasick failure function for the trie nodes referenced
9475:275848:   from the given tree, given the failure function for their parent as
9476:275919:   well as a last resort failure node. */
9477:275961:static void
9478:275973:treefails(tree, fail, recourse)
9479:276005:     register struct tree *tree;
9480:276038:     struct trie *fail;
9481:276062:     struct trie *recourse;
9482:276090:{
9483:276092:  register struct tree *link;
9484:276122:
9485:276123:  if (!tree)
9486:276136:    return;
9487:276148:
9488:276149:  treefails(tree->llink, fail, recourse);
9489:276191:  treefails(tree->rlink, fail, recourse);
9490:276233:
9491:276234:  /* Find, in the chain of fails going back to the root, the first
9492:276301:     node that has a descendent on the current label. */
9493:276358:  while (fail)
9494:276373:    {
9495:276379:      link = fail->links;
9496:276405:      while (link && tree->label != link->label)
9497:276454:	if (tree->label < link->label)
9498:276486:	  link = link->llink;
9499:276509:	else
9500:276515:	  link = link->rlink;
9501:276538:      if (link)
9502:276554:	{
9503:276557:	  tree->trie->fail = link->trie;
9504:276591:	  return;
9505:276602:	}
9506:276605:      fail = fail->fail;
9507:276630:    }
9508:276636:
9509:276637:  tree->trie->fail = recourse;
9510:276668:}
9511:276670:
9512:276671:/* Set delta entries for the links of the given tree such that
9513:276734:   the preexisting delta value is larger than the current depth. */
9514:276802:static void
9515:276814:treedelta(tree, depth, delta)
9516:276844:     register struct tree *tree;
9517:276877:     register unsigned int depth;
9518:276911:     unsigned char delta[];
9519:276939:{
9520:276941:  if (!tree)
9521:276954:    return;
9522:276966:  treedelta(tree->llink, depth, delta);
9523:277006:  treedelta(tree->rlink, depth, delta);
9524:277046:  if (depth < delta[tree->label])
9525:277080:    delta[tree->label] = depth;
9526:277112:}
9527:277114:
9528:277115:/* Return true if A has every label in B. */
9529:277160:static int
9530:277171:hasevery(a, b)
9531:277186:     register struct tree *a;
9532:277216:     register struct tree *b;
9533:277246:{
9534:277248:  if (!b)
9535:277258:    return 1;
9536:277272:  if (!hasevery(a, b->llink))
9537:277302:    return 0;
9538:277316:  if (!hasevery(a, b->rlink))
9539:277346:    return 0;
9540:277360:  while (a && b->label != a->label)
9541:277396:    if (b->label < a->label)
9542:277425:      a = a->llink;
9543:277445:    else
9544:277454:      a = a->rlink;
9545:277474:  return !!a;
9546:277488:}
9547:277490:
9548:277491:/* Compute a vector, indexed by character code, of the trie nodes
9549:277557:   referenced from the given tree. */
9550:277595:static void
9551:277607:treenext(tree, next)
9552:277628:     struct tree *tree;
9553:277652:     struct trie *next[];
9554:277678:{
9555:277680:  if (!tree)
9556:277693:    return;
9557:277705:  treenext(tree->llink, next);
9558:277736:  treenext(tree->rlink, next);
9559:277767:  next[tree->label] = tree->trie;
9560:277801:}
9561:277803:
9562:277804:/* Compute the shift for each trie node, as well as the delta
9563:277866:   table and next cache for the given keyword set. */
9564:277920:char *
9565:277927:kwsprep(kws)
9566:277940:     kwset_t kws;
9567:277958:{
9568:277960:  register struct kwset *kwset;
9569:277992:  register int i;
9570:278010:  register struct trie *curr, *fail;
9571:278047:  register char *trans;
9572:278071:  unsigned char delta[NCHAR];
9573:278101:  struct trie *last, *next[NCHAR];
9574:278136:
9575:278137:  kwset = (struct kwset *) kws;
9576:278169:
9577:278170:  /* Initial values for the delta table; will be changed later.  The
9578:278239:     delta entry for a given character is the smallest depth of any
9579:278307:     node at which an outgoing edge is labeled by that character. */
9580:278376:  if (kwset->mind < 256)
9581:278401:    for (i = 0; i < NCHAR; ++i)
9582:278433:      delta[i] = kwset->mind;
9583:278463:  else
9584:278470:    for (i = 0; i < NCHAR; ++i)
9585:278502:      delta[i] = 255;
9586:278524:
9587:278525:  /* Check if we can use the simple boyer-moore algorithm, instead
9588:278592:     of the hairy commentz-walter algorithm. */
9589:278640:  if (kwset->words == 1 && kwset->trans == 0)
9590:278686:    {
9591:278692:      /* Looking for just one string.  Extract it from the trie. */
9592:278760:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
9593:278827:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
9594:278892:	{
9595:278895:	  kwset->target[i] = curr->links->label;
9596:278937:	  curr = curr->links->trie;
9597:278966:	}
9598:278969:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
9599:279043:      for (i = 0; i < kwset->mind; ++i)
9600:279083:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
9601:279149:      kwset->mind2 = kwset->mind;
9602:279183:      /* Find the minimal delta2 shift that we might make after
9603:279247:	 a backwards match has failed. */
9604:279282:      for (i = 0; i < kwset->mind - 1; ++i)
9605:279326:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
9606:279383:	  kwset->mind2 = kwset->mind - (i + 1);
9607:279424:    }
9608:279430:  else
9609:279437:    {
9610:279443:      /* Traverse the nodes of the trie in level order, simultaneously
9611:279514:	 computing the delta table, failure function, and shift function. */
9612:279584:      for (curr = last = kwset->trie; curr; curr = curr->next)
9613:279647:	{
9614:279650:	  /* Enqueue the immediate descendents in the level order queue. */
9615:279719:	  enqueue(curr->links, &last);
9616:279751:
9617:279752:	  curr->shift = kwset->mind;
9618:279782:	  curr->maxshift = kwset->mind;
9619:279815:
9620:279816:	  /* Update the delta table for the descendents of this node. */
9621:279882:	  treedelta(curr->links, curr->depth, delta);
9622:279929:
9623:279930:	  /* Compute the failure function for the decendents of this node. */
9624:280001:	  treefails(curr->links, curr->fail, kwset->trie);
9625:280053:
9626:280054:	  /* Update the shifts at each node in the current node's chain
9627:280119:	     of fails back to the root. */
9628:280155:	  for (fail = curr->fail; fail; fail = fail->fail)
9629:280207:	    {
9630:280214:	      /* If the current node has some outgoing edge that the fail
9631:280281:		 doesn't, then the shift at the fail should be no larger
9632:280340:		 than the difference of their depths. */
9633:280383:	      if (!hasevery(fail->links, curr->links))
9634:280431:		if (curr->depth - fail->depth < fail->shift)
9635:280478:		  fail->shift = curr->depth - fail->depth;
9636:280523:
9637:280524:	      /* If the current node is accepting then the shift at the
9638:280589:		 fail and its descendents should be no larger than the
9639:280646:		 difference of their depths. */
9640:280680:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
9641:280754:		fail->maxshift = curr->depth - fail->depth;
9642:280800:	    }
9643:280807:	}
9644:280810:
9645:280811:      /* Traverse the trie in level order again, fixing up all nodes whose
9646:280886:	 shift exceeds their inherited maxshift. */
9647:280931:      for (curr = kwset->trie->next; curr; curr = curr->next)
9648:280993:	{
9649:280996:	  if (curr->maxshift > curr->parent->maxshift)
9650:281044:	    curr->maxshift = curr->parent->maxshift;
9651:281090:	  if (curr->shift > curr->maxshift)
9652:281127:	    curr->shift = curr->maxshift;
9653:281162:	}
9654:281165:
9655:281166:      /* Create a vector, indexed by character code, of the outgoing links
9656:281241:	 from the root node. */
9657:281266:      for (i = 0; i < NCHAR; ++i)
9658:281300:	next[i] = 0;
9659:281314:      treenext(kwset->trie->links, next);
9660:281356:
9661:281357:      if ((trans = kwset->trans) != 0)
9662:281396:	for (i = 0; i < NCHAR; ++i)
9663:281425:	  kwset->next[i] = next[(unsigned char) trans[i]];
9664:281477:      else
9665:281488:	for (i = 0; i < NCHAR; ++i)
9666:281517:	  kwset->next[i] = next[i];
9667:281546:    }
9668:281552:
9669:281553:  /* Fix things up for any translation table. */
9670:281602:  if ((trans = kwset->trans) != 0)
9671:281637:    for (i = 0; i < NCHAR; ++i)
9672:281669:      kwset->delta[i] = delta[(unsigned char) trans[i]];
9673:281726:  else
9674:281733:    for (i = 0; i < NCHAR; ++i)
9675:281765:      kwset->delta[i] = delta[i];
9676:281799:
9677:281800:  return 0;
9678:281812:}
9679:281814:
9680:281815:#define U(C) ((unsigned char) (C))
9681:281850:
9682:281851:/* Fast boyer-moore search. */
9683:281882:static char *
9684:281896:bmexec(kws, text, size)
9685:281920:     kwset_t kws;
9686:281938:     char *text;
9687:281955:     size_t size;
9688:281973:{
9689:281975:  struct kwset *kwset;
9690:281998:  register unsigned char *d1;
9691:282028:  register char *ep, *sp, *tp;
9692:282059:  register int d, gc, i, len, md2;
9693:282094:
9694:282095:  kwset = (struct kwset *) kws;
9695:282127:  len = kwset->mind;
9696:282148:
9697:282149:  if (len == 0)
9698:282165:    return text;
9699:282182:  if (len > size)
9700:282200:    return 0;
9701:282214:  if (len == 1)
9702:282230:    return memchr(text, kwset->target[0], size);
9703:282279:
9704:282280:  d1 = kwset->delta;
9705:282301:  sp = kwset->target + len;
9706:282329:  gc = U(sp[-2]);
9707:282347:  md2 = kwset->mind2;
9708:282369:  tp = text + len;
9709:282388:
9710:282389:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
9711:282464:  if (size > 12 * len)
9712:282487:    /* 11 is not a bug, the initial offset happens only once. */
9713:282552:    for (ep = text + size - 11 * len;;)
9714:282592:      {
9715:282600:	while (tp <= ep)
9716:282618:	  {
9717:282623:	    d = d1[U(tp[-1])], tp += d;
9718:282656:	    d = d1[U(tp[-1])], tp += d;
9719:282689:	    if (d == 0)
9720:282706:	      goto found;
9721:282725:	    d = d1[U(tp[-1])], tp += d;
9722:282758:	    d = d1[U(tp[-1])], tp += d;
9723:282791:	    d = d1[U(tp[-1])], tp += d;
9724:282824:	    if (d == 0)
9725:282841:	      goto found;
9726:282860:	    d = d1[U(tp[-1])], tp += d;
9727:282893:	    d = d1[U(tp[-1])], tp += d;
9728:282926:	    d = d1[U(tp[-1])], tp += d;
9729:282959:	    if (d == 0)
9730:282976:	      goto found;
9731:282995:	    d = d1[U(tp[-1])], tp += d;
9732:283028:	    d = d1[U(tp[-1])], tp += d;
9733:283061:	  }
9734:283066:	break;
9735:283074:      found:
9736:283087:	if (U(tp[-2]) == gc)
9737:283109:	  {
9738:283114:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
9739:283172:	      ;
9740:283181:	    if (i > len)
9741:283199:	      return tp - len;
9742:283223:	  }
9743:283228:	tp += md2;
9744:283240:      }
9745:283248:
9746:283249:  /* Now we have only a few characters left to search.  We
9747:283308:     carefully avoid ever producing an out-of-bounds pointer. */
9748:283373:  ep = text + size;
9749:283393:  d = d1[U(tp[-1])];
9750:283414:  while (d <= ep - tp)
9751:283437:    {
9752:283443:      d = d1[U((tp += d)[-1])];
9753:283475:      if (d != 0)
9754:283493:	continue;
9755:283504:      if (tp[-2] == gc)
9756:283528:	{
9757:283531:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
9758:283587:	    ;
9759:283594:	  if (i > len)
9760:283610:	    return tp - len;
9761:283632:	}
9762:283635:      d = md2;
9763:283650:    }
9764:283656:
9765:283657:  return 0;
9766:283669:}
9767:283671:
9768:283672:/* Hairy multiple string search. */
9769:283708:static char *
9770:283722:cwexec(kws, text, len, kwsmatch)
9771:283755:     kwset_t kws;
9772:283773:     char *text;
9773:283790:     size_t len;
9774:283807:     struct kwsmatch *kwsmatch;
9775:283839:{
9776:283841:  struct kwset *kwset;
9777:283864:  struct trie **next, *trie, *accept;
9778:283902:  char *beg, *lim, *mch, *lmch;
9779:283934:  register unsigned char c, *delta;
9780:283970:  register int d;
9781:283988:  register char *end, *qlim;
9782:284017:  register struct tree *tree;
9783:284047:  register char *trans;
9784:284071:
9785:284072:  /* Initialize register copies and look for easy ways out. */
9786:284135:  kwset = (struct kwset *) kws;
9787:284167:  if (len < kwset->mind)
9788:284192:    return 0;
9789:284206:  next = kwset->next;
9790:284228:  delta = kwset->delta;
9791:284252:  trans = kwset->trans;
9792:284276:  lim = text + len;
9793:284296:  end = text;
9794:284310:  if ((d = kwset->mind) != 0)
9795:284340:    mch = 0;
9796:284353:  else
9797:284360:    {
9798:284366:      mch = text, accept = kwset->trie;
9799:284406:      goto match;
9800:284424:    }
9801:284430:
9802:284431:  if (len >= 4 * kwset->mind)
9803:284461:    qlim = lim - 4 * kwset->mind;
9804:284495:  else
9805:284502:    qlim = 0;
9806:284516:
9807:284517:  while (lim - end >= d)
9808:284542:    {
9809:284548:      if (qlim && end <= qlim)
9810:284579:	{
9811:284582:	  end += d - 1;
9812:284599:	  while ((d = delta[c = *end]) && end < qlim)
9813:284646:	    {
9814:284653:	      end += d;
9815:284670:	      end += delta[(unsigned char) *end];
9816:284713:	      end += delta[(unsigned char) *end];
9817:284756:	    }
9818:284763:	  ++end;
9819:284773:	}
9820:284776:      else
9821:284787:	d = delta[c = (end += d)[-1]];
9822:284819:      if (d)
9823:284832:	continue;
9824:284843:      beg = end - 1;
9825:284864:      trie = next[c];
9826:284886:      if (trie->accepting)
9827:284913:	{
9828:284916:	  mch = beg;
9829:284930:	  accept = trie;
9830:284948:	}
9831:284951:      d = trie->shift;
9832:284974:      while (beg > text)
9833:284999:	{
9834:285002:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
9835:285057:	  tree = trie->links;
9836:285080:	  while (tree && c != tree->label)
9837:285116:	    if (c < tree->label)
9838:285142:	      tree = tree->llink;
9839:285169:	    else
9840:285179:	      tree = tree->rlink;
9841:285206:	  if (tree)
9842:285219:	    {
9843:285226:	      trie = tree->trie;
9844:285252:	      if (trie->accepting)
9845:285280:		{
9846:285284:		  mch = beg;
9847:285299:		  accept = trie;
9848:285318:		}
9849:285322:	    }
9850:285329:	  else
9851:285337:	    break;
9852:285349:	  d = trie->shift;
9853:285369:	}
9854:285372:      if (mch)
9855:285387:	goto match;
9856:285400:    }
9857:285406:  return 0;
9858:285418:
9859:285419: match:
9860:285427:  /* Given a known match, find the longest possible match anchored
9861:285494:     at or before its starting point.  This is nearly a verbatim
9862:285559:     copy of the preceding main search loops. */
9863:285608:  if (lim - mch > kwset->maxd)
9864:285639:    lim = mch + kwset->maxd;
9865:285668:  lmch = 0;
9866:285680:  d = 1;
9867:285689:  while (lim - end >= d)
9868:285714:    {
9869:285720:      if ((d = delta[c = (end += d)[-1]]) != 0)
9870:285768:	continue;
9871:285779:      beg = end - 1;
9872:285800:      if (!(trie = next[c]))
9873:285829:	{
9874:285832:	  d = 1;
9875:285842:	  continue;
9876:285855:	}
9877:285858:      if (trie->accepting && beg <= mch)
9878:285899:	{
9879:285902:	  lmch = beg;
9880:285917:	  accept = trie;
9881:285935:	}
9882:285938:      d = trie->shift;
9883:285961:      while (beg > text)
9884:285986:	{
9885:285989:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
9886:286044:	  tree = trie->links;
9887:286067:	  while (tree && c != tree->label)
9888:286103:	    if (c < tree->label)
9889:286129:	      tree = tree->llink;
9890:286156:	    else
9891:286166:	      tree = tree->rlink;
9892:286193:	  if (tree)
9893:286206:	    {
9894:286213:	      trie = tree->trie;
9895:286239:	      if (trie->accepting && beg <= mch)
9896:286281:		{
9897:286285:		  lmch = beg;
9898:286301:		  accept = trie;
9899:286320:		}
9900:286324:	    }
9901:286331:	  else
9902:286339:	    break;
9903:286351:	  d = trie->shift;
9904:286371:	}
9905:286374:      if (lmch)
9906:286390:	{
9907:286393:	  mch = lmch;
9908:286408:	  goto match;
9909:286423:	}
9910:286426:      if (!d)
9911:286440:	d = 1;
9912:286448:    }
9913:286454:
9914:286455:  if (kwsmatch)
9915:286471:    {
9916:286477:      kwsmatch->index = accept->accepting / 2;
9917:286524:      kwsmatch->beg[0] = mch;
9918:286554:      kwsmatch->size[0] = accept->depth;
9919:286595:    }
9920:286601:  return mch;
9921:286615:}
9922:286617:  
9923:286620:/* Search through the given text for a match of any member of the
9924:286686:   given keyword set.  Return a pointer to the first character of
9925:286752:   the matching substring, or NULL if no match is found.  If FOUNDLEN
9926:286822:   is non-NULL store in the referenced location the length of the
9927:286888:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
9928:286954:   in the referenced location the index number of the particular
9929:287019:   keyword matched. */
9930:287042:char *
9931:287049:kwsexec(kws, text, size, kwsmatch)
9932:287084:     kwset_t kws;
9933:287102:     char *text;
9934:287119:     size_t size;
9935:287137:     struct kwsmatch *kwsmatch;
9936:287169:{
9937:287171:  struct kwset *kwset;
9938:287194:  char *ret;
9939:287207:
9940:287208:  kwset = (struct kwset *) kws;
9941:287240:  if (kwset->words == 1 && kwset->trans == 0)
9942:287286:    {
9943:287292:      ret = bmexec(kws, text, size);
9944:287329:      if (kwsmatch != 0 && ret != 0)
9945:287366:	{
9946:287369:	  kwsmatch->index = 0;
9947:287393:	  kwsmatch->beg[0] = ret;
9948:287420:	  kwsmatch->size[0] = kwset->mind;
9949:287456:	}
9950:287459:      return ret;
9951:287477:    }
9952:287483:  else
9953:287490:    return cwexec(kws, text, size, kwsmatch);
9954:287536:}
9955:287538:
9956:287539:/* Free the components of the given keyword set. */
9957:287591:void
9958:287596:kwsfree(kws)
9959:287609:     kwset_t kws;
9960:287627:{
9961:287629:  struct kwset *kwset;
9962:287652:
9963:287653:  kwset = (struct kwset *) kws;
9964:287685:  obstack_free(&kwset->obstack, 0);
9965:287721:  free(kws);
9966:287734:}
9967:287736:/* obstack.c - subroutines used implicitly by object stack macros
9968:287802:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
9969:287861:
9970:287862:This program is free software; you can redistribute it and/or modify it
9971:287934:under the terms of the GNU General Public License as published by the
9972:288004:Free Software Foundation; either version 2, or (at your option) any
9973:288072:later version.
9974:288087:
9975:288088:This program is distributed in the hope that it will be useful,
9976:288152:but WITHOUT ANY WARRANTY; without even the implied warranty of
9977:288215:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
9978:288277:GNU General Public License for more details.
9979:288322:
9980:288323:You should have received a copy of the GNU General Public License
9981:288389:along with this program; if not, write to the Free Software
9982:288449:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
9983:288505:
9985:288531:
9986:288532:/* This is just to get __GNU_LIBRARY__ defined.  */
9988:288607:
9989:288608:/* Comment out all this code if we are using the GNU C Library, and are not
9990:288684:   actually compiling the library itself.  This code is part of the GNU C
9992:288832:   and linking in this code is a waste when using the GNU C library
9993:288900:   (especially if it is a shared library).  Rather than having every GNU
9994:288973:   program understand `configure --with-gnu-libc' and omit the object files,
9995:289050:   it is simpler to just do this in the source for each such file.  */
9996:289121:
9997:289122:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
9998:289172:
9999:289173:
10000:289174:#ifdef __STDC__
10001:289190:#define POINTER void *
10002:289213:#else
10003:289219:#define POINTER char *
10004:289242:#endif
10005:289249:
10006:289250:/* Determine default alignment.  */
10007:289286:struct fooalign {char x; double d;};
10008:289323:#define DEFAULT_ALIGNMENT  \
10009:289352:  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
10010:289421:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
10011:289500:   But in fact it might be less smart and round addresses to as much as
10012:289572:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
10013:289631:union fooround {long x; double d;};
10014:289667:#define DEFAULT_ROUNDING (sizeof (union fooround))
10015:289718:
10016:289719:/* When we copy a long block of data, this is the unit to do it with.
10017:289789:   On some machines, copying successive ints does not work;
10018:289849:   in such a case, redefine COPYING_UNIT to `long' (if that works)
10019:289916:   or `char' as a last resort.  */
10020:289951:#ifndef COPYING_UNIT
10021:289972:#define COPYING_UNIT int
10022:289997:#endif
10023:290004:
10024:290005:/* The non-GNU-C macros copy the obstack into this global variable
10025:290072:   to avoid multiple evaluation.  */
10026:290109:
10027:290110:struct obstack *_obstack;
10028:290136:
10029:290137:/* Define a macro that either calls functions with the traditional malloc/free
10030:290216:   calling interface, or calls functions with the mmalloc/mfree interface
10031:290290:   (that adds an extra first argument), based on the state of use_extra_arg.
10032:290367:   For free, do not use ?:, since some compilers, like the MIPS compilers,
10033:290442:   do not allow (expr) ? void : void.  */
10034:290484:
10035:290485:#define CALL_CHUNKFUN(h, size) \
10036:290518:  (((h) -> use_extra_arg) \
10037:290546:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
10038:290595:   : (*(h)->chunkfun) ((size)))
10039:290627:
10040:290628:#define CALL_FREEFUN(h, old_chunk) \
10041:290665:  do { \
10042:290674:    if ((h) -> use_extra_arg) \
10043:290706:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
10044:290761:    else \
10045:290772:      (*(h)->freefun) ((old_chunk)); \
10046:290811:  } while (0)
10047:290825:
10048:290826:
10049:290828:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
10050:290908:   Objects start on multiples of ALIGNMENT (0 means use default).
10051:290974:   CHUNKFUN is the function to use to allocate chunks,
10052:291029:   and FREEFUN the function to free them.  */
10053:291075:
10054:291076:void
10055:291081:_obstack_begin (h, size, alignment, chunkfun, freefun)
10056:291136:     struct obstack *h;
10057:291160:     int size;
10058:291175:     int alignment;
10059:291195:     POINTER (*chunkfun) ();
10060:291224:     void (*freefun) ();
10061:291249:{
10062:291251:  register struct _obstack_chunk* chunk; /* points to new chunk */
10063:291318:
10064:291319:  if (alignment == 0)
10065:291341:    alignment = DEFAULT_ALIGNMENT;
10066:291376:  if (size == 0)
10067:291393:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
10068:291466:    {
10069:291472:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10070:291534:	 Use the values for range checking, because if range checking is off,
10071:291605:	 the extra bytes won't be missed terribly, but if range checking is on
10072:291677:	 and we used a larger request, a whole extra 4096 bytes would be
10073:291743:	 allocated.
10074:291756:
10075:291757:	 These number are irrelevant to the new GNU malloc.  I suspect it is
10076:291827:	 less sensitive to the size of the request.  */
10077:291876:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10078:291952:		    + 4 + DEFAULT_ROUNDING - 1)
10079:291986:		   & ~(DEFAULT_ROUNDING - 1));
10080:292019:      size = 4096 - extra;
10081:292046:    }
10082:292052:
10083:292053:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
10084:292111:  h->freefun = freefun;
10085:292135:  h->chunk_size = size;
10086:292159:  h->alignment_mask = alignment - 1;
10087:292196:  h->use_extra_arg = 0;
10088:292220:
10089:292221:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
10090:292278:  h->next_free = h->object_base = chunk->contents;
10091:292329:  h->chunk_limit = chunk->limit
10092:292361:    = (char *) chunk + h->chunk_size;
10093:292399:  chunk->prev = 0;
10094:292418:  /* The initial chunk now contains no empty object.  */
10095:292475:  h->maybe_empty_object = 0;
10096:292504:}
10097:292506:
10098:292507:void
10099:292512:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
10100:292574:     struct obstack *h;
10101:292598:     int size;
10102:292613:     int alignment;
10103:292633:     POINTER (*chunkfun) ();
10104:292662:     void (*freefun) ();
10105:292687:     POINTER arg;
10106:292705:{
10107:292707:  register struct _obstack_chunk* chunk; /* points to new chunk */
10108:292774:
10109:292775:  if (alignment == 0)
10110:292797:    alignment = DEFAULT_ALIGNMENT;
10111:292832:  if (size == 0)
10112:292849:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
10113:292922:    {
10114:292928:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10115:292990:	 Use the values for range checking, because if range checking is off,
10116:293061:	 the extra bytes won't be missed terribly, but if range checking is on
10117:293133:	 and we used a larger request, a whole extra 4096 bytes would be
10118:293199:	 allocated.
10119:293212:
10120:293213:	 These number are irrelevant to the new GNU malloc.  I suspect it is
10121:293283:	 less sensitive to the size of the request.  */
10122:293332:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10123:293408:		    + 4 + DEFAULT_ROUNDING - 1)
10124:293442:		   & ~(DEFAULT_ROUNDING - 1));
10125:293475:      size = 4096 - extra;
10126:293502:    }
10127:293508:
10128:293509:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
10129:293567:  h->freefun = freefun;
10130:293591:  h->chunk_size = size;
10131:293615:  h->alignment_mask = alignment - 1;
10132:293652:  h->extra_arg = arg;
10133:293674:  h->use_extra_arg = 1;
10134:293698:
10135:293699:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
10136:293756:  h->next_free = h->object_base = chunk->contents;
10137:293807:  h->chunk_limit = chunk->limit
10138:293839:    = (char *) chunk + h->chunk_size;
10139:293877:  chunk->prev = 0;
10140:293896:  /* The initial chunk now contains no empty object.  */
10141:293953:  h->maybe_empty_object = 0;
10142:293982:}
10143:293984:
10144:293985:/* Allocate a new current chunk for the obstack *H
10145:294036:   on the assumption that LENGTH bytes need to be added
10146:294092:   to the current object, or a new object of length LENGTH allocated.
10147:294162:   Copies any partial object from the end of the old chunk
10148:294221:   to the beginning of the new one.  */
10149:294261:
10150:294262:void
10151:294267:_obstack_newchunk (h, length)
10152:294297:     struct obstack *h;
10153:294321:     int length;
10154:294338:{
10155:294340:  register struct _obstack_chunk*	old_chunk = h->chunk;
10156:294396:  register struct _obstack_chunk*	new_chunk;
10157:294441:  register long	new_size;
10158:294467:  register int obj_size = h->next_free - h->object_base;
10159:294524:  register int i;
10160:294542:  int already;
10161:294557:
10162:294558:  /* Compute size for new chunk.  */
10163:294595:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
10164:294653:  if (new_size < h->chunk_size)
10165:294685:    new_size = h->chunk_size;
10166:294715:
10167:294716:  /* Allocate and initialize the new chunk.  */
10168:294764:  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
10169:294818:  new_chunk->prev = old_chunk;
10170:294849:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
10171:294918:
10172:294919:  /* Move the existing object to the new chunk.
10173:294967:     Word at a time is fast and is safe if the object
10174:295021:     is sufficiently aligned.  */
10175:295055:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
10176:295105:    {
10177:295111:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
10178:295164:	   i >= 0; i--)
10179:295181:	((COPYING_UNIT *)new_chunk->contents)[i]
10180:295223:	  = ((COPYING_UNIT *)h->object_base)[i];
10181:295265:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
10182:295345:	 but that can cross a page boundary on a machine
10183:295395:	 which does not do strict alignment for COPYING_UNITS.  */
10184:295455:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
10185:295529:    }
10186:295535:  else
10187:295542:    already = 0;
10188:295559:  /* Copy remaining bytes one by one.  */
10189:295601:  for (i = already; i < obj_size; i++)
10190:295640:    new_chunk->contents[i] = h->object_base[i];
10191:295688:
10192:295689:  /* If the object just copied was the only data in OLD_CHUNK,
10193:295752:     free that chunk and remove it from the chain.
10194:295803:     But not if that chunk might contain an empty object.  */
10195:295865:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
10196:295937:    {
10197:295943:      new_chunk->prev = old_chunk->prev;
10198:295984:      CALL_FREEFUN (h, old_chunk);
10199:296019:    }
10200:296025:
10201:296026:  h->object_base = new_chunk->contents;
10202:296066:  h->next_free = h->object_base + obj_size;
10203:296110:  /* The new chunk certainly contains no empty object yet.  */
10204:296173:  h->maybe_empty_object = 0;
10205:296202:}
10206:296204:
10207:296205:/* Return nonzero if object OBJ has been allocated from obstack H.
10208:296272:   This is here for debugging.
10209:296303:   If you use it in a program, you are probably losing.  */
10210:296363:
10211:296364:int
10212:296368:_obstack_allocated_p (h, obj)
10213:296398:     struct obstack *h;
10214:296422:     POINTER obj;
10215:296440:{
10216:296442:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10217:296527:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10218:296604:
10219:296605:  lp = (h)->chunk;
10220:296624:  /* We use >= rather than > since the object cannot be exactly at
10221:296691:     the beginning of the chunk but might be an empty object exactly
10222:296760:     at the end of an adjacent chunk. */
10223:296801:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10224:296873:    {
10225:296879:      plp = lp->prev;
10226:296901:      lp = plp;
10227:296917:    }
10228:296923:  return lp != 0;
10229:296941:}
10230:296943:
10231:296945:/* Free objects in obstack H, including OBJ and everything allocate
10232:297013:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
10233:297083:
10234:297084:#undef obstack_free
10235:297104:
10236:297105:/* This function has two names with identical definitions.
10237:297164:   This is the first one, called from non-ANSI code.  */
10238:297221:
10239:297222:void
10240:297227:_obstack_free (h, obj)
10241:297250:     struct obstack *h;
10242:297274:     POINTER obj;
10243:297292:{
10244:297294:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10245:297379:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10246:297456:
10247:297457:  lp = h->chunk;
10248:297474:  /* We use >= because there cannot be an object at the beginning of a chunk.
10249:297552:     But there can be an empty object at that address
10250:297606:     at the end of another chunk.  */
10251:297644:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10252:297716:    {
10253:297722:      plp = lp->prev;
10254:297744:      CALL_FREEFUN (h, lp);
10255:297772:      lp = plp;
10256:297788:      /* If we switch chunks, we can't tell whether the new current
10257:297856:	 chunk contains an empty object, so assume that it may.  */
10258:297917:      h->maybe_empty_object = 1;
10259:297950:    }
10260:297956:  if (lp)
10261:297966:    {
10262:297972:      h->object_base = h->next_free = (char *)(obj);
10263:298025:      h->chunk_limit = lp->limit;
10264:298059:      h->chunk = lp;
10265:298080:    }
10266:298086:  else if (obj != 0)
10267:298107:    /* obj is not in any of the chunks! */
10268:298150:    abort ();
10269:298164:}
10270:298166:
10271:298167:/* This function is used from ANSI code.  */
10272:298212:
10273:298213:void
10274:298218:obstack_free (h, obj)
10275:298240:     struct obstack *h;
10276:298264:     POINTER obj;
10277:298282:{
10278:298284:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10279:298369:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10280:298446:
10281:298447:  lp = h->chunk;
10282:298464:  /* We use >= because there cannot be an object at the beginning of a chunk.
10283:298542:     But there can be an empty object at that address
10284:298596:     at the end of another chunk.  */
10285:298634:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10286:298706:    {
10287:298712:      plp = lp->prev;
10288:298734:      CALL_FREEFUN (h, lp);
10289:298762:      lp = plp;
10290:298778:      /* If we switch chunks, we can't tell whether the new current
10291:298846:	 chunk contains an empty object, so assume that it may.  */
10292:298907:      h->maybe_empty_object = 1;
10293:298940:    }
10294:298946:  if (lp)
10295:298956:    {
10296:298962:      h->object_base = h->next_free = (char *)(obj);
10297:299015:      h->chunk_limit = lp->limit;
10298:299049:      h->chunk = lp;
10299:299070:    }
10300:299076:  else if (obj != 0)
10301:299097:    /* obj is not in any of the chunks! */
10302:299140:    abort ();
10303:299154:}
10304:299156:
10305:299158:#if 0
10306:299164:/* These are now turned off because the applications do not use it
10307:299231:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
10308:299304:
10309:299305:/* Now define the functional versions of the obstack macros.
10310:299366:   Define them to simply use the corresponding macros to do the job.  */
10311:299439:
10312:299440:#ifdef __STDC__
10313:299456:/* These function definitions do not work with non-ANSI preprocessors;
10314:299527:   they won't pass through the macro names in parentheses.  */
10315:299590:
10316:299591:/* The function names appear in parentheses in order to prevent
10317:299655:   the macro-definitions of the names from being expanded there.  */
10318:299724:
10319:299725:POINTER (obstack_base) (obstack)
10320:299758:     struct obstack *obstack;
10321:299788:{
10322:299790:  return obstack_base (obstack);
10323:299823:}
10324:299825:
10325:299826:POINTER (obstack_next_free) (obstack)
10326:299864:     struct obstack *obstack;
10327:299894:{
10328:299896:  return obstack_next_free (obstack);
10329:299934:}
10330:299936:
10331:299937:int (obstack_object_size) (obstack)
10332:299973:     struct obstack *obstack;
10333:300003:{
10334:300005:  return obstack_object_size (obstack);
10335:300045:}
10336:300047:
10337:300048:int (obstack_room) (obstack)
10338:300077:     struct obstack *obstack;
10339:300107:{
10340:300109:  return obstack_room (obstack);
10341:300142:}
10342:300144:
10343:300145:void (obstack_grow) (obstack, pointer, length)
10344:300192:     struct obstack *obstack;
10345:300222:     POINTER pointer;
10346:300244:     int length;
10347:300261:{
10348:300263:  obstack_grow (obstack, pointer, length);
10349:300306:}
10350:300308:
10351:300309:void (obstack_grow0) (obstack, pointer, length)
10352:300357:     struct obstack *obstack;
10353:300387:     POINTER pointer;
10354:300409:     int length;
10355:300426:{
10356:300428:  obstack_grow0 (obstack, pointer, length);
10357:300472:}
10358:300474:
10359:300475:void (obstack_1grow) (obstack, character)
10360:300517:     struct obstack *obstack;
10361:300547:     int character;
10362:300567:{
10363:300569:  obstack_1grow (obstack, character);
10364:300607:}
10365:300609:
10366:300610:void (obstack_blank) (obstack, length)
10367:300649:     struct obstack *obstack;
10368:300679:     int length;
10369:300696:{
10370:300698:  obstack_blank (obstack, length);
10371:300733:}
10372:300735:
10373:300736:void (obstack_1grow_fast) (obstack, character)
10374:300783:     struct obstack *obstack;
10375:300813:     int character;
10376:300833:{
10377:300835:  obstack_1grow_fast (obstack, character);
10378:300878:}
10379:300880:
10380:300881:void (obstack_blank_fast) (obstack, length)
10381:300925:     struct obstack *obstack;
10382:300955:     int length;
10383:300972:{
10384:300974:  obstack_blank_fast (obstack, length);
10385:301014:}
10386:301016:
10387:301017:POINTER (obstack_finish) (obstack)
10388:301052:     struct obstack *obstack;
10389:301082:{
10390:301084:  return obstack_finish (obstack);
10391:301119:}
10392:301121:
10393:301122:POINTER (obstack_alloc) (obstack, length)
10394:301164:     struct obstack *obstack;
10395:301194:     int length;
10396:301211:{
10397:301213:  return obstack_alloc (obstack, length);
10398:301255:}
10399:301257:
10400:301258:POINTER (obstack_copy) (obstack, pointer, length)
10401:301308:     struct obstack *obstack;
10402:301338:     POINTER pointer;
10403:301360:     int length;
10404:301377:{
10405:301379:  return obstack_copy (obstack, pointer, length);
10406:301429:}
10407:301431:
10408:301432:POINTER (obstack_copy0) (obstack, pointer, length)
10409:301483:     struct obstack *obstack;
10410:301513:     POINTER pointer;
10411:301535:     int length;
10412:301552:{
10413:301554:  return obstack_copy0 (obstack, pointer, length);
10414:301605:}
10415:301607:
10416:301608:#endif /* __STDC__ */
10417:301630:
10418:301631:#endif /* 0 */
10419:301646:
10420:301647:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
10421:301691:/* search.c - searching subroutines using dfa, kwset and regex for grep.
10422:301764:   Copyright (C) 1992 Free Software Foundation, Inc.
10423:301817:
10424:301818:   This program is free software; you can redistribute it and/or modify
10425:301890:   it under the terms of the GNU General Public License as published by
10426:301962:   the Free Software Foundation; either version 2, or (at your option)
10427:302033:   any later version.
10428:302055:
10429:302056:   This program is distributed in the hope that it will be useful,
10430:302123:   but WITHOUT ANY WARRANTY; without even the implied warranty of
10431:302189:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
10432:302254:   GNU General Public License for more details.
10433:302302:
10434:302303:   You should have received a copy of the GNU General Public License
10435:302372:   along with this program; if not, write to the Free Software
10436:302435:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
10437:302496:
10438:302497:   Written August 1992 by Mike Haertel. */
10439:302540:
10441:302564:
10442:302565:#ifdef STDC_HEADERS
10443:302585:#if flag_limits==0
10444:302604:#undef RE_DUP_MAX
10446:302642:#define flag_limits 1
10447:302664:#endif
10448:302671:#if flag_stdlib==0
10450:302710:#define flag_stdlib 1
10451:302732:#endif
10452:302739:#else
10453:302745:#define UCHAR_MAX 255
10454:302767:#if flag_systypes==0
10456:302811:#define flag_systypes 1
10457:302835:#endif
10458:302842:extern char *malloc();
10459:302865:#endif
10460:302872:
10461:302873:#ifdef HAVE_MEMCHR
10462:302892:#if flag_string==0
10464:302931:#define flag_string 1
10465:302953:#endif
10466:302960:#ifdef NEED_MEMORY_H
10467:302981:#if flag_memory==0
10469:303020:#define flag_memory 1
10470:303042:#endif
10471:303049:#endif
10472:303056:#else
10473:303062:#ifdef __STDC__
10474:303078:extern void *memchr();
10475:303101:#else
10476:303107:extern char *memchr();
10477:303130:#endif
10478:303137:#endif
10479:303144:
10480:303145:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
10481:303197:#undef bcopy
10482:303210:#define bcopy(s, d, n) memcpy((d), (s), (n))
10483:303255:#endif
10484:303262:
10485:303263:#ifdef isascii
10486:303278:#define ISALNUM(C) (isascii(C) && isalnum(C))
10487:303324:#define ISUPPER(C) (isascii(C) && isupper(C))
10488:303370:#else
10489:303376:#define ISALNUM(C) isalnum(C)
10490:303406:#define ISUPPER(C) isupper(C)
10491:303436:#endif
10492:303443:
10493:303444:#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))
10494:303495:
10499:303585:
10500:303586:#define NCHAR (UCHAR_MAX + 1)
10501:303616:
10502:303617:#if __STDC__
10503:303630:static void Gcompile(char *, size_t);
10504:303668:static void Ecompile(char *, size_t);
10505:303706:static char *EGexecute(char *, size_t, char **);
10506:303755:static void Fcompile(char *, size_t);
10507:303793:static char *Fexecute(char *, size_t, char **);
10508:303841:#else
10509:303847:static void Gcompile();
10510:303871:static void Ecompile();
10511:303895:static char *EGexecute();
10512:303921:static void Fcompile();
10513:303945:static char *Fexecute();
10514:303970:#endif
10515:303977:
10516:303978:/* Here is the matchers vector for the main program. */
10517:304034:struct matcher matchers[] = {
10518:304064:  { "default", Gcompile, EGexecute },
10519:304102:  { "grep", Gcompile, EGexecute },
10520:304137:  { "ggrep", Gcompile, EGexecute },
10521:304173:  { "egrep", Ecompile, EGexecute },
10522:304209:  { "posix-egrep", Ecompile, EGexecute },
10523:304251:  { "gegrep", Ecompile, EGexecute },
10524:304288:  { "fgrep", Fcompile, Fexecute },
10525:304323:  { "gfgrep", Fcompile, Fexecute },
10526:304359:  { 0, 0, 0 },
10527:304374:};
10528:304377:
10529:304378:/* For -w, we also consider _ to be word constituent.  */
10530:304436:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
10531:304480:
10532:304481:/* DFA compiled regexp. */
10533:304508:static struct dfa dfa_1;
10534:304533:
10535:304534:/* Regex compiled regexp. */
10536:304563:static struct re_pattern_buffer regex;
10537:304602:
10538:304603:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
10539:304669:   a list of strings, at least one of which is known to occur in
10540:304734:   any string matching the regexp. */
10541:304772:static kwset_t kwset;
10542:304794:
10543:304795:/* Last compiled fixed string known to exactly match the regexp.
10544:304860:   If kwsexec() returns < lastexact, then we don't need to
10545:304919:   call the regexp matcher at all. */
10546:304957:static int lastexact;
10547:304979:
10548:304980:void
10549:304985:dfaerror(mesg)
10550:305000:     char *mesg;
10551:305017:{
10552:305019:  fatal(mesg, 0);
10553:305037:}
10554:305039:
10555:305040:static void
10556:305052:kwsinit()
10557:305062:{
10558:305064:  static char trans[NCHAR];
10559:305092:  int i;
10560:305101:
10561:305102:  if (match_icase)
10562:305121:    for (i = 0; i < NCHAR; ++i)
10563:305153:      trans[i] = TOLOWER(i);
10564:305182:
10565:305183:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
10566:305244:    fatal("memory exhausted", 0);
10567:305278:}  
10568:305282:
10569:305283:/* If the DFA turns out to have some set of fixed strings one of
10570:305348:   which must occur in the match, then we build a kwset matcher
10571:305412:   to find those strings, and thus quickly filter out impossible
10572:305477:   matches. */
10573:305492:static void
10574:305504:kwsmusts()
10575:305515:{
10576:305517:  struct dfamust *dm;
10577:305539:  char *err;
10578:305552:
10579:305553:  if (dfa_1.musts)
10580:305572:    {
10581:305578:      kwsinit();
10582:305595:      /* First, we compile in the substrings known to be exact
10583:305658:	 matches.  The kwset matcher will return the index
10584:305710:	 of the matching string that it chooses. */
10585:305755:      for (dm = dfa_1.musts; dm; dm = dm->next)
10586:305803:	{
10587:305806:	  if (!dm->exact)
10588:305825:	    continue;
10589:305840:	  ++lastexact;
10590:305856:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
10591:305920:	    fatal(err, 0);
10592:305940:	}
10593:305943:      /* Now, we compile the substrings that will require
10594:306001:	 the use of the regexp matcher.  */
10595:306038:      for (dm = dfa_1.musts; dm; dm = dm->next)
10596:306086:	{
10597:306089:	  if (dm->exact)
10598:306107:	    continue;
10599:306122:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
10600:306186:	    fatal(err, 0);
10601:306206:	}
10602:306209:      if ((err = kwsprep(kwset)) != 0)
10603:306248:	fatal(err, 0);
10604:306264:    }
10605:306270:}
10606:306272:
10607:306273:static void
10608:306285:Gcompile(pattern, size)
10609:306309:     char *pattern;
10610:306329:     size_t size;
10611:306347:{
10612:306349:#ifdef __STDC__
10613:306365:  const
10614:306373:#endif
10615:306380:  char *err;
10616:306393:
10617:306394:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
10618:306454:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase);
10619:306523:
10620:306524:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
10621:306586:    fatal(err, 0);
10622:306605:
10623:306606:  dfainit(&dfa_1);
10624:306625:
10625:306626:  /* In the match_words and match_lines cases, we use a different pattern
10626:306700:     for the DFA matcher that will quickly throw out cases that won't work.
10627:306776:     Then if DFA succeeds we do some hairy stuff using the regex matcher
10628:306849:     to decide whether the match should really count. */
10629:306906:  if (match_words || match_lines)
10630:306940:    {
10631:306946:      /* In the whole-word case, we use the pattern:
10632:306999:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
10633:307044:	 In the whole-line case, we use the pattern:
10634:307090:	 ^(userpattern)$.
10635:307109:	 BUG: Using [A-Za-z_] is locale-dependent!  */
10636:307157:
10637:307158:      char *n = malloc(size + 50);
10638:307193:      int i = 0;
10639:307210:
10640:307211:      strcpy(n, "");
10641:307232:
10642:307233:      if (match_lines)
10643:307256:	strcpy(n, "^\\(");
10644:307276:      if (match_words)
10645:307299:	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
10646:307341:
10647:307342:      i = strlen(n);
10648:307363:      bcopy(pattern, n + i, size);
10649:307398:      i += size;
10650:307415:
10651:307416:      if (match_words)
10652:307439:	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
10653:307485:      if (match_lines)
10654:307508:	strcpy(n + i, "\\)$");
10655:307532:
10656:307533:      i += strlen(n + i);
10657:307559:      dfacomp(n, i, &dfa_1, 1);
10658:307591:    }
10659:307597:  else
10660:307604:    dfacomp(pattern, size, &dfa_1, 1);
10661:307643:
10662:307644:  kwsmusts();
10663:307658:}
10664:307660:
10665:307661:static void
10666:307673:Ecompile(pattern, size)
10667:307697:     char *pattern;
10668:307717:     size_t size;
10669:307735:{
10670:307737:#ifdef __STDC__
10671:307753:  const
10672:307761:#endif
10673:307768:  char *err;
10674:307781:
10675:307782:  if (strcmp(matcher, "posix-egrep") == 0)
10676:307825:    {
10677:307831:      re_set_syntax(RE_SYNTAX_POSIX_EGREP);
10678:307875:      dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase);
10679:307928:    }
10680:307934:  else
10681:307941:    {
10682:307947:      re_set_syntax(RE_SYNTAX_EGREP);
10683:307985:      dfasyntax(RE_SYNTAX_EGREP, match_icase);
10684:308032:    }
10685:308038:
10686:308039:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
10687:308101:    fatal(err, 0);
10688:308120:
10689:308121:  dfainit(&dfa_1);
10690:308140:
10691:308141:  /* In the match_words and match_lines cases, we use a different pattern
10692:308215:     for the DFA matcher that will quickly throw out cases that won't work.
10693:308291:     Then if DFA succeeds we do some hairy stuff using the regex matcher
10694:308364:     to decide whether the match should really count. */
10695:308421:  if (match_words || match_lines)
10696:308455:    {
10697:308461:      /* In the whole-word case, we use the pattern:
10698:308514:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
10699:308559:	 In the whole-line case, we use the pattern:
10700:308605:	 ^(userpattern)$.
10701:308624:	 BUG: Using [A-Za-z_] is locale-dependent!  */
10702:308672:
10703:308673:      char *n = malloc(size + 50);
10704:308708:      int i = 0;
10705:308725:
10706:308726:      strcpy(n, "");
10707:308747:
10708:308748:      if (match_lines)
10709:308771:	strcpy(n, "^(");
10710:308789:      if (match_words)
10711:308812:	strcpy(n, "(^|[^0-9A-Za-z_])(");
10712:308846:
10713:308847:      i = strlen(n);
10714:308868:      bcopy(pattern, n + i, size);
10715:308903:      i += size;
10716:308920:
10717:308921:      if (match_words)
10718:308944:	strcpy(n + i, ")([^0-9A-Za-z_]|$)");
10719:308982:      if (match_lines)
10720:309005:	strcpy(n + i, ")$");
10721:309027:
10722:309028:      i += strlen(n + i);
10723:309054:      dfacomp(n, i, &dfa_1, 1);
10724:309086:    }
10725:309092:  else
10726:309099:    dfacomp(pattern, size, &dfa_1, 1);
10727:309138:
10728:309139:  kwsmusts();
10729:309153:}
10730:309155:
10731:309156:static char *
10732:309170:EGexecute(buf, size, endp)
10733:309197:     char *buf;
10734:309213:     size_t size;
10735:309231:     char **endp;
10736:309249:{
10737:309251:  register char *buflim, *beg, *end, save;
10738:309294:  int backref, start, len;
10739:309321:  struct kwsmatch kwsm;
10740:309345:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
10741:309425:				    Q@#%!# library interface in regex.c.  */
10742:309474:
10743:309475:  buflim = buf + size;
10744:309498:
10745:309499:  for (beg = end = buf; end < buflim; beg = end + 1)
10746:309552:    {
10747:309558:      if (kwset)
10748:309575:	{
10749:309578:	  /* Find a possible match using the KWset matcher. */
10750:309634:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
10751:309685:	  if (!beg)
10752:309698:	    goto failure;
10753:309717:	  /* Narrow down to the line containing the candidate, and
10754:309777:	     run it through DFA. */
10755:309806:	  end = memchr(beg, '\n', buflim - beg);
10756:309848:	  if (!end)
10757:309861:	    end = buflim;
10758:309880:	  while (beg > buf && beg[-1] != '\n')
10759:309920:	    --beg;
10760:309932:	  save = *end;
10761:309948:	  if (kwsm.index < lastexact)
10762:309979:	    goto success;
10763:309998:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
10764:310057:	    {
10765:310064:	      *end = save;
10766:310084:	      continue;
10767:310101:	    }
10768:310108:	  *end = save;
10769:310124:	  /* Successful, no backreferences encountered. */
10770:310176:	  if (!backref)
10771:310193:	    goto success;
10772:310212:	}
10773:310215:      else
10774:310226:	{
10775:310229:	  /* No good fixed strings; start with DFA. */
10776:310277:	  save = *buflim;
10777:310296:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
10778:310359:	  *buflim = save;
10779:310378:	  if (!beg)
10780:310391:	    goto failure;
10781:310410:	  /* Narrow down to the line we've found. */
10782:310456:	  end = memchr(beg, '\n', buflim - beg);
10783:310498:	  if (!end)
10784:310511:	    end = buflim;
10785:310530:	  while (beg > buf && beg[-1] != '\n')
10786:310570:	    --beg;
10787:310582:	  /* Successful, no backreferences encountered! */
10788:310634:	  if (!backref)
10789:310651:	    goto success;
10790:310670:	}
10791:310673:      /* If we've made it to this point, this means DFA has seen
10792:310738:	 a probable match, and we need to run it through Regex. */
10793:310798:      regex.not_eol = 0;
10794:310823:      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
10795:310904:	{
10796:310907:	  len = regs.end[0] - start;
10797:310937:	  if (!match_lines && !match_words || match_lines && len == end - beg)
10798:311009:	    goto success;
10799:311028:	  /* If -w, check if the match aligns with word boundaries.
10800:311089:	     We do this iteratively because:
10801:311127:	     (a) the line may contain more than one occurence of the pattern, and
10802:311202:	     (b) Several alternatives in the pattern might be valid at a given
10803:311274:	     point, and we may need to consider a shorter one to find a word
10804:311344:	     boundary. */
10805:311363:	  if (match_words)
10806:311383:	    while (start >= 0)
10807:311407:	      {
10808:311416:		if ((start == 0 || !WCHAR(beg[start - 1]))
10809:311461:		    && (len == end - beg || !WCHAR(beg[start + len])))
10810:311518:		  goto success;
10811:311536:		if (len > 0)
10812:311551:		  {
10813:311557:		    /* Try a shorter length anchored at the same place. */
10814:311618:		    --len;
10815:311631:		    regex.not_eol = 1;
10816:311656:		    len = re_match(&regex, beg, start + len, start, &regs);
10817:311718:		  }
10818:311724:		if (len <= 0)
10819:311740:		  {
10820:311746:		    /* Try looking further on. */
10821:311782:		    if (start == end - beg)
10822:311812:		      break;
10823:311827:		    ++start;
10824:311842:		    regex.not_eol = 0;
10825:311867:		    start = re_search(&regex, beg, end - beg,
10826:311915:				      start, end - beg - start, &regs);
10827:311959:		    len = regs.end[0] - start;
10828:311992:		  }
10829:311998:	      }
10830:312007:	}
10831:312010:    }
10832:312016:
10833:312017: failure:
10834:312027:  return 0;
10835:312039:
10836:312040: success:
10837:312050:  *endp = end < buflim ? end + 1 : end;
10838:312090:  return beg;
10839:312104:}
10840:312106:
10841:312107:static void
10842:312119:Fcompile(pattern, size)
10843:312143:     char *pattern;
10844:312163:     size_t size;
10845:312181:{
10846:312183:  char *beg, *lim, *err;
10847:312208:
10848:312209:  kwsinit();
10849:312222:  beg = pattern;
10850:312239:  do
10851:312244:    {
10852:312250:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
10853:312317:	;
10854:312320:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
10855:312375:	fatal(err, 0);
10856:312391:      if (lim < pattern + size)
10857:312423:	++lim;
10858:312431:      beg = lim;
10859:312448:    }
10860:312454:  while (beg < pattern + size);
10861:312486:
10862:312487:  if ((err = kwsprep(kwset)) != 0)
10863:312522:    fatal(err, 0);
10864:312541:}
10865:312543:
10866:312544:static char *
10867:312558:Fexecute(buf, size, endp)
10868:312584:     char *buf;
10869:312600:     size_t size;
10870:312618:     char **endp;
10871:312636:{
10872:312638:  register char *beg, *try, *end;
10873:312672:  register size_t len;
10874:312695:  struct kwsmatch kwsmatch;
10875:312723:
10876:312724:  for (beg = buf; beg <= buf + size; ++beg)
10877:312768:    {
10878:312774:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
10879:312843:	return 0;
10880:312854:      len = kwsmatch.size[0];
10881:312884:      if (match_lines)
10882:312907:	{
10883:312910:	  if (beg > buf && beg[-1] != '\n')
10884:312947:	    continue;
10885:312962:	  if (beg + len < buf + size && beg[len] != '\n')
10886:313013:	    continue;
10887:313028:	  goto success;
10888:313045:	}
10889:313048:      else if (match_words)
10890:313076:	for (try = beg; len && try;)
10891:313106:	  {
10892:313111:	    if (try > buf && WCHAR((unsigned char) try[-1]))
10893:313165:	      break;
10894:313179:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
10895:313247:	      {
10896:313256:		try = kwsexec(kwset, beg, --len, &kwsmatch);
10897:313303:		len = kwsmatch.size[0];
10898:313329:	      }
10899:313338:	    else
10900:313348:	      goto success;
10901:313369:	  }
10902:313374:      else
10903:313385:	goto success;
10904:313400:    }
10905:313406:
10906:313407:  return 0;
10907:313419:
10908:313420: success:
10909:313430:  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
10910:313502:    ++end;
10911:313513:  else
10912:313520:    end = buf + size;
10913:313542:  *endp = end;
10914:313557:  while (beg > buf && beg[-1] != '\n')
10915:313596:    --beg;
10916:313607:  return beg;
10917:313621:}
10918:313623:
10919:313624:if (out)
10920:313633:if (gout)
10921:313643:if (gsth)
10922:313653:if out
10923:313660:if gout
10924:313668:if agout
10925:313677:if agout end = buf + size;
10926:313704:if aout
10927:313712:if ag
10928:313718:if g
10929:313723:if a
10930:313728:
10931:313729:swswsif (out)
10932:313743:wwif (gout)
10933:313755:wssif (gsth)
10934:313768:wswswsif out
10935:313781:3if gout
10936:313790:wsif agout
10937:313801:3eif agout end = buf + size;
10938:313830:dseif aout
10939:313841:dsif ag
10940:313849:isxsif g
10941:313858:xxsxif awwsw
10942:313871:
10943:313872:swswsif (out)fvvfvf
10944:313892:wwif (gout)
10945:313904:wssif (gsth)
10946:313917:wswswsif outvfvf
10947:313934:3if goutfvf
10948:313946:wsif agoutvfv
10949:313960:3eif agoutvf end = buf + size;
10950:313991:dseif aoutvfv
10951:314005:dsif agvff
10952:314016:isxsif gvfv
10953:314028:xxsxif awwsw
10954:314041:
10955:314042:s  if (out)
10956:314054:    if (gout)
10957:314068: sds if (gsth)
10958:314083:  if out
10959:314092:dc if gout
10960:314103:dv if agout
10961:314115:argue if agout end = buf + size;
10962:314148:  if aout
10963:314158:          if ag
10964:314174:  argue if g
10965:314187: if a