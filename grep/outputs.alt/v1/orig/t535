1:/* grep.c - main driver file for grep.
2:   Copyright (C) 1992 Free Software Foundation, Inc.
3:
4:   This program is free software; you can redistribute it and/or modify
5:   it under the terms of the GNU General Public License as published by
6:   the Free Software Foundation; either version 2, or (at your option)
7:   any later version.
8:
9:   This program is distributed in the hope that it will be useful,
10:   but WITHOUT ANY WARRANTY; without even the implied warranty of
11:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
12:   GNU General Public License for more details.
13:
14:   You should have received a copy of the GNU General Public License
15:   along with this program; if not, write to the Free Software
16:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
17:
18:   Written July 1992 by Mike Haertel.  */
19:
20:
21:/* I added a series define from makefile here in order to run cfe */
22:#define GREP 1
23:#define STDC_HEADERS 1
24:#define HAVE_STRING_H 1
25:#define HAVE_SYS_PARAM_H 1
26:#define HAVE_UNISTD_H 1
27:#define HAVE_ALLOCA_H 1
28:#define HAVE_GETPAGESIZE 1
29:#define HAVE_MEMCHR 1
30:#define HAVE_STRERROR 1
31:#define HAVE_VALLOC 1
32:#define HAVE_WORKING_MMAP 1
33:/*** end of cfe purpose **/
34:
37:
38:#ifndef errno
39:extern int errno;
40:#endif
41:
42:#ifdef STDC_HEADERS
44:#define flag_stdlib 1
45:#else
47:#define flag_systypes 1
48:extern char *malloc(), *realloc();
49:extern void free();
50:#endif
51:
52:#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
54:#define flag_string 1
55:#ifdef NEED_MEMORY_H
57:#define flag_memory 1
58:#endif
59:#else
61:#define flag_strings 1
62:#ifdef __STDC__
63:extern void *memchr();
64:#else
65:extern char *memchr();
66:#endif
67:#define strrchr rindex
68:#endif
69:
70:#ifdef HAVE_UNISTD_H
71:#if flag_systypes==0
73:#define flag_systypes 1
74:#endif
77:#else
78:#define O_RDONLY 0
79:extern int open(), read(), close();
80:#endif
81:
84:
85:#undef MAX
86:#define MAX(A,B) ((A) > (B) ? (A) : (B))
87:
88:/* Provide missing ANSI features if necessary. */
89:
90:#ifndef HAVE_STRERROR
91:extern int sys_nerr;
92:extern char *sys_errlist[];
93:#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
94:#endif
95:
96:#ifndef HAVE_MEMCHR
97:#ifdef __STDC__
98:#define VOID void
99:#else
100:#define VOID char
101:#endif
102:VOID *
103:memchr(vp, c, n)
104:     VOID *vp;
105:     int c;
106:     size_t n;
107:{
108:  unsigned char *p;
109:
110:  for (p = (unsigned char *) vp; n--; ++p)
111:    if (*p == c)
112:      return (VOID *) p;
113:  return 0;
114:}
115:#endif
116:    
117:/* Define flags declared in grep.h. */
118:char *matcher;
119:int match_icase;
120:int match_words;
121:int match_lines;
122:
123:/* Functions we'll use to search. */
124:static void (*compile)();
125:static char *(*execute)();
126:
127:/* For error messages. */
128:static char *prog;
129:static char *filename;
130:static int errseen;
131:
132:/* Print a message and possibly an error string.  Remember
133:   that something awful happened. */
134:static void
135:error(mesg, errnum)
136:#ifdef __STDC__
137:     const
138:#endif
139:     char *mesg;
140:     int errnum;
141:{
142:  if (errnum)
143:    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
144:  else
145:    fprintf(stderr, "%s: %s\n", prog, mesg);
146:  errseen = 1;
147:}
148:
149:/* Like error(), but die horribly after printing. */
150:void
151:fatal(mesg, errnum)
152:#ifdef __STDC__
153:     const
154:#endif
155:     char *mesg;
156:     int errnum;
157:{
158:  error(mesg, errnum);
159:  exit(2);
160:}
161:
162:/* Interface to handle errors and fix library lossage. */
163:char *
164:xmalloc(size)
165:     size_t size;
166:{
167:  char *result;
168:
169:  result = malloc(size);
170:  if (size && !result)
171:    fatal("memory exhausted", 0);
172:  return result;
173:}
174:
175:/* Interface to handle errors and fix some library lossage. */
176:char *
177:xrealloc(ptr, size)
178:     char *ptr;
179:     size_t size;
180:{
181:  char *result;
182:
183:  if (ptr)
184:    result = realloc(ptr, size);
185:  else
186:    result = malloc(size);
187:  if (size && !result)
188:    fatal("memory exhausted", 0);
189:  return result;
190:}
191:
192:#if !defined(HAVE_VALLOC)
193:#define valloc malloc
194:#else
195:#ifdef __STDC__
196:extern void *valloc(size_t);
197:#else
198:extern char *valloc();
199:#endif
200:#endif
201:
202:/* Hairy buffering mechanism for grep.  The intent is to keep
203:   all reads aligned on a page boundary and multiples of the
204:   page size. */
205:
206:static char *buffer;		/* Base of buffer. */
207:static size_t bufsalloc;	/* Allocated size of buffer save region. */
208:static size_t bufalloc;		/* Total buffer size. */
209:static int bufdesc;		/* File descriptor. */
210:static char *bufbeg;		/* Beginning of user-visible stuff. */
211:static char *buflim;		/* Limit of user-visible stuff. */
212:
213:#if defined(HAVE_WORKING_MMAP)
214:#if flag_systypes==0
216:#define flag_systypes 1
217:#endif
220:
221:static int bufmapped;		/* True for ordinary files. */
222:static struct stat bufstat;	/* From fstat(). */
223:static off_t bufoffset;		/* What read() normally remembers. */
224:#endif
225:
226:/* Reset the buffer for a new file.  Initialize
227:   on the first time through. */
228:void
229:reset(fd)
230:     int fd;
231:{
232:  static int initialized;
233:
234:  if (!initialized)
235:    {
236:      initialized = 1;
237:#ifndef BUFSALLOC
238:      bufsalloc = MAX(8192, getpagesize());
239:#else
240:      bufsalloc = BUFSALLOC;
241:#endif
242:      bufalloc = 5 * bufsalloc;
243:      /* The 1 byte of overflow is a kludge for dfaexec(), which
244:	 inserts a sentinel newline at the end of the buffer
245:	 being searched.  There's gotta be a better way... */
246:      buffer = valloc(bufalloc + 1);
247:      if (!buffer)
248:	fatal("memory exhausted", 0);
249:      bufbeg = buffer;
250:      buflim = buffer;
251:    }
252:  bufdesc = fd;
253:#if defined(HAVE_WORKING_MMAP)
254:  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
255:    bufmapped = 0;
256:  else
257:    {
258:      bufmapped = 1;
259:      bufoffset = lseek(fd, 0, 1);
260:    }
261:#endif
262:}
263:
264:/* Read new stuff into the buffer, saving the specified
265:   amount of old stuff.  When we're done, 'bufbeg' points
266:   to the beginning of the buffer contents, and 'buflim'
267:   points just after the end.  Return count of new stuff. */
268:static int
269:fillbuf(save)
270:     size_t save;
271:{
272:  char *nbuffer, *dp, *sp;
273:  int cc;
274:#if defined(HAVE_WORKING_MMAP)
275:  caddr_t maddr;
276:#endif
277:  static int pagesize;
278:
279:  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
280:    abort();
281:
282:  if (save > bufsalloc)
283:    {
284:      while (save > bufsalloc)
285:	bufsalloc *= 2;
286:      bufalloc = 5 * bufsalloc;
287:      nbuffer = valloc(bufalloc + 1);
288:      if (!nbuffer)
289:	fatal("memory exhausted", 0);
290:    }
291:  else
292:    nbuffer = buffer;
293:
294:  sp = buflim - save;
295:  dp = nbuffer + bufsalloc - save;
296:  bufbeg = dp;
297:  while (save--)
298:    *dp++ = *sp++;
299:
300:  /* We may have allocated a new, larger buffer.  Since
301:     there is no portable vfree(), we just have to forget
302:     about the old one.  Sorry. */
303:  buffer = nbuffer;
304:
305:#if defined(HAVE_WORKING_MMAP)
306:  if (bufmapped && bufoffset % pagesize == 0
307:      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
308:    {
309:      maddr = buffer + bufsalloc;
310:      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
311:		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
312:      if (maddr == (caddr_t) -1)
313:	{
314:	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
315:		  strerror(errno));
316:	  goto tryread;
317:	}
318:#if 0
319:      /* You might thing this (or MADV_WILLNEED) would help,
320:	 but it doesn't, at least not on a Sun running 4.1.
321:	 In fact, it actually slows us down about 30%! */
322:      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
323:#endif
324:      cc = bufalloc - bufsalloc;
325:      bufoffset += cc;
326:    }
327:  else
328:    {
329:    tryread:
330:      /* We come here when we're not going to use mmap() any more.
331:	 Note that we need to synchronize the file offset the
332:	 first time through. */
333:      if (bufmapped)
334:	{
335:	  bufmapped = 0;
336:	  lseek(bufdesc, bufoffset, 0);
337:	}
338:      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
339:    }
340:#else
341:  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
342:#endif
343:  if (cc > 0)
344:    buflim = buffer + bufsalloc + cc;
345:  else
346:    buflim = buffer + bufsalloc;
347:  return cc;
348:}
349:
350:/* Flags controlling the style of output. */
351:static int out_quiet;		/* Suppress all normal output. */
352:static int out_invert;		/* Print nonmatching stuff. */
353:static int out_file;		/* Print filenames. */
354:static int out_line;		/* Print line numbers. */
355:static int out_byte;		/* Print byte offsets. */
356:static int out_before;		/* Lines of leading context. */
357:static int out_after;		/* Lines of trailing context. */
358:
359:/* Internal variables to keep track of byte count, context, etc. */
360:static size_t totalcc;		/* Total character count before bufbeg. */
361:static char *lastnl;		/* Pointer after last newline counted. */
362:static char *lastout;		/* Pointer after last character output;
363:				   NULL if no character has been output
364:				   or if it's conceptually before bufbeg. */
365:static size_t totalnl;		/* Total newline count before lastnl. */
366:static int pending;		/* Pending lines of output. */
367:
368:static void
369:nlscan(lim)
370:     char *lim;
371:{
372:  char *beg;
373:
374:  for (beg = lastnl; beg < lim; ++beg)
375:    if (*beg == '\n')
376:      ++totalnl;
377:  lastnl = beg;
378:}
379:
380:static void
381:prline(beg, lim, sep)
382:     char *beg;
383:     char *lim;
384:     char sep;
385:{
386:  if (out_file)
387:    printf("%s%c", filename, sep);
388:  if (out_line)
389:    {
390:      nlscan(beg);
391:      printf("%d%c", ++totalnl, sep);
392:      lastnl = lim;
393:    }
394:  if (out_byte)
395:    printf("%lu%c", totalcc + (beg - bufbeg), sep);
396:  fwrite(beg, 1, lim - beg, stdout);
397:  if (ferror(stdout))
398:    error("writing output", errno);
399:  lastout = lim;
400:}
401:
402:/* Print pending lines of trailing context prior to LIM. */
403:static void
404:prpending(lim)
405:     char *lim;
406:{
407:  char *nl;
408:
409:  if (!lastout)
410:    lastout = bufbeg;
411:  while (pending > 0 && lastout < lim)
412:    {
413:      --pending;
414:      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
415:	++nl;
416:      else
417:	nl = lim;
418:      prline(lastout, nl, '-');
419:    }
420:}
421:
422:/* Print the lines between BEG and LIM.  Deal with context crap.
423:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
424:static void
425:prtext(beg, lim, nlinesp)
426:     char *beg;
427:     char *lim;
428:     int *nlinesp;
429:{
430:  static int used;		/* avoid printing "--" before any output */
431:  char *bp, *p, *nl;
432:  int i, n;
433:
434:  if (!out_quiet && pending > 0)
435:    prpending(beg);
436:
437:  p = beg;
438:
439:  if (!out_quiet)
440:    {
441:      /* Deal with leading context crap. */
442:
443:      bp = lastout ? lastout : bufbeg;
444:      for (i = 0; i < out_before; ++i)
445:	if (p > bp)
446:	  do
447:	    --p;
448:	  while (p > bp && p[-1] != '\n');
449:
450:      /* We only print the "--" separator if our output is
451:	 discontiguous from the last output in the file. */
452:      if ((out_before || out_after) && used && p != lastout)
453:	puts("--");
454:
455:      while (p < beg)
456:	{
457:	  nl = memchr(p, '\n', beg - p);
458:	  prline(p, nl + 1, '-');
459:	  p = nl + 1;
460:	}
461:    }
462:
463:  if (nlinesp)
464:    {
465:      /* Caller wants a line count. */
466:      for (n = 0; p < lim; ++n)
467:	{
468:	  if ((nl = memchr(p, '\n', lim - p)) != 0)
469:	    ++nl;
470:	  else
471:	    nl = lim;
472:	  if (!out_quiet)
473:	    prline(p, nl, ':');
474:	  p = nl;
475:	}
476:      *nlinesp = n;
477:    }
478:  else
479:    if (!out_quiet)
480:      prline(beg, lim, ':');
481:
482:  pending = out_after;
483:  used = 1;
484:}
485:
486:/* Scan the specified portion of the buffer, matching lines (or
487:   between matching lines if OUT_INVERT is true).  Return a count of
488:   lines printed. */
489:static int
490:grepbuf(beg, lim)
491:     char *beg;
492:     char *lim;
493:{
494:  int nlines, n;
495:  register char *p, *b;
496:  char *endp;
497:
498:  nlines = 0;
499:  p = beg;
500:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
501:    {
502:      /* Avoid matching the empty line at the end of the buffer. */
503:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
504:	break;
505:      if (!out_invert)
506:	{
507:	  prtext(b, endp, (int *) 0);
508:	  nlines += 1;
509:	}
510:      else if (p < b)
511:	{
512:	  prtext(p, b, &n);
513:	  nlines += n;
514:	}
515:      p = endp;
516:    }
517:  if (out_invert && p < lim)
518:    {
519:      prtext(p, lim, &n);
520:      nlines += n;
521:    }
522:  return nlines;
523:}
524:
525:/* Search a given file.  Return a count of lines printed. */
526:static int
527:grep(fd)
528:     int fd;
529:{
530:  int nlines, i;
531:  size_t residue, save;
532:  char *beg, *lim;
533:
534:  reset(fd);
535:
536:  totalcc = 0;
537:  lastout = 0;
538:  totalnl = 0;
539:  pending = 0;
540:
541:  nlines = 0;
542:  residue = 0;
543:  save = 0;
544:
545:  for (;;)
546:    {
547:      if (fillbuf(save) < 0)
548:	{
549:	  error(filename, errno);
550:	  return nlines;
551:	}
552:      lastnl = bufbeg;
553:      if (lastout)
554:	lastout = bufbeg;
555:      if (buflim - bufbeg == save)
556:	break;
557:      beg = bufbeg + save - residue;
558:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
559:	;
560:      residue = buflim - lim;
561:      if (beg < lim)
562:	{
563:	  nlines += grepbuf(beg, lim);
564:	  if (pending)
565:	    prpending(lim);
566:	}
567:      i = 0;
568:      beg = lim;
569:      while (i < out_before && beg > bufbeg && beg != lastout)
570:	{
571:	  ++i;
572:	  do
573:	    --beg;
574:	  while (beg > bufbeg && beg[-1] != '\n');
575:	}
576:      if (beg != lastout)
577:	lastout = 0;
578:      save = residue + lim - beg;
579:      totalcc += buflim - bufbeg - save;
580:      if (out_line)
581:	nlscan(beg);
582:    }
583:  if (residue)
584:    {
585:      nlines += grepbuf(bufbeg + save - residue, buflim);
586:      if (pending)
587:	prpending(buflim);
588:    }
589:  return nlines;
590:}
591:
592:static char version[] = "GNU grep version 2.0";
593:
594:#define USAGE \
595:  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
596:
597:static void
598:usage()
599:{
600:  fprintf(stderr, USAGE, prog);
601:  exit(2);
602:}
603:
604:/* Go through the matchers vector and look for the specified matcher.
605:   If we find it, install it in compile and execute, and return 1.  */
606:int
607:setmatcher(name)
608:     char *name;
609:{
610:  int i;
611:
612:  for (i = 0; matchers[i].name; ++i)
613:    if (strcmp(name, matchers[i].name) == 0)
614:      {
615:	compile = matchers[i].compile;
616:	execute = matchers[i].execute;
617:	return 1;
618:      }
619:  return 0;
620:}  
621:
622:int
623:main(argc, argv)
624:     int argc;
625:     char *argv[];
626:{
627:  char *keys;
628:  size_t keycc, oldcc, keyalloc;
629:  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
630:  int opt, cc, desc, count, status;
631:  FILE *fp;
632:  extern char *optarg;
633:  extern int optind;
634:
635:  prog = argv[0];
636:  if (prog && strrchr(prog, '/'))
637:    prog = strrchr(prog, '/') + 1;
638:
639:  keys = NULL;
640:  keycc = 0;
641:  keyfound = 0;
642:  count_matches = 0;
643:  no_filenames = 0;
644:  list_files = 0;
645:  suppress_errors = 0;
646:  matcher = NULL;
647:
648:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
649:	 != EOF)
650:    switch (opt)
651:      {
652:      case '0':
653:      case '1':
654:      case '2':
655:      case '3':
656:      case '4':
657:      case '5':
658:      case '6':
659:      case '7':
660:      case '8':
661:      case '9':
662:	out_before = 10 * out_before + opt - '0';
663:	out_after = 10 * out_after + opt - '0';
664:	break;
665:      case 'A':
666:	out_after = atoi(optarg);
667:	if (out_after < 0)
668:	  usage();
669:	break;
670:      case 'B':
671:	out_before = atoi(optarg);
672:	if (out_before < 0)
673:	  usage();
674:	break;
675:      case 'C':
676:	out_before = out_after = 2;
677:	break;
678:      case 'E':
679:	if (matcher && strcmp(matcher, "egrep") != 0)
680:	  fatal("you may specify only one of -E, -F, or -G", 0);
681:	matcher = "posix-egrep";
682:	break;
683:      case 'F':
684:	if (matcher && strcmp(matcher, "fgrep") != 0)
685:	  fatal("you may specify only one of -E, -F, or -G", 0);;
686:	matcher = "fgrep";
687:	break;
688:      case 'G':
689:	if (matcher && strcmp(matcher, "grep") != 0)
690:	  fatal("you may specify only one of -E, -F, or -G", 0);
691:	matcher = "grep";
692:	break;
693:      case 'V':
694:	fprintf(stderr, "%s\n", version);
695:	break;
696:      case 'X':
697:	if (matcher)
698:	  fatal("matcher already specified", 0);
699:	matcher = optarg;
700:	break;
701:      case 'b':
702:	out_byte = 1;
703:	break;
704:      case 'c':
705:	out_quiet = 1;
706:	count_matches = 1;
707:	break;
708:      case 'e':
709:	cc = strlen(optarg);
710:	keys = xrealloc(keys, keycc + cc + 1);
711:	if (keyfound)
712:	  keys[keycc++] = '\n';
713:	strcpy(&keys[keycc], optarg);
714:	keycc += cc;
715:	keyfound = 1;
716:	break;
717:      case 'f':
718:	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
719:	if (!fp)
720:	  fatal(optarg, errno);
721:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
722:	  ;
723:	keys = xrealloc(keys, keyalloc);
724:	oldcc = keycc;
725:	if (keyfound)
726:	  keys[keycc++] = '\n';
727:	while (!feof(fp)
728:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
729:	  {
730:	    keycc += cc;
731:	    if (keycc == keyalloc)
732:	      keys = xrealloc(keys, keyalloc *= 2);
733:	  }
734:	if (fp != stdin)
735:	  fclose(fp);
736:	/* Nuke the final newline to avoid matching a null string. */
737:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
738:	  --keycc;
739:	keyfound = 1;
740:	break;
741:      case 'h':
742:	no_filenames = 1;
743:	break;
744:      case 'i':
745:      case 'y':			/* For old-timers . . . */
746:	match_icase = 1;
747:	break;
748:      case 'L':
749:	/* Like -l, except list files that don't contain matches.
750:	   Inspired by the same option in Hume's gre. */
751:	out_quiet = 1;
752:	list_files = -1;
753:	break;
754:      case 'l':
755:	out_quiet = 1;
756:	list_files = 1;
757:	break;
758:      case 'n':
759:	out_line = 1;
760:	break;
761:      case 'q':
762:	out_quiet = 1;
763:	break;
764:      case 's':
765:	suppress_errors = 1;
766:	break;
767:      case 'v':
768:	out_invert = 1;
769:	break;
770:      case 'w':
771:	match_words = 1;
772:	break;
773:      case 'x':
774:	match_lines = 1;
775:	break;
776:      default:
777:	usage();
778:	break;
779:      }
780:
781:  if (!keyfound)
782:    if (optind < argc)
783:      {
784:	keys = argv[optind++];
785:	keycc = strlen(keys);
786:      }
787:    else
788:      usage();
789:
790:  if (!matcher)
791:    matcher = prog;
792:
793:  if (!setmatcher(matcher) && !setmatcher("default"))
794:    abort();
795:
796:  (*compile)(keys, keycc);
797:
798:  if (argc - optind > 1 && !no_filenames)
799:    out_file = 1;
800:
801:  status = 1;
802:
803:  if (optind < argc)
804:    while (optind < argc)
805:      {
806:	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
807:	if (desc < 0)
808:	  {
809:	    if (!suppress_errors)
810:	      error(argv[optind], errno);
811:	  }
812:	else
813:	  {
814:	    filename = desc == 0 ? "(standard input)" : argv[optind];
815:	    count = grep(desc);
816:	    if (count_matches)
817:	      {
818:		if (out_file)
819:		  printf("%s:", filename);
820:		printf("%d\n", count);
821:	      }
822:	    if (count)
823:	      {
824:		status = 0;
825:		if (list_files == 1)
826:		  printf("%s\n", filename);
827:	      }
828:	    else if (list_files == -1)
829:	      printf("%s\n", filename);
830:	  }
831:	if (desc != 0)
832:	  close(desc);
833:	++optind;
834:      }
835:  else
836:    {
837:      filename = "(standard input)";
838:      count = grep(0);
839:      if (count_matches)
840:	printf("%d\n", count);
841:      if (count)
842:	{
843:	  status = 0;
844:	  if (list_files == 1)
845:	    printf("(standard input)\n");
846:	}
847:      else if (list_files == -1)
848:	printf("(standard input)\n");
849:    }
850:
851:  exit(errseen ? 2 : status);
852:}
853:/* Getopt for GNU.
854:   NOTE: getopt is now part of the C library, so if you don't know what
855:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
856:   before changing it!
857:
858:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
859:   	Free Software Foundation, Inc.
860:
861:   This program is free software; you can redistribute it and/or modify it
862:   under the terms of the GNU General Public License as published by the
863:   Free Software Foundation; either version 2, or (at your option) any
864:   later version.
865:
866:   This program is distributed in the hope that it will be useful,
867:   but WITHOUT ANY WARRANTY; without even the implied warranty of
868:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
869:   GNU General Public License for more details.
870:
871:   You should have received a copy of the GNU General Public License
872:   along with this program; if not, write to the Free Software
873:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
874:
875:/* NOTE!!!  AIX requires this to be the first thing in the file.
876:   Do not put ANYTHING before it!  */
877:#if !defined (__GNUC__) && defined (_AIX)
878: #pragma alloca
879:#endif
880:
881:#ifdef HAVE_CONFIG_H
883:#define flag_config 1
884:#endif
885:
886:#ifdef __GNUC__
887:#define alloca __builtin_alloca
888:#else /* not __GNUC__ */
889:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
891:#define flag_alloca 1
892:#else
893:#ifndef _AIX
894:char *alloca ();
895:#endif
896:#endif /* alloca.h */
897:#endif /* not __GNUC__ */
898:
899:#if !__STDC__ && !defined(const) && IN_GCC
900:#define const
901:#endif
902:
903:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
904:#ifndef _NO_PROTO
905:#define _NO_PROTO
906:#endif
907:
909:
910:/* Comment out all this code if we are using the GNU C Library, and are not
911:   actually compiling the library itself.  This code is part of the GNU C
913:   and linking in this code is a waste when using the GNU C library
914:   (especially if it is a shared library).  Rather than having every GNU
915:   program understand `configure --with-gnu-libc' and omit the object files,
916:   it is simpler to just do this in the source for each such file.  */
917:
918:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
919:
920:
922:   to get __GNU_LIBRARY__ defined.  */
923:#ifdef	__GNU_LIBRARY__
924:#undef	alloca
926:   contain conflicting prototypes for getopt.  */
927:#if flag_stdlib==0   
929:#define flag_stdlib 1
930:#endif
931:#else	/* Not GNU C library.  */
932:#define	__alloca	alloca
933:#endif	/* GNU C library.  */
934:
935:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
936:   long-named option.  Because this is not POSIX.2 compliant, it is
937:   being phased out.  */
938:/* #define GETOPT_COMPAT */
939:
940:/* This version of `getopt' appears to the caller like standard Unix `getopt'
941:   but it behaves differently for the user, since it allows the user
942:   to intersperse the options with the other arguments.
943:
944:   As `getopt' works, it permutes the elements of ARGV so that,
945:   when it is done, all the options precede everything else.  Thus
946:   all application programs are extended to handle flexible argument order.
947:
948:   Setting the environment variable POSIXLY_CORRECT disables permutation.
949:   Then the behavior is completely standard.
950:
951:   GNU application programs can use a third alternative mode in which
952:   they can distinguish the relative order of options and other arguments.  */
953:
955:
956:/* For communication from `getopt' to the caller.
957:   When `getopt' finds an option that takes an argument,
958:   the argument value is returned here.
959:   Also, when `ordering' is RETURN_IN_ORDER,
960:   each non-option ARGV-element is returned here.  */
961:
962:char *optarg = 0;
963:
964:/* Index in ARGV of the next element to be scanned.
965:   This is used for communication to and from the caller
966:   and for communication between successive calls to `getopt'.
967:
968:   On entry to `getopt', zero means this is the first call; initialize.
969:
970:   When `getopt' returns EOF, this is the index of the first of the
971:   non-option elements that the caller should itself scan.
972:
973:   Otherwise, `optind' communicates from one call to the next
974:   how much of ARGV has been scanned so far.  */
975:
976:/* XXX 1003.2 says this must be 1 before any call.  */
977:int optind = 0;
978:
979:/* The next char to be scanned in the option-element
980:   in which the last option character we returned was found.
981:   This allows us to pick up the scan where we left off.
982:
983:   If this is zero, or a null string, it means resume the scan
984:   by advancing to the next ARGV-element.  */
985:
986:static char *nextchar;
987:
988:/* Callers store zero here to inhibit the error message
989:   for unrecognized options.  */
990:
991:int opterr = 1;
992:
993:/* Set to an option character which was unrecognized.
994:   This must be initialized on some systems to avoid linking in the
995:   system's own getopt implementation.  */
996:
997:int optopt = '?';
998:
999:/* Describe how to deal with options that follow non-option ARGV-elements.
1000:
1001:   If the caller did not specify anything,
1002:   the default is REQUIRE_ORDER if the environment variable
1003:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
1004:
1005:   REQUIRE_ORDER means don't recognize them as options;
1006:   stop option processing when the first non-option is seen.
1007:   This is what Unix does.
1008:   This mode of operation is selected by either setting the environment
1009:   variable POSIXLY_CORRECT, or using `+' as the first character
1010:   of the list of option characters.
1011:
1012:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
1013:   so that eventually all the non-options are at the end.  This allows options
1014:   to be given in any order, even with programs that were not written to
1015:   expect this.
1016:
1017:   RETURN_IN_ORDER is an option available to programs that were written
1018:   to expect options and other ARGV-elements in any order and that care about
1019:   the ordering of the two.  We describe each non-option ARGV-element
1020:   as if it were the argument of an option with character code 1.
1021:   Using `-' as the first character of the list of option characters
1022:   selects this mode of operation.
1023:
1024:   The special argument `--' forces an end of option-scanning regardless
1025:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
1026:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
1027:
1028:static enum
1029:{
1030:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
1031:} ordering;
1032:
1033:#ifdef	__GNU_LIBRARY__
1034:/* We want to avoid inclusion of string.h with non-GNU libraries
1035:   because there are many ways it can cause trouble.
1036:   On some systems, it contains special magic macros that don't work
1037:   in GCC.  */
1038:#if flag_string==0   
1040:#define flag_string 1
1041:#endif
1042:#define	my_index	strchr
1043:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
1044:#else
1045:
1046:/* Avoid depending on library functions or files
1047:   whose names are inconsistent.  */
1048:
1049:char *getenv ();
1050:
1051:static char *
1052:my_index (str, chr)
1053:     const char *str;
1054:     int chr;
1055:{
1056:  while (*str)
1057:    {
1058:      if (*str == chr)
1059:	return (char *) str;
1060:      str++;
1061:    }
1062:  return 0;
1063:}
1064:
1065:static void
1066:my_bcopy (from, to, size)
1067:     const char *from;
1068:     char *to;
1069:     int size;
1070:{
1071:  int i;
1072:  for (i = 0; i < size; i++)
1073:    to[i] = from[i];
1074:}
1075:#endif				/* GNU C library.  */
1076:
1077:/* Handle permutation of arguments.  */
1078:
1079:/* Describe the part of ARGV that contains non-options that have
1080:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
1081:   `last_nonopt' is the index after the last of them.  */
1082:
1083:static int first_nonopt;
1084:static int last_nonopt;
1085:
1086:/* Exchange two adjacent subsequences of ARGV.
1087:   One subsequence is elements [first_nonopt,last_nonopt)
1088:   which contains all the non-options that have been skipped so far.
1089:   The other is elements [last_nonopt,optind), which contains all
1090:   the options processed since those non-options were skipped.
1091:
1092:   `first_nonopt' and `last_nonopt' are relocated so that they describe
1093:   the new indices of the non-options in ARGV after they are moved.  */
1094:
1095:static void
1096:exchange (argv)
1097:     char **argv;
1098:{
1099:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
1100:  char **temp = (char **) __alloca (nonopts_size);
1101:
1102:  /* Interchange the two blocks of data in ARGV.  */
1103:
1104:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
1105:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
1106:	    (optind - last_nonopt) * sizeof (char *));
1107:  my_bcopy ((char *) temp,
1108:	    (char *) &argv[first_nonopt + optind - last_nonopt],
1109:	    nonopts_size);
1110:
1111:  /* Update records for the slots the non-options now occupy.  */
1112:
1113:  first_nonopt += (optind - last_nonopt);
1114:  last_nonopt = optind;
1115:}
1116:
1117:/* Scan elements of ARGV (whose length is ARGC) for option characters
1118:   given in OPTSTRING.
1119:
1120:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
1121:   then it is an option element.  The characters of this element
1122:   (aside from the initial '-') are option characters.  If `getopt'
1123:   is called repeatedly, it returns successively each of the option characters
1124:   from each of the option elements.
1125:
1126:   If `getopt' finds another option character, it returns that character,
1127:   updating `optind' and `nextchar' so that the next call to `getopt' can
1128:   resume the scan with the following option character or ARGV-element.
1129:
1130:   If there are no more option characters, `getopt' returns `EOF'.
1131:   Then `optind' is the index in ARGV of the first ARGV-element
1132:   that is not an option.  (The ARGV-elements have been permuted
1133:   so that those that are not options now come last.)
1134:
1135:   OPTSTRING is a string containing the legitimate option characters.
1136:   If an option character is seen that is not listed in OPTSTRING,
1137:   return '?' after printing an error message.  If you set `opterr' to
1138:   zero, the error message is suppressed but we still return '?'.
1139:
1140:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
1141:   so the following text in the same ARGV-element, or the text of the following
1142:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
1143:   wants an optional arg; if there is text in the current ARGV-element,
1144:   it is returned in `optarg', otherwise `optarg' is set to zero.
1145:
1146:   If OPTSTRING starts with `-' or `+', it requests different methods of
1147:   handling the non-option ARGV-elements.
1148:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
1149:
1150:   Long-named options begin with `--' instead of `-'.
1151:   Their names may be abbreviated as long as the abbreviation is unique
1152:   or is an exact match for some defined option.  If they have an
1153:   argument, it follows the option name in the same ARGV-element, separated
1154:   from the option name by a `=', or else the in next ARGV-element.
1155:   When `getopt' finds a long-named option, it returns 0 if that option's
1156:   `flag' field is nonzero, the value of the option's `val' field
1157:   if the `flag' field is zero.
1158:
1159:   The elements of ARGV aren't really const, because we permute them.
1160:   But we pretend they're const in the prototype to be compatible
1161:   with other systems.
1162:
1163:   LONGOPTS is a vector of `struct option' terminated by an
1164:   element containing a name which is zero.
1165:
1166:   LONGIND returns the index in LONGOPT of the long-named option found.
1167:   It is only valid when a long-named option has been found by the most
1168:   recent call.
1169:
1170:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
1171:   long-named options.  */
1172:
1173:int
1174:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
1175:     int argc;
1176:     char *const *argv;
1177:     const char *optstring;
1178:     const struct option *longopts;
1179:     int *longind;
1180:     int long_only;
1181:{
1182:  int option_index;
1183:
1184:  optarg = 0;
1185:
1186:  /* Initialize the internal data when the first call is made.
1187:     Start processing options with ARGV-element 1 (since ARGV-element 0
1188:     is the program name); the sequence of previously skipped
1189:     non-option ARGV-elements is empty.  */
1190:
1191:  if (optind == 0)
1192:    {
1193:      first_nonopt = last_nonopt = optind = 1;
1194:
1195:      nextchar = NULL;
1196:
1197:      /* Determine how to handle the ordering of options and nonoptions.  */
1198:
1199:      if (optstring[0] == '-')
1200:	{
1201:	  ordering = RETURN_IN_ORDER;
1202:	  ++optstring;
1203:	}
1204:      else if (optstring[0] == '+')
1205:	{
1206:	  ordering = REQUIRE_ORDER;
1207:	  ++optstring;
1208:	}
1209:      else if (getenv ("POSIXLY_CORRECT") != NULL)
1210:	ordering = REQUIRE_ORDER;
1211:      else
1212:	ordering = PERMUTE;
1213:    }
1214:
1215:  if (nextchar == NULL || *nextchar == '\0')
1216:    {
1217:      if (ordering == PERMUTE)
1218:	{
1219:	  /* If we have just processed some options following some non-options,
1220:	     exchange them so that the options come first.  */
1221:
1222:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
1223:	    exchange ((char **) argv);
1224:	  else if (last_nonopt != optind)
1225:	    first_nonopt = optind;
1226:
1227:	  /* Now skip any additional non-options
1228:	     and extend the range of non-options previously skipped.  */
1229:
1230:	  while (optind < argc
1231:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
1232:#ifdef GETOPT_COMPAT
1233:		 && (longopts == NULL
1234:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
1235:#endif				/* GETOPT_COMPAT */
1236:		 )
1237:	    optind++;
1238:	  last_nonopt = optind;
1239:	}
1240:
1241:      /* Special ARGV-element `--' means premature end of options.
1242:	 Skip it like a null option,
1243:	 then exchange with previous non-options as if it were an option,
1244:	 then skip everything else like a non-option.  */
1245:
1246:      if (optind != argc && !strcmp (argv[optind], "--"))
1247:	{
1248:	  optind++;
1249:
1250:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
1251:	    exchange ((char **) argv);
1252:	  else if (first_nonopt == last_nonopt)
1253:	    first_nonopt = optind;
1254:	  last_nonopt = argc;
1255:
1256:	  optind = argc;
1257:	}
1258:
1259:      /* If we have done all the ARGV-elements, stop the scan
1260:	 and back over any non-options that we skipped and permuted.  */
1261:
1262:      if (optind == argc)
1263:	{
1264:	  /* Set the next-arg-index to point at the non-options
1265:	     that we previously skipped, so the caller will digest them.  */
1266:	  if (first_nonopt != last_nonopt)
1267:	    optind = first_nonopt;
1268:	  return EOF;
1269:	}
1270:
1271:      /* If we have come to a non-option and did not permute it,
1272:	 either stop the scan or describe it to the caller and pass it by.  */
1273:
1274:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
1275:#ifdef GETOPT_COMPAT
1276:	  && (longopts == NULL
1277:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
1278:#endif				/* GETOPT_COMPAT */
1279:	  )
1280:	{
1281:	  if (ordering == REQUIRE_ORDER)
1282:	    return EOF;
1283:	  optarg = argv[optind++];
1284:	  return 1;
1285:	}
1286:
1287:      /* We have found another option-ARGV-element.
1288:	 Start decoding its characters.  */
1289:
1290:      nextchar = (argv[optind] + 1
1291:		  + (longopts != NULL && argv[optind][1] == '-'));
1292:    }
1293:
1294:  if (longopts != NULL
1295:      && ((argv[optind][0] == '-'
1296:	   && (argv[optind][1] == '-' || long_only))
1297:#ifdef GETOPT_COMPAT
1298:	  || argv[optind][0] == '+'
1299:#endif				/* GETOPT_COMPAT */
1300:	  ))
1301:    {
1302:      const struct option *p;
1303:      char *s = nextchar;
1304:      int exact = 0;
1305:      int ambig = 0;
1306:      const struct option *pfound = NULL;
1307:      int indfound;
1308:
1309:      while (*s && *s != '=')
1310:	s++;
1311:
1312:      /* Test all options for either exact match or abbreviated matches.  */
1313:      for (p = longopts, option_index = 0; p->name;
1314:	   p++, option_index++)
1315:	if (!strncmp (p->name, nextchar, s - nextchar))
1316:	  {
1317:	    if (s - nextchar == strlen (p->name))
1318:	      {
1319:		/* Exact match found.  */
1320:		pfound = p;
1321:		indfound = option_index;
1322:		exact = 1;
1323:		break;
1324:	      }
1325:	    else if (pfound == NULL)
1326:	      {
1327:		/* First nonexact match found.  */
1328:		pfound = p;
1329:		indfound = option_index;
1330:	      }
1331:	    else
1332:	      /* Second nonexact match found.  */
1333:	      ambig = 1;
1334:	  }
1335:
1336:      if (ambig && !exact)
1337:	{
1338:	  if (opterr)
1339:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
1340:		     argv[0], argv[optind]);
1341:	  nextchar += strlen (nextchar);
1342:	  optind++;
1343:	  return '?';
1344:	}
1345:
1346:      if (pfound != NULL)
1347:	{
1348:	  option_index = indfound;
1349:	  optind++;
1350:	  if (*s)
1351:	    {
1352:	      /* Don't test has_arg with >, because some C compilers don't
1353:		 allow it to be used on enums.  */
1354:	      if (pfound->has_arg)
1355:		optarg = s + 1;
1356:	      else
1357:		{
1358:		  if (opterr)
1359:		    {
1360:		      if (argv[optind - 1][1] == '-')
1361:			/* --option */
1362:			fprintf (stderr,
1363:				 "%s: option `--%s' doesn't allow an argument\n",
1364:				 argv[0], pfound->name);
1365:		      else
1366:			/* +option or -option */
1367:			fprintf (stderr,
1368:			     "%s: option `%c%s' doesn't allow an argument\n",
1369:			     argv[0], argv[optind - 1][0], pfound->name);
1370:		    }
1371:		  nextchar += strlen (nextchar);
1372:		  return '?';
1373:		}
1374:	    }
1375:	  else if (pfound->has_arg == 1)
1376:	    {
1377:	      if (optind < argc)
1378:		optarg = argv[optind++];
1379:	      else
1380:		{
1381:		  if (opterr)
1382:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
1383:			     argv[0], argv[optind - 1]);
1384:		  nextchar += strlen (nextchar);
1385:		  return optstring[0] == ':' ? ':' : '?';
1386:		}
1387:	    }
1388:	  nextchar += strlen (nextchar);
1389:	  if (longind != NULL)
1390:	    *longind = option_index;
1391:	  if (pfound->flag)
1392:	    {
1393:	      *(pfound->flag) = pfound->val;
1394:	      return 0;
1395:	    }
1396:	  return pfound->val;
1397:	}
1398:      /* Can't find it as a long option.  If this is not getopt_long_only,
1399:	 or the option starts with '--' or is not a valid short
1400:	 option, then it's an error.
1401:	 Otherwise interpret it as a short option.  */
1402:      if (!long_only || argv[optind][1] == '-'
1403:#ifdef GETOPT_COMPAT
1404:	  || argv[optind][0] == '+'
1405:#endif				/* GETOPT_COMPAT */
1406:	  || my_index (optstring, *nextchar) == NULL)
1407:	{
1408:	  if (opterr)
1409:	    {
1410:	      if (argv[optind][1] == '-')
1411:		/* --option */
1412:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
1413:			 argv[0], nextchar);
1414:	      else
1415:		/* +option or -option */
1416:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
1417:			 argv[0], argv[optind][0], nextchar);
1418:	    }
1419:	  nextchar = (char *) "";
1420:	  optind++;
1421:	  return '?';
1422:	}
1423:    }
1424:
1425:  /* Look at and handle the next option-character.  */
1426:
1427:  {
1428:    char c = *nextchar++;
1429:    char *temp = my_index (optstring, c);
1430:
1431:    /* Increment `optind' when we start to process its last character.  */
1432:    if (*nextchar == '\0')
1433:      ++optind;
1434:
1435:    if (temp == NULL || c == ':')
1436:      {
1437:	if (opterr)
1438:	  {
1439:#if 0
1440:	    if (c < 040 || c >= 0177)
1441:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
1442:		       argv[0], c);
1443:	    else
1444:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
1445:#else
1446:	    /* 1003.2 specifies the format of this message.  */
1447:	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
1448:#endif
1449:	  }
1450:	optopt = c;
1451:	return '?';
1452:      }
1453:    if (temp[1] == ':')
1454:      {
1455:	if (temp[2] == ':')
1456:	  {
1457:	    /* This is an option that accepts an argument optionally.  */
1458:	    if (*nextchar != '\0')
1459:	      {
1460:		optarg = nextchar;
1461:		optind++;
1462:	      }
1463:	    else
1464:	      optarg = 0;
1465:	    nextchar = NULL;
1466:	  }
1467:	else
1468:	  {
1469:	    /* This is an option that requires an argument.  */
1470:	    if (*nextchar != '\0')
1471:	      {
1472:		optarg = nextchar;
1473:		/* If we end this ARGV-element by taking the rest as an arg,
1474:		   we must advance to the next element now.  */
1475:		optind++;
1476:	      }
1477:	    else if (optind == argc)
1478:	      {
1479:		if (opterr)
1480:		  {
1481:#if 0
1482:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
1483:			     argv[0], c);
1484:#else
1485:		    /* 1003.2 specifies the format of this message.  */
1486:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
1487:			     argv[0], c);
1488:#endif
1489:		  }
1490:		optopt = c;
1491:		if (optstring[0] == ':')
1492:		  c = ':';
1493:		else
1494:		  c = '?';
1495:	      }
1496:	    else
1497:	      /* We already incremented `optind' once;
1498:		 increment it again when taking next ARGV-elt as argument.  */
1499:	      optarg = argv[optind++];
1500:	    nextchar = NULL;
1501:	  }
1502:      }
1503:    return c;
1504:  }
1505:}
1506:
1507:int
1508:getopt (argc, argv, optstring)
1509:     int argc;
1510:     char *const *argv;
1511:     const char *optstring;
1512:{
1513:  return _getopt_internal (argc, argv, optstring,
1514:			   (const struct option *) 0,
1515:			   (int *) 0,
1516:			   0);
1517:}
1518:
1519:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
1520:
1521:#ifdef TEST
1522:
1523:/* Compile with -DTEST to make an executable for use in testing
1524:   the above definition of `getopt'.  */
1525:
1526:int
1527:main (argc, argv)
1528:     int argc;
1529:     char **argv;
1530:{
1531:  int c;
1532:  int digit_optind = 0;
1533:
1534:  while (1)
1535:    {
1536:      int this_option_optind = optind ? optind : 1;
1537:
1538:      c = getopt (argc, argv, "abc:d:0123456789");
1539:      if (c == EOF)
1540:	break;
1541:
1542:      switch (c)
1543:	{
1544:	case '0':
1545:	case '1':
1546:	case '2':
1547:	case '3':
1548:	case '4':
1549:	case '5':
1550:	case '6':
1551:	case '7':
1552:	case '8':
1553:	case '9':
1554:	  if (digit_optind != 0 && digit_optind != this_option_optind)
1555:	    printf ("digits occur in two different argv-elements.\n");
1556:	  digit_optind = this_option_optind;
1557:	  printf ("option %c\n", c);
1558:	  break;
1559:
1560:	case 'a':
1561:	  printf ("option a\n");
1562:	  break;
1563:
1564:	case 'b':
1565:	  printf ("option b\n");
1566:	  break;
1567:
1568:	case 'c':
1569:	  printf ("option c with value `%s'\n", optarg);
1570:	  break;
1571:
1572:	case '?':
1573:	  break;
1574:
1575:	default:
1576:	  printf ("?? getopt returned character code 0%o ??\n", c);
1577:	}
1578:    }
1579:
1580:  if (optind < argc)
1581:    {
1582:      printf ("non-option ARGV-elements: ");
1583:      while (optind < argc)
1584:	printf ("%s ", argv[optind++]);
1585:      printf ("\n");
1586:    }
1587:
1588:  exit (0);
1589:}
1590:
1591:#endif /* TEST */
1592:/* Extended regular expression matching and search library,
1593:   version 0.12.
1594:   (Implements POSIX draft P10003.2/D11.2, except for
1595:   internationalization features.)
1596:
1597:   Copyright (C) 1993 Free Software Foundation, Inc.
1598:
1599:   This program is free software; you can redistribute it and/or modify
1600:   it under the terms of the GNU General Public License as published by
1601:   the Free Software Foundation; either version 2, or (at your option)
1602:   any later version.
1603:
1604:   This program is distributed in the hope that it will be useful,
1605:   but WITHOUT ANY WARRANTY; without even the implied warranty of
1606:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
1607:   GNU General Public License for more details.
1608:
1609:   You should have received a copy of the GNU General Public License
1610:   along with this program; if not, write to the Free Software
1611:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
1612:
1613:/* AIX requires this to be the first thing in the file. */
1614:#if defined (_AIX) && !defined (REGEX_MALLOC)
1615:  #pragma alloca
1616:#endif
1617:
1618:#define _GNU_SOURCE
1619:
1621:#if flag_systypes==0
1623:#define flag_systypes 1
1624:#endif
1625:
1626:#ifdef HAVE_CONFIG_H
1627:#if flag_config==0
1629:#define flag_config 1
1630:#endif
1631:#endif
1632:
1633:/* The `emacs' switch turns on certain matching commands
1634:   that make sense only in Emacs. */
1635:#ifdef emacs
1636:
1640:
1641:/* Emacs uses `NULL' as a predicate.  */
1642:#undef NULL
1643:
1644:#else  /* not emacs */
1645:
1646:/* We used to test for `BSTRING' here, but only GCC and Emacs define
1647:   `BSTRING', as far as I know, and neither of them use this code.  */
1648:#if HAVE_STRING_H || STDC_HEADERS
1649:#if flag_string==0
1651:#define flag_string 1
1652:#endif
1653:#ifndef bcmp
1654:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
1655:#endif
1656:#ifndef bcopy
1657:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
1658:#endif
1659:#ifndef bzero
1660:#define bzero(s, n)	memset ((s), 0, (n))
1661:#endif
1662:#else
1663:#if flag_strings==0
1665:#define flag_strings 1
1666:#endif
1667:#endif
1668:
1669:#ifdef STDC_HEADERS
1670:#if flag_stdlib==0 
1672:#define flag_stdlib 1
1673:#endif
1674:#else
1675:char *malloc ();
1676:char *realloc ();
1677:#endif
1678:
1679:
1680:/* Define the syntax stuff for \<, \>, etc.  */
1681:
1682:/* This must be nonzero for the wordchar and notwordchar pattern
1683:   commands in re_match_2.  */
1684:#ifndef Sword 
1685:#define Sword 1
1686:#endif
1687:
1688:#ifdef SYNTAX_TABLE
1689:
1690:extern char *re_syntax_table;
1691:
1692:#else /* not SYNTAX_TABLE */
1693:
1694:/* How many characters in the character set.  */
1695:#define CHAR_SET_SIZE 256
1696:
1697:static char re_syntax_table[CHAR_SET_SIZE];
1698:
1699:static void
1700:init_syntax_once ()
1701:{
1702:   register int c;
1703:   static int done = 0;
1704:
1705:   if (done)
1706:     return;
1707:
1708:   bzero (re_syntax_table, sizeof re_syntax_table);
1709:
1710:   for (c = 'a'; c <= 'z'; c++)
1711:     re_syntax_table[c] = Sword;
1712:
1713:   for (c = 'A'; c <= 'Z'; c++)
1714:     re_syntax_table[c] = Sword;
1715:
1716:   for (c = '0'; c <= '9'; c++)
1717:     re_syntax_table[c] = Sword;
1718:
1719:   re_syntax_table['_'] = Sword;
1720:
1721:   done = 1;
1722:}
1723:
1724:#endif /* not SYNTAX_TABLE */
1725:
1726:#define SYNTAX(c) re_syntax_table[c]
1727:
1728:#endif /* not emacs */
1729:
1730:/* Get the interface, including the syntax bits.  */
1732:
1733:/* isalpha etc. are used for the character classes.  */
1735:
1736:/* Jim Meyering writes:
1737:
1738:   "... Some ctype macros are valid only for character codes that
1739:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
1740:   using /bin/cc or gcc but without giving an ansi option).  So, all
1741:   ctype uses should be through macros like ISPRINT...  If
1742:   STDC_HEADERS is defined, then autoconf has verified that the ctype
1743:   macros don't need to be guarded with references to isascii. ...
1744:   Defining isascii to 1 should let any compiler worth its salt
1745:   eliminate the && through constant folding."  */
1746:#if ! defined (isascii) || defined (STDC_HEADERS)
1747:#undef isascii
1748:#define isascii(c) 1
1749:#endif
1750:
1751:#ifdef isblank
1752:#define ISBLANK(c) (isascii (c) && isblank (c))
1753:#else
1754:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
1755:#endif
1756:#ifdef isgraph
1757:#define ISGRAPH(c) (isascii (c) && isgraph (c))
1758:#else
1759:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
1760:#endif
1761:
1762:#define ISPRINT(c) (isascii (c) && isprint (c))
1763:#define ISDIGIT(c) (isascii (c) && isdigit (c))
1764:#define ISALNUM(c) (isascii (c) && isalnum (c))
1765:#define ISALPHA(c) (isascii (c) && isalpha (c))
1766:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
1767:#define ISLOWER(c) (isascii (c) && islower (c))
1768:#define ISPUNCT(c) (isascii (c) && ispunct (c))
1769:#define ISSPACE(c) (isascii (c) && isspace (c))
1770:#define ISUPPER(c) (isascii (c) && isupper (c))
1771:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
1772:
1773:#ifndef NULL
1774:#define NULL 0
1775:#endif
1776:
1777:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
1778:   since ours (we hope) works properly with all combinations of
1779:   machines, compilers, `char' and `unsigned char' argument types.
1780:   (Per Bothner suggested the basic approach.)  */
1781:#undef SIGN_EXTEND_CHAR
1782:#if __STDC__
1783:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
1784:#else  /* not __STDC__ */
1785:/* As in Harbison and Steele.  */
1786:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
1787:#endif
1788:
1789:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
1790:   use `alloca' instead of `malloc'.  This is because using malloc in
1791:   re_search* or re_match* could cause memory leaks when C-g is used in
1792:   Emacs; also, malloc is slower and causes storage fragmentation.  On
1793:   the other hand, malloc is more portable, and easier to debug.  
1794:   
1795:   Because we sometimes use alloca, some routines have to be macros,
1796:   not functions -- `alloca'-allocated space disappears at the end of the
1797:   function it is called in.  */
1798:
1799:#ifdef REGEX_MALLOC
1800:
1801:#define REGEX_ALLOCATE malloc
1802:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
1803:
1804:#else /* not REGEX_MALLOC  */
1805:
1806:/* Emacs already defines alloca, sometimes.  */
1807:#ifndef alloca
1808:
1809:/* Make alloca work the best possible way.  */
1810:#ifdef __GNUC__
1811:#define alloca __builtin_alloca
1812:#else /* not __GNUC__ */
1813:#if HAVE_ALLOCA_H
1814:#if flag_alloca==0
1816:#define flag_alloca 1
1817:#endif 
1818:#else /* not __GNUC__ or HAVE_ALLOCA_H */
1819:#ifndef _AIX /* Already did AIX, up at the top.  */
1820:char *alloca ();
1821:#endif /* not _AIX */
1822:#endif /* not HAVE_ALLOCA_H */ 
1823:#endif /* not __GNUC__ */
1824:
1825:#endif /* not alloca */
1826:
1827:#define REGEX_ALLOCATE alloca
1828:
1829:/* Assumes a `char *destination' variable.  */
1830:#define REGEX_REALLOCATE(source, osize, nsize)				\
1831:  (destination = (char *) alloca (nsize),				\
1832:   bcopy (source, destination, osize),					\
1833:   destination)
1834:
1835:#endif /* not REGEX_MALLOC */
1836:
1837:
1838:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
1839:   `string1' or just past its end.  This works if PTR is NULL, which is
1840:   a good thing.  */
1841:#define FIRST_STRING_P(ptr) 					\
1842:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
1843:
1844:/* (Re)Allocate N items of type T using malloc, or fail.  */
1845:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
1846:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
1847:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
1848:
1849:#define BYTEWIDTH 8 /* In bits.  */
1850:
1851:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
1852:
1853:#undef MAX               /****** added later *******/
1854:#define MAX(a, b) ((a) > (b) ? (a) : (b))
1855:#define MIN(a, b) ((a) < (b) ? (a) : (b))
1856:
1857:typedef char boolean;
1858:#define false 0
1859:#define true 1
1860:
1861:/* These are the command codes that appear in compiled regular
1862:   expressions.  Some opcodes are followed by argument bytes.  A
1863:   command code can specify any interpretation whatsoever for its
1864:   arguments.  Zero bytes may appear in the compiled regular expression.
1865:
1866:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
1867:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
1868:   `exactn' we use here must also be 1.  */
1869:
1870:typedef enum
1871:{
1872:  no_op = 0,
1873:
1874:        /* Followed by one byte giving n, then by n literal bytes.  */
1875:  exactn = 1,
1876:
1877:        /* Matches any (more or less) character.  */
1878:  anychar,
1879:
1880:        /* Matches any one char belonging to specified set.  First
1881:           following byte is number of bitmap bytes.  Then come bytes
1882:           for a bitmap saying which chars are in.  Bits in each byte
1883:           are ordered low-bit-first.  A character is in the set if its
1884:           bit is 1.  A character too large to have a bit in the map is
1885:           automatically not in the set.  */
1886:  charset,
1887:
1888:        /* Same parameters as charset, but match any character that is
1889:           not one of those specified.  */
1890:  charset_not,
1891:
1892:        /* Start remembering the text that is matched, for storing in a
1893:           register.  Followed by one byte with the register number, in
1894:           the range 0 to one less than the pattern buffer's re_nsub
1895:           field.  Then followed by one byte with the number of groups
1896:           inner to this one.  (This last has to be part of the
1897:           start_memory only because we need it in the on_failure_jump
1898:           of re_match_2.)  */
1899:  start_memory,
1900:
1901:        /* Stop remembering the text that is matched and store it in a
1902:           memory register.  Followed by one byte with the register
1903:           number, in the range 0 to one less than `re_nsub' in the
1904:           pattern buffer, and one byte with the number of inner groups,
1905:           just like `start_memory'.  (We need the number of inner
1906:           groups here because we don't have any easy way of finding the
1907:           corresponding start_memory when we're at a stop_memory.)  */
1908:  stop_memory,
1909:
1910:        /* Match a duplicate of something remembered. Followed by one
1911:           byte containing the register number.  */
1912:  duplicate,
1913:
1914:        /* Fail unless at beginning of line.  */
1915:  begline,
1916:
1917:        /* Fail unless at end of line.  */
1918:  endline,
1919:
1920:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
1921:           of string to be matched (if not).  */
1922:  begbuf,
1923:
1924:        /* Analogously, for end of buffer/string.  */
1925:  endbuf,
1926: 
1927:        /* Followed by two byte relative address to which to jump.  */
1928:  jump, 
1929:
1930:	/* Same as jump, but marks the end of an alternative.  */
1931:  jump_past_alt,
1932:
1933:        /* Followed by two-byte relative address of place to resume at
1934:           in case of failure.  */
1935:  on_failure_jump,
1936:	
1937:        /* Like on_failure_jump, but pushes a placeholder instead of the
1938:           current string position when executed.  */
1939:  on_failure_keep_string_jump,
1940:  
1941:        /* Throw away latest failure point and then jump to following
1942:           two-byte relative address.  */
1943:  pop_failure_jump,
1944:
1945:        /* Change to pop_failure_jump if know won't have to backtrack to
1946:           match; otherwise change to jump.  This is used to jump
1947:           back to the beginning of a repeat.  If what follows this jump
1948:           clearly won't match what the repeat does, such that we can be
1949:           sure that there is no use backtracking out of repetitions
1950:           already matched, then we change it to a pop_failure_jump.
1951:           Followed by two-byte address.  */
1952:  maybe_pop_jump,
1953:
1954:        /* Jump to following two-byte address, and push a dummy failure
1955:           point. This failure point will be thrown away if an attempt
1956:           is made to use it for a failure.  A `+' construct makes this
1957:           before the first repeat.  Also used as an intermediary kind
1958:           of jump when compiling an alternative.  */
1959:  dummy_failure_jump,
1960:
1961:	/* Push a dummy failure point and continue.  Used at the end of
1962:	   alternatives.  */
1963:  push_dummy_failure,
1964:
1965:        /* Followed by two-byte relative address and two-byte number n.
1966:           After matching N times, jump to the address upon failure.  */
1967:  succeed_n,
1968:
1969:        /* Followed by two-byte relative address, and two-byte number n.
1970:           Jump to the address N times, then fail.  */
1971:  jump_n,
1972:
1973:        /* Set the following two-byte relative address to the
1975:           bytes of number.  */
1976:  set_number_at,
1977:
1978:  wordchar,	/* Matches any word-constituent character.  */
1979:  notwordchar,	/* Matches any char that is not a word-constituent.  */
1980:
1981:  wordbeg,	/* Succeeds if at word beginning.  */
1982:  wordend,	/* Succeeds if at word end.  */
1983:
1984:  wordbound,	/* Succeeds if at a word boundary.  */
1985:  notwordbound	/* Succeeds if not at a word boundary.  */
1986:
1987:#ifdef emacs
1988:  ,before_dot,	/* Succeeds if before point.  */
1989:  at_dot,	/* Succeeds if at point.  */
1990:  after_dot,	/* Succeeds if after point.  */
1991:
1992:	/* Matches any character whose syntax is specified.  Followed by
1993:           a byte which contains a syntax code, e.g., Sword.  */
1994:  syntaxspec,
1995:
1996:	/* Matches any character whose syntax is not that specified.  */
1997:  notsyntaxspec
1998:#endif /* emacs */
1999:} re_opcode_t;
2000:
2001:/* Common operations on the compiled pattern.  */
2002:
2003:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
2004:
2005:#define STORE_NUMBER(destination, number)				\
2006:  do {									\
2007:    (destination)[0] = (number) & 0377;					\
2008:    (destination)[1] = (number) >> 8;					\
2009:  } while (0)
2010:
2011:/* Same as STORE_NUMBER, except increment DESTINATION to
2012:   the byte after where the number is stored.  Therefore, DESTINATION
2013:   must be an lvalue.  */
2014:
2015:#define STORE_NUMBER_AND_INCR(destination, number)			\
2016:  do {									\
2017:    STORE_NUMBER (destination, number);					\
2018:    (destination) += 2;							\
2019:  } while (0)
2020:
2021:/* Put into DESTINATION a number stored in two contiguous bytes starting
2022:   at SOURCE.  */
2023:
2024:#define EXTRACT_NUMBER(destination, source)				\
2025:  do {									\
2026:    (destination) = *(source) & 0377;					\
2027:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
2028:  } while (0)
2029:
2030:#ifdef DEBUG
2031:static void
2032:extract_number (dest, source)
2033:    int *dest;
2034:    unsigned char *source;
2035:{
2036:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
2037:  *dest = *source & 0377;
2038:  *dest += temp << 8;
2039:}
2040:
2041:#ifndef EXTRACT_MACROS /* To debug the macros.  */
2042:#undef EXTRACT_NUMBER
2043:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
2044:#endif /* not EXTRACT_MACROS */
2045:
2046:#endif /* DEBUG */
2047:
2048:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
2049:   SOURCE must be an lvalue.  */
2050:
2051:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
2052:  do {									\
2053:    EXTRACT_NUMBER (destination, source);				\
2054:    (source) += 2; 							\
2055:  } while (0)
2056:
2057:#ifdef DEBUG
2058:static void
2059:extract_number_and_incr (destination, source)
2060:    int *destination;
2061:    unsigned char **source;
2062:{ 
2063:  extract_number (destination, *source);
2064:  *source += 2;
2065:}
2066:
2067:#ifndef EXTRACT_MACROS
2068:#undef EXTRACT_NUMBER_AND_INCR
2069:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
2070:  extract_number_and_incr (&dest, &src)
2071:#endif /* not EXTRACT_MACROS */
2072:
2073:#endif /* DEBUG */
2074:
2075:/* If DEBUG is defined, Regex prints many voluminous messages about what
2076:   it is doing (if the variable `debug' is nonzero).  If linked with the
2077:   main program in `iregex.c', you can enter patterns and strings
2078:   interactively.  And if linked with the main program in `main.c' and
2079:   the other test files, you can run the already-written tests.  */
2080:
2081:#ifdef DEBUG
2082:
2083:/* We use standard I/O for debugging.  */
2085:
2086:/* It is useful to test things that ``must'' be true when debugging.  */
2088:
2089:static int debug = 0;
2090:
2091:#define DEBUG_STATEMENT(e) e
2092:#define DEBUG_PRINT1(x) if (debug) printf (x)
2093:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
2094:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
2095:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
2096:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
2097:  if (debug) print_partial_compiled_pattern (s, e)
2098:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
2099:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
2100:
2101:
2102:extern void printchar ();
2103:
2104:/* Print the fastmap in human-readable form.  */
2105:
2106:void
2107:print_fastmap (fastmap)
2108:    char *fastmap;
2109:{
2110:  unsigned was_a_range = 0;
2111:  unsigned i = 0;  
2112:  
2113:  while (i < (1 << BYTEWIDTH))
2114:    {
2115:      if (fastmap[i++])
2116:	{
2117:	  was_a_range = 0;
2118:          printchar (i - 1);
2119:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
2120:            {
2121:              was_a_range = 1;
2122:              i++;
2123:            }
2124:	  if (was_a_range)
2125:            {
2126:              printf ("-");
2127:              printchar (i - 1);
2128:            }
2129:        }
2130:    }
2131:  putchar ('\n'); 
2132:}
2133:
2134:
2135:/* Print a compiled pattern string in human-readable form, starting at
2136:   the START pointer into it and ending just before the pointer END.  */
2137:
2138:void
2139:print_partial_compiled_pattern (start, end)
2140:    unsigned char *start;
2141:    unsigned char *end;
2142:{
2143:  int mcnt, mcnt2;
2144:  unsigned char *p = start;
2145:  unsigned char *pend = end;
2146:
2147:  if (start == NULL)
2148:    {
2149:      printf ("(null)\n");
2150:      return;
2151:    }
2152:    
2153:  /* Loop over pattern commands.  */
2154:  while (p < pend)
2155:    {
2156:      printf ("%d:\t", p - start);
2157:
2158:      switch ((re_opcode_t) *p++)
2159:	{
2160:        case no_op:
2161:          printf ("/no_op");
2162:          break;
2163:
2164:	case exactn:
2165:	  mcnt = *p++;
2166:          printf ("/exactn/%d", mcnt);
2167:          do
2168:	    {
2169:              putchar ('/');
2170:	      printchar (*p++);
2171:            }
2172:          while (--mcnt);
2173:          break;
2174:
2175:	case start_memory:
2176:          mcnt = *p++;
2177:          printf ("/start_memory/%d/%d", mcnt, *p++);
2178:          break;
2179:
2180:	case stop_memory:
2181:          mcnt = *p++;
2182:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
2183:          break;
2184:
2185:	case duplicate:
2186:	  printf ("/duplicate/%d", *p++);
2187:	  break;
2188:
2189:	case anychar:
2190:	  printf ("/anychar");
2191:	  break;
2192:
2193:	case charset:
2194:        case charset_not:
2195:          {
2196:            register int c, last = -100;
2197:	    register int in_range = 0;
2198:
2199:	    printf ("/charset [%s",
2200:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
2201:            
2202:            assert (p + *p < pend);
2203:
2204:            for (c = 0; c < 256; c++)
2205:	      if (c / 8 < *p
2206:		  && (p[1 + (c/8)] & (1 << (c % 8))))
2207:		{
2208:		  /* Are we starting a range?  */
2209:		  if (last + 1 == c && ! in_range)
2210:		    {
2211:		      putchar ('-');
2212:		      in_range = 1;
2213:		    }
2214:		  /* Have we broken a range?  */
2215:		  else if (last + 1 != c && in_range)
2216:              {
2217:		      printchar (last);
2218:		      in_range = 0;
2219:		    }
2220:                
2221:		  if (! in_range)
2222:		    printchar (c);
2223:
2224:		  last = c;
2225:              }
2226:
2227:	    if (in_range)
2228:	      printchar (last);
2229:
2230:	    putchar (']');
2231:
2232:	    p += 1 + *p;
2233:	  }
2234:	  break;
2235:
2236:	case begline:
2237:	  printf ("/begline");
2238:          break;
2239:
2240:	case endline:
2241:          printf ("/endline");
2242:          break;
2243:
2244:	case on_failure_jump:
2245:          extract_number_and_incr (&mcnt, &p);
2246:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
2247:          break;
2248:
2249:	case on_failure_keep_string_jump:
2250:          extract_number_and_incr (&mcnt, &p);
2251:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
2252:          break;
2253:
2254:	case dummy_failure_jump:
2255:          extract_number_and_incr (&mcnt, &p);
2256:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
2257:          break;
2258:
2259:	case push_dummy_failure:
2260:          printf ("/push_dummy_failure");
2261:          break;
2262:          
2263:        case maybe_pop_jump:
2264:          extract_number_and_incr (&mcnt, &p);
2265:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
2266:	  break;
2267:
2268:        case pop_failure_jump:
2269:	  extract_number_and_incr (&mcnt, &p);
2270:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
2271:	  break;          
2272:          
2273:        case jump_past_alt:
2274:	  extract_number_and_incr (&mcnt, &p);
2275:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
2276:	  break;          
2277:          
2278:        case jump:
2279:	  extract_number_and_incr (&mcnt, &p);
2280:  	  printf ("/jump to %d", p + mcnt - start);
2281:	  break;
2282:
2283:        case succeed_n: 
2284:          extract_number_and_incr (&mcnt, &p);
2285:          extract_number_and_incr (&mcnt2, &p);
2286:	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
2287:          break;
2288:        
2289:        case jump_n: 
2290:          extract_number_and_incr (&mcnt, &p);
2291:          extract_number_and_incr (&mcnt2, &p);
2292:	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
2293:          break;
2294:        
2295:        case set_number_at: 
2296:          extract_number_and_incr (&mcnt, &p);
2297:          extract_number_and_incr (&mcnt2, &p);
2298:	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
2299:          break;
2300:        
2301:        case wordbound:
2302:	  printf ("/wordbound");
2303:	  break;
2304:
2305:	case notwordbound:
2306:	  printf ("/notwordbound");
2307:          break;
2308:
2309:	case wordbeg:
2310:	  printf ("/wordbeg");
2311:	  break;
2312:          
2313:	case wordend:
2314:	  printf ("/wordend");
2315:          
2316:#ifdef emacs
2317:	case before_dot:
2318:	  printf ("/before_dot");
2319:          break;
2320:
2321:	case at_dot:
2322:	  printf ("/at_dot");
2323:          break;
2324:
2325:	case after_dot:
2326:	  printf ("/after_dot");
2327:          break;
2328:
2329:	case syntaxspec:
2330:          printf ("/syntaxspec");
2331:	  mcnt = *p++;
2332:	  printf ("/%d", mcnt);
2333:          break;
2334:	  
2335:	case notsyntaxspec:
2336:          printf ("/notsyntaxspec");
2337:	  mcnt = *p++;
2338:	  printf ("/%d", mcnt);
2339:	  break;
2340:#endif /* emacs */
2341:
2342:	case wordchar:
2343:	  printf ("/wordchar");
2344:          break;
2345:	  
2346:	case notwordchar:
2347:	  printf ("/notwordchar");
2348:          break;
2349:
2350:	case begbuf:
2351:	  printf ("/begbuf");
2352:          break;
2353:
2354:	case endbuf:
2355:	  printf ("/endbuf");
2356:          break;
2357:
2358:        default:
2359:          printf ("?%d", *(p-1));
2360:	}
2361:
2362:      putchar ('\n');
2363:    }
2364:
2365:  printf ("%d:\tend of pattern.\n", p - start);
2366:}
2367:
2368:
2369:void
2370:print_compiled_pattern (bufp)
2371:    struct re_pattern_buffer *bufp;
2372:{
2373:  unsigned char *buffer = bufp->buffer;
2374:
2375:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
2376:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
2377:
2378:  if (bufp->fastmap_accurate && bufp->fastmap)
2379:    {
2380:      printf ("fastmap: ");
2381:      print_fastmap (bufp->fastmap);
2382:    }
2383:
2384:  printf ("re_nsub: %d\t", bufp->re_nsub);
2385:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
2386:  printf ("can_be_null: %d\t", bufp->can_be_null);
2387:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
2388:  printf ("no_sub: %d\t", bufp->no_sub);
2389:  printf ("not_bol: %d\t", bufp->not_bol);
2390:  printf ("not_eol: %d\t", bufp->not_eol);
2391:  printf ("syntax: %d\n", bufp->syntax);
2392:  /* Perhaps we should print the translate table?  */
2393:}
2394:
2395:
2396:void
2397:print_double_string (where, string1, size1, string2, size2)
2398:    const char *where;
2399:    const char *string1;
2400:    const char *string2;
2401:    int size1;
2402:    int size2;
2403:{
2404:  unsigned this_char;
2405:  
2406:  if (where == NULL)
2407:    printf ("(null)");
2408:  else
2409:    {
2410:      if (FIRST_STRING_P (where))
2411:        {
2412:          for (this_char = where - string1; this_char < size1; this_char++)
2413:            printchar (string1[this_char]);
2414:
2415:          where = string2;    
2416:        }
2417:
2418:      for (this_char = where - string2; this_char < size2; this_char++)
2419:        printchar (string2[this_char]);
2420:    }
2421:}
2422:
2423:#else /* not DEBUG */
2424:
2425:#undef assert
2426:#define assert(e)
2427:
2428:#define DEBUG_STATEMENT(e)
2429:#define DEBUG_PRINT1(x)
2430:#define DEBUG_PRINT2(x1, x2)
2431:#define DEBUG_PRINT3(x1, x2, x3)
2432:#define DEBUG_PRINT4(x1, x2, x3, x4)
2433:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
2434:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
2435:
2436:#endif /* not DEBUG */
2437:
2438:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
2439:   also be assigned to arbitrarily: each pattern buffer stores its own
2440:   syntax, so it can be changed between regex compilations.  */
2441:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
2442:
2443:
2444:/* Specify the precise syntax of regexps for compilation.  This provides
2445:   for compatibility for various utilities which historically have
2446:   different, incompatible syntaxes.
2447:
2448:   The argument SYNTAX is a bit mask comprised of the various bits
2449:   defined in regex.h.  We return the old syntax.  */
2450:
2451:reg_syntax_t
2452:re_set_syntax (syntax)
2453:    reg_syntax_t syntax;
2454:{
2455:  reg_syntax_t ret = re_syntax_options;
2456:  
2457:  re_syntax_options = syntax;
2458:  return ret;
2459:}
2460:
2461:/* This table gives an error message for each of the error codes listed
2462:   in regex.h.  Obviously the order here has to be same as there.  */
2463:
2464:static const char *re_error_msg[] =
2465:  { NULL,					/* REG_NOERROR */
2466:    "No match",					/* REG_NOMATCH */
2467:    "Invalid regular expression",		/* REG_BADPAT */
2468:    "Invalid collation character",		/* REG_ECOLLATE */
2469:    "Invalid character class name",		/* REG_ECTYPE */
2470:    "Trailing backslash",			/* REG_EESCAPE */
2471:    "Invalid back reference",			/* REG_ESUBREG */
2472:    "Unmatched [ or [^",			/* REG_EBRACK */
2473:    "Unmatched ( or \\(",			/* REG_EPAREN */
2474:    "Unmatched \\{",				/* REG_EBRACE */
2475:    "Invalid content of \\{\\}",		/* REG_BADBR */
2476:    "Invalid range end",			/* REG_ERANGE */
2477:    "Memory exhausted",				/* REG_ESPACE */
2478:    "Invalid preceding regular expression",	/* REG_BADRPT */
2479:    "Premature end of regular expression",	/* REG_EEND */
2480:    "Regular expression too big",		/* REG_ESIZE */
2481:    "Unmatched ) or \\)",			/* REG_ERPAREN */
2482:  };
2483:
2484:/* Subroutine declarations and macros for regex_compile.  */
2485:
2486:static void store_op1 (), store_op2 ();
2487:static void insert_op1 (), insert_op2 ();
2488:static boolean at_begline_loc_p (), at_endline_loc_p ();
2489:static boolean group_in_compile_stack ();
2490:static reg_errcode_t compile_range ();
2491:
2492:/* Fetch the next character in the uncompiled pattern---translating it 
2493:   if necessary.  Also cast from a signed character in the constant
2494:   string passed to us by the user to an unsigned char that we can use
2495:   as an array index (in, e.g., `translate').  */
2496:#define PATFETCH(c)							\
2497:  do {if (p == pend) return REG_EEND;					\
2498:    c = (unsigned char) *p++;						\
2499:    if (translate) c = translate[c]; 					\
2500:  } while (0)
2501:
2502:/* Fetch the next character in the uncompiled pattern, with no
2503:   translation.  */
2504:#define PATFETCH_RAW(c)							\
2505:  do {if (p == pend) return REG_EEND;					\
2506:    c = (unsigned char) *p++; 						\
2507:  } while (0)
2508:
2509:/* Go backwards one character in the pattern.  */
2510:#define PATUNFETCH p--
2511:
2512:
2513:/* If `translate' is non-null, return translate[D], else just D.  We
2514:   cast the subscript to translate because some data is declared as
2515:   `char *', to avoid warnings when a string constant is passed.  But
2516:   when we use a character as a subscript we must make it unsigned.  */
2517:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
2518:
2519:
2520:/* Macros for outputting the compiled pattern into `buffer'.  */
2521:
2522:/* If the buffer isn't allocated when it comes in, use this.  */
2523:#define INIT_BUF_SIZE  32
2524:
2525:/* Make sure we have at least N more bytes of space in buffer.  */
2526:#define GET_BUFFER_SPACE(n)						\
2527:    while (b - bufp->buffer + (n) > bufp->allocated)			\
2528:      EXTEND_BUFFER ()
2529:
2530:/* Make sure we have one more byte of buffer space and then add C to it.  */
2531:#define BUF_PUSH(c)							\
2532:  do {									\
2533:    GET_BUFFER_SPACE (1);						\
2534:    *b++ = (unsigned char) (c);						\
2535:  } while (0)
2536:
2537:
2538:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
2539:#define BUF_PUSH_2(c1, c2)						\
2540:  do {									\
2541:    GET_BUFFER_SPACE (2);						\
2542:    *b++ = (unsigned char) (c1);					\
2543:    *b++ = (unsigned char) (c2);					\
2544:  } while (0)
2545:
2546:
2547:/* As with BUF_PUSH_2, except for three bytes.  */
2548:#define BUF_PUSH_3(c1, c2, c3)						\
2549:  do {									\
2550:    GET_BUFFER_SPACE (3);						\
2551:    *b++ = (unsigned char) (c1);					\
2552:    *b++ = (unsigned char) (c2);					\
2553:    *b++ = (unsigned char) (c3);					\
2554:  } while (0)
2555:
2556:
2557:/* Store a jump with opcode OP at LOC to location TO.  We store a
2558:   relative address offset by the three bytes the jump itself occupies.  */
2559:#define STORE_JUMP(op, loc, to) \
2560:  store_op1 (op, loc, (to) - (loc) - 3)
2561:
2562:/* Likewise, for a two-argument jump.  */
2563:#define STORE_JUMP2(op, loc, to, arg) \
2564:  store_op2 (op, loc, (to) - (loc) - 3, arg)
2565:
2566:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
2567:#define INSERT_JUMP(op, loc, to) \
2568:  insert_op1 (op, loc, (to) - (loc) - 3, b)
2569:
2570:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
2571:#define INSERT_JUMP2(op, loc, to, arg) \
2572:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
2573:
2574:
2575:/* This is not an arbitrary limit: the arguments which represent offsets
2576:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
2577:   be too small, many things would have to change.  */
2578:#define MAX_BUF_SIZE (1L << 16)
2579:
2580:
2581:/* Extend the buffer by twice its current size via realloc and
2582:   reset the pointers that pointed into the old block to point to the
2583:   correct places in the new one.  If extending the buffer results in it
2584:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
2585:#define EXTEND_BUFFER()							\
2586:  do { 									\
2587:    unsigned char *old_buffer = bufp->buffer;				\
2588:    if (bufp->allocated == MAX_BUF_SIZE) 				\
2589:      return REG_ESIZE;							\
2590:    bufp->allocated <<= 1;						\
2591:    if (bufp->allocated > MAX_BUF_SIZE)					\
2592:      bufp->allocated = MAX_BUF_SIZE; 					\
2593:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
2594:    if (bufp->buffer == NULL)						\
2595:      return REG_ESPACE;						\
2596:    /* If the buffer moved, move all the pointers into it.  */		\
2597:    if (old_buffer != bufp->buffer)					\
2598:      {									\
2599:        b = (b - old_buffer) + bufp->buffer;				\
2600:        begalt = (begalt - old_buffer) + bufp->buffer;			\
2601:        if (fixup_alt_jump)						\
2602:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
2603:        if (laststart)							\
2604:          laststart = (laststart - old_buffer) + bufp->buffer;		\
2605:        if (pending_exact)						\
2606:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
2607:      }									\
2608:  } while (0)
2609:
2610:
2611:/* Since we have one byte reserved for the register number argument to
2612:   {start,stop}_memory, the maximum number of groups we can report
2613:   things about is what fits in that byte.  */
2614:#define MAX_REGNUM 255
2615:
2616:/* But patterns can have more than `MAX_REGNUM' registers.  We just
2617:   ignore the excess.  */
2618:typedef unsigned regnum_t;
2619:
2620:
2621:/* Macros for the compile stack.  */
2622:
2623:/* Since offsets can go either forwards or backwards, this type needs to
2624:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
2625:typedef int pattern_offset_t;
2626:
2627:typedef struct
2628:{
2629:  pattern_offset_t begalt_offset;
2630:  pattern_offset_t fixup_alt_jump;
2631:  pattern_offset_t inner_group_offset;
2632:  pattern_offset_t laststart_offset;  
2633:  regnum_t regnum;
2634:} compile_stack_elt_t;
2635:
2636:
2637:typedef struct
2638:{
2639:  compile_stack_elt_t *stack;
2640:  unsigned size;
2641:  unsigned avail;			/* Offset of next open position.  */
2642:} compile_stack_type;
2643:
2644:
2645:#define INIT_COMPILE_STACK_SIZE 32
2646:
2647:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
2648:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
2649:
2650:/* The next available element.  */
2651:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
2652:
2653:
2654:/* Set the bit for character C in a list.  */
2655:#define SET_LIST_BIT(c)                               \
2656:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
2657:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
2658:
2659:
2660:/* Get the next unsigned number in the uncompiled pattern.  */
2661:#define GET_UNSIGNED_NUMBER(num) 					\
2662:  { if (p != pend)							\
2663:     {									\
2664:       PATFETCH (c); 							\
2665:       while (ISDIGIT (c)) 						\
2666:         { 								\
2667:           if (num < 0)							\
2668:              num = 0;							\
2669:           num = num * 10 + c - '0'; 					\
2670:           if (p == pend) 						\
2671:              break; 							\
2672:           PATFETCH (c);						\
2673:         } 								\
2674:       } 								\
2675:    }		
2676:
2677:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
2678:
2679:#define IS_CHAR_CLASS(string)						\
2680:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
2681:    || STREQ (string, "lower") || STREQ (string, "digit")		\
2682:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
2683:    || STREQ (string, "space") || STREQ (string, "print")		\
2684:    || STREQ (string, "punct") || STREQ (string, "graph")		\
2685:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
2686:
2687:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
2688:   Returns one of error codes defined in `regex.h', or zero for success.
2689:
2690:   Assumes the `allocated' (and perhaps `buffer') and `translate'
2691:   fields are set in BUFP on entry.
2692:
2693:   If it succeeds, results are put in BUFP (if it returns an error, the
2694:   contents of BUFP are undefined):
2695:     `buffer' is the compiled pattern;
2696:     `syntax' is set to SYNTAX;
2697:     `used' is set to the length of the compiled pattern;
2698:     `fastmap_accurate' is zero;
2699:     `re_nsub' is the number of subexpressions in PATTERN;
2700:     `not_bol' and `not_eol' are zero;
2701:   
2702:   The `fastmap' and `newline_anchor' fields are neither
2703:   examined nor set.  */
2704:
2705:static reg_errcode_t
2706:regex_compile (pattern, size, syntax, bufp)
2707:     const char *pattern;
2708:     int size;
2709:     reg_syntax_t syntax;
2710:     struct re_pattern_buffer *bufp;
2711:{
2712:  /* We fetch characters from PATTERN here.  Even though PATTERN is
2713:     `char *' (i.e., signed), we declare these variables as unsigned, so
2714:     they can be reliably used as array indices.  */
2715:  register unsigned char c, c1;
2716:  
2717:  /* A random tempory spot in PATTERN.  */
2718:  const char *p1;
2719:
2720:  /* Points to the end of the buffer, where we should append.  */
2721:  register unsigned char *b;
2722:  
2723:  /* Keeps track of unclosed groups.  */
2724:  compile_stack_type compile_stack;
2725:
2726:  /* Points to the current (ending) position in the pattern.  */
2727:  const char *p = pattern;
2728:  const char *pend = pattern + size;
2729:  
2730:  /* How to translate the characters in the pattern.  */
2731:  char *translate = bufp->translate;
2732:
2733:  /* Address of the count-byte of the most recently inserted `exactn'
2734:     command.  This makes it possible to tell if a new exact-match
2735:     character can be added to that command or if the character requires
2736:     a new `exactn' command.  */
2737:  unsigned char *pending_exact = 0;
2738:
2739:  /* Address of start of the most recently finished expression.
2740:     This tells, e.g., postfix * where to find the start of its
2741:     operand.  Reset at the beginning of groups and alternatives.  */
2742:  unsigned char *laststart = 0;
2743:
2744:  /* Address of beginning of regexp, or inside of last group.  */
2745:  unsigned char *begalt;
2746:
2747:  /* Place in the uncompiled pattern (i.e., the {) to
2748:     which to go back if the interval is invalid.  */
2749:  const char *beg_interval;
2750:                
2751:  /* Address of the place where a forward jump should go to the end of
2752:     the containing expression.  Each alternative of an `or' -- except the
2753:     last -- ends with a forward jump of this sort.  */
2754:  unsigned char *fixup_alt_jump = 0;
2755:
2756:  /* Counts open-groups as they are encountered.  Remembered for the
2757:     matching close-group on the compile stack, so the same register
2758:     number is put in the stop_memory as the start_memory.  */
2759:  regnum_t regnum = 0;
2760:
2761:#ifdef DEBUG
2762:  DEBUG_PRINT1 ("\nCompiling pattern: ");
2763:  if (debug)
2764:    {
2765:      unsigned debug_count;
2766:      
2767:      for (debug_count = 0; debug_count < size; debug_count++)
2768:        printchar (pattern[debug_count]);
2769:      putchar ('\n');
2770:    }
2771:#endif /* DEBUG */
2772:
2773:  /* Initialize the compile stack.  */
2774:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
2775:  if (compile_stack.stack == NULL)
2776:    return REG_ESPACE;
2777:
2778:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
2779:  compile_stack.avail = 0;
2780:
2781:  /* Initialize the pattern buffer.  */
2782:  bufp->syntax = syntax;
2783:  bufp->fastmap_accurate = 0;
2784:  bufp->not_bol = bufp->not_eol = 0;
2785:
2786:  /* Set `used' to zero, so that if we return an error, the pattern
2787:     printer (for debugging) will think there's no pattern.  We reset it
2788:     at the end.  */
2789:  bufp->used = 0;
2790:  
2791:  /* Always count groups, whether or not bufp->no_sub is set.  */
2792:  bufp->re_nsub = 0;				
2793:
2794:#if !defined (emacs) && !defined (SYNTAX_TABLE)
2795:  /* Initialize the syntax table.  */
2796:   init_syntax_once ();
2797:#endif
2798:
2799:  if (bufp->allocated == 0)
2800:    {
2801:      if (bufp->buffer)
2802:	{ /* If zero allocated, but buffer is non-null, try to realloc
2803:             enough space.  This loses if buffer's address is bogus, but
2804:             that is the user's responsibility.  */
2805:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
2806:        }
2807:      else
2808:        { /* Caller did not allocate a buffer.  Do it for them.  */
2809:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
2810:        }
2811:      if (!bufp->buffer) return REG_ESPACE;
2812:
2813:      bufp->allocated = INIT_BUF_SIZE;
2814:    }
2815:
2816:  begalt = b = bufp->buffer;
2817:
2818:  /* Loop through the uncompiled pattern until we're at the end.  */
2819:  while (p != pend)
2820:    {
2821:      PATFETCH (c);
2822:
2823:      switch (c)
2824:        {
2825:        case '^':
2826:          {
2827:            if (   /* If at start of pattern, it's an operator.  */
2828:                   p == pattern + 1
2829:                   /* If context independent, it's an operator.  */
2830:                || syntax & RE_CONTEXT_INDEP_ANCHORS
2831:                   /* Otherwise, depends on what's come before.  */
2832:                || at_begline_loc_p (pattern, p, syntax))
2833:              BUF_PUSH (begline);
2834:            else
2835:              goto normal_char;
2836:          }
2837:          break;
2838:
2839:
2840:        case '$':
2841:          {
2842:            if (   /* If at end of pattern, it's an operator.  */
2843:                   p == pend 
2844:                   /* If context independent, it's an operator.  */
2845:                || syntax & RE_CONTEXT_INDEP_ANCHORS
2846:                   /* Otherwise, depends on what's next.  */
2847:                || at_endline_loc_p (p, pend, syntax))
2848:               BUF_PUSH (endline);
2849:             else
2850:               goto normal_char;
2851:           }
2852:           break;
2853:
2854:
2855:	case '+':
2856:        case '?':
2857:          if ((syntax & RE_BK_PLUS_QM)
2858:              || (syntax & RE_LIMITED_OPS))
2859:            goto normal_char;
2860:        handle_plus:
2861:        case '*':
2862:          /* If there is no previous pattern... */
2863:          if (!laststart)
2864:            {
2865:              if (syntax & RE_CONTEXT_INVALID_OPS)
2866:                return REG_BADRPT;
2867:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
2868:                goto normal_char;
2869:            }
2870:
2871:          {
2872:            /* Are we optimizing this jump?  */
2873:            boolean keep_string_p = false;
2874:            
2875:            /* 1 means zero (many) matches is allowed.  */
2876:            char zero_times_ok = 0, many_times_ok = 0;
2877:
2878:            /* If there is a sequence of repetition chars, collapse it
2879:               down to just one (the right one).  We can't combine
2880:               interval operators with these because of, e.g., `a{2}*',
2881:               which should only match an even number of `a's.  */
2882:
2883:            for (;;)
2884:              {
2885:                zero_times_ok |= c != '+';
2886:                many_times_ok |= c != '?';
2887:
2888:                if (p == pend)
2889:                  break;
2890:
2891:                PATFETCH (c);
2892:
2893:                if (c == '*'
2894:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
2895:                  ;
2896:
2897:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
2898:                  {
2899:                    if (p == pend) return REG_EESCAPE;
2900:
2901:                    PATFETCH (c1);
2902:                    if (!(c1 == '+' || c1 == '?'))
2903:                      {
2904:                        PATUNFETCH;
2905:                        PATUNFETCH;
2906:                        break;
2907:                      }
2908:
2909:                    c = c1;
2910:                  }
2911:                else
2912:                  {
2913:                    PATUNFETCH;
2914:                    break;
2915:                  }
2916:
2917:                /* If we get here, we found another repeat character.  */
2918:               }
2919:
2920:            /* Star, etc. applied to an empty pattern is equivalent
2921:               to an empty pattern.  */
2922:            if (!laststart)  
2923:              break;
2924:
2925:            /* Now we know whether or not zero matches is allowed
2926:               and also whether or not two or more matches is allowed.  */
2927:            if (many_times_ok)
2928:              { /* More than one repetition is allowed, so put in at the
2929:                   end a backward relative jump from `b' to before the next
2930:                   jump we're going to put in below (which jumps from
2931:                   laststart to after this jump).  
2932:
2933:                   But if we are at the `*' in the exact sequence `.*\n',
2934:                   insert an unconditional jump backwards to the .,
2935:                   instead of the beginning of the loop.  This way we only
2936:                   push a failure point once, instead of every time
2937:                   through the loop.  */
2938:                assert (p - 1 > pattern);
2939:
2940:                /* Allocate the space for the jump.  */
2941:                GET_BUFFER_SPACE (3);
2942:
2943:                /* We know we are not at the first character of the pattern,
2944:                   because laststart was nonzero.  And we've already
2945:                   incremented `p', by the way, to be the character after
2946:                   the `*'.  Do we have to do something analogous here
2947:                   for null bytes, because of RE_DOT_NOT_NULL?  */
2948:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
2949:		    && zero_times_ok
2950:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
2951:                    && !(syntax & RE_DOT_NEWLINE))
2952:                  { /* We have .*\n.  */
2953:                    STORE_JUMP (jump, b, laststart);
2954:                    keep_string_p = true;
2955:                  }
2956:                else
2957:                  /* Anything else.  */
2958:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
2959:
2960:                /* We've added more stuff to the buffer.  */
2961:                b += 3;
2962:              }
2963:
2964:            /* On failure, jump from laststart to b + 3, which will be the
2965:               end of the buffer after this jump is inserted.  */
2966:            GET_BUFFER_SPACE (3);
2967:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
2968:                                       : on_failure_jump,
2969:                         laststart, b + 3);
2970:            pending_exact = 0;
2971:            b += 3;
2972:
2973:            if (!zero_times_ok)
2974:              {
2975:                /* At least one repetition is required, so insert a
2976:                   `dummy_failure_jump' before the initial
2977:                   `on_failure_jump' instruction of the loop. This
2978:                   effects a skip over that instruction the first time
2979:                   we hit that loop.  */
2980:                GET_BUFFER_SPACE (3);
2981:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
2982:                b += 3;
2983:              }
2984:            }
2985:	  break;
2986:
2987:
2988:	case '.':
2989:          laststart = b;
2990:          BUF_PUSH (anychar);
2991:          break;
2992:
2993:
2994:        case '[':
2995:          {
2996:            boolean had_char_class = false;
2997:
2998:            if (p == pend) return REG_EBRACK;
2999:
3000:            /* Ensure that we have enough space to push a charset: the
3001:               opcode, the length count, and the bitset; 34 bytes in all.  */
3002:	    GET_BUFFER_SPACE (34);
3003:
3004:            laststart = b;
3005:
3006:            /* We test `*p == '^' twice, instead of using an if
3007:               statement, so we only need one BUF_PUSH.  */
3008:            BUF_PUSH (*p == '^' ? charset_not : charset); 
3009:            if (*p == '^')
3010:              p++;
3011:
3012:            /* Remember the first position in the bracket expression.  */
3013:            p1 = p;
3014:
3015:            /* Push the number of bytes in the bitmap.  */
3016:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
3017:
3018:            /* Clear the whole map.  */
3019:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
3020:
3021:            /* charset_not matches newline according to a syntax bit.  */
3022:            if ((re_opcode_t) b[-2] == charset_not
3023:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
3024:              SET_LIST_BIT ('\n');
3025:
3026:            /* Read in characters and ranges, setting map bits.  */
3027:            for (;;)
3028:              {
3029:                if (p == pend) return REG_EBRACK;
3030:
3031:                PATFETCH (c);
3032:
3033:                /* \ might escape characters inside [...] and [^...].  */
3034:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
3035:                  {
3036:                    if (p == pend) return REG_EESCAPE;
3037:
3038:                    PATFETCH (c1);
3039:                    SET_LIST_BIT (c1);
3040:                    continue;
3041:                  }
3042:
3043:                /* Could be the end of the bracket expression.  If it's
3044:                   not (i.e., when the bracket expression is `[]' so
3045:                   far), the ']' character bit gets set way below.  */
3046:                if (c == ']' && p != p1 + 1)
3047:                  break;
3048:
3049:                /* Look ahead to see if it's a range when the last thing
3050:                   was a character class.  */
3051:                if (had_char_class && c == '-' && *p != ']')
3052:                  return REG_ERANGE;
3053:
3054:                /* Look ahead to see if it's a range when the last thing
3055:                   was a character: if this is a hyphen not at the
3056:                   beginning or the end of a list, then it's the range
3057:                   operator.  */
3058:                if (c == '-' 
3059:                    && !(p - 2 >= pattern && p[-2] == '[') 
3060:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
3061:                    && *p != ']')
3062:                  {
3063:                    reg_errcode_t ret
3064:                      = compile_range (&p, pend, translate, syntax, b);
3065:                    if (ret != REG_NOERROR) return ret;
3066:                  }
3067:
3068:                else if (p[0] == '-' && p[1] != ']')
3069:                  { /* This handles ranges made up of characters only.  */
3070:                    reg_errcode_t ret;
3071:
3072:		    /* Move past the `-'.  */
3073:                    PATFETCH (c1);
3074:                    
3075:                    ret = compile_range (&p, pend, translate, syntax, b);
3076:                    if (ret != REG_NOERROR) return ret;
3077:                  }
3078:
3079:                /* See if we're at the beginning of a possible character
3080:                   class.  */
3081:
3082:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
3083:                  { /* Leave room for the null.  */
3084:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
3085:
3086:                    PATFETCH (c);
3087:                    c1 = 0;
3088:
3089:                    /* If pattern is `[[:'.  */
3090:                    if (p == pend) return REG_EBRACK;
3091:
3092:                    for (;;)
3093:                      {
3094:                        PATFETCH (c);
3095:                        if (c == ':' || c == ']' || p == pend
3096:                            || c1 == CHAR_CLASS_MAX_LENGTH)
3097:                          break;
3098:                        str[c1++] = c;
3099:                      }
3100:                    str[c1] = '\0';
3101:
3102:                    /* If isn't a word bracketed by `[:' and:`]':
3103:                       undo the ending character, the letters, and leave 
3104:                       the leading `:' and `[' (but set bits for them).  */
3105:                    if (c == ':' && *p == ']')
3106:                      {
3107:                        int ch;
3108:                        boolean is_alnum = STREQ (str, "alnum");
3109:                        boolean is_alpha = STREQ (str, "alpha");
3110:                        boolean is_blank = STREQ (str, "blank");
3111:                        boolean is_cntrl = STREQ (str, "cntrl");
3112:                        boolean is_digit = STREQ (str, "digit");
3113:                        boolean is_graph = STREQ (str, "graph");
3114:                        boolean is_lower = STREQ (str, "lower");
3115:                        boolean is_print = STREQ (str, "print");
3116:                        boolean is_punct = STREQ (str, "punct");
3117:                        boolean is_space = STREQ (str, "space");
3118:                        boolean is_upper = STREQ (str, "upper");
3119:                        boolean is_xdigit = STREQ (str, "xdigit");
3120:                        
3121:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
3122:
3123:                        /* Throw away the ] at the end of the character
3124:                           class.  */
3125:                        PATFETCH (c);					
3126:
3127:                        if (p == pend) return REG_EBRACK;
3128:
3129:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
3130:                          {
3131:                            if (   (is_alnum  && ISALNUM (ch))
3132:                                || (is_alpha  && ISALPHA (ch))
3133:                                || (is_blank  && ISBLANK (ch))
3134:                                || (is_cntrl  && ISCNTRL (ch))
3135:                                || (is_digit  && ISDIGIT (ch))
3136:                                || (is_graph  && ISGRAPH (ch))
3137:                                || (is_lower  && ISLOWER (ch))
3138:                                || (is_print  && ISPRINT (ch))
3139:                                || (is_punct  && ISPUNCT (ch))
3140:                                || (is_space  && ISSPACE (ch))
3141:                                || (is_upper  && ISUPPER (ch))
3142:                                || (is_xdigit && ISXDIGIT (ch)))
3143:                            SET_LIST_BIT (ch);
3144:                          }
3145:                        had_char_class = true;
3146:                      }
3147:                    else
3148:                      {
3149:                        c1++;
3150:                        while (c1--)    
3151:                          PATUNFETCH;
3152:                        SET_LIST_BIT ('[');
3153:                        SET_LIST_BIT (':');
3154:                        had_char_class = false;
3155:                      }
3156:                  }
3157:                else
3158:                  {
3159:                    had_char_class = false;
3160:                    SET_LIST_BIT (c);
3161:                  }
3162:              }
3163:
3164:            /* Discard any (non)matching list bytes that are all 0 at the
3165:               end of the map.  Decrease the map-length byte too.  */
3166:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
3167:              b[-1]--; 
3168:            b += b[-1];
3169:          }
3170:          break;
3171:
3172:
3173:	case '(':
3174:          if (syntax & RE_NO_BK_PARENS)
3175:            goto handle_open;
3176:          else
3177:            goto normal_char;
3178:
3179:
3180:        case ')':
3181:          if (syntax & RE_NO_BK_PARENS)
3182:            goto handle_close;
3183:          else
3184:            goto normal_char;
3185:
3186:
3187:        case '\n':
3188:          if (syntax & RE_NEWLINE_ALT)
3189:            goto handle_alt;
3190:          else
3191:            goto normal_char;
3192:
3193:
3194:	case '|':
3195:          if (syntax & RE_NO_BK_VBAR)
3196:            goto handle_alt;
3197:          else
3198:            goto normal_char;
3199:
3200:
3201:        case '{':
3202:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
3203:             goto handle_interval;
3204:           else
3205:             goto normal_char;
3206:
3207:
3208:        case '\\':
3209:          if (p == pend) return REG_EESCAPE;
3210:
3211:          /* Do not translate the character after the \, so that we can
3212:             distinguish, e.g., \B from \b, even if we normally would
3213:             translate, e.g., B to b.  */
3214:          PATFETCH_RAW (c);
3215:
3216:          switch (c)
3217:            {
3218:            case '(':
3219:              if (syntax & RE_NO_BK_PARENS)
3220:                goto normal_backslash;
3221:
3222:            handle_open:
3223:              bufp->re_nsub++;
3224:              regnum++;
3225:
3226:              if (COMPILE_STACK_FULL)
3227:                { 
3228:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
3229:                            compile_stack_elt_t);
3230:                  if (compile_stack.stack == NULL) return REG_ESPACE;
3231:
3232:                  compile_stack.size <<= 1;
3233:                }
3234:
3235:              /* These are the values to restore when we hit end of this
3236:                 group.  They are all relative offsets, so that if the
3237:                 whole pattern moves because of realloc, they will still
3238:                 be valid.  */
3239:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
3240:              COMPILE_STACK_TOP.fixup_alt_jump 
3241:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
3242:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
3243:              COMPILE_STACK_TOP.regnum = regnum;
3244:
3245:              /* We will eventually replace the 0 with the number of
3246:                 groups inner to this one.  But do not push a
3247:                 start_memory for groups beyond the last one we can
3248:                 represent in the compiled pattern.  */
3249:              if (regnum <= MAX_REGNUM)
3250:                {
3251:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
3252:                  BUF_PUSH_3 (start_memory, regnum, 0);
3253:                }
3254:                
3255:              compile_stack.avail++;
3256:
3257:              fixup_alt_jump = 0;
3258:              laststart = 0;
3259:              begalt = b;
3260:	      /* If we've reached MAX_REGNUM groups, then this open
3261:		 won't actually generate any code, so we'll have to
3262:		 clear pending_exact explicitly.  */
3263:	      pending_exact = 0;
3264:              break;
3265:
3266:
3267:            case ')':
3268:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
3269:
3270:              if (COMPILE_STACK_EMPTY)
3271:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
3272:                  goto normal_backslash;
3273:                else
3274:                  return REG_ERPAREN;
3275:
3276:            handle_close:
3277:              if (fixup_alt_jump)
3278:                { /* Push a dummy failure point at the end of the
3279:                     alternative for a possible future
3280:                     `pop_failure_jump' to pop.  See comments at
3281:                     `push_dummy_failure' in `re_match_2'.  */
3282:                  BUF_PUSH (push_dummy_failure);
3283:                  
3284:                  /* We allocated space for this jump when we assigned
3285:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
3286:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
3287:                }
3288:
3289:              /* See similar code for backslashed left paren above.  */
3290:              if (COMPILE_STACK_EMPTY)
3291:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
3292:                  goto normal_char;
3293:                else
3294:                  return REG_ERPAREN;
3295:
3296:              /* Since we just checked for an empty stack above, this
3297:                 ``can't happen''.  */
3298:              assert (compile_stack.avail != 0);
3299:              {
3300:                /* We don't just want to restore into `regnum', because
3301:                   later groups should continue to be numbered higher,
3302:                   as in `(ab)c(de)' -- the second group is #2.  */
3303:                regnum_t this_group_regnum;
3304:
3305:                compile_stack.avail--;		
3306:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
3307:                fixup_alt_jump
3308:                  = COMPILE_STACK_TOP.fixup_alt_jump
3309:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
3310:                    : 0;
3311:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
3312:                this_group_regnum = COMPILE_STACK_TOP.regnum;
3313:		/* If we've reached MAX_REGNUM groups, then this open
3314:		   won't actually generate any code, so we'll have to
3315:		   clear pending_exact explicitly.  */
3316:		pending_exact = 0;
3317:
3318:                /* We're at the end of the group, so now we know how many
3319:                   groups were inside this one.  */
3320:                if (this_group_regnum <= MAX_REGNUM)
3321:                  {
3322:                    unsigned char *inner_group_loc
3323:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
3324:                    
3325:                    *inner_group_loc = regnum - this_group_regnum;
3326:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
3327:                                regnum - this_group_regnum);
3328:                  }
3329:              }
3330:              break;
3331:
3332:
3333:            case '|':					/* `\|'.  */
3334:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
3335:                goto normal_backslash;
3336:            handle_alt:
3337:              if (syntax & RE_LIMITED_OPS)
3338:                goto normal_char;
3339:
3340:              /* Insert before the previous alternative a jump which
3341:                 jumps to this alternative if the former fails.  */
3342:              GET_BUFFER_SPACE (3);
3343:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
3344:              pending_exact = 0;
3345:              b += 3;
3346:
3347:              /* The alternative before this one has a jump after it
3348:                 which gets executed if it gets matched.  Adjust that
3349:                 jump so it will jump to this alternative's analogous
3350:                 jump (put in below, which in turn will jump to the next
3351:                 (if any) alternative's such jump, etc.).  The last such
3352:                 jump jumps to the correct final destination.  A picture:
3353:                          _____ _____ 
3354:                          |   | |   |   
3355:                          |   v |   v 
3356:                         a | b   | c   
3357:
3358:                 If we are at `b', then fixup_alt_jump right now points to a
3359:                 three-byte space after `a'.  We'll put in the jump, set
3360:                 fixup_alt_jump to right after `b', and leave behind three
3361:                 bytes which we'll fill in when we get to after `c'.  */
3362:
3363:              if (fixup_alt_jump)
3364:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
3365:
3366:              /* Mark and leave space for a jump after this alternative,
3367:                 to be filled in later either by next alternative or
3368:                 when know we're at the end of a series of alternatives.  */
3369:              fixup_alt_jump = b;
3370:              GET_BUFFER_SPACE (3);
3371:              b += 3;
3372:
3373:              laststart = 0;
3374:              begalt = b;
3375:              break;
3376:
3377:
3378:            case '{': 
3379:              /* If \{ is a literal.  */
3380:              if (!(syntax & RE_INTERVALS)
3381:                     /* If we're at `\{' and it's not the open-interval 
3382:                        operator.  */
3383:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
3384:                  || (p - 2 == pattern  &&  p == pend))
3385:                goto normal_backslash;
3386:
3387:            handle_interval:
3388:              {
3389:                /* If got here, then the syntax allows intervals.  */
3390:
3391:                /* At least (most) this many matches must be made.  */
3392:                int lower_bound = -1, upper_bound = -1;
3393:
3394:                beg_interval = p - 1;
3395:
3396:                if (p == pend)
3397:                  {
3398:                    if (syntax & RE_NO_BK_BRACES)
3399:                      goto unfetch_interval;
3400:                    else
3401:                      return REG_EBRACE;
3402:                  }
3403:
3404:                GET_UNSIGNED_NUMBER (lower_bound);
3405:
3406:                if (c == ',')
3407:                  {
3408:                    GET_UNSIGNED_NUMBER (upper_bound);
3409:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
3410:                  }
3411:                else
3412:                  /* Interval such as `{1}' => match exactly once. */
3413:                  upper_bound = lower_bound;
3414:
3415:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
3416:                    || lower_bound > upper_bound)
3417:                  {
3418:                    if (syntax & RE_NO_BK_BRACES)
3419:                      goto unfetch_interval;
3420:                    else 
3421:                      return REG_BADBR;
3422:                  }
3423:
3424:                if (!(syntax & RE_NO_BK_BRACES)) 
3425:                  {
3426:                    if (c != '\\') return REG_EBRACE;
3427:
3428:                    PATFETCH (c);
3429:                  }
3430:
3431:                if (c != '}')
3432:                  {
3433:                    if (syntax & RE_NO_BK_BRACES)
3434:                      goto unfetch_interval;
3435:                    else 
3436:                      return REG_BADBR;
3437:                  }
3438:
3439:                /* We just parsed a valid interval.  */
3440:
3441:                /* If it's invalid to have no preceding re.  */
3442:                if (!laststart)
3443:                  {
3444:                    if (syntax & RE_CONTEXT_INVALID_OPS)
3445:                      return REG_BADRPT;
3446:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
3447:                      laststart = b;
3448:                    else
3449:                      goto unfetch_interval;
3450:                  }
3451:
3452:                /* If the upper bound is zero, don't want to succeed at
3453:                   all; jump from `laststart' to `b + 3', which will be
3454:                   the end of the buffer after we insert the jump.  */
3455:                 if (upper_bound == 0)
3456:                   {
3457:                     GET_BUFFER_SPACE (3);
3458:                     INSERT_JUMP (jump, laststart, b + 3);
3459:                     b += 3;
3460:                   }
3461:
3462:                 /* Otherwise, we have a nontrivial interval.  When
3463:                    we're all done, the pattern will look like:
3464:                      set_number_at <jump count> <upper bound>
3465:                      set_number_at <succeed_n count> <lower bound>
3466:                      succeed_n <after jump addr> <succed_n count>
3467:                      <body of loop>
3468:                      jump_n <succeed_n addr> <jump count>
3469:                    (The upper bound and `jump_n' are omitted if
3470:                    `upper_bound' is 1, though.)  */
3471:                 else 
3472:                   { /* If the upper bound is > 1, we need to insert
3473:                        more at the end of the loop.  */
3474:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
3475:
3476:                     GET_BUFFER_SPACE (nbytes);
3477:
3478:                     /* Initialize lower bound of the `succeed_n', even
3479:                        though it will be set during matching by its
3480:                        attendant `set_number_at' (inserted next),
3481:                        because `re_compile_fastmap' needs to know.
3482:                        Jump to the `jump_n' we might insert below.  */
3483:                     INSERT_JUMP2 (succeed_n, laststart,
3484:                                   b + 5 + (upper_bound > 1) * 5,
3485:                                   lower_bound);
3486:                     b += 5;
3487:
3488:                     /* Code to initialize the lower bound.  Insert 
3489:                        before the `succeed_n'.  The `5' is the last two
3490:                        bytes of this `set_number_at', plus 3 bytes of
3491:                        the following `succeed_n'.  */
3492:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
3493:                     b += 5;
3494:
3495:                     if (upper_bound > 1)
3496:                       { /* More than one repetition is allowed, so
3497:                            append a backward jump to the `succeed_n'
3498:                            that starts this interval.
3499:                            
3500:                            When we've reached this during matching,
3501:                            we'll have matched the interval once, so
3502:                            jump back only `upper_bound - 1' times.  */
3503:                         STORE_JUMP2 (jump_n, b, laststart + 5,
3504:                                      upper_bound - 1);
3505:                         b += 5;
3506:
3507:                         /* The location we want to set is the second
3508:                            parameter of the `jump_n'; that is `b-2' as
3509:                            an absolute address.  `laststart' will be
3510:                            the `set_number_at' we're about to insert;
3511:                            `laststart+3' the number to set, the source
3512:                            for the relative address.  But we are
3513:                            inserting into the middle of the pattern --
3514:                            so everything is getting moved up by 5.
3515:                            Conclusion: (b - 2) - (laststart + 3) + 5,
3516:                            i.e., b - laststart.
3517:                            
3518:                            We insert this at the beginning of the loop
3519:                            so that if we fail during matching, we'll
3520:                            reinitialize the bounds.  */
3521:                         insert_op2 (set_number_at, laststart, b - laststart,
3522:                                     upper_bound - 1, b);
3523:                         b += 5;
3524:                       }
3525:                   }
3526:                pending_exact = 0;
3527:                beg_interval = NULL;
3528:              }
3529:              break;
3530:
3531:            unfetch_interval:
3532:              /* If an invalid interval, match the characters as literals.  */
3533:               assert (beg_interval);
3534:               p = beg_interval;
3535:               beg_interval = NULL;
3536:
3537:               /* normal_char and normal_backslash need `c'.  */
3538:               PATFETCH (c);	
3539:
3540:               if (!(syntax & RE_NO_BK_BRACES))
3541:                 {
3542:                   if (p > pattern  &&  p[-1] == '\\')
3543:                     goto normal_backslash;
3544:                 }
3545:               goto normal_char;
3546:
3547:#ifdef emacs
3548:            /* There is no way to specify the before_dot and after_dot
3549:               operators.  rms says this is ok.  --karl  */
3550:            case '=':
3551:              BUF_PUSH (at_dot);
3552:              break;
3553:
3554:            case 's':	
3555:              laststart = b;
3556:              PATFETCH (c);
3557:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
3558:              break;
3559:
3560:            case 'S':
3561:              laststart = b;
3562:              PATFETCH (c);
3563:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
3564:              break;
3565:#endif /* emacs */
3566:
3567:
3568:            case 'w':
3569:              laststart = b;
3570:              BUF_PUSH (wordchar);
3571:              break;
3572:
3573:
3574:            case 'W':
3575:              laststart = b;
3576:              BUF_PUSH (notwordchar);
3577:              break;
3578:
3579:
3580:            case '<':
3581:              BUF_PUSH (wordbeg);
3582:              break;
3583:
3584:            case '>':
3585:              BUF_PUSH (wordend);
3586:              break;
3587:
3588:            case 'b':
3589:              BUF_PUSH (wordbound);
3590:              break;
3591:
3592:            case 'B':
3593:              BUF_PUSH (notwordbound);
3594:              break;
3595:
3596:            case '`':
3597:              BUF_PUSH (begbuf);
3598:              break;
3599:
3600:            case '\'':
3601:              BUF_PUSH (endbuf);
3602:              break;
3603:
3604:            case '1': case '2': case '3': case '4': case '5':
3605:            case '6': case '7': case '8': case '9':
3606:              if (syntax & RE_NO_BK_REFS)
3607:                goto normal_char;
3608:
3609:              c1 = c - '0';
3610:
3611:              if (c1 > regnum)
3612:                return REG_ESUBREG;
3613:
3614:              /* Can't back reference to a subexpression if inside of it.  */
3615:              if (group_in_compile_stack (compile_stack, c1))
3616:                goto normal_char;
3617:
3618:              laststart = b;
3619:              BUF_PUSH_2 (duplicate, c1);
3620:              break;
3621:
3622:
3623:            case '+':
3624:            case '?':
3625:              if (syntax & RE_BK_PLUS_QM)
3626:                goto handle_plus;
3627:              else
3628:                goto normal_backslash;
3629:
3630:            default:
3631:            normal_backslash:
3632:              /* You might think it would be useful for \ to mean
3633:                 not to translate; but if we don't translate it
3634:                 it will never match anything.  */
3635:              c = TRANSLATE (c);
3636:              goto normal_char;
3637:            }
3638:          break;
3639:
3640:
3641:	default:
3642:        /* Expects the character in `c'.  */
3643:	normal_char:
3644:	      /* If no exactn currently being built.  */
3645:          if (!pending_exact 
3646:
3647:              /* If last exactn not at current position.  */
3648:              || pending_exact + *pending_exact + 1 != b
3649:              
3650:              /* We have only one byte following the exactn for the count.  */
3651:	      || *pending_exact == (1 << BYTEWIDTH) - 1
3652:
3653:              /* If followed by a repetition operator.  */
3654:              || *p == '*' || *p == '^'
3655:	      || ((syntax & RE_BK_PLUS_QM)
3656:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
3657:		  : (*p == '+' || *p == '?'))
3658:	      || ((syntax & RE_INTERVALS)
3659:                  && ((syntax & RE_NO_BK_BRACES)
3660:		      ? *p == '{'
3661:                      : (p[0] == '\\' && p[1] == '{'))))
3662:	    {
3663:	      /* Start building a new exactn.  */
3664:              
3665:              laststart = b;
3666:
3667:	      BUF_PUSH_2 (exactn, 0);
3668:	      pending_exact = b - 1;
3669:            }
3670:            
3671:	  BUF_PUSH (c);
3672:          (*pending_exact)++;
3673:	  break;
3674:        } /* switch (c) */
3675:    } /* while p != pend */
3676:
3677:  
3678:  /* Through the pattern now.  */
3679:  
3680:  if (fixup_alt_jump)
3681:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
3682:
3683:  if (!COMPILE_STACK_EMPTY) 
3684:    return REG_EPAREN;
3685:
3686:  free (compile_stack.stack);
3687:
3688:  /* We have succeeded; set the length of the buffer.  */
3689:  bufp->used = b - bufp->buffer;
3690:
3691:#ifdef DEBUG
3692:  if (debug)
3693:    {
3694:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
3695:      print_compiled_pattern (bufp);
3696:    }
3697:#endif /* DEBUG */
3698:
3699:  return REG_NOERROR;
3700:} /* regex_compile */
3701:
3702:/* Subroutines for `regex_compile'.  */
3703:
3704:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
3705:
3706:static void
3707:store_op1 (op, loc, arg)
3708:    re_opcode_t op;
3709:    unsigned char *loc;
3710:    int arg;
3711:{
3712:  *loc = (unsigned char) op;
3713:  STORE_NUMBER (loc + 1, arg);
3714:}
3715:
3716:
3717:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
3718:
3719:static void
3720:store_op2 (op, loc, arg1, arg2)
3721:    re_opcode_t op;
3722:    unsigned char *loc;
3723:    int arg1, arg2;
3724:{
3725:  *loc = (unsigned char) op;
3726:  STORE_NUMBER (loc + 1, arg1);
3727:  STORE_NUMBER (loc + 3, arg2);
3728:}
3729:
3730:
3731:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
3732:   for OP followed by two-byte integer parameter ARG.  */
3733:
3734:static void
3735:insert_op1 (op, loc, arg, end)
3736:    re_opcode_t op;
3737:    unsigned char *loc;
3738:    int arg;
3739:    unsigned char *end;    
3740:{
3741:  register unsigned char *pfrom = end;
3742:  register unsigned char *pto = end + 3;
3743:
3744:  while (pfrom != loc)
3745:    *--pto = *--pfrom;
3746:    
3747:  store_op1 (op, loc, arg);
3748:}
3749:
3750:
3751:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
3752:
3753:static void
3754:insert_op2 (op, loc, arg1, arg2, end)
3755:    re_opcode_t op;
3756:    unsigned char *loc;
3757:    int arg1, arg2;
3758:    unsigned char *end;    
3759:{
3760:  register unsigned char *pfrom = end;
3761:  register unsigned char *pto = end + 5;
3762:
3763:  while (pfrom != loc)
3764:    *--pto = *--pfrom;
3765:    
3766:  store_op2 (op, loc, arg1, arg2);
3767:}
3768:
3769:
3770:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
3771:   after an alternative or a begin-subexpression.  We assume there is at
3772:   least one character before the ^.  */
3773:
3774:static boolean
3775:at_begline_loc_p (pattern, p, syntax)
3776:    const char *pattern, *p;
3777:    reg_syntax_t syntax;
3778:{
3779:  const char *prev = p - 2;
3780:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
3781:  
3782:  return
3783:       /* After a subexpression?  */
3784:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
3785:       /* After an alternative?  */
3786:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
3787:}
3788:
3789:
3790:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
3791:   at least one character after the $, i.e., `P < PEND'.  */
3792:
3793:static boolean
3794:at_endline_loc_p (p, pend, syntax)
3795:    const char *p, *pend;
3796:    int syntax;
3797:{
3798:  const char *next = p;
3799:  boolean next_backslash = *next == '\\';
3800:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
3801:  
3802:  return
3803:       /* Before a subexpression?  */
3804:       (syntax & RE_NO_BK_PARENS ? *next == ')'
3805:        : next_backslash && next_next && *next_next == ')')
3806:       /* Before an alternative?  */
3807:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
3808:        : next_backslash && next_next && *next_next == '|');
3809:}
3810:
3811:
3812:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
3813:   false if it's not.  */
3814:
3815:static boolean
3816:group_in_compile_stack (compile_stack, regnum)
3817:    compile_stack_type compile_stack;
3818:    regnum_t regnum;
3819:{
3820:  int this_element;
3821:
3822:  for (this_element = compile_stack.avail - 1;  
3823:       this_element >= 0; 
3824:       this_element--)
3825:    if (compile_stack.stack[this_element].regnum == regnum)
3826:      return true;
3827:
3828:  return false;
3829:}
3830:
3831:
3832:/* Read the ending character of a range (in a bracket expression) from the
3833:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
3834:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
3835:   Then we set the translation of all bits between the starting and
3836:   ending characters (inclusive) in the compiled pattern B.
3837:   
3838:   Return an error code.
3839:   
3840:   We use these short variable names so we can use the same macros as
3841:   `regex_compile' itself.  */
3842:
3843:static reg_errcode_t
3844:compile_range (p_ptr, pend, translate, syntax, b)
3845:    const char **p_ptr, *pend;
3846:    char *translate;
3847:    reg_syntax_t syntax;
3848:    unsigned char *b;
3849:{
3850:  unsigned this_char;
3851:
3852:  const char *p = *p_ptr;
3853:  int range_start, range_end;
3854:  
3855:  if (p == pend)
3856:    return REG_ERANGE;
3857:
3858:  /* Even though the pattern is a signed `char *', we need to fetch
3859:     with unsigned char *'s; if the high bit of the pattern character
3860:     is set, the range endpoints will be negative if we fetch using a
3861:     signed char *.
3862:
3863:     We also want to fetch the endpoints without translating them; the 
3864:     appropriate translation is done in the bit-setting loop below.  */
3865:  range_start = ((unsigned char *) p)[-2];
3866:  range_end   = ((unsigned char *) p)[0];
3867:
3868:  /* Have to increment the pointer into the pattern string, so the
3869:     caller isn't still at the ending character.  */
3870:  (*p_ptr)++;
3871:
3872:  /* If the start is after the end, the range is empty.  */
3873:  if (range_start > range_end)
3874:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
3875:
3876:  /* Here we see why `this_char' has to be larger than an `unsigned
3877:     char' -- the range is inclusive, so if `range_end' == 0xff
3878:     (assuming 8-bit characters), we would otherwise go into an infinite
3879:     loop, since all characters <= 0xff.  */
3880:  for (this_char = range_start; this_char <= range_end; this_char++)
3881:    {
3882:      SET_LIST_BIT (TRANSLATE (this_char));
3883:    }
3884:  
3885:  return REG_NOERROR;
3886:}
3887:
3888:/* Failure stack declarations and macros; both re_compile_fastmap and
3889:   re_match_2 use a failure stack.  These have to be macros because of
3890:   REGEX_ALLOCATE.  */
3891:   
3892:
3893:/* Number of failure points for which to initially allocate space
3894:   when matching.  If this number is exceeded, we allocate more
3895:   space, so it is not a hard limit.  */
3896:#ifndef INIT_FAILURE_ALLOC
3897:#define INIT_FAILURE_ALLOC 5
3898:#endif
3899:
3900:/* Roughly the maximum number of failure points on the stack.  Would be
3901:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
3902:   This is a variable only so users of regex can assign to it; we never
3903:   change it ourselves.  */
3904:int re_max_failures = 2000;
3905:
3906:typedef const unsigned char *fail_stack_elt_t;
3907:
3908:typedef struct
3909:{
3910:  fail_stack_elt_t *stack;
3911:  unsigned size;
3912:  unsigned avail;			/* Offset of next open position.  */
3913:} fail_stack_type;
3914:
3915:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
3916:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
3917:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
3918:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
3919:
3920:
3921:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
3922:
3923:#define INIT_FAIL_STACK()						\
3924:  do {									\
3925:    fail_stack.stack = (fail_stack_elt_t *)				\
3926:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
3927:									\
3928:    if (fail_stack.stack == NULL)					\
3929:      return -2;							\
3930:									\
3931:    fail_stack.size = INIT_FAILURE_ALLOC;				\
3932:    fail_stack.avail = 0;						\
3933:  } while (0)
3934:
3935:
3936:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
3937:
3938:   Return 1 if succeeds, and 0 if either ran out of memory
3939:   allocating space for it or it was already too large.  
3940:   
3941:   REGEX_REALLOCATE requires `destination' be declared.   */
3942:
3943:#define DOUBLE_FAIL_STACK(fail_stack)					\
3944:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
3945:   ? 0									\
3946:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
3947:        REGEX_REALLOCATE ((fail_stack).stack, 				\
3948:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
3949:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
3950:									\
3951:      (fail_stack).stack == NULL					\
3952:      ? 0								\
3953:      : ((fail_stack).size <<= 1, 					\
3954:         1)))
3955:
3956:
3957:/* Push PATTERN_OP on FAIL_STACK. 
3958:
3959:   Return 1 if was able to do so and 0 if ran out of memory allocating
3960:   space to do so.  */
3961:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
3962:  ((FAIL_STACK_FULL ()							\
3963:    && !DOUBLE_FAIL_STACK (fail_stack))					\
3964:    ? 0									\
3965:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
3966:       1))
3967:
3968:/* This pushes an item onto the failure stack.  Must be a four-byte
3969:   value.  Assumes the variable `fail_stack'.  Probably should only
3970:   be called from within `PUSH_FAILURE_POINT'.  */
3971:#define PUSH_FAILURE_ITEM(item)						\
3972:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
3973:
3974:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
3975:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
3976:
3977:/* Used to omit pushing failure point id's when we're not debugging.  */
3978:#ifdef DEBUG
3979:#define DEBUG_PUSH PUSH_FAILURE_ITEM
3980:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
3981:#else
3982:#define DEBUG_PUSH(item)
3983:#define DEBUG_POP(item_addr)
3984:#endif
3985:
3986:
3987:/* Push the information about the state we will need
3988:   if we ever fail back to it.  
3989:   
3990:   Requires variables fail_stack, regstart, regend, reg_info, and
3991:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
3992:   declared.
3993:   
3994:   Does `return FAILURE_CODE' if runs out of memory.  */
3995:
3996:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
3997:  do {									\
3998:    char *destination;							\
3999:    /* Must be int, so when we don't save any registers, the arithmetic	\
4000:       of 0 + -1 isn't done as unsigned.  */				\
4001:    int this_reg;							\
4002:    									\
4003:    DEBUG_STATEMENT (failure_id++);					\
4004:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
4005:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
4006:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
4007:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
4008:									\
4009:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
4010:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
4011:									\
4012:    /* Ensure we have enough space allocated for what we will push.  */	\
4013:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
4014:      {									\
4015:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
4016:          return failure_code;						\
4017:									\
4018:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
4019:		       (fail_stack).size);				\
4020:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
4021:      }									\
4022:									\
4023:    /* Push the info, starting with the registers.  */			\
4024:    DEBUG_PRINT1 ("\n");						\
4025:									\
4026:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
4027:         this_reg++)							\
4028:      {									\
4029:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
4030:        DEBUG_STATEMENT (num_regs_pushed++);				\
4031:									\
4032:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
4033:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
4034:                                                                        \
4035:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
4036:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
4037:									\
4038:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
4039:        DEBUG_PRINT2 (" match_null=%d",					\
4040:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
4041:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
4042:        DEBUG_PRINT2 (" matched_something=%d",				\
4043:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
4044:        DEBUG_PRINT2 (" ever_matched=%d",				\
4045:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
4046:	DEBUG_PRINT1 ("\n");						\
4047:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
4048:      }									\
4049:									\
4050:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
4051:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
4052:									\
4053:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
4054:    PUSH_FAILURE_ITEM (highest_active_reg);				\
4055:									\
4056:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
4057:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
4058:    PUSH_FAILURE_ITEM (pattern_place);					\
4059:									\
4060:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
4061:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
4062:				 size2);				\
4063:    DEBUG_PRINT1 ("'\n");						\
4064:    PUSH_FAILURE_ITEM (string_place);					\
4065:									\
4066:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
4067:    DEBUG_PUSH (failure_id);						\
4068:  } while (0)
4069:
4070:/* This is the number of items that are pushed and popped on the stack
4071:   for each register.  */
4072:#define NUM_REG_ITEMS  3
4073:
4074:/* Individual items aside from the registers.  */
4075:#ifdef DEBUG
4076:#define NUM_NONREG_ITEMS 5 /* Includes failure point id.  */
4077:#else
4078:#define NUM_NONREG_ITEMS 4
4079:#endif
4080:
4081:/* We push at most this many items on the stack.  */
4082:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
4083:
4084:/* We actually push this many items.  */
4085:#define NUM_FAILURE_ITEMS						\
4086:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
4087:    + NUM_NONREG_ITEMS)
4088:
4089:/* How many items can still be added to the stack without overflowing it.  */
4090:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
4091:
4092:
4093:/* Pops what PUSH_FAIL_STACK pushes.
4094:
4095:   We restore into the parameters, all of which should be lvalues:
4096:     STR -- the saved data position.
4097:     PAT -- the saved pattern position.
4098:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
4099:     REGSTART, REGEND -- arrays of string positions.
4100:     REG_INFO -- array of information about each subexpression.
4101:   
4102:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
4103:   `pend', `string1', `size1', `string2', and `size2'.  */
4104:
4105:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
4106:{									\
4107:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
4108:  int this_reg;								\
4109:  const unsigned char *string_temp;					\
4110:									\
4111:  assert (!FAIL_STACK_EMPTY ());					\
4112:									\
4113:  /* Remove failure points and point to how many regs pushed.  */	\
4114:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
4115:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
4116:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
4117:									\
4118:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
4119:									\
4120:  DEBUG_POP (&failure_id);						\
4121:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
4122:									\
4123:  /* If the saved string location is NULL, it came from an		\
4124:     on_failure_keep_string_jump opcode, and we want to throw away the	\
4125:     saved NULL, thus retaining our current position in the string.  */	\
4126:  string_temp = POP_FAILURE_ITEM ();					\
4127:  if (string_temp != NULL)						\
4128:    str = (const char *) string_temp;					\
4129:									\
4130:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
4131:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
4132:  DEBUG_PRINT1 ("'\n");							\
4133:									\
4134:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
4135:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
4136:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
4137:									\
4138:  /* Restore register info.  */						\
4139:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
4140:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
4141:									\
4142:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
4143:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
4144:									\
4145:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
4146:    {									\
4147:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
4148:									\
4149:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
4150:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
4151:									\
4152:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
4153:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
4154:									\
4155:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
4156:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
4157:    }									\
4158:									\
4159:  DEBUG_STATEMENT (nfailure_points_popped++);				\
4160:} /* POP_FAILURE_POINT */
4161:
4162:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
4163:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
4164:   characters can start a string that matches the pattern.  This fastmap
4165:   is used by re_search to skip quickly over impossible starting points.
4166:
4167:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
4168:   area as BUFP->fastmap.
4169:   
4170:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
4171:   the pattern buffer.
4172:
4173:   Returns 0 if we succeed, -2 if an internal error.   */
4174:
4175:int
4176:re_compile_fastmap (bufp)
4177:     struct re_pattern_buffer *bufp;
4178:{
4179:  int j, k;
4180:  fail_stack_type fail_stack;
4181:#ifndef REGEX_MALLOC
4182:  char *destination;
4183:#endif
4184:  /* We don't push any register information onto the failure stack.  */
4185:  unsigned num_regs = 0;
4186:  
4187:  register char *fastmap = bufp->fastmap;
4188:  unsigned char *pattern = bufp->buffer;
4189:  unsigned long size = bufp->used;
4190:  const unsigned char *p = pattern;
4191:  register unsigned char *pend = pattern + size;
4192:
4193:  /* Assume that each path through the pattern can be null until
4194:     proven otherwise.  We set this false at the bottom of switch
4195:     statement, to which we get only if a particular path doesn't
4196:     match the empty string.  */
4197:  boolean path_can_be_null = true;
4198:
4199:  /* We aren't doing a `succeed_n' to begin with.  */
4200:  boolean succeed_n_p = false;
4201:
4202:  assert (fastmap != NULL && p != NULL);
4203:  
4204:  INIT_FAIL_STACK ();
4205:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
4206:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
4207:  bufp->can_be_null = 0;
4208:      
4209:  while (p != pend || !FAIL_STACK_EMPTY ())
4210:    {
4211:      if (p == pend)
4212:        {
4213:          bufp->can_be_null |= path_can_be_null;
4214:          
4215:          /* Reset for next path.  */
4216:          path_can_be_null = true;
4217:          
4218:          p = fail_stack.stack[--fail_stack.avail];
4219:	}
4220:
4221:      /* We should never be about to go beyond the end of the pattern.  */
4222:      assert (p < pend);
4223:      
4224:#ifdef SWITCH_ENUM_BUG
4225:      switch ((int) ((re_opcode_t) *p++))
4226:#else
4227:      switch ((re_opcode_t) *p++)
4228:#endif
4229:	{
4230:
4231:        /* I guess the idea here is to simply not bother with a fastmap
4232:           if a backreference is used, since it's too hard to figure out
4233:           the fastmap for the corresponding group.  Setting
4234:           `can_be_null' stops `re_search_2' from using the fastmap, so
4235:           that is all we do.  */
4236:	case duplicate:
4237:	  bufp->can_be_null = 1;
4238:          return 0;
4239:
4240:
4241:      /* Following are the cases which match a character.  These end
4242:         with `break'.  */
4243:
4244:	case exactn:
4245:          fastmap[p[1]] = 1;
4246:	  break;
4247:
4248:
4249:        case charset:
4250:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4251:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
4252:              fastmap[j] = 1;
4253:	  break;
4254:
4255:
4256:	case charset_not:
4257:	  /* Chars beyond end of map must be allowed.  */
4258:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
4259:            fastmap[j] = 1;
4260:
4261:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4262:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
4263:              fastmap[j] = 1;
4264:          break;
4265:
4266:
4267:	case wordchar:
4268:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4269:	    if (SYNTAX (j) == Sword)
4270:	      fastmap[j] = 1;
4271:	  break;
4272:
4273:
4274:	case notwordchar:
4275:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4276:	    if (SYNTAX (j) != Sword)
4277:	      fastmap[j] = 1;
4278:	  break;
4279:
4280:
4281:        case anychar:
4282:          /* `.' matches anything ...  */
4283:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4284:            fastmap[j] = 1;
4285:
4286:          /* ... except perhaps newline.  */
4287:          if (!(bufp->syntax & RE_DOT_NEWLINE))
4288:            fastmap['\n'] = 0;
4289:
4290:          /* Return if we have already set `can_be_null'; if we have,
4291:             then the fastmap is irrelevant.  Something's wrong here.  */
4292:	  else if (bufp->can_be_null)
4293:	    return 0;
4294:
4295:          /* Otherwise, have to check alternative paths.  */
4296:	  break;
4297:
4298:
4299:#ifdef emacs
4300:        case syntaxspec:
4301:	  k = *p++;
4302:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4303:	    if (SYNTAX (j) == (enum syntaxcode) k)
4304:	      fastmap[j] = 1;
4305:	  break;
4306:
4307:
4308:	case notsyntaxspec:
4309:	  k = *p++;
4310:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4311:	    if (SYNTAX (j) != (enum syntaxcode) k)
4312:	      fastmap[j] = 1;
4313:	  break;
4314:
4315:
4316:      /* All cases after this match the empty string.  These end with
4317:         `continue'.  */
4318:
4319:
4320:	case before_dot:
4321:	case at_dot:
4322:	case after_dot:
4323:          continue;
4324:#endif /* not emacs */
4325:
4326:
4327:        case no_op:
4328:        case begline:
4329:        case endline:
4330:	case begbuf:
4331:	case endbuf:
4332:	case wordbound:
4333:	case notwordbound:
4334:	case wordbeg:
4335:	case wordend:
4336:        case push_dummy_failure:
4337:          continue;
4338:
4339:
4340:	case jump_n:
4341:        case pop_failure_jump:
4342:	case maybe_pop_jump:
4343:	case jump:
4344:        case jump_past_alt:
4345:	case dummy_failure_jump:
4346:          EXTRACT_NUMBER_AND_INCR (j, p);
4347:	  p += j;	
4348:	  if (j > 0)
4349:	    continue;
4350:            
4351:          /* Jump backward implies we just went through the body of a
4352:             loop and matched nothing.  Opcode jumped to should be
4353:             `on_failure_jump' or `succeed_n'.  Just treat it like an
4354:             ordinary jump.  For a * loop, it has pushed its failure
4355:             point already; if so, discard that as redundant.  */
4356:          if ((re_opcode_t) *p != on_failure_jump
4357:	      && (re_opcode_t) *p != succeed_n)
4358:	    continue;
4359:
4360:          p++;
4361:          EXTRACT_NUMBER_AND_INCR (j, p);
4362:          p += j;		
4363:	  
4364:          /* If what's on the stack is where we are now, pop it.  */
4365:          if (!FAIL_STACK_EMPTY () 
4366:	      && fail_stack.stack[fail_stack.avail - 1] == p)
4367:            fail_stack.avail--;
4368:
4369:          continue;
4370:
4371:
4372:        case on_failure_jump:
4373:        case on_failure_keep_string_jump:
4374:	handle_on_failure_jump:
4375:          EXTRACT_NUMBER_AND_INCR (j, p);
4376:
4377:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
4378:             end of the pattern.  We don't want to push such a point,
4379:             since when we restore it above, entering the switch will
4380:             increment `p' past the end of the pattern.  We don't need
4381:             to push such a point since we obviously won't find any more
4382:             fastmap entries beyond `pend'.  Such a pattern can match
4383:             the null string, though.  */
4384:          if (p + j < pend)
4385:            {
4386:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
4387:                return -2;
4388:            }
4389:          else
4390:            bufp->can_be_null = 1;
4391:
4392:          if (succeed_n_p)
4393:            {
4394:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
4395:              succeed_n_p = false;
4396:	    }
4397:
4398:          continue;
4399:
4400:
4401:	case succeed_n:
4402:          /* Get to the number of times to succeed.  */
4403:          p += 2;		
4404:
4405:          /* Increment p past the n for when k != 0.  */
4406:          EXTRACT_NUMBER_AND_INCR (k, p);
4407:          if (k == 0)
4408:	    {
4409:              p -= 4;
4410:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
4411:              goto handle_on_failure_jump;
4412:            }
4413:          continue;
4414:
4415:
4416:	case set_number_at:
4417:          p += 4;
4418:          continue;
4419:
4420:
4421:	case start_memory:
4422:        case stop_memory:
4423:	  p += 2;
4424:	  continue;
4425:
4426:
4427:	default:
4428:          abort (); /* We have listed all the cases.  */
4429:        } /* switch *p++ */
4430:
4431:      /* Getting here means we have found the possible starting
4432:         characters for one path of the pattern -- and that the empty
4433:         string does not match.  We need not follow this path further.
4434:         Instead, look at the next alternative (remembered on the
4435:         stack), or quit if no more.  The test at the top of the loop
4436:         does these things.  */
4437:      path_can_be_null = false;
4438:      p = pend;
4439:    } /* while p */
4440:
4441:  /* Set `can_be_null' for the last path (also the first path, if the
4442:     pattern is empty).  */
4443:  bufp->can_be_null |= path_can_be_null;
4444:  return 0;
4445:} /* re_compile_fastmap */
4446:
4447:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
4448:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
4449:   this memory for recording register information.  STARTS and ENDS
4450:   must be allocated using the malloc library routine, and must each
4451:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
4452:
4453:   If NUM_REGS == 0, then subsequent matches should allocate their own
4454:   register data.
4455:
4456:   Unless this function is called, the first search or match using
4457:   PATTERN_BUFFER will allocate its own register data, without
4458:   freeing the old data.  */
4459:
4460:void
4461:re_set_registers (bufp, regs, num_regs, starts, ends)
4462:    struct re_pattern_buffer *bufp;
4463:    struct re_registers *regs;
4464:    unsigned num_regs;
4465:    regoff_t *starts, *ends;
4466:{
4467:  if (num_regs)
4468:    {
4469:      bufp->regs_allocated = REGS_REALLOCATE;
4470:      regs->num_regs = num_regs;
4471:      regs->start = starts;
4472:      regs->end = ends;
4473:    }
4474:  else
4475:    {
4476:      bufp->regs_allocated = REGS_UNALLOCATED;
4477:      regs->num_regs = 0;
4478:      regs->start = regs->end = (regoff_t) 0;
4479:    }
4480:}
4481:
4482:/* Searching routines.  */
4483:
4484:/* Like re_search_2, below, but only one string is specified, and
4485:   doesn't let you say where to stop matching. */
4486:
4487:int
4488:re_search (bufp, string, size, startpos, range, regs)
4489:     struct re_pattern_buffer *bufp;
4490:     const char *string;
4491:     int size, startpos, range;
4492:     struct re_registers *regs;
4493:{
4494:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
4495:		      regs, size);
4496:}
4497:
4498:
4499:/* Using the compiled pattern in BUFP->buffer, first tries to match the
4500:   virtual concatenation of STRING1 and STRING2, starting first at index
4501:   STARTPOS, then at STARTPOS + 1, and so on.
4502:   
4503:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
4504:   
4505:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
4506:   only at STARTPOS; in general, the last start tried is STARTPOS +
4507:   RANGE.
4508:   
4509:   In REGS, return the indices of the virtual concatenation of STRING1
4510:   and STRING2 that matched the entire BUFP->buffer and its contained
4511:   subexpressions.
4512:   
4513:   Do not consider matching one past the index STOP in the virtual
4514:   concatenation of STRING1 and STRING2.
4515:
4516:   We return either the position in the strings at which the match was
4517:   found, -1 if no match, or -2 if error (such as failure
4518:   stack overflow).  */
4519:
4520:int
4521:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
4522:     struct re_pattern_buffer *bufp;
4523:     const char *string1, *string2;
4524:     int size1, size2;
4525:     int startpos;
4526:     int range;
4527:     struct re_registers *regs;
4528:     int stop;
4529:{
4530:  int val;
4531:  register char *fastmap = bufp->fastmap;
4532:  register char *translate = bufp->translate;
4533:  int total_size = size1 + size2;
4534:  int endpos = startpos + range;
4535:
4536:  /* Check for out-of-range STARTPOS.  */
4537:  if (startpos < 0 || startpos > total_size)
4538:    return -1;
4539:    
4540:  /* Fix up RANGE if it might eventually take us outside
4541:     the virtual concatenation of STRING1 and STRING2.  */
4542:  if (endpos < -1)
4543:    range = -1 - startpos;
4544:  else if (endpos > total_size)
4545:    range = total_size - startpos;
4546:
4547:  /* If the search isn't to be a backwards one, don't waste time in a
4548:     search for a pattern that must be anchored.  */
4549:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
4550:    {
4551:      if (startpos > 0)
4552:	return -1;
4553:      else
4554:	range = 1;
4555:    }
4556:
4557:  /* Update the fastmap now if not correct already.  */
4558:  if (fastmap && !bufp->fastmap_accurate)
4559:    if (re_compile_fastmap (bufp) == -2)
4560:      return -2;
4561:  
4562:  /* Loop through the string, looking for a place to start matching.  */
4563:  for (;;)
4564:    { 
4565:      /* If a fastmap is supplied, skip quickly over characters that
4566:         cannot be the start of a match.  If the pattern can match the
4567:         null string, however, we don't need to skip characters; we want
4568:         the first null string.  */
4569:      if (fastmap && startpos < total_size && !bufp->can_be_null)
4570:	{
4571:	  if (range > 0)	/* Searching forwards.  */
4572:	    {
4573:	      register const char *d;
4574:	      register int lim = 0;
4575:	      int irange = range;
4576:
4577:              if (startpos < size1 && startpos + range >= size1)
4578:                lim = range - (size1 - startpos);
4579:
4580:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
4581:   
4582:              /* Written out as an if-else to avoid testing `translate'
4583:                 inside the loop.  */
4584:	      if (translate)
4585:                while (range > lim
4586:                       && !fastmap[(unsigned char)
4587:				   translate[(unsigned char) *d++]])
4588:                  range--;
4589:	      else
4590:                while (range > lim && !fastmap[(unsigned char) *d++])
4591:                  range--;
4592:
4593:	      startpos += irange - range;
4594:	    }
4595:	  else				/* Searching backwards.  */
4596:	    {
4597:	      register char c = (size1 == 0 || startpos >= size1
4598:                                 ? string2[startpos - size1] 
4599:                                 : string1[startpos]);
4600:
4601:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
4602:		goto advance;
4603:	    }
4604:	}
4605:
4606:      /* If can't match the null string, and that's all we have left, fail.  */
4607:      if (range >= 0 && startpos == total_size && fastmap
4608:          && !bufp->can_be_null)
4609:	return -1;
4610:
4611:      val = re_match_2 (bufp, string1, size1, string2, size2,
4612:	                startpos, regs, stop);
4613:      if (val >= 0)
4614:	return startpos;
4615:        
4616:      if (val == -2)
4617:	return -2;
4618:
4619:    advance:
4620:      if (!range) 
4621:        break;
4622:      else if (range > 0) 
4623:        {
4624:          range--; 
4625:          startpos++;
4626:        }
4627:      else
4628:        {
4629:          range++; 
4630:          startpos--;
4631:        }
4632:    }
4633:  return -1;
4634:} /* re_search_2 */
4635:
4636:/* Declarations and macros for re_match_2.  */
4637:
4638:static int bcmp_translate ();
4639:static boolean alt_match_null_string_p (),
4640:               common_op_match_null_string_p (),
4641:               group_match_null_string_p ();
4642:
4643:/* Structure for per-register (a.k.a. per-group) information.
4644:   This must not be longer than one word, because we push this value
4645:   onto the failure stack.  Other register information, such as the
4646:   starting and ending positions (which are addresses), and the list of
4647:   inner groups (which is a bits list) are maintained in separate
4648:   variables.  
4649:   
4650:   We are making a (strictly speaking) nonportable assumption here: that
4651:   the compiler will pack our bit fields into something that fits into
4652:   the type of `word', i.e., is something that fits into one item on the
4653:   failure stack.  */
4654:typedef union
4655:{
4656:  fail_stack_elt_t word;
4657:  struct
4658:  {
4659:      /* This field is one if this group can match the empty string,
4660:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
4661:#define MATCH_NULL_UNSET_VALUE 3
4662:    unsigned match_null_string_p : 2;
4663:    unsigned is_active : 1;
4664:    unsigned matched_something : 1;
4665:    unsigned ever_matched_something : 1;
4666:  } bits;
4667:} register_info_type;
4668:
4669:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
4670:#define IS_ACTIVE(R)  ((R).bits.is_active)
4671:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
4672:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
4673:
4674:
4675:/* Call this when have matched a real character; it sets `matched' flags
4676:   for the subexpressions which we are currently inside.  Also records
4677:   that those subexprs have matched.  */
4678:#define SET_REGS_MATCHED()						\
4679:  do									\
4680:    {									\
4681:      unsigned r;							\
4682:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
4683:        {								\
4684:          MATCHED_SOMETHING (reg_info[r])				\
4685:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
4686:            = 1;							\
4687:        }								\
4688:    }									\
4689:  while (0)
4690:
4691:
4692:/* This converts PTR, a pointer into one of the search strings `string1'
4693:   and `string2' into an offset from the beginning of that string.  */
4694:#define POINTER_TO_OFFSET(ptr)						\
4695:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
4696:
4697:/* Registers are set to a sentinel when they haven't yet matched.  */
4698:#define REG_UNSET_VALUE ((char *) -1)
4699:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
4700:
4701:
4702:/* Macros for dealing with the split strings in re_match_2.  */
4703:
4704:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
4705:
4706:/* Call before fetching a character with *d.  This switches over to
4707:   string2 if necessary.  */
4708:#define PREFETCH()							\
4709:  while (d == dend)						    	\
4710:    {									\
4711:      /* End of string2 => fail.  */					\
4712:      if (dend == end_match_2) 						\
4713:        goto fail;							\
4714:      /* End of string1 => advance to string2.  */ 			\
4715:      d = string2;						        \
4716:      dend = end_match_2;						\
4717:    }
4718:
4719:
4720:/* Test if at very beginning or at very end of the virtual concatenation
4721:   of `string1' and `string2'.  If only one string, it's `string2'.  */
4722:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
4723:#define AT_STRINGS_END(d) ((d) == end2)	
4724:
4725:
4726:/* Test if D points to a character which is word-constituent.  We have
4727:   two special cases to check for: if past the end of string1, look at
4728:   the first character in string2; and if before the beginning of
4729:   string2, look at the last character in string1.  */
4730:#define WORDCHAR_P(d)							\
4731:  (SYNTAX ((d) == end1 ? *string2					\
4732:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
4733:   == Sword)
4734:
4735:/* Test if the character before D and the one at D differ with respect
4736:   to being word-constituent.  */
4737:#define AT_WORD_BOUNDARY(d)						\
4738:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
4739:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
4740:
4741:
4742:/* Free everything we malloc.  */
4743:#ifdef REGEX_MALLOC
4744:#define FREE_VAR(var) if (var) free (var); var = NULL
4745:#define FREE_VARIABLES()						\
4746:  do {									\
4747:    FREE_VAR (fail_stack.stack);					\
4748:    FREE_VAR (regstart);						\
4749:    FREE_VAR (regend);							\
4750:    FREE_VAR (old_regstart);						\
4751:    FREE_VAR (old_regend);						\
4752:    FREE_VAR (best_regstart);						\
4753:    FREE_VAR (best_regend);						\
4754:    FREE_VAR (reg_info);						\
4755:    FREE_VAR (reg_dummy);						\
4756:    FREE_VAR (reg_info_dummy);						\
4757:  } while (0)
4758:#else /* not REGEX_MALLOC */
4759:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
4760:#define FREE_VARIABLES() alloca (0)
4761:#endif /* not REGEX_MALLOC */
4762:
4763:
4764:/* These values must meet several constraints.  They must not be valid
4765:   register values; since we have a limit of 255 registers (because
4766:   we use only one byte in the pattern for the register number), we can
4767:   use numbers larger than 255.  They must differ by 1, because of
4768:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
4769:   be larger than the value for the highest register, so we do not try
4770:   to actually save any registers when none are active.  */
4771:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
4772:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
4773:
4774:/* Matching routines.  */
4775:
4776:#ifndef emacs   /* Emacs never uses this.  */
4777:/* re_match is like re_match_2 except it takes only a single string.  */
4778:
4779:int
4780:re_match (bufp, string, size, pos, regs)
4781:     struct re_pattern_buffer *bufp;
4782:     const char *string;
4783:     int size, pos;
4784:     struct re_registers *regs;
4785: {
4786:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
4787:}
4788:#endif /* not emacs */
4789:
4790:
4791:/* re_match_2 matches the compiled pattern in BUFP against the
4792:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
4793:   and SIZE2, respectively).  We start matching at POS, and stop
4794:   matching at STOP.
4795:   
4796:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
4797:   store offsets for the substring each group matched in REGS.  See the
4798:   documentation for exactly how many groups we fill.
4799:
4800:   We return -1 if no match, -2 if an internal error (such as the
4801:   failure stack overflowing).  Otherwise, we return the length of the
4802:   matched substring.  */
4803:
4804:int
4805:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
4806:     struct re_pattern_buffer *bufp;
4807:     const char *string1, *string2;
4808:     int size1, size2;
4809:     int pos;
4810:     struct re_registers *regs;
4811:     int stop;
4812:{
4813:  /* General temporaries.  */
4814:  int mcnt;
4815:  unsigned char *p1;
4816:
4817:  /* Just past the end of the corresponding string.  */
4818:  const char *end1, *end2;
4819:
4820:  /* Pointers into string1 and string2, just past the last characters in
4821:     each to consider matching.  */
4822:  const char *end_match_1, *end_match_2;
4823:
4824:  /* Where we are in the data, and the end of the current string.  */
4825:  const char *d, *dend;
4826:  
4827:  /* Where we are in the pattern, and the end of the pattern.  */
4828:  unsigned char *p = bufp->buffer;
4829:  register unsigned char *pend = p + bufp->used;
4830:
4831:  /* We use this to map every character in the string.  */
4832:  char *translate = bufp->translate;
4833:
4834:  /* Failure point stack.  Each place that can handle a failure further
4835:     down the line pushes a failure point on this stack.  It consists of
4836:     restart, regend, and reg_info for all registers corresponding to
4837:     the subexpressions we're currently inside, plus the number of such
4838:     registers, and, finally, two char *'s.  The first char * is where
4839:     to resume scanning the pattern; the second one is where to resume
4840:     scanning the strings.  If the latter is zero, the failure point is
4841:     a ``dummy''; if a failure happens and the failure point is a dummy,
4842:     it gets discarded and the next next one is tried.  */
4843:  fail_stack_type fail_stack;
4844:#ifdef DEBUG
4845:  static unsigned failure_id = 0;
4846:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
4847:#endif
4848:
4849:  /* We fill all the registers internally, independent of what we
4851:     an element for register zero.  */
4852:  unsigned num_regs = bufp->re_nsub + 1;
4853:  
4854:  /* The currently active registers.  */
4855:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
4856:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
4857:
4858:  /* Information on the contents of registers. These are pointers into
4859:     the input strings; they record just what was matched (on this
4860:     attempt) by a subexpression part of the pattern, that is, the
4861:     regnum-th regstart pointer points to where in the pattern we began
4862:     matching and the regnum-th regend points to right after where we
4863:     stopped matching the regnum-th subexpression.  (The zeroth register
4864:     keeps track of what the whole pattern matches.)  */
4865:  const char **regstart, **regend;
4866:
4867:  /* If a group that's operated upon by a repetition operator fails to
4868:     match anything, then the register for its start will need to be
4869:     restored because it will have been set to wherever in the string we
4870:     are when we last see its open-group operator.  Similarly for a
4871:     register's end.  */
4872:  const char **old_regstart, **old_regend;
4873:
4874:  /* The is_active field of reg_info helps us keep track of which (possibly
4875:     nested) subexpressions we are currently in. The matched_something
4876:     field of reg_info[reg_num] helps us tell whether or not we have
4877:     matched any of the pattern so far this time through the reg_num-th
4878:     subexpression.  These two fields get reset each time through any
4879:     loop their register is in.  */
4880:  register_info_type *reg_info; 
4881:
4882:  /* The following record the register info as found in the above
4883:     variables when we find a match better than any we've seen before. 
4884:     This happens as we backtrack through the failure points, which in
4885:     turn happens only if we have not yet matched the entire string. */
4886:  unsigned best_regs_set = false;
4887:  const char **best_regstart, **best_regend;
4888:  
4889:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
4890:     allocate space for that if we're not allocating space for anything
4891:     else (see below).  Also, we never need info about register 0 for
4892:     any of the other register vectors, and it seems rather a kludge to
4893:     treat `best_regend' differently than the rest.  So we keep track of
4894:     the end of the best match so far in a separate variable.  We
4895:     initialize this to NULL so that when we backtrack the first time
4896:     and need to test it, it's not garbage.  */
4897:  const char *match_end = NULL;
4898:
4899:  /* Used when we pop values we don't care about.  */
4900:  const char **reg_dummy;
4901:  register_info_type *reg_info_dummy;
4902:
4903:#ifdef DEBUG
4904:  /* Counts the total number of registers pushed.  */
4905:  unsigned num_regs_pushed = 0; 	
4906:#endif
4907:
4908:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
4909:  
4910:  INIT_FAIL_STACK ();
4911:  
4912:  /* Do not bother to initialize all the register variables if there are
4913:     no groups in the pattern, as it takes a fair amount of time.  If
4915:     pattern), even though we never use it, since it simplifies the
4916:     array indexing.  We should fix this.  */
4917:  if (bufp->re_nsub)
4918:    {
4919:      regstart = REGEX_TALLOC (num_regs, const char *);
4920:      regend = REGEX_TALLOC (num_regs, const char *);
4921:      old_regstart = REGEX_TALLOC (num_regs, const char *);
4922:      old_regend = REGEX_TALLOC (num_regs, const char *);
4923:      best_regstart = REGEX_TALLOC (num_regs, const char *);
4924:      best_regend = REGEX_TALLOC (num_regs, const char *);
4925:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
4926:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
4927:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
4928:
4929:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
4930:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
4931:        {
4932:          FREE_VARIABLES ();
4933:          return -2;
4934:        }
4935:    }
4936:#ifdef REGEX_MALLOC
4937:  else
4938:    {
4939:      /* We must initialize all our variables to NULL, so that
4940:         `FREE_VARIABLES' doesn't try to free them.  */
4941:      regstart = regend = old_regstart = old_regend = best_regstart
4942:        = best_regend = reg_dummy = NULL;
4943:      reg_info = reg_info_dummy = (register_info_type *) NULL;
4944:    }
4945:#endif /* REGEX_MALLOC */
4946:
4947:  /* The starting position is bogus.  */
4948:  if (pos < 0 || pos > size1 + size2)
4949:    {
4950:      FREE_VARIABLES ();
4951:      return -1;
4952:    }
4953:    
4954:  /* Initialize subexpression text positions to -1 to mark ones that no
4955:     start_memory/stop_memory has been seen for. Also initialize the
4956:     register information struct.  */
4957:  for (mcnt = 1; mcnt < num_regs; mcnt++)
4958:    {
4959:      regstart[mcnt] = regend[mcnt] 
4960:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
4961:        
4962:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
4963:      IS_ACTIVE (reg_info[mcnt]) = 0;
4964:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
4965:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
4966:    }
4967:  
4968:  /* We move `string1' into `string2' if the latter's empty -- but not if
4969:     `string1' is null.  */
4970:  if (size2 == 0 && string1 != NULL)
4971:    {
4972:      string2 = string1;
4973:      size2 = size1;
4974:      string1 = 0;
4975:      size1 = 0;
4976:    }
4977:  end1 = string1 + size1;
4978:  end2 = string2 + size2;
4979:
4980:  /* Compute where to stop matching, within the two strings.  */
4981:  if (stop <= size1)
4982:    {
4983:      end_match_1 = string1 + stop;
4984:      end_match_2 = string2;
4985:    }
4986:  else
4987:    {
4988:      end_match_1 = end1;
4989:      end_match_2 = string2 + stop - size1;
4990:    }
4991:
4992:  /* `p' scans through the pattern as `d' scans through the data. 
4993:     `dend' is the end of the input string that `d' points within.  `d'
4994:     is advanced into the following input string whenever necessary, but
4995:     this happens before fetching; therefore, at the beginning of the
4996:     loop, `d' can be pointing at the end of a string, but it cannot
4997:     equal `string2'.  */
4998:  if (size1 > 0 && pos <= size1)
4999:    {
5000:      d = string1 + pos;
5001:      dend = end_match_1;
5002:    }
5003:  else
5004:    {
5005:      d = string2 + pos - size1;
5006:      dend = end_match_2;
5007:    }
5008:
5009:  DEBUG_PRINT1 ("The compiled pattern is: ");
5010:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
5011:  DEBUG_PRINT1 ("The string to match is: `");
5012:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
5013:  DEBUG_PRINT1 ("'\n");
5014:  
5015:  /* This loops over pattern commands.  It exits by returning from the
5016:     function if the match is complete, or it drops through if the match
5017:     fails at this starting point in the input data.  */
5018:  for (;;)
5019:    {
5020:      DEBUG_PRINT2 ("\n0x%x: ", p);
5021:
5022:      if (p == pend)
5023:	{ /* End of pattern means we might have succeeded.  */
5024:          DEBUG_PRINT1 ("end of pattern ... ");
5025:          
5026:	  /* If we haven't matched the entire string, and we want the
5027:             longest match, try backtracking.  */
5028:          if (d != end_match_2)
5029:	    {
5030:              DEBUG_PRINT1 ("backtracking.\n");
5031:              
5032:              if (!FAIL_STACK_EMPTY ())
5033:                { /* More failure points to try.  */
5034:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
5035:	        	                == MATCHING_IN_FIRST_STRING);
5036:
5037:                  /* If exceeds best match so far, save it.  */
5038:                  if (!best_regs_set
5039:                      || (same_str_p && d > match_end)
5040:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
5041:                    {
5042:                      best_regs_set = true;
5043:                      match_end = d;
5044:                      
5045:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
5046:                      
5047:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
5048:                        {
5049:                          best_regstart[mcnt] = regstart[mcnt];
5050:                          best_regend[mcnt] = regend[mcnt];
5051:                        }
5052:                    }
5053:                  goto fail;	       
5054:                }
5055:
5056:              /* If no failure points, don't restore garbage.  */
5057:              else if (best_regs_set)   
5058:                {
5059:  	        restore_best_regs:
5060:                  /* Restore best match.  It may happen that `dend ==
5061:                     end_match_1' while the restored d is in string2.
5062:                     For example, the pattern `x.*y.*z' against the
5063:                     strings `x-' and `y-z-', if the two strings are
5064:                     not consecutive in memory.  */
5065:                  DEBUG_PRINT1 ("Restoring best registers.\n");
5066:                  
5067:                  d = match_end;
5068:                  dend = ((d >= string1 && d <= end1)
5069:		           ? end_match_1 : end_match_2);
5070:
5071:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
5072:		    {
5073:		      regstart[mcnt] = best_regstart[mcnt];
5074:		      regend[mcnt] = best_regend[mcnt];
5075:		    }
5076:                }
5077:            } /* d != end_match_2 */
5078:
5079:          DEBUG_PRINT1 ("Accepting match.\n");
5080:
5081:          /* If caller wants register contents data back, do it.  */
5082:          if (regs && !bufp->no_sub)
5083:	    {
5084:              /* Have the register data arrays been allocated?  */
5085:              if (bufp->regs_allocated == REGS_UNALLOCATED)
5086:                { /* No.  So allocate them with malloc.  We need one
5087:                     extra element beyond `num_regs' for the `-1' marker
5088:                     GNU code uses.  */
5089:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
5090:                  regs->start = TALLOC (regs->num_regs, regoff_t);
5091:                  regs->end = TALLOC (regs->num_regs, regoff_t);
5092:                  if (regs->start == NULL || regs->end == NULL)
5093:                    return -2;
5094:                  bufp->regs_allocated = REGS_REALLOCATE;
5095:                }
5096:              else if (bufp->regs_allocated == REGS_REALLOCATE)
5097:                { /* Yes.  If we need more elements than were already
5098:                     allocated, reallocate them.  If we need fewer, just
5099:                     leave it alone.  */
5100:                  if (regs->num_regs < num_regs + 1)
5101:                    {
5102:                      regs->num_regs = num_regs + 1;
5103:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
5104:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
5105:                      if (regs->start == NULL || regs->end == NULL)
5106:                        return -2;
5107:                    }
5108:                }
5109:              else
5110:		{
5111:		  /* These braces fend off a "empty body in an else-statement"
5112:		     warning under GCC when assert expands to nothing.  */
5113:		  assert (bufp->regs_allocated == REGS_FIXED);
5114:		}
5115:
5116:              /* Convert the pointer data in `regstart' and `regend' to
5117:                 indices.  Register zero has to be set differently,
5118:                 since we haven't kept track of any info for it.  */
5119:              if (regs->num_regs > 0)
5120:                {
5121:                  regs->start[0] = pos;
5122:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
5123:			          : d - string2 + size1);
5124:                }
5125:              
5126:              /* Go through the first `min (num_regs, regs->num_regs)'
5127:                 registers, since that is all we initialized.  */
5128:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
5129:		{
5130:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
5131:                    regs->start[mcnt] = regs->end[mcnt] = -1;
5132:                  else
5133:                    {
5134:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
5135:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
5136:                    }
5137:		}
5138:              
5139:              /* If the regs structure we return has more elements than
5140:                 were in the pattern, set the extra elements to -1.  If
5141:                 we (re)allocated the registers, this is the case,
5142:                 because we always allocate enough to have at least one
5143:                 -1 at the end.  */
5144:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
5145:                regs->start[mcnt] = regs->end[mcnt] = -1;
5146:	    } /* regs && !bufp->no_sub */
5147:
5148:          FREE_VARIABLES ();
5149:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
5150:                        nfailure_points_pushed, nfailure_points_popped,
5151:                        nfailure_points_pushed - nfailure_points_popped);
5152:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
5153:
5154:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
5155:			    ? string1 
5156:			    : string2 - size1);
5157:
5158:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
5159:
5160:          return mcnt;
5161:        }
5162:
5163:      /* Otherwise match next pattern command.  */
5164:#ifdef SWITCH_ENUM_BUG
5165:      switch ((int) ((re_opcode_t) *p++))
5166:#else
5167:      switch ((re_opcode_t) *p++)
5168:#endif
5169:	{
5170:        /* Ignore these.  Used to ignore the n of succeed_n's which
5171:           currently have n == 0.  */
5172:        case no_op:
5173:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
5174:          break;
5175:
5176:
5177:        /* Match the next n pattern characters exactly.  The following
5178:           byte in the pattern defines n, and the n bytes after that
5179:           are the characters to match.  */
5180:	case exactn:
5181:	  mcnt = *p++;
5182:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
5183:
5184:          /* This is written out as an if-else so we don't waste time
5185:             testing `translate' inside the loop.  */
5186:          if (translate)
5187:	    {
5188:	      do
5189:		{
5190:		  PREFETCH ();
5191:		  if (translate[(unsigned char) *d++] != (char) *p++)
5192:                    goto fail;
5193:		}
5194:	      while (--mcnt);
5195:	    }
5196:	  else
5197:	    {
5198:	      do
5199:		{
5200:		  PREFETCH ();
5201:		  if (*d++ != (char) *p++) goto fail;
5202:		}
5203:	      while (--mcnt);
5204:	    }
5205:	  SET_REGS_MATCHED ();
5206:          break;
5207:
5208:
5209:        /* Match any character except possibly a newline or a null.  */
5210:	case anychar:
5211:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
5212:
5213:          PREFETCH ();
5214:
5215:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
5216:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
5217:	    goto fail;
5218:
5219:          SET_REGS_MATCHED ();
5220:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
5221:          d++;
5222:	  break;
5223:
5224:
5225:	case charset:
5226:	case charset_not:
5227:	  {
5228:	    register unsigned char c;
5229:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
5230:
5231:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
5232:
5233:	    PREFETCH ();
5234:	    c = TRANSLATE (*d); /* The character to match.  */
5235:
5236:            /* Cast to `unsigned' instead of `unsigned char' in case the
5237:               bit list is a full 32 bytes long.  */
5238:	    if (c < (unsigned) (*p * BYTEWIDTH)
5239:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5240:	      not = !not;
5241:
5242:	    p += 1 + *p;
5243:
5244:	    if (!not) goto fail;
5245:            
5246:	    SET_REGS_MATCHED ();
5247:            d++;
5248:	    break;
5249:	  }
5250:
5251:
5252:        /* The beginning of a group is represented by start_memory.
5253:           The arguments are the register number in the next byte, and the
5254:           number of groups inner to this one in the next.  The text
5255:           matched within the group is recorded (in the internal
5256:           registers data structure) under the register number.  */
5257:        case start_memory:
5258:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
5259:
5260:          /* Find out if this group can match the empty string.  */
5261:	  p1 = p;		/* To send to group_match_null_string_p.  */
5262:          
5263:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
5264:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
5265:              = group_match_null_string_p (&p1, pend, reg_info);
5266:
5267:          /* Save the position in the string where we were the last time
5268:             we were at this open-group operator in case the group is
5269:             operated upon by a repetition operator, e.g., with `(a*)*b'
5270:             against `ab'; then we want to ignore where we are now in
5271:             the string in case this attempt to match fails.  */
5272:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
5273:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
5274:                             : regstart[*p];
5275:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
5276:			 POINTER_TO_OFFSET (old_regstart[*p]));
5277:
5278:          regstart[*p] = d;
5279:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
5280:
5281:          IS_ACTIVE (reg_info[*p]) = 1;
5282:          MATCHED_SOMETHING (reg_info[*p]) = 0;
5283:          
5284:          /* This is the new highest active register.  */
5285:          highest_active_reg = *p;
5286:          
5287:          /* If nothing was active before, this is the new lowest active
5288:             register.  */
5289:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
5290:            lowest_active_reg = *p;
5291:
5292:          /* Move past the register number and inner group count.  */
5293:          p += 2;
5294:          break;
5295:
5296:
5297:        /* The stop_memory opcode represents the end of a group.  Its
5298:           arguments are the same as start_memory's: the register
5299:           number, and the number of inner groups.  */
5300:	case stop_memory:
5301:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
5302:             
5303:          /* We need to save the string position the last time we were at
5304:             this close-group operator in case the group is operated
5305:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
5306:             against `aba'; then we want to ignore where we are now in
5307:             the string in case this attempt to match fails.  */
5308:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
5309:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
5310:			   : regend[*p];
5311:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
5312:			 POINTER_TO_OFFSET (old_regend[*p]));
5313:
5314:          regend[*p] = d;
5315:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
5316:
5317:          /* This register isn't active anymore.  */
5318:          IS_ACTIVE (reg_info[*p]) = 0;
5319:          
5320:          /* If this was the only register active, nothing is active
5321:             anymore.  */
5322:          if (lowest_active_reg == highest_active_reg)
5323:            {
5324:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
5325:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
5326:            }
5327:          else
5328:            { /* We must scan for the new highest active register, since
5329:                 it isn't necessarily one less than now: consider
5330:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
5331:                 new highest active register is 1.  */
5332:              unsigned char r = *p - 1;
5333:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
5334:                r--;
5335:              
5336:              /* If we end up at register zero, that means that we saved
5337:                 the registers as the result of an `on_failure_jump', not
5338:                 a `start_memory', and we jumped to past the innermost
5339:                 `stop_memory'.  For example, in ((.)*) we save
5340:                 registers 1 and 2 as a result of the *, but when we pop
5341:                 back to the second ), we are at the stop_memory 1.
5342:                 Thus, nothing is active.  */
5343:	      if (r == 0)
5344:                {
5345:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
5346:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
5347:                }
5348:              else
5349:                highest_active_reg = r;
5350:            }
5351:          
5352:          /* If just failed to match something this time around with a
5353:             group that's operated on by a repetition operator, try to
5354:             force exit from the ``loop'', and restore the register
5355:             information for this group that we had before trying this
5356:             last match.  */
5357:          if ((!MATCHED_SOMETHING (reg_info[*p])
5358:               || (re_opcode_t) p[-3] == start_memory)
5359:	      && (p + 2) < pend)              
5360:            {
5361:              boolean is_a_jump_n = false;
5362:              
5363:              p1 = p + 2;
5364:              mcnt = 0;
5365:              switch ((re_opcode_t) *p1++)
5366:                {
5367:                  case jump_n:
5368:		    is_a_jump_n = true;
5369:                  case pop_failure_jump:
5370:		  case maybe_pop_jump:
5371:		  case jump:
5372:		  case dummy_failure_jump:
5373:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5374:		    if (is_a_jump_n)
5375:		      p1 += 2;
5376:                    break;
5377:                  
5378:                  default:
5379:                    /* do nothing */ ;
5380:                }
5381:	      p1 += mcnt;
5382:        
5383:              /* If the next operation is a jump backwards in the pattern
5384:	         to an on_failure_jump right before the start_memory
5385:                 corresponding to this stop_memory, exit from the loop
5386:                 by forcing a failure after pushing on the stack the
5387:                 on_failure_jump's jump in the pattern, and d.  */
5388:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
5389:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
5390:		{
5391:                  /* If this group ever matched anything, then restore
5392:                     what its registers were before trying this last
5393:                     failed match, e.g., with `(a*)*b' against `ab' for
5394:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
5395:                     against `aba' for regend[3].
5396:                     
5397:                     Also restore the registers for inner groups for,
5398:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
5399:                     otherwise get trashed).  */
5400:                     
5401:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
5402:		    {
5403:		      unsigned r; 
5404:        
5405:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
5406:                      
5407:		      /* Restore this and inner groups' (if any) registers.  */
5408:                      for (r = *p; r < *p + *(p + 1); r++)
5409:                        {
5410:                          regstart[r] = old_regstart[r];
5411:
5412:                          /* xx why this test?  */
5413:                          if ((int) old_regend[r] >= (int) regstart[r])
5414:                            regend[r] = old_regend[r];
5415:                        }     
5416:                    }
5417:		  p1++;
5418:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5419:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
5420:
5421:                  goto fail;
5422:                }
5423:            }
5424:          
5425:          /* Move past the register number and the inner group count.  */
5426:          p += 2;
5427:          break;
5428:
5429:
5430:	/* \<digit> has been turned into a `duplicate' command which is
5431:           followed by the numeric value of <digit> as the register number.  */
5432:        case duplicate:
5433:	  {
5434:	    register const char *d2, *dend2;
5435:	    int regno = *p++;   /* Get which register to match against.  */
5436:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
5437:
5438:	    /* Can't back reference a group which we've never matched.  */
5439:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
5440:              goto fail;
5441:              
5442:            /* Where in input to try to start matching.  */
5443:            d2 = regstart[regno];
5444:            
5445:            /* Where to stop matching; if both the place to start and
5446:               the place to stop matching are in the same string, then
5447:               set to the place to stop, otherwise, for now have to use
5448:               the end of the first string.  */
5449:
5450:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
5451:		      == FIRST_STRING_P (regend[regno]))
5452:		     ? regend[regno] : end_match_1);
5453:	    for (;;)
5454:	      {
5455:		/* If necessary, advance to next segment in register
5456:                   contents.  */
5457:		while (d2 == dend2)
5458:		  {
5459:		    if (dend2 == end_match_2) break;
5460:		    if (dend2 == regend[regno]) break;
5461:
5462:                    /* End of string1 => advance to string2. */
5463:                    d2 = string2;
5464:                    dend2 = regend[regno];
5465:		  }
5466:		/* At end of register contents => success */
5467:		if (d2 == dend2) break;
5468:
5469:		/* If necessary, advance to next segment in data.  */
5470:		PREFETCH ();
5471:
5472:		/* How many characters left in this segment to match.  */
5473:		mcnt = dend - d;
5474:                
5475:		/* Want how many consecutive characters we can match in
5476:                   one shot, so, if necessary, adjust the count.  */
5477:                if (mcnt > dend2 - d2)
5478:		  mcnt = dend2 - d2;
5479:                  
5480:		/* Compare that many; failure if mismatch, else move
5481:                   past them.  */
5482:		if (translate 
5483:                    ? bcmp_translate (d, d2, mcnt, translate) 
5484:                    : bcmp (d, d2, mcnt))
5485:		  goto fail;
5486:		d += mcnt, d2 += mcnt;
5487:	      }
5488:	  }
5489:	  break;
5490:
5491:
5492:        /* begline matches the empty string at the beginning of the string
5493:           (unless `not_bol' is set in `bufp'), and, if
5494:           `newline_anchor' is set, after newlines.  */
5495:	case begline:
5496:          DEBUG_PRINT1 ("EXECUTING begline.\n");
5497:          
5498:          if (AT_STRINGS_BEG (d))
5499:            {
5500:              if (!bufp->not_bol) break;
5501:            }
5502:          else if (d[-1] == '\n' && bufp->newline_anchor)
5503:            {
5504:              break;
5505:            }
5506:          /* In all other cases, we fail.  */
5507:          goto fail;
5508:
5509:
5510:        /* endline is the dual of begline.  */
5511:	case endline:
5512:          DEBUG_PRINT1 ("EXECUTING endline.\n");
5513:
5514:          if (AT_STRINGS_END (d))
5515:            {
5516:              if (!bufp->not_eol) break;
5517:            }
5518:          
5519:          /* We have to ``prefetch'' the next character.  */
5520:          else if ((d == end1 ? *string2 : *d) == '\n'
5521:                   && bufp->newline_anchor)
5522:            {
5523:              break;
5524:            }
5525:          goto fail;
5526:
5527:
5528:	/* Match at the very beginning of the data.  */
5529:        case begbuf:
5530:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
5531:          if (AT_STRINGS_BEG (d))
5532:            break;
5533:          goto fail;
5534:
5535:
5536:	/* Match at the very end of the data.  */
5537:        case endbuf:
5538:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
5539:	  if (AT_STRINGS_END (d))
5540:	    break;
5541:          goto fail;
5542:
5543:
5544:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
5545:           pushes NULL as the value for the string on the stack.  Then
5546:           `pop_failure_point' will keep the current value for the
5547:           string, instead of restoring it.  To see why, consider
5548:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
5549:           then the . fails against the \n.  But the next thing we want
5550:           to do is match the \n against the \n; if we restored the
5551:           string value, we would be back at the foo.
5552:           
5553:           Because this is used only in specific cases, we don't need to
5554:           check all the things that `on_failure_jump' does, to make
5555:           sure the right things get saved on the stack.  Hence we don't
5556:           share its code.  The only reason to push anything on the
5557:           stack at all is that otherwise we would have to change
5558:           `anychar's code to do something besides goto fail in this
5559:           case; that seems worse than this.  */
5560:        case on_failure_keep_string_jump:
5561:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
5562:          
5563:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5564:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
5565:
5566:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
5567:          break;
5568:
5569:
5570:	/* Uses of on_failure_jump:
5571:        
5572:           Each alternative starts with an on_failure_jump that points
5573:           to the beginning of the next alternative.  Each alternative
5574:           except the last ends with a jump that in effect jumps past
5575:           the rest of the alternatives.  (They really jump to the
5576:           ending jump of the following alternative, because tensioning
5577:           these jumps is a hassle.)
5578:
5579:           Repeats start with an on_failure_jump that points past both
5580:           the repetition text and either the following jump or
5581:           pop_failure_jump back to this on_failure_jump.  */
5582:	case on_failure_jump:
5583:        on_failure:
5584:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
5585:
5586:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5587:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
5588:
5589:          /* If this on_failure_jump comes right before a group (i.e.,
5590:             the original * applied to a group), save the information
5591:             for that group and all inner ones, so that if we fail back
5592:             to this point, the group's information will be correct.
5593:             For example, in \(a*\)*\1, we need the preceding group,
5594:             and in \(\(a*\)b*\)\2, we need the inner group.  */
5595:
5596:          /* We can't use `p' to check ahead because we push
5597:             a failure point to `p + mcnt' after we do this.  */
5598:          p1 = p;
5599:
5600:          /* We need to skip no_op's before we look for the
5601:             start_memory in case this on_failure_jump is happening as
5602:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
5603:             against aba.  */
5604:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
5605:            p1++;
5606:
5607:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
5608:            {
5609:              /* We have a new highest active register now.  This will
5610:                 get reset at the start_memory we are about to get to,
5611:                 but we will have saved all the registers relevant to
5612:                 this repetition op, as described above.  */
5613:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
5614:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
5615:                lowest_active_reg = *(p1 + 1);
5616:            }
5617:
5618:          DEBUG_PRINT1 (":\n");
5619:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
5620:          break;
5621:
5622:
5623:        /* A smart repeat ends with `maybe_pop_jump'.
5624:	   We change it to either `pop_failure_jump' or `jump'.  */
5625:        case maybe_pop_jump:
5626:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
5627:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
5628:          {
5629:	    register unsigned char *p2 = p;
5630:
5631:            /* Compare the beginning of the repeat with what in the
5632:               pattern follows its end. If we can establish that there
5633:               is nothing that they would both match, i.e., that we
5634:               would have to backtrack because of (as in, e.g., `a*a')
5635:               then we can change to pop_failure_jump, because we'll
5636:               never have to backtrack.
5637:               
5638:               This is not true in the case of alternatives: in
5639:               `(a|ab)*' we do need to backtrack to the `ab' alternative
5640:               (e.g., if the string was `ab').  But instead of trying to
5641:               detect that here, the alternative has put on a dummy
5642:               failure point which is what we will end up popping.  */
5643:
5644:	    /* Skip over open/close-group commands.  */
5645:	    while (p2 + 2 < pend
5646:		   && ((re_opcode_t) *p2 == stop_memory
5647:		       || (re_opcode_t) *p2 == start_memory))
5648:	      p2 += 3;			/* Skip over args, too.  */
5649:
5650:            /* If we're at the end of the pattern, we can change.  */
5651:            if (p2 == pend)
5652:	      {
5653:		/* Consider what happens when matching ":\(.*\)"
5654:		   against ":/".  I don't really understand this code
5655:		   yet.  */
5656:  	        p[-3] = (unsigned char) pop_failure_jump;
5657:                DEBUG_PRINT1
5658:                  ("  End of pattern: change to `pop_failure_jump'.\n");
5659:              }
5660:
5661:            else if ((re_opcode_t) *p2 == exactn
5662:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
5663:	      {
5664:		register unsigned char c
5665:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
5666:		p1 = p + mcnt;
5667:
5668:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
5669:                   to the `maybe_finalize_jump' of this case.  Examine what 
5670:                   follows.  */
5671:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
5672:                  {
5673:  		    p[-3] = (unsigned char) pop_failure_jump;
5674:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
5675:                                  c, p1[5]);
5676:                  }
5677:                  
5678:		else if ((re_opcode_t) p1[3] == charset
5679:			 || (re_opcode_t) p1[3] == charset_not)
5680:		  {
5681:		    int not = (re_opcode_t) p1[3] == charset_not;
5682:                    
5683:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
5684:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5685:		      not = !not;
5686:
5687:                    /* `not' is equal to 1 if c would match, which means
5688:                        that we can't change to pop_failure_jump.  */
5689:		    if (!not)
5690:                      {
5691:  		        p[-3] = (unsigned char) pop_failure_jump;
5692:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
5693:                      }
5694:		  }
5695:	      }
5696:	  }
5697:	  p -= 2;		/* Point at relative address again.  */
5698:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
5699:	    {
5700:	      p[-1] = (unsigned char) jump;
5701:              DEBUG_PRINT1 ("  Match => jump.\n");
5702:	      goto unconditional_jump;
5703:	    }
5704:        /* Note fall through.  */
5705:
5706:
5707:	/* The end of a simple repeat has a pop_failure_jump back to
5708:           its matching on_failure_jump, where the latter will push a
5709:           failure point.  The pop_failure_jump takes off failure
5710:           points put on by this pop_failure_jump's matching
5711:           on_failure_jump; we got through the pattern to here from the
5712:           matching on_failure_jump, so didn't fail.  */
5713:        case pop_failure_jump:
5714:          {
5715:            /* We need to pass separate storage for the lowest and
5716:               highest registers, even though we don't care about the
5717:               actual values.  Otherwise, we will restore only one
5718:               register from the stack, since lowest will == highest in
5719:               `pop_failure_point'.  */
5720:            unsigned dummy_low_reg, dummy_high_reg;
5721:            unsigned char *pdummy;
5722:            const char *sdummy;
5723:
5724:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
5725:            POP_FAILURE_POINT (sdummy, pdummy,
5726:                               dummy_low_reg, dummy_high_reg,
5727:                               reg_dummy, reg_dummy, reg_info_dummy);
5728:          }
5729:          /* Note fall through.  */
5730:
5731:          
5732:        /* Unconditionally jump (without popping any failure points).  */
5733:        case jump:
5734:	unconditional_jump:
5735:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
5736:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
5737:	  p += mcnt;				/* Do the jump.  */
5738:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
5739:	  break;
5740:
5741:	
5742:        /* We need this opcode so we can detect where alternatives end
5743:           in `group_match_null_string_p' et al.  */
5744:        case jump_past_alt:
5745:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
5746:          goto unconditional_jump;
5747:
5748:
5749:        /* Normally, the on_failure_jump pushes a failure point, which
5750:           then gets popped at pop_failure_jump.  We will end up at
5751:           pop_failure_jump, also, and with a pattern of, say, `a+', we
5752:           are skipping over the on_failure_jump, so we have to push
5753:           something meaningless for pop_failure_jump to pop.  */
5754:        case dummy_failure_jump:
5755:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
5756:          /* It doesn't matter what we push for the string here.  What
5757:             the code at `fail' tests is the value for the pattern.  */
5758:          PUSH_FAILURE_POINT (0, 0, -2);
5759:          goto unconditional_jump;
5760:
5761:
5762:        /* At the end of an alternative, we need to push a dummy failure
5763:           point in case we are followed by a `pop_failure_jump', because
5764:           we don't want the failure point for the alternative to be
5765:           popped.  For example, matching `(a|ab)*' against `aab'
5766:           requires that we match the `ab' alternative.  */
5767:        case push_dummy_failure:
5768:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
5769:          /* See comments just above at `dummy_failure_jump' about the
5770:             two zeroes.  */
5771:          PUSH_FAILURE_POINT (0, 0, -2);
5772:          break;
5773:
5774:        /* Have to succeed matching what follows at least n times.
5775:           After that, handle like `on_failure_jump'.  */
5776:        case succeed_n: 
5777:          EXTRACT_NUMBER (mcnt, p + 2);
5778:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
5779:
5780:          assert (mcnt >= 0);
5781:          /* Originally, this is how many times we HAVE to succeed.  */
5782:          if (mcnt > 0)
5783:            {
5784:               mcnt--;
5785:	       p += 2;
5786:               STORE_NUMBER_AND_INCR (p, mcnt);
5787:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
5788:            }
5789:	  else if (mcnt == 0)
5790:            {
5791:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
5792:	      p[2] = (unsigned char) no_op;
5793:              p[3] = (unsigned char) no_op;
5794:              goto on_failure;
5795:            }
5796:          break;
5797:        
5798:        case jump_n: 
5799:          EXTRACT_NUMBER (mcnt, p + 2);
5800:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
5801:
5802:          /* Originally, this is how many times we CAN jump.  */
5803:          if (mcnt)
5804:            {
5805:               mcnt--;
5806:               STORE_NUMBER (p + 2, mcnt);
5807:	       goto unconditional_jump;	     
5808:            }
5809:          /* If don't have to jump any more, skip over the rest of command.  */
5810:	  else      
5811:	    p += 4;		     
5812:          break;
5813:        
5814:	case set_number_at:
5815:	  {
5816:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
5817:
5818:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
5819:            p1 = p + mcnt;
5820:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
5821:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
5822:	    STORE_NUMBER (p1, mcnt);
5823:            break;
5824:          }
5825:
5826:        case wordbound:
5827:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
5828:          if (AT_WORD_BOUNDARY (d))
5829:	    break;
5830:          goto fail;
5831:
5832:	case notwordbound:
5833:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
5834:	  if (AT_WORD_BOUNDARY (d))
5835:	    goto fail;
5836:          break;
5837:
5838:	case wordbeg:
5839:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
5840:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
5841:	    break;
5842:          goto fail;
5843:
5844:	case wordend:
5845:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
5846:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
5847:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
5848:	    break;
5849:          goto fail;
5850:
5851:#ifdef emacs
5852:#ifdef emacs19
5853:  	case before_dot:
5854:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
5855: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
5856:  	    goto fail;
5857:  	  break;
5858:  
5859:  	case at_dot:
5860:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5861: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
5862:  	    goto fail;
5863:  	  break;
5864:  
5865:  	case after_dot:
5866:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
5867:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
5868:  	    goto fail;
5869:  	  break;
5870:#else /* not emacs19 */
5871:	case at_dot:
5872:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5873:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
5874:	    goto fail;
5875:	  break;
5876:#endif /* not emacs19 */
5877:
5878:	case syntaxspec:
5879:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
5880:	  mcnt = *p++;
5881:	  goto matchsyntax;
5882:
5883:        case wordchar:
5884:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
5885:	  mcnt = (int) Sword;
5886:        matchsyntax:
5887:	  PREFETCH ();
5888:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
5889:            goto fail;
5890:          SET_REGS_MATCHED ();
5891:	  break;
5892:
5893:	case notsyntaxspec:
5894:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
5895:	  mcnt = *p++;
5896:	  goto matchnotsyntax;
5897:
5898:        case notwordchar:
5899:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
5900:	  mcnt = (int) Sword;
5901:        matchnotsyntax:
5902:	  PREFETCH ();
5903:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
5904:            goto fail;
5905:	  SET_REGS_MATCHED ();
5906:          break;
5907:
5908:#else /* not emacs */
5909:	case wordchar:
5910:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
5911:	  PREFETCH ();
5912:          if (!WORDCHAR_P (d))
5913:            goto fail;
5914:	  SET_REGS_MATCHED ();
5915:          d++;
5916:	  break;
5917:	  
5918:	case notwordchar:
5919:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
5920:	  PREFETCH ();
5921:	  if (WORDCHAR_P (d))
5922:            goto fail;
5923:          SET_REGS_MATCHED ();
5924:          d++;
5925:	  break;
5926:#endif /* not emacs */
5927:          
5928:        default:
5929:          abort ();
5930:	}
5931:      continue;  /* Successfully executed one pattern command; keep going.  */
5932:
5933:
5934:    /* We goto here if a matching operation fails. */
5935:    fail:
5936:      if (!FAIL_STACK_EMPTY ())
5937:	{ /* A restart point is known.  Restore to that state.  */
5938:          DEBUG_PRINT1 ("\nFAIL:\n");
5939:          POP_FAILURE_POINT (d, p,
5940:                             lowest_active_reg, highest_active_reg,
5941:                             regstart, regend, reg_info);
5942:
5943:          /* If this failure point is a dummy, try the next one.  */
5944:          if (!p)
5945:	    goto fail;
5946:
5947:          /* If we failed to the end of the pattern, don't examine *p.  */
5948:	  assert (p <= pend);
5949:          if (p < pend)
5950:            {
5951:              boolean is_a_jump_n = false;
5952:              
5953:              /* If failed to a backwards jump that's part of a repetition
5954:                 loop, need to pop this failure point and use the next one.  */
5955:              switch ((re_opcode_t) *p)
5956:                {
5957:                case jump_n:
5958:                  is_a_jump_n = true;
5959:                case maybe_pop_jump:
5960:                case pop_failure_jump:
5961:                case jump:
5962:                  p1 = p + 1;
5963:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5964:                  p1 += mcnt;	
5965:
5966:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
5967:                      || (!is_a_jump_n
5968:                          && (re_opcode_t) *p1 == on_failure_jump))
5969:                    goto fail;
5970:                  break;
5971:                default:
5972:                  /* do nothing */ ;
5973:                }
5974:            }
5975:
5976:          if (d >= string1 && d <= end1)
5977:	    dend = end_match_1;
5978:        }
5979:      else
5980:        break;   /* Matching at this starting point really fails.  */
5981:    } /* for (;;) */
5982:
5983:  if (best_regs_set)
5984:    goto restore_best_regs;
5985:
5986:  FREE_VARIABLES ();
5987:
5988:  return -1;         			/* Failure to match.  */
5989:} /* re_match_2 */
5990:
5991:/* Subroutine definitions for re_match_2.  */
5992:
5993:
5994:/* We are passed P pointing to a register number after a start_memory.
5995:   
5996:   Return true if the pattern up to the corresponding stop_memory can
5997:   match the empty string, and false otherwise.
5998:   
5999:   If we find the matching stop_memory, sets P to point to one past its number.
6000:   Otherwise, sets P to an undefined byte less than or equal to END.
6001:
6002:   We don't handle duplicates properly (yet).  */
6003:
6004:static boolean
6005:group_match_null_string_p (p, end, reg_info)
6006:    unsigned char **p, *end;
6007:    register_info_type *reg_info;
6008:{
6009:  int mcnt;
6010:  /* Point to after the args to the start_memory.  */
6011:  unsigned char *p1 = *p + 2;
6012:  
6013:  while (p1 < end)
6014:    {
6015:      /* Skip over opcodes that can match nothing, and return true or
6016:	 false, as appropriate, when we get to one that can't, or to the
6017:         matching stop_memory.  */
6018:      
6019:      switch ((re_opcode_t) *p1)
6020:        {
6021:        /* Could be either a loop or a series of alternatives.  */
6022:        case on_failure_jump:
6023:          p1++;
6024:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6025:          
6026:          /* If the next operation is not a jump backwards in the
6027:	     pattern.  */
6028:
6029:	  if (mcnt >= 0)
6030:	    {
6031:              /* Go through the on_failure_jumps of the alternatives,
6032:                 seeing if any of the alternatives cannot match nothing.
6033:                 The last alternative starts with only a jump,
6034:                 whereas the rest start with on_failure_jump and end
6035:                 with a jump, e.g., here is the pattern for `a|b|c':
6036:
6037:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
6038:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
6039:                 /exactn/1/c						
6040:
6041:                 So, we have to first go through the first (n-1)
6042:                 alternatives and then deal with the last one separately.  */
6043:
6044:
6045:              /* Deal with the first (n-1) alternatives, which start
6046:                 with an on_failure_jump (see above) that jumps to right
6047:                 past a jump_past_alt.  */
6048:
6049:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
6050:                {
6051:                  /* `mcnt' holds how many bytes long the alternative
6052:                     is, including the ending `jump_past_alt' and
6053:                     its number.  */
6054:
6055:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
6056:				                      reg_info))
6057:                    return false;
6058:
6059:                  /* Move to right after this alternative, including the
6060:		     jump_past_alt.  */
6061:                  p1 += mcnt;	
6062:
6063:                  /* Break if it's the beginning of an n-th alternative
6064:                     that doesn't begin with an on_failure_jump.  */
6065:                  if ((re_opcode_t) *p1 != on_failure_jump)
6066:                    break;
6067:		
6068:		  /* Still have to check that it's not an n-th
6069:		     alternative that starts with an on_failure_jump.  */
6070:		  p1++;
6071:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6072:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
6073:                    {
6074:		      /* Get to the beginning of the n-th alternative.  */
6075:                      p1 -= 3;
6076:                      break;
6077:                    }
6078:                }
6079:
6080:              /* Deal with the last alternative: go back and get number
6081:                 of the `jump_past_alt' just before it.  `mcnt' contains
6082:                 the length of the alternative.  */
6083:              EXTRACT_NUMBER (mcnt, p1 - 2);
6084:
6085:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
6086:                return false;
6087:
6088:              p1 += mcnt;	/* Get past the n-th alternative.  */
6089:            } /* if mcnt > 0 */
6090:          break;
6091:
6092:          
6093:        case stop_memory:
6094:	  assert (p1[1] == **p);
6095:          *p = p1 + 2;
6096:          return true;
6097:
6098:        
6099:        default: 
6100:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6101:            return false;
6102:        }
6103:    } /* while p1 < end */
6104:
6105:  return false;
6106:} /* group_match_null_string_p */
6107:
6108:
6109:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
6110:   It expects P to be the first byte of a single alternative and END one
6111:   byte past the last. The alternative can contain groups.  */
6112:   
6113:static boolean
6114:alt_match_null_string_p (p, end, reg_info)
6115:    unsigned char *p, *end;
6116:    register_info_type *reg_info;
6117:{
6118:  int mcnt;
6119:  unsigned char *p1 = p;
6120:  
6121:  while (p1 < end)
6122:    {
6123:      /* Skip over opcodes that can match nothing, and break when we get 
6124:         to one that can't.  */
6125:      
6126:      switch ((re_opcode_t) *p1)
6127:        {
6128:	/* It's a loop.  */
6129:        case on_failure_jump:
6130:          p1++;
6131:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6132:          p1 += mcnt;
6133:          break;
6134:          
6135:	default: 
6136:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6137:            return false;
6138:        }
6139:    }  /* while p1 < end */
6140:
6141:  return true;
6142:} /* alt_match_null_string_p */
6143:
6144:
6145:/* Deals with the ops common to group_match_null_string_p and
6146:   alt_match_null_string_p.  
6147:   
6148:   Sets P to one after the op and its arguments, if any.  */
6149:
6150:static boolean
6151:common_op_match_null_string_p (p, end, reg_info)
6152:    unsigned char **p, *end;
6153:    register_info_type *reg_info;
6154:{
6155:  int mcnt;
6156:  boolean ret;
6157:  int reg_no;
6158:  unsigned char *p1 = *p;
6159:
6160:  switch ((re_opcode_t) *p1++)
6161:    {
6162:    case no_op:
6163:    case begline:
6164:    case endline:
6165:    case begbuf:
6166:    case endbuf:
6167:    case wordbeg:
6168:    case wordend:
6169:    case wordbound:
6170:    case notwordbound:
6171:#ifdef emacs
6172:    case before_dot:
6173:    case at_dot:
6174:    case after_dot:
6175:#endif
6176:      break;
6177:
6178:    case start_memory:
6179:      reg_no = *p1;
6180:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
6181:      ret = group_match_null_string_p (&p1, end, reg_info);
6182:      
6183:      /* Have to set this here in case we're checking a group which
6184:         contains a group and a back reference to it.  */
6185:
6186:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
6187:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
6188:
6189:      if (!ret)
6190:        return false;
6191:      break;
6192:          
6193:    /* If this is an optimized succeed_n for zero times, make the jump.  */
6194:    case jump:
6195:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6196:      if (mcnt >= 0)
6197:        p1 += mcnt;
6198:      else
6199:        return false;
6200:      break;
6201:
6202:    case succeed_n:
6203:      /* Get to the number of times to succeed.  */
6204:      p1 += 2;		
6205:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6206:
6207:      if (mcnt == 0)
6208:        {
6209:          p1 -= 4;
6210:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6211:          p1 += mcnt;
6212:        }
6213:      else
6214:        return false;
6215:      break;
6216:
6217:    case duplicate: 
6218:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
6219:        return false;
6220:      break;
6221:
6222:    case set_number_at:
6223:      p1 += 4;
6224:
6225:    default:
6226:      /* All other opcodes mean we cannot match the empty string.  */
6227:      return false;
6228:  }
6229:
6230:  *p = p1;
6231:  return true;
6232:} /* common_op_match_null_string_p */
6233:
6234:
6235:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
6236:   bytes; nonzero otherwise.  */
6237:   
6238:static int
6239:bcmp_translate (s1, s2, len, translate)
6240:     unsigned char *s1, *s2;
6241:     register int len;
6242:     char *translate;
6243:{
6244:  register unsigned char *p1 = s1, *p2 = s2;
6245:  while (len)
6246:    {
6247:      if (translate[*p1++] != translate[*p2++]) return 1;
6248:      len--;
6249:    }
6250:  return 0;
6251:}
6252:
6253:/* Entry points for GNU code.  */
6254:
6255:/* re_compile_pattern is the GNU regular expression compiler: it
6256:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
6257:   Returns 0 if the pattern was valid, otherwise an error string.
6258:   
6259:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
6260:   are set in BUFP on entry.
6261:   
6262:   We call regex_compile to do the actual compilation.  */
6263:
6264:const char *
6265:re_compile_pattern (pattern, length, bufp)
6266:     const char *pattern;
6267:     int length;
6268:     struct re_pattern_buffer *bufp;
6269:{
6270:  reg_errcode_t ret;
6271:  
6272:  /* GNU code is written to assume at least RE_NREGS registers will be set
6273:     (and at least one extra will be -1).  */
6274:  bufp->regs_allocated = REGS_UNALLOCATED;
6275:  
6276:  /* And GNU code determines whether or not to get register information
6277:     by passing null for the REGS argument to re_match, etc., not by
6278:     setting no_sub.  */
6279:  bufp->no_sub = 0;
6280:  
6281:  /* Match anchors at newline.  */
6282:  bufp->newline_anchor = 1;
6283:  
6284:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
6285:
6286:  return re_error_msg[(int) ret];
6287:}     
6288:
6289:/* Entry points compatible with 4.2 BSD regex library.  We don't define
6290:   them if this is an Emacs or POSIX compilation.  */
6291:
6292:#if !defined (emacs) && !defined (_POSIX_SOURCE)
6293:
6294:/* BSD has one and only one pattern buffer.  */
6295:static struct re_pattern_buffer re_comp_buf;
6296:
6297:char *
6298:re_comp (s)
6299:    const char *s;
6300:{
6301:  reg_errcode_t ret;
6302:  
6303:  if (!s)
6304:    {
6305:      if (!re_comp_buf.buffer)
6306:	return "No previous regular expression";
6307:      return 0;
6308:    }
6309:
6310:  if (!re_comp_buf.buffer)
6311:    {
6312:      re_comp_buf.buffer = (unsigned char *) malloc (200);
6313:      if (re_comp_buf.buffer == NULL)
6314:        return "Memory exhausted";
6315:      re_comp_buf.allocated = 200;
6316:
6317:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
6318:      if (re_comp_buf.fastmap == NULL)
6319:	return "Memory exhausted";
6320:    }
6321:
6322:  /* Since `re_exec' always passes NULL for the `regs' argument, we
6323:     don't need to initialize the pattern buffer fields which affect it.  */
6324:
6325:  /* Match anchors at newlines.  */
6326:  re_comp_buf.newline_anchor = 1;
6327:
6328:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
6329:  
6330:  /* Yes, we're discarding `const' here.  */
6331:  return (char *) re_error_msg[(int) ret];
6332:}
6333:
6334:
6335:int
6336:re_exec (s)
6337:    const char *s;
6338:{
6339:  const int len = strlen (s);
6340:  return
6341:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
6342:}
6343:#endif /* not emacs and not _POSIX_SOURCE */
6344:
6345:/* POSIX.2 functions.  Don't define these for Emacs.  */
6346:
6347:#ifndef emacs
6348:
6349:/* regcomp takes a regular expression as a string and compiles it.
6350:
6351:   PREG is a regex_t *.  We do not expect any fields to be initialized,
6352:   since POSIX says we shouldn't.  Thus, we set
6353:
6354:     `buffer' to the compiled pattern;
6355:     `used' to the length of the compiled pattern;
6356:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
6357:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
6358:       RE_SYNTAX_POSIX_BASIC;
6359:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
6360:     `fastmap' and `fastmap_accurate' to zero;
6361:     `re_nsub' to the number of subexpressions in PATTERN.
6362:
6363:   PATTERN is the address of the pattern string.
6364:
6365:   CFLAGS is a series of bits which affect compilation.
6366:
6367:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
6368:     use POSIX basic syntax.
6369:
6370:     If REG_NEWLINE is set, then . and [^...] don't match newline.
6371:     Also, regexec will try a match beginning after every newline.
6372:
6373:     If REG_ICASE is set, then we considers upper- and lowercase
6374:     versions of letters to be equivalent when matching.
6375:
6376:     If REG_NOSUB is set, then when PREG is passed to regexec, that
6377:     routine will report only success or failure, and nothing about the
6378:     registers.
6379:
6380:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
6381:   the return codes and their meanings.)  */
6382:
6383:int
6384:regcomp (preg, pattern, cflags)
6385:    regex_t *preg;
6386:    const char *pattern; 
6387:    int cflags;
6388:{
6389:  reg_errcode_t ret;
6390:  unsigned syntax
6391:    = (cflags & REG_EXTENDED) ?
6392:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
6393:
6394:  /* regex_compile will allocate the space for the compiled pattern.  */
6395:  preg->buffer = 0;
6396:  preg->allocated = 0;
6397:  preg->used = 0;
6398:  
6399:  /* Don't bother to use a fastmap when searching.  This simplifies the
6400:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
6401:     characters after newlines into the fastmap.  This way, we just try
6402:     every character.  */
6403:  preg->fastmap = 0;
6404:  
6405:  if (cflags & REG_ICASE)
6406:    {
6407:      unsigned i;
6408:      
6409:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
6410:      if (preg->translate == NULL)
6411:        return (int) REG_ESPACE;
6412:
6413:      /* Map uppercase characters to corresponding lowercase ones.  */
6414:      for (i = 0; i < CHAR_SET_SIZE; i++)
6415:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
6416:    }
6417:  else
6418:    preg->translate = NULL;
6419:
6420:  /* If REG_NEWLINE is set, newlines are treated differently.  */
6421:  if (cflags & REG_NEWLINE)
6422:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
6423:      syntax &= ~RE_DOT_NEWLINE;
6424:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
6425:      /* It also changes the matching behavior.  */
6426:      preg->newline_anchor = 1;
6427:    }
6428:  else
6429:    preg->newline_anchor = 0;
6430:
6431:  preg->no_sub = !!(cflags & REG_NOSUB);
6432:
6433:  /* POSIX says a null character in the pattern terminates it, so we 
6434:     can use strlen here in compiling the pattern.  */
6435:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
6436:  
6437:  /* POSIX doesn't distinguish between an unmatched open-group and an
6438:     unmatched close-group: both are REG_EPAREN.  */
6439:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
6440:  
6441:  return (int) ret;
6442:}
6443:
6444:
6445:/* regexec searches for a given pattern, specified by PREG, in the
6446:   string STRING.
6447:   
6448:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
6449:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
6450:   least NMATCH elements, and we set them to the offsets of the
6451:   corresponding matched substrings.
6452:   
6453:   EFLAGS specifies `execution flags' which affect matching: if
6454:   REG_NOTBOL is set, then ^ does not match at the beginning of the
6455:   string; if REG_NOTEOL is set, then $ does not match at the end.
6456:   
6457:   We return 0 if we find a match and REG_NOMATCH if not.  */
6458:
6459:int
6460:regexec (preg, string, nmatch, pmatch, eflags)
6461:    const regex_t *preg;
6462:    const char *string; 
6463:    size_t nmatch; 
6464:    regmatch_t pmatch[]; 
6465:    int eflags;
6466:{
6467:  int ret;
6468:  struct re_registers regs;
6469:  regex_t private_preg;
6470:  int len = strlen (string);
6471:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
6472:
6473:  private_preg = *preg;
6474:  
6475:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
6476:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
6477:  
6478:  /* The user has told us exactly how many registers to return
6479:     information about, via `nmatch'.  We have to pass that on to the
6480:     matching routines.  */
6481:  private_preg.regs_allocated = REGS_FIXED;
6482:  
6483:  if (want_reg_info)
6484:    {
6485:      regs.num_regs = nmatch;
6486:      regs.start = TALLOC (nmatch, regoff_t);
6487:      regs.end = TALLOC (nmatch, regoff_t);
6488:      if (regs.start == NULL || regs.end == NULL)
6489:        return (int) REG_NOMATCH;
6490:    }
6491:
6492:  /* Perform the searching operation.  */
6493:  ret = re_search (&private_preg, string, len,
6494:                   /* start: */ 0, /* range: */ len,
6495:                   want_reg_info ? &regs : (struct re_registers *) 0);
6496:  
6497:  /* Copy the register information to the POSIX structure.  */
6498:  if (want_reg_info)
6499:    {
6500:      if (ret >= 0)
6501:        {
6502:          unsigned r;
6503:
6504:          for (r = 0; r < nmatch; r++)
6505:            {
6506:              pmatch[r].rm_so = regs.start[r];
6507:              pmatch[r].rm_eo = regs.end[r];
6508:            }
6509:        }
6510:
6511:      /* If we needed the temporary register info, free the space now.  */
6512:      free (regs.start);
6513:      free (regs.end);
6514:    }
6515:
6516:  /* We want zero return to mean success, unlike `re_search'.  */
6517:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
6518:}
6519:
6520:
6521:/* Returns a message corresponding to an error code, ERRCODE, returned
6522:   from either regcomp or regexec.   We don't use PREG here.  */
6523:
6524:size_t
6525:regerror (errcode, preg, errbuf, errbuf_size)
6526:    int errcode;
6527:    const regex_t *preg;
6528:    char *errbuf;
6529:    size_t errbuf_size;
6530:{
6531:  const char *msg;
6532:  size_t msg_size;
6533:
6534:  if (errcode < 0
6535:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
6536:    /* Only error codes returned by the rest of the code should be passed 
6537:       to this routine.  If we are given anything else, or if other regex
6538:       code generates an invalid error code, then the program has a bug.
6539:       Dump core so we can fix it.  */
6540:    abort ();
6541:
6542:  msg = re_error_msg[errcode];
6543:
6544:  /* POSIX doesn't require that we do anything in this case, but why
6545:     not be nice.  */
6546:  if (! msg)
6547:    msg = "Success";
6548:
6549:  msg_size = strlen (msg) + 1; /* Includes the null.  */
6550:  
6551:  if (errbuf_size != 0)
6552:    {
6553:      if (msg_size > errbuf_size)
6554:        {
6555:          strncpy (errbuf, msg, errbuf_size - 1);
6556:          errbuf[errbuf_size - 1] = 0;
6557:        }
6558:      else
6559:        strcpy (errbuf, msg);
6560:    }
6561:
6562:  return msg_size;
6563:}
6564:
6565:
6566:/* Free dynamically allocated space used by PREG.  */
6567:
6568:void
6569:regfree (preg)
6570:    regex_t *preg;
6571:{
6572:  if (preg->buffer != NULL)
6573:    free (preg->buffer);
6574:  preg->buffer = NULL;
6575:  
6576:  preg->allocated = 0;
6577:  preg->used = 0;
6578:
6579:  if (preg->fastmap != NULL)
6580:    free (preg->fastmap);
6581:  preg->fastmap = NULL;
6582:  preg->fastmap_accurate = 0;
6583:
6584:  if (preg->translate != NULL)
6585:    free (preg->translate);
6586:  preg->translate = NULL;
6587:}
6588:
6589:#endif /* not emacs  */
6590:
6591:/*
6592:Local variables:
6593:make-backup-files: t
6594:version-control: t
6595:trim-versions-without-asking: nil
6596:End:
6597:*/
6598:/* dfa.c - deterministic extended regexp routines for GNU
6599:   Copyright (C) 1988 Free Software Foundation, Inc.
6600:
6601:   This program is free software; you can redistribute it and/or modify
6602:   it under the terms of the GNU General Public License as published by
6603:   the Free Software Foundation; either version 2, or (at your option)
6604:   any later version.
6605:
6606:   This program is distributed in the hope that it will be useful,
6607:   but WITHOUT ANY WARRANTY; without even the implied warranty of
6608:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
6609:   GNU General Public License for more details.
6610:
6611:   You should have received a copy of the GNU General Public License
6612:   along with this program; if not, write to the Free Software
6613:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
6614:
6615:/* Written June, 1988 by Mike Haertel
6616:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
6617:
6621:
6622:#ifdef STDC_HEADERS
6623:#if flag_stdlib==0
6625:#define flag_stdlib 1
6626:#endif
6627:#else
6628:#if flag_systypes==0 
6630:#define flag_systypes 1
6631:#endif
6632:extern char *calloc(), *malloc(), *realloc();
6633:extern void free();
6634:#endif
6635:
6636:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
6637:#if flag_string==0
6639:#define flag_string 1
6640:#endif
6641:#undef index
6642:#define index strchr
6643:#else
6644:#if flag_strings==0
6646:#define flag_strings 1
6647:#endif
6648:#endif
6649:
6650:#ifndef isgraph
6651:#define isgraph(C) (isprint(C) && !isspace(C))
6652:#endif
6653:
6654:#undef ISALPHA
6655:#undef ISUPPER
6656:#undef ISLOWER
6657:#undef ISDIGIT
6658:#undef ISXDIGIT
6659:#undef ISSPACE
6660:#undef ISPUNCT
6661:#undef ISALNUM
6662:#undef ISPRINT
6663:#undef ISGRAPH
6664:#undef ISCNTRL
6665:
6666:
6667:#ifdef isascii
6668:#define ISALPHA(C) (isascii(C) && isalpha(C))
6669:#define ISUPPER(C) (isascii(C) && isupper(C))
6670:#define ISLOWER(C) (isascii(C) && islower(C))
6671:#define ISDIGIT(C) (isascii(C) && isdigit(C))
6672:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
6673:#define ISSPACE(C) (isascii(C) && isspace(C))
6674:#define ISPUNCT(C) (isascii(C) && ispunct(C))
6675:#define ISALNUM(C) (isascii(C) && isalnum(C))
6676:#define ISPRINT(C) (isascii(C) && isprint(C))
6677:#define ISGRAPH(C) (isascii(C) && isgraph(C))
6678:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
6679:#else
6680:#define ISALPHA(C) isalpha(C)
6681:#define ISUPPER(C) isupper(C)
6682:#define ISLOWER(C) islower(C)
6683:#define ISDIGIT(C) isdigit(C)
6684:#define ISXDIGIT(C) isxdigit(C)
6685:#define ISSPACE(C) isspace(C)
6686:#define ISPUNCT(C) ispunct(C)
6687:#define ISALNUM(C) isalnum(C)
6688:#define ISPRINT(C) isprint(C)
6689:#define ISGRAPH(C) isgraph(C)
6690:#define ISCNTRL(C) iscntrl(C)
6691:#endif
6692:
6695:
6696:#if __STDC__
6697:typedef void *ptr_t;
6698:#else
6699:typedef char *ptr_t;
6700:#endif
6701:
6702:static void	dfamust();
6703:
6704:static ptr_t
6705:xcalloc(n, s)
6706:     int n;
6707:     size_t s;
6708:{
6709:  ptr_t r = calloc(n, s);
6710:
6711:  if (!r)
6712:    dfaerror("Memory exhausted");
6713:  return r;
6714:}
6715:
6716:static ptr_t
6717:xmalloc_1(n)
6718:     size_t n;
6719:{
6720:  ptr_t r = malloc(n);
6721:
6722:  assert(n != 0);
6723:  if (!r)
6724:    dfaerror("Memory exhausted");
6725:  return r;
6726:}
6727:
6728:static ptr_t
6729:xrealloc_1(p, n)
6730:     ptr_t p;
6731:     size_t n;
6732:{
6733:  ptr_t r = realloc(p, n);
6734:
6735:  assert(n != 0);
6736:  if (!r)
6737:    dfaerror("Memory exhausted");
6738:  return r;
6739:}
6740:
6741:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
6742:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
6743:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
6744:
6745:/* Reallocate an array of type t if nalloc is too small for index. */
6746:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
6747:  if ((index) >= (nalloc))			  \
6748:    {						  \
6749:      while ((index) >= (nalloc))		  \
6750:	(nalloc) *= 2;				  \
6751:      REALLOC(p, t, nalloc);			  \
6752:    }
6753:
6754:#ifdef DEBUG
6755:
6756:static void
6757:prtok(t)
6758:     token t;
6759:{
6760:  char *s;
6761:
6762:  if (t < 0)
6763:    fprintf(stderr, "END");
6764:  else if (t < NOTCHAR)
6765:    fprintf(stderr, "%c", t);
6766:  else
6767:    {
6768:      switch (t)
6769:	{
6770:	case EMPTY: s = "EMPTY"; break;
6771:	case BACKREF: s = "BACKREF"; break;
6772:	case BEGLINE: s = "BEGLINE"; break;
6773:	case ENDLINE: s = "ENDLINE"; break;
6774:	case BEGWORD: s = "BEGWORD"; break;
6775:	case ENDWORD: s = "ENDWORD"; break;
6776:	case LIMWORD: s = "LIMWORD"; break;
6777:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
6778:	case QMARK: s = "QMARK"; break;
6779:	case STAR: s = "STAR"; break;
6780:	case PLUS: s = "PLUS"; break;
6781:	case CAT: s = "CAT"; break;
6782:	case OR: s = "OR"; break;
6783:	case ORTOP: s = "ORTOP"; break;
6784:	case LPAREN: s = "LPAREN"; break;
6785:	case RPAREN: s = "RPAREN"; break;
6786:	default: s = "CSET"; break;
6787:	}
6788:      fprintf(stderr, "%s", s);
6789:    }
6790:}
6791:#endif /* DEBUG */
6792:
6793:/* Stuff pertaining to charclasses. */
6794:
6795:static int
6796:tstbit(b, c)
6797:     int b;
6798:     charclass c;
6799:{
6800:  return c[b / INTBITS] & 1 << b % INTBITS;
6801:}
6802:
6803:static void
6804:setbit(b, c)
6805:     int b;
6806:     charclass c;
6807:{
6808:  c[b / INTBITS] |= 1 << b % INTBITS;
6809:}
6810:
6811:static void
6812:clrbit(b, c)
6813:     int b;
6814:     charclass c;
6815:{
6816:  c[b / INTBITS] &= ~(1 << b % INTBITS);
6817:}
6818:
6819:static void
6820:copyset(src, dst)
6821:     charclass src;
6822:     charclass dst;
6823:{
6824:  int i;
6825:
6826:  for (i = 0; i < CHARCLASS_INTS; ++i)
6827:    dst[i] = src[i];
6828:}
6829:
6830:static void
6831:zeroset(s)
6832:     charclass s;
6833:{
6834:  int i;
6835:
6836:  for (i = 0; i < CHARCLASS_INTS; ++i)
6837:    s[i] = 0;
6838:}
6839:
6840:static void
6841:notset(s)
6842:     charclass s;
6843:{
6844:  int i;
6845:
6846:  for (i = 0; i < CHARCLASS_INTS; ++i)
6847:    s[i] = ~s[i];
6848:}
6849:
6850:static int
6851:equal(s1, s2)
6852:     charclass s1;
6853:     charclass s2;
6854:{
6855:  int i;
6856:
6857:  for (i = 0; i < CHARCLASS_INTS; ++i)
6858:    if (s1[i] != s2[i])
6859:      return 0;
6860:  return 1;
6861:}
6862:
6863:/* A pointer to the current dfa is kept here during parsing. */
6864:static struct dfa *dfa;
6865:
6866:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
6867:static int
6868:charclass_index(s)
6869:     charclass s;
6870:{
6871:  int i;
6872:
6873:  for (i = 0; i < dfa->cindex; ++i)
6874:    if (equal(s, dfa->charclasses[i]))
6875:      return i;
6876:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
6877:  ++dfa->cindex;
6878:  copyset(s, dfa->charclasses[i]);
6879:  return i;
6880:}
6881:
6882:/* Syntax bits controlling the behavior of the lexical analyzer. */
6883:static int syntax_bits, syntax_bits_set;
6884:
6885:/* Flag for case-folding letters into sets. */
6886:static int case_fold;
6887:
6888:/* Entry point to set syntax options. */
6889:void
6890:dfasyntax(bits, fold)
6891:     int bits;
6892:     int fold;
6893:{
6894:  syntax_bits_set = 1;
6895:  syntax_bits = bits;
6896:  case_fold = fold;
6897:}
6898:
6899:/* Lexical analyzer.  All the dross that deals with the obnoxious
6900:   GNU Regex syntax bits is located here.  The poor, suffering
6901:   reader is referred to the GNU Regex documentation for the
6902:   meaning of the @#%!@#%^!@ syntax bits. */
6903:
6904:static char *lexstart;		/* Pointer to beginning of input string. */
6905:static char *lexptr;		/* Pointer to next input character. */
6906:static lexleft;			/* Number of characters remaining. */
6907:static token lasttok;		/* Previous token returned; initially END. */
6908:static int laststart;		/* True if we're separated from beginning or (, |
6909:				   only by zero-width characters. */
6910:static int parens;		/* Count of outstanding left parens. */
6911:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
6912:
6913:/* Note that characters become unsigned here. */
6914:#define FETCH(c, eoferr)   	      \
6915:  {			   	      \
6916:    if (! lexleft)	   	      \
6917:      if (eoferr != 0)	   	      \
6918:	dfaerror(eoferr);  	      \
6919:      else		   	      \
6920:	return END;	   	      \
6921:    (c) = (unsigned char) *lexptr++;  \
6922:    --lexleft;		   	      \
6923:  }
6924:
6925:#define FUNC(F, P) static int F(c) int c; { return P(c); }
6926:
6927:FUNC(is_alpha, ISALPHA)
6928:FUNC(is_upper, ISUPPER)
6929:FUNC(is_lower, ISLOWER)
6930:FUNC(is_digit, ISDIGIT)
6931:FUNC(is_xdigit, ISXDIGIT)
6932:FUNC(is_space, ISSPACE)
6933:FUNC(is_punct, ISPUNCT)
6934:FUNC(is_alnum, ISALNUM)
6935:FUNC(is_print, ISPRINT)
6936:FUNC(is_graph, ISGRAPH)
6937:FUNC(is_cntrl, ISCNTRL)
6938:
6939:/* The following list maps the names of the Posix named character classes
6940:   to predicate functions that determine whether a given character is in
6941:   the class.  The leading [ has already been eaten by the lexical analyzer. */
6942:static struct {
6943:  char *name;
6944:  int (*pred)();
6945:} prednames[] = {
6946:  ":alpha:]", is_alpha,
6947:  ":upper:]", is_upper,
6948:  ":lower:]", is_lower,
6949:  ":digit:]", is_digit,
6950:  ":xdigit:]", is_xdigit,
6951:  ":space:]", is_space,
6952:  ":punct:]", is_punct,
6953:  ":alnum:]", is_alnum,
6954:  ":print:]", is_print,
6955:  ":graph:]", is_graph,
6956:  ":cntrl:]", is_cntrl,
6957:  0
6958:};
6959:
6960:static int
6961:looking_at(s)
6962:     char *s;
6963:{
6964:  int len;
6965:
6966:  len = strlen(s);
6967:  if (lexleft < len)
6968:    return 0;
6969:  return strncmp(s, lexptr, len) == 0;
6970:}
6971:
6972:static token
6973:lex()
6974:{
6975:  token c, c1, c2;
6976:  int backslash = 0, invert;
6977:  charclass ccl;
6978:  int i;
6979:
6980:  /* Basic plan: We fetch a character.  If it's a backslash,
6981:     we set the backslash flag and go through the loop again.
6982:     On the plus side, this avoids having a duplicate of the
6983:     main switch inside the backslash case.  On the minus side,
6984:     it means that just about every case begins with
6985:     "if (backslash) ...".  */
6986:  for (i = 0; i < 2; ++i)
6987:    {
6988:      FETCH(c, 0);
6989:      switch (c)
6990:	{
6991:	case '\\':
6992:	  if (backslash)
6993:	    goto normal_char;
6994:	  if (lexleft == 0)
6995:	    dfaerror("Unfinished \\ escape");
6996:	  backslash = 1;
6997:	  break;
6998:
6999:	case '^':
7000:	  if (backslash)
7001:	    goto normal_char;
7002:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
7003:	      || lasttok == END
7004:	      || lasttok == LPAREN
7005:	      || lasttok == OR)
7006:	    return lasttok = BEGLINE;
7007:	  goto normal_char;
7008:
7009:	case '$':
7010:	  if (backslash)
7011:	    goto normal_char;
7012:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
7013:	      || lexleft == 0
7014:	      || (syntax_bits & RE_NO_BK_PARENS
7015:		  ? lexleft > 0 && *lexptr == ')'
7016:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
7017:	      || (syntax_bits & RE_NO_BK_VBAR
7018:		  ? lexleft > 0 && *lexptr == '|'
7019:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
7020:	      || ((syntax_bits & RE_NEWLINE_ALT)
7021:	          && lexleft > 0 && *lexptr == '\n'))
7022:	    return lasttok = ENDLINE;
7023:	  goto normal_char;
7024:
7025:	case '1':
7026:	case '2':
7027:	case '3':
7028:	case '4':
7029:	case '5':
7030:	case '6':
7031:	case '7':
7032:	case '8':
7033:	case '9':
7034:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
7035:	    {
7036:	      laststart = 0;
7037:	      return lasttok = BACKREF;
7038:	    }
7039:	  goto normal_char;
7040:
7041:	case '<':
7042:	  if (backslash)
7043:	    return lasttok = BEGWORD;
7044:	  goto normal_char;
7045:
7046:	case '>':
7047:	  if (backslash)
7048:	    return lasttok = ENDWORD;
7049:	  goto normal_char;
7050:
7051:	case 'b':
7052:	  if (backslash)
7053:	    return lasttok = LIMWORD;
7054:	  goto normal_char;
7055:
7056:	case 'B':
7057:	  if (backslash)
7058:	    return lasttok = NOTLIMWORD;
7059:	  goto normal_char;
7060:
7061:	case '?':
7062:	  if (syntax_bits & RE_LIMITED_OPS)
7063:	    goto normal_char;
7064:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
7065:	    goto normal_char;
7066:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7067:	    goto normal_char;
7068:	  return lasttok = QMARK;
7069:
7070:	case '*':
7071:	  if (backslash)
7072:	    goto normal_char;
7073:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7074:	    goto normal_char;
7075:	  return lasttok = STAR;
7076:
7077:	case '+':
7078:	  if (syntax_bits & RE_LIMITED_OPS)
7079:	    goto normal_char;
7080:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
7081:	    goto normal_char;
7082:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
7083:	    goto normal_char;
7084:	  return lasttok = PLUS;
7085:
7086:	case '{':
7087:	  if (!(syntax_bits & RE_INTERVALS))
7088:	    goto normal_char;
7089:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
7090:	    goto normal_char;
7091:	  minrep = maxrep = 0;
7092:	  /* Cases:
7093:	     {M} - exact count
7094:	     {M,} - minimum count, maximum is infinity
7095:	     {,M} - 0 through M
7096:	     {M,N} - M through N */
7097:	  FETCH(c, "unfinished repeat count");
7098:	  if (ISDIGIT(c))
7099:	    {
7100:	      minrep = c - '0';
7101:	      for (;;)
7102:		{
7103:		  FETCH(c, "unfinished repeat count");
7104:		  if (!ISDIGIT(c))
7105:		    break;
7106:		  minrep = 10 * minrep + c - '0';
7107:		}
7108:	    }
7109:	  else if (c != ',')
7110:	    dfaerror("malformed repeat count");
7111:	  if (c == ',')
7112:	    for (;;)
7113:	      {
7114:		FETCH(c, "unfinished repeat count");
7115:		if (!ISDIGIT(c))
7116:		  break;
7117:		maxrep = 10 * maxrep + c - '0';
7118:	      }
7119:	  else
7120:	    maxrep = minrep;
7121:	  if (!(syntax_bits & RE_NO_BK_BRACES))
7122:	    {
7123:	      if (c != '\\')
7124:		dfaerror("malformed repeat count");
7125:	      FETCH(c, "unfinished repeat count");
7126:	    }
7127:	  if (c != '}')
7128:	    dfaerror("malformed repeat count");
7129:	  laststart = 0;
7130:	  return lasttok = REPMN;
7131:
7132:	case '|':
7133:	  if (syntax_bits & RE_LIMITED_OPS)
7134:	    goto normal_char;
7135:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
7136:	    goto normal_char;
7137:	  laststart = 1;
7138:	  return lasttok = OR;
7139:
7140:	case '\n':
7141:	  if (syntax_bits & RE_LIMITED_OPS
7142:	      || backslash
7143:	      || !(syntax_bits & RE_NEWLINE_ALT))
7144:	    goto normal_char;
7145:	  laststart = 1;
7146:	  return lasttok = OR;
7147:
7148:	case '(':
7149:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
7150:	    goto normal_char;
7151:	  ++parens;
7152:	  laststart = 1;
7153:	  return lasttok = LPAREN;
7154:
7155:	case ')':
7156:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
7157:	    goto normal_char;
7158:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
7159:	    goto normal_char;
7160:	  --parens;
7161:	  laststart = 0;
7162:	  return lasttok = RPAREN;
7163:
7164:	case '.':
7165:	  if (backslash)
7166:	    goto normal_char;
7167:	  zeroset(ccl);
7168:	  notset(ccl);
7169:	  if (!(syntax_bits & RE_DOT_NEWLINE))
7170:	    clrbit('\n', ccl);
7171:	  if (syntax_bits & RE_DOT_NOT_NULL)
7172:	    clrbit('\0', ccl);
7173:	  laststart = 0;
7174:	  return lasttok = CSET + charclass_index(ccl);
7175:
7176:	case 'w':
7177:	case 'W':
7178:	  if (!backslash)
7179:	    goto normal_char;
7180:	  zeroset(ccl);
7181:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
7182:	    if (ISALNUM(c2))
7183:	      setbit(c2, ccl);
7184:	  if (c == 'W')
7185:	    notset(ccl);
7186:	  laststart = 0;
7187:	  return lasttok = CSET + charclass_index(ccl);
7188:	
7189:	case '[':
7190:	  if (backslash)
7191:	    goto normal_char;
7192:	  zeroset(ccl);
7193:	  FETCH(c, "Unbalanced [");
7194:	  if (c == '^')
7195:	    {
7196:	      FETCH(c, "Unbalanced [");
7197:	      invert = 1;
7198:	    }
7199:	  else
7200:	    invert = 0;
7201:	  do
7202:	    {
7203:	      /* Nobody ever said this had to be fast. :-)
7204:		 Note that if we're looking at some other [:...:]
7205:		 construct, we just treat it as a bunch of ordinary
7206:		 characters.  We can do this because we assume
7207:		 regex has checked for syntax errors before
7208:		 dfa is ever called. */
7209:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
7210:		for (c1 = 0; prednames[c1].name; ++c1)
7211:		  if (looking_at(prednames[c1].name))
7212:		    {
7213:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
7214:			if ((*prednames[c1].pred)(c2))
7215:			  setbit(c2, ccl);
7216:		      lexptr += strlen(prednames[c1].name);
7217:		      lexleft -= strlen(prednames[c1].name);
7218:		      FETCH(c1, "Unbalanced [");
7219:		      goto skip;
7220:		    }
7221:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
7222:		FETCH(c, "Unbalanced [");
7223:	      FETCH(c1, "Unbalanced [");
7224:	      if (c1 == '-')
7225:		{
7226:		  FETCH(c2, "Unbalanced [");
7227:		  if (c2 == ']')
7228:		    {
7229:		      /* In the case [x-], the - is an ordinary hyphen,
7230:			 which is left in c1, the lookahead character. */
7231:		      --lexptr;
7232:		      ++lexleft;
7233:		      c2 = c;
7234:		    }
7235:		  else
7236:		    {
7237:		      if (c2 == '\\'
7238:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
7239:			FETCH(c2, "Unbalanced [");
7240:		      FETCH(c1, "Unbalanced [");
7241:		    }
7242:		}
7243:	      else
7244:		c2 = c;
7245:	      while (c <= c2)
7246:		{
7247:		  setbit(c, ccl);
7248:		  if (case_fold)
7249:		    if (ISUPPER(c))
7250:		      setbit(tolower(c), ccl);
7251:		    else if (ISLOWER(c))
7252:		      setbit(toupper(c), ccl);
7253:		  ++c;
7254:		}
7255:	    skip:
7256:	      ;
7257:	    }
7258:	  while ((c = c1) != ']');
7259:	  if (invert)
7260:	    {
7261:	      notset(ccl);
7262:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
7263:		clrbit('\n', ccl);
7264:	    }
7265:	  laststart = 0;
7266:	  return lasttok = CSET + charclass_index(ccl);
7267:
7268:	default:
7269:	normal_char:
7270:	  laststart = 0;
7271:	  if (case_fold && ISALPHA(c))
7272:	    {
7273:	      zeroset(ccl);
7274:	      setbit(c, ccl);
7275:	      if (isupper(c))
7276:		setbit(tolower(c), ccl);
7277:	      else
7278:		setbit(toupper(c), ccl);
7279:	      return lasttok = CSET + charclass_index(ccl);
7280:	    }
7281:	  return c;
7282:	}
7283:    }
7284:
7285:  /* The above loop should consume at most a backslash
7286:     and some other character. */
7287:  abort();
7288:}
7289:
7290:/* Recursive descent parser for regular expressions. */
7291:
7292:static token tok;		/* Lookahead token. */
7293:static depth;			/* Current depth of a hypothetical stack
7294:				   holding deferred productions.  This is
7295:				   used to determine the depth that will be
7296:				   required of the real stack later on in
7297:				   dfaanalyze(). */
7298:
7299:/* Add the given token to the parse tree, maintaining the depth count and
7300:   updating the maximum depth if necessary. */
7301:static void
7302:addtok(t)
7303:     token t;
7304:{
7305:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
7306:  dfa->tokens[dfa->tindex++] = t;
7307:
7308:  switch (t)
7309:    {
7310:    case QMARK:
7311:    case STAR:
7312:    case PLUS:
7313:      break;
7314:
7315:    case CAT:
7316:    case OR:
7317:    case ORTOP:
7318:      --depth;
7319:      break;
7320:
7321:    default:
7322:      ++dfa->nleaves;
7323:    case EMPTY:
7324:      ++depth;
7325:      break;
7326:    }
7327:  if (depth > dfa->depth)
7328:    dfa->depth = depth;
7329:}
7330:
7331:/* The grammar understood by the parser is as follows.
7332:
7333:   regexp:
7334:     regexp OR branch
7335:     branch
7336:
7337:   branch:
7338:     branch closure
7339:     closure
7340:
7341:   closure:
7342:     closure QMARK
7343:     closure STAR
7344:     closure PLUS
7345:     atom
7346:
7347:   atom:
7348:     <normal character>
7349:     CSET
7350:     BACKREF
7351:     BEGLINE
7352:     ENDLINE
7353:     BEGWORD
7354:     ENDWORD
7355:     LIMWORD
7356:     NOTLIMWORD
7357:     <empty>
7358:
7359:   The parser builds a parse tree in postfix form in an array of tokens. */
7360:
7361:#if __STDC__
7362:static void regexp(int);
7363:#else
7364:static void regexp();
7365:#endif
7366:
7367:static void
7368:atom()
7369:{
7370:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
7371:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
7372:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
7373:    {
7374:      addtok(tok);
7375:      tok = lex();
7376:    }
7377:  else if (tok == LPAREN)
7378:    {
7379:      tok = lex();
7380:      regexp(0);
7381:      if (tok != RPAREN)
7382:	dfaerror("Unbalanced (");
7383:      tok = lex();
7384:    }
7385:  else
7386:    addtok(EMPTY);
7387:}
7388:
7389:/* Return the number of tokens in the given subexpression. */
7390:static int
7391:nsubtoks(tindex)
7392:{
7393:  int ntoks1;
7394:
7395:  switch (dfa->tokens[tindex - 1])
7396:    {
7397:    default:
7398:      return 1;
7399:    case QMARK:
7400:    case STAR:
7401:    case PLUS:
7402:      return 1 + nsubtoks(tindex - 1);
7403:    case CAT:
7404:    case OR:
7405:    case ORTOP:
7406:      ntoks1 = nsubtoks(tindex - 1);
7407:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
7408:    }
7409:}
7410:
7411:/* Copy the given subexpression to the top of the tree. */
7412:static void
7413:copytoks(tindex, ntokens)
7414:     int tindex, ntokens;
7415:{
7416:  int i;
7417:
7418:  for (i = 0; i < ntokens; ++i)
7419:    addtok(dfa->tokens[tindex + i]);
7420:}
7421:
7422:static void
7423:closure()
7424:{
7425:  int tindex, ntokens, i;
7426:
7427:  atom();
7428:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
7429:    if (tok == REPMN)
7430:      {
7431:	ntokens = nsubtoks(dfa->tindex);
7432:	tindex = dfa->tindex - ntokens;
7433:	if (maxrep == 0)
7434:	  addtok(PLUS);
7435:	if (minrep == 0)
7436:	  addtok(QMARK);
7437:	for (i = 1; i < minrep; ++i)
7438:	  {
7439:	    copytoks(tindex, ntokens);
7440:	    addtok(CAT);
7441:	  }
7442:	for (; i < maxrep; ++i)
7443:	  {
7444:	    copytoks(tindex, ntokens);
7445:	    addtok(QMARK);
7446:	    addtok(CAT);
7447:	  }
7448:	tok = lex();
7449:      }
7450:    else
7451:      {
7452:	addtok(tok);
7453:	tok = lex();
7454:      }
7455:}
7456:
7457:static void
7458:branch()
7459:{
7460:  closure();
7461:  while (tok != RPAREN && tok != OR && tok >= 0)
7462:    {
7463:      closure();
7464:      addtok(CAT);
7465:    }
7466:}
7467:
7468:static void
7469:regexp(toplevel)
7470:     int toplevel;
7471:{
7472:  branch();
7473:  while (tok == OR)
7474:    {
7475:      tok = lex();
7476:      branch();
7477:      if (toplevel)
7478:	addtok(ORTOP);
7479:      else
7480:	addtok(OR);
7481:    }
7482:}
7483:
7484:/* Main entry point for the parser.  S is a string to be parsed, len is the
7486:   the struct dfa to parse into. */
7487:void
7488:dfaparse(s, len, d)
7489:     char *s;
7490:     size_t len;
7491:     struct dfa *d;
7492:
7493:{
7494:  dfa = d;
7495:  lexstart = lexptr = s;
7496:  lexleft = len;
7497:  lasttok = END;
7498:  laststart = 1;
7499:  parens = 0;
7500:
7501:  if (! syntax_bits_set)
7502:    dfaerror("No syntax specified");
7503:
7504:  tok = lex();
7505:  depth = d->depth;
7506:
7507:  regexp(1);
7508:
7509:  if (tok != END)
7510:    dfaerror("Unbalanced )");
7511:
7512:  addtok(END - d->nregexps);
7513:  addtok(CAT);
7514:
7515:  if (d->nregexps)
7516:    addtok(ORTOP);
7517:
7518:  ++d->nregexps;
7519:}
7520:
7521:/* Some primitives for operating on sets of positions. */
7522:
7523:/* Copy one set to another; the destination must be large enough. */
7524:static void
7525:copy(src, dst)
7526:     position_set *src;
7527:     position_set *dst;
7528:{
7529:  int i;
7530:
7531:  for (i = 0; i < src->nelem; ++i)
7532:    dst->elems[i] = src->elems[i];
7533:  dst->nelem = src->nelem;
7534:}
7535:
7536:/* Insert a position in a set.  Position sets are maintained in sorted
7537:   order according to index.  If position already exists in the set with
7538:   the same index then their constraints are logically or'd together.
7539:   S->elems must point to an array large enough to hold the resulting set. */
7540:static void
7541:insert(p, s)
7542:     position p;
7543:     position_set *s;
7544:{
7545:  int i;
7546:  position t1, t2;
7547:
7548:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
7549:    ;
7550:  if (i < s->nelem && p.index == s->elems[i].index)
7551:    s->elems[i].constraint |= p.constraint;
7552:  else
7553:    {
7554:      t1 = p;
7555:      ++s->nelem;
7556:      while (i < s->nelem)
7557:	{
7558:	  t2 = s->elems[i];
7559:	  s->elems[i++] = t1;
7560:	  t1 = t2;
7561:	}
7562:    }
7563:}
7564:
7565:/* Merge two sets of positions into a third.  The result is exactly as if
7566:   the positions of both sets were inserted into an initially empty set. */
7567:static void
7568:merge(s1, s2, m)
7569:     position_set *s1;
7570:     position_set *s2;
7571:     position_set *m;
7572:{
7573:  int i = 0, j = 0;
7574:
7575:  m->nelem = 0;
7576:  while (i < s1->nelem && j < s2->nelem)
7577:    if (s1->elems[i].index > s2->elems[j].index)
7578:      m->elems[m->nelem++] = s1->elems[i++];
7579:    else if (s1->elems[i].index < s2->elems[j].index)
7580:      m->elems[m->nelem++] = s2->elems[j++];
7581:    else
7582:      {
7583:	m->elems[m->nelem] = s1->elems[i++];
7584:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
7585:      }
7586:  while (i < s1->nelem)
7587:    m->elems[m->nelem++] = s1->elems[i++];
7588:  while (j < s2->nelem)
7589:    m->elems[m->nelem++] = s2->elems[j++];
7590:}
7591:
7592:/* Delete a position from a set. */
7593:static void
7594:delete(p, s)
7595:     position p;
7596:     position_set *s;
7597:{
7598:  int i;
7599:
7600:  for (i = 0; i < s->nelem; ++i)
7601:    if (p.index == s->elems[i].index)
7602:      break;
7603:  if (i < s->nelem)
7604:    for (--s->nelem; i < s->nelem; ++i)
7605:      s->elems[i] = s->elems[i + 1];
7606:}
7607:
7608:/* Find the index of the state corresponding to the given position set with
7609:   the given preceding context, or create a new state if there is no such
7610:   state.  Newline and letter tell whether we got here on a newline or
7611:   letter, respectively. */
7612:static int
7613:state_index(d, s, newline, letter)
7614:     struct dfa *d;
7615:     position_set *s;
7616:     int newline;
7617:     int letter;
7618:{
7619:  int hash = 0;
7620:  int constraint;
7621:  int i, j;
7622:
7623:  newline = newline ? 1 : 0;
7624:  letter = letter ? 1 : 0;
7625:
7626:  for (i = 0; i < s->nelem; ++i)
7627:    hash ^= s->elems[i].index + s->elems[i].constraint;
7628:
7629:  /* Try to find a state that exactly matches the proposed one. */
7630:  for (i = 0; i < d->sindex; ++i)
7631:    {
7632:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
7633:	  || newline != d->states[i].newline || letter != d->states[i].letter)
7634:	continue;
7635:      for (j = 0; j < s->nelem; ++j)
7636:	if (s->elems[j].constraint
7637:	    != d->states[i].elems.elems[j].constraint
7638:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
7639:	  break;
7640:      if (j == s->nelem)
7641:	return i;
7642:    }
7643:
7644:  /* We'll have to create a new state. */
7645:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
7646:  d->states[i].hash = hash;
7647:  MALLOC(d->states[i].elems.elems, position, s->nelem);
7648:  copy(s, &d->states[i].elems);
7649:  d->states[i].newline = newline;
7650:  d->states[i].letter = letter;
7651:  d->states[i].backref = 0;
7652:  d->states[i].constraint = 0;
7653:  d->states[i].first_end = 0;
7654:  for (j = 0; j < s->nelem; ++j)
7655:    if (d->tokens[s->elems[j].index] < 0)
7656:      {
7657:	constraint = s->elems[j].constraint;
7658:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
7659:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
7660:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
7661:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
7662:	  d->states[i].constraint |= constraint;
7663:	if (! d->states[i].first_end)
7664:	  d->states[i].first_end = d->tokens[s->elems[j].index];
7665:      }
7666:    else if (d->tokens[s->elems[j].index] == BACKREF)
7667:      {
7668:	d->states[i].constraint = NO_CONSTRAINT;
7669:	d->states[i].backref = 1;
7670:      }
7671:
7672:  ++d->sindex;
7673:
7674:  return i;
7675:}
7676:
7677:/* Find the epsilon closure of a set of positions.  If any position of the set
7678:   contains a symbol that matches the empty string in some context, replace
7679:   that position with the elements of its follow labeled with an appropriate
7680:   constraint.  Repeat exhaustively until no funny positions are left.
7681:   S->elems must be large enough to hold the result. */
7682:void
7683:epsclosure(s, d)
7684:     position_set *s;
7685:     struct dfa *d;
7686:{
7687:  int i, j;
7688:  int *visited;
7689:  position p, old;
7690:
7691:  MALLOC(visited, int, d->tindex);
7692:  for (i = 0; i < d->tindex; ++i)
7693:    visited[i] = 0;
7694:
7695:  for (i = 0; i < s->nelem; ++i)
7696:    if (d->tokens[s->elems[i].index] >= NOTCHAR
7697:	&& d->tokens[s->elems[i].index] != BACKREF
7698:	&& d->tokens[s->elems[i].index] < CSET)
7699:      {
7700:	old = s->elems[i];
7701:	p.constraint = old.constraint;
7702:	delete(s->elems[i], s);
7703:	if (visited[old.index])
7704:	  {
7705:	    --i;
7706:	    continue;
7707:	  }
7708:	visited[old.index] = 1;
7709:	switch (d->tokens[old.index])
7710:	  {
7711:	  case BEGLINE:
7712:	    p.constraint &= BEGLINE_CONSTRAINT;
7713:	    break;
7714:	  case ENDLINE:
7715:	    p.constraint &= ENDLINE_CONSTRAINT;
7716:	    break;
7717:	  case BEGWORD:
7718:	    p.constraint &= BEGWORD_CONSTRAINT;
7719:	    break;
7720:	  case ENDWORD:
7721:	    p.constraint &= ENDWORD_CONSTRAINT;
7722:	    break;
7723:	  case LIMWORD:
7724:	    p.constraint &= LIMWORD_CONSTRAINT;
7725:	    break;
7726:	  case NOTLIMWORD:
7727:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
7728:	    break;
7729:	  default:
7730:	    break;
7731:	  }
7732:	for (j = 0; j < d->follows[old.index].nelem; ++j)
7733:	  {
7734:	    p.index = d->follows[old.index].elems[j].index;
7735:	    insert(p, s);
7736:	  }
7737:	/* Force rescan to start at the beginning. */
7738:	i = -1;
7739:      }
7740:
7741:  free(visited);
7742:}
7743:
7744:/* Perform bottom-up analysis on the parse tree, computing various functions.
7745:   Note that at this point, we're pretending constructs like \< are real
7746:   characters rather than constraints on what can follow them.
7747:
7748:   Nullable:  A node is nullable if it is at the root of a regexp that can
7749:   match the empty string.
7750:   *  EMPTY leaves are nullable.
7751:   * No other leaf is nullable.
7752:   * A QMARK or STAR node is nullable.
7753:   * A PLUS node is nullable if its argument is nullable.
7754:   * A CAT node is nullable if both its arguments are nullable.
7755:   * An OR node is nullable if either argument is nullable.
7756:
7757:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
7758:   that could correspond to the first character of a string matching the
7759:   regexp rooted at the given node.
7760:   * EMPTY leaves have empty firstpos.
7761:   * The firstpos of a nonempty leaf is that leaf itself.
7762:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
7763:     argument.
7764:   * The firstpos of a CAT node is the firstpos of the left argument, union
7765:     the firstpos of the right if the left argument is nullable.
7766:   * The firstpos of an OR node is the union of firstpos of each argument.
7767:
7768:   Lastpos:  The lastpos of a node is the set of positions that could
7769:   correspond to the last character of a string matching the regexp at
7770:   the given node.
7771:   * EMPTY leaves have empty lastpos.
7772:   * The lastpos of a nonempty leaf is that leaf itself.
7773:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
7774:     argument.
7775:   * The lastpos of a CAT node is the lastpos of its right argument, union
7776:     the lastpos of the left if the right argument is nullable.
7777:   * The lastpos of an OR node is the union of the lastpos of each argument.
7778:
7779:   Follow:  The follow of a position is the set of positions that could
7780:   correspond to the character following a character matching the node in
7781:   a string matching the regexp.  At this point we consider special symbols
7782:   that match the empty string in some context to be just normal characters.
7783:   Later, if we find that a special symbol is in a follow set, we will
7784:   replace it with the elements of its follow, labeled with an appropriate
7785:   constraint.
7786:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
7787:     the follow of every node in the lastpos.
7788:   * Every node in the firstpos of the second argument of a CAT node is in
7789:     the follow of every node in the lastpos of the first argument.
7790:
7791:   Because of the postfix representation of the parse tree, the depth-first
7792:   analysis is conveniently done by a linear scan with the aid of a stack.
7793:   Sets are stored as arrays of the elements, obeying a stack-like allocation
7794:   scheme; the number of elements in each set deeper in the stack can be
7795:   used to determine the address of a particular set's array. */
7796:void
7797:dfaanalyze(d, searchflag)
7798:     struct dfa *d;
7799:     int searchflag;
7800:{
7801:  int *nullable;		/* Nullable stack. */
7802:  int *nfirstpos;		/* Element count stack for firstpos sets. */
7803:  position *firstpos;		/* Array where firstpos elements are stored. */
7804:  int *nlastpos;		/* Element count stack for lastpos sets. */
7805:  position *lastpos;		/* Array where lastpos elements are stored. */
7806:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
7807:  position_set tmp;		/* Temporary set for merging sets. */
7808:  position_set merged;		/* Result of merging sets. */
7809:  int wants_newline;		/* True if some position wants newline info. */
7810:  int *o_nullable;
7811:  int *o_nfirst, *o_nlast;
7812:  position *o_firstpos, *o_lastpos;
7813:  int i, j;
7814:  position *pos;
7815:
7816:#ifdef DEBUG
7817:  fprintf(stderr, "dfaanalyze:\n");
7818:  for (i = 0; i < d->tindex; ++i)
7819:    {
7820:      fprintf(stderr, " %d:", i);
7821:      prtok(d->tokens[i]);
7822:    }
7823:  putc('\n', stderr);
7824:#endif
7825:
7826:  d->searchflag = searchflag;
7827:
7828:  MALLOC(nullable, int, d->depth);
7829:  o_nullable = nullable;
7830:  MALLOC(nfirstpos, int, d->depth);
7831:  o_nfirst = nfirstpos;
7832:  MALLOC(firstpos, position, d->nleaves);
7833:  o_firstpos = firstpos, firstpos += d->nleaves;
7834:  MALLOC(nlastpos, int, d->depth);
7835:  o_nlast = nlastpos;
7836:  MALLOC(lastpos, position, d->nleaves);
7837:  o_lastpos = lastpos, lastpos += d->nleaves;
7838:  MALLOC(nalloc, int, d->tindex);
7839:  for (i = 0; i < d->tindex; ++i)
7840:    nalloc[i] = 0;
7841:  MALLOC(merged.elems, position, d->nleaves);
7842:
7843:  CALLOC(d->follows, position_set, d->tindex);
7844:
7845:  for (i = 0; i < d->tindex; ++i)
7846:#ifdef DEBUG
7847:    {				/* Nonsyntactic #ifdef goo... */
7848:#endif
7849:    switch (d->tokens[i])
7850:      {
7851:      case EMPTY:
7852:	/* The empty set is nullable. */
7853:	*nullable++ = 1;
7854:
7855:	/* The firstpos and lastpos of the empty leaf are both empty. */
7856:	*nfirstpos++ = *nlastpos++ = 0;
7857:	break;
7858:
7859:      case STAR:
7860:      case PLUS:
7861:	/* Every element in the firstpos of the argument is in the follow
7862:	   of every element in the lastpos. */
7863:	tmp.nelem = nfirstpos[-1];
7864:	tmp.elems = firstpos;
7865:	pos = lastpos;
7866:	for (j = 0; j < nlastpos[-1]; ++j)
7867:	  {
7868:	    merge(&tmp, &d->follows[pos[j].index], &merged);
7869:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
7870:				 nalloc[pos[j].index], merged.nelem - 1);
7871:	    copy(&merged, &d->follows[pos[j].index]);
7872:	  }
7873:
7874:      case QMARK:
7875:	/* A QMARK or STAR node is automatically nullable. */
7876:	if (d->tokens[i] != PLUS)
7877:	  nullable[-1] = 1;
7878:	break;
7879:
7880:      case CAT:
7881:	/* Every element in the firstpos of the second argument is in the
7882:	   follow of every element in the lastpos of the first argument. */
7883:	tmp.nelem = nfirstpos[-1];
7884:	tmp.elems = firstpos;
7885:	pos = lastpos + nlastpos[-1];
7886:	for (j = 0; j < nlastpos[-2]; ++j)
7887:	  {
7888:	    merge(&tmp, &d->follows[pos[j].index], &merged);
7889:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
7890:				 nalloc[pos[j].index], merged.nelem - 1);
7891:	    copy(&merged, &d->follows[pos[j].index]);
7892:	  }
7893:
7894:	/* The firstpos of a CAT node is the firstpos of the first argument,
7895:	   union that of the second argument if the first is nullable. */
7896:	if (nullable[-2])
7897:	  nfirstpos[-2] += nfirstpos[-1];
7898:	else
7899:	  firstpos += nfirstpos[-1];
7900:	--nfirstpos;
7901:
7902:	/* The lastpos of a CAT node is the lastpos of the second argument,
7903:	   union that of the first argument if the second is nullable. */
7904:	if (nullable[-1])
7905:	  nlastpos[-2] += nlastpos[-1];
7906:	else
7907:	  {
7908:	    pos = lastpos + nlastpos[-2];
7909:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
7910:	      pos[j] = lastpos[j];
7911:	    lastpos += nlastpos[-2];
7912:	    nlastpos[-2] = nlastpos[-1];
7913:	  }
7914:	--nlastpos;
7915:
7916:	/* A CAT node is nullable if both arguments are nullable. */
7917:	nullable[-2] = nullable[-1] && nullable[-2];
7918:	--nullable;
7919:	break;
7920:
7921:      case OR:
7922:      case ORTOP:
7923:	/* The firstpos is the union of the firstpos of each argument. */
7924:	nfirstpos[-2] += nfirstpos[-1];
7925:	--nfirstpos;
7926:
7927:	/* The lastpos is the union of the lastpos of each argument. */
7928:	nlastpos[-2] += nlastpos[-1];
7929:	--nlastpos;
7930:
7931:	/* An OR node is nullable if either argument is nullable. */
7932:	nullable[-2] = nullable[-1] || nullable[-2];
7933:	--nullable;
7934:	break;
7935:
7936:      default:
7937:	/* Anything else is a nonempty position.  (Note that special
7938:	   constructs like \< are treated as nonempty strings here;
7939:	   an "epsilon closure" effectively makes them nullable later.
7940:	   Backreferences have to get a real position so we can detect
7941:	   transitions on them later.  But they are nullable. */
7942:	*nullable++ = d->tokens[i] == BACKREF;
7943:
7944:	/* This position is in its own firstpos and lastpos. */
7945:	*nfirstpos++ = *nlastpos++ = 1;
7946:	--firstpos, --lastpos;
7947:	firstpos->index = lastpos->index = i;
7948:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
7949:
7950:	/* Allocate the follow set for this position. */
7951:	nalloc[i] = 1;
7952:	MALLOC(d->follows[i].elems, position, nalloc[i]);
7953:	break;
7954:      }
7955:#ifdef DEBUG
7956:    /* ... balance the above nonsyntactic #ifdef goo... */
7957:      fprintf(stderr, "node %d:", i);
7958:      prtok(d->tokens[i]);
7959:      putc('\n', stderr);
7960:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
7961:      fprintf(stderr, " firstpos:");
7962:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
7963:	{
7964:	  fprintf(stderr, " %d:", firstpos[j].index);
7965:	  prtok(d->tokens[firstpos[j].index]);
7966:	}
7967:      fprintf(stderr, "\n lastpos:");
7968:      for (j = nlastpos[-1] - 1; j >= 0; --j)
7969:	{
7970:	  fprintf(stderr, " %d:", lastpos[j].index);
7971:	  prtok(d->tokens[lastpos[j].index]);
7972:	}
7973:      putc('\n', stderr);
7974:    }
7975:#endif
7976:
7977:  /* For each follow set that is the follow set of a real position, replace
7978:     it with its epsilon closure. */
7979:  for (i = 0; i < d->tindex; ++i)
7980:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
7981:	|| d->tokens[i] >= CSET)
7982:      {
7983:#ifdef DEBUG
7984:	fprintf(stderr, "follows(%d:", i);
7985:	prtok(d->tokens[i]);
7986:	fprintf(stderr, "):");
7987:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
7988:	  {
7989:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
7990:	    prtok(d->tokens[d->follows[i].elems[j].index]);
7991:	  }
7992:	putc('\n', stderr);
7993:#endif
7994:	copy(&d->follows[i], &merged);
7995:	epsclosure(&merged, d);
7996:	if (d->follows[i].nelem < merged.nelem)
7997:	  REALLOC(d->follows[i].elems, position, merged.nelem);
7998:	copy(&merged, &d->follows[i]);
7999:      }
8000:
8001:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
8002:     be the set of positions of state 0. */
8003:  merged.nelem = 0;
8004:  for (i = 0; i < nfirstpos[-1]; ++i)
8005:    insert(firstpos[i], &merged);
8006:  epsclosure(&merged, d);
8007:
8008:  /* Check if any of the positions of state 0 will want newline context. */
8009:  wants_newline = 0;
8010:  for (i = 0; i < merged.nelem; ++i)
8011:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
8012:      wants_newline = 1;
8013:
8014:  /* Build the initial state. */
8015:  d->salloc = 1;
8016:  d->sindex = 0;
8017:  MALLOC(d->states, dfa_state, d->salloc);
8018:  state_index(d, &merged, wants_newline, 0);
8019:
8020:  free(o_nullable);
8021:  free(o_nfirst);
8022:  free(o_firstpos);
8023:  free(o_nlast);
8024:  free(o_lastpos);
8025:  free(nalloc);
8026:  free(merged.elems);
8027:}
8028:
8029:/* Find, for each character, the transition out of state s of d, and store
8030:   it in the appropriate slot of trans.
8031:
8032:   We divide the positions of s into groups (positions can appear in more
8033:   than one group).  Each group is labeled with a set of characters that
8034:   every position in the group matches (taking into account, if necessary,
8035:   preceding context information of s).  For each group, find the union
8036:   of the its elements' follows.  This set is the set of positions of the
8037:   new state.  For each character in the group's label, set the transition
8038:   on this character to be to a state corresponding to the set's positions,
8039:   and its associated backward context information, if necessary.
8040:
8042:   0 in every state.
8043:
8044:   The collection of groups is constructed by building an equivalence-class
8045:   partition of the positions of s.
8046:
8047:   For each position, find the set of characters C that it matches.  Eliminate
8048:   any characters from C that fail on grounds of backward context.
8049:
8050:   Search through the groups, looking for a group whose label L has nonempty
8051:   intersection with C.  If L - C is nonempty, create a new group labeled
8052:   L - C and having the same positions as the current group, and set L to
8053:   the intersection of L and C.  Insert the position in this group, set
8054:   C = C - L, and resume scanning.
8055:
8056:   If after comparing with every group there are characters remaining in C,
8057:   create a new group labeled with the characters of C and insert this
8058:   position in that group. */
8059:void
8060:dfastate(s, d, trans)
8061:     int s;
8062:     struct dfa *d;
8063:     int trans[];
8064:{
8065:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
8066:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
8067:  int ngrps = 0;		/* Number of groups actually used. */
8068:  position pos;			/* Current position being considered. */
8069:  charclass matches;		/* Set of matching characters. */
8070:  int matchesf;			/* True if matches is nonempty. */
8071:  charclass intersect;		/* Intersection with some label set. */
8072:  int intersectf;		/* True if intersect is nonempty. */
8073:  charclass leftovers;		/* Stuff in the label that didn't match. */
8074:  int leftoversf;		/* True if leftovers is nonempty. */
8075:  static charclass letters;	/* Set of characters considered letters. */
8076:  static charclass newline;	/* Set of characters that aren't newline. */
8077:  position_set follows;		/* Union of the follows of some group. */
8078:  position_set tmp;		/* Temporary space for merging sets. */
8079:  int state;			/* New state. */
8080:  int wants_newline;		/* New state wants to know newline context. */
8081:  int state_newline;		/* New state on a newline transition. */
8082:  int wants_letter;		/* New state wants to know letter context. */
8083:  int state_letter;		/* New state on a letter transition. */
8084:  static initialized;		/* Flag for static initialization. */
8085:  int i, j, k;
8086:
8087:  /* Initialize the set of letters, if necessary. */
8088:  if (! initialized)
8089:    {
8090:      initialized = 1;
8091:      for (i = 0; i < NOTCHAR; ++i)
8092:	if (ISALNUM(i))
8093:	  setbit(i, letters);
8094:      setbit('\n', newline);
8095:    }
8096:
8097:  zeroset(matches);
8098:
8099:  for (i = 0; i < d->states[s].elems.nelem; ++i)
8100:    {
8101:      pos = d->states[s].elems.elems[i];
8102:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
8103:	setbit(d->tokens[pos.index], matches);
8104:      else if (d->tokens[pos.index] >= CSET)
8105:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
8106:      else
8107:	continue;
8108:
8109:      /* Some characters may need to be eliminated from matches because
8110:	 they fail in the current context. */
8111:      if (pos.constraint != 0xFF)
8112:	{
8113:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
8114:					 d->states[s].newline, 1))
8115:	    clrbit('\n', matches);
8116:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
8117:					 d->states[s].newline, 0))
8118:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8119:	      matches[j] &= newline[j];
8120:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
8121:					d->states[s].letter, 1))
8122:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8123:	      matches[j] &= ~letters[j];
8124:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
8125:					d->states[s].letter, 0))
8126:	    for (j = 0; j < CHARCLASS_INTS; ++j)
8127:	      matches[j] &= letters[j];
8128:
8129:	  /* If there are no characters left, there's no point in going on. */
8130:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
8131:	    ;
8132:	  if (j == CHARCLASS_INTS)
8133:	    continue;
8134:	}
8135:
8136:      for (j = 0; j < ngrps; ++j)
8137:	{
8138:	  /* If matches contains a single character only, and the current
8139:	     group's label doesn't contain that character, go on to the
8140:	     next group. */
8141:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
8142:	      && !tstbit(d->tokens[pos.index], labels[j]))
8143:	    continue;
8144:
8145:	  /* Check if this group's label has a nonempty intersection with
8146:	     matches. */
8147:	  intersectf = 0;
8148:	  for (k = 0; k < CHARCLASS_INTS; ++k)
8149:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
8150:	  if (! intersectf)
8151:	    continue;
8152:
8153:	  /* It does; now find the set differences both ways. */
8154:	  leftoversf = matchesf = 0;
8155:	  for (k = 0; k < CHARCLASS_INTS; ++k)
8156:	    {
8157:	      /* Even an optimizing compiler can't know this for sure. */
8158:	      int match = matches[k], label = labels[j][k];
8159:
8160:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
8161:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
8162:	    }
8163:
8164:	  /* If there were leftovers, create a new group labeled with them. */
8165:	  if (leftoversf)
8166:	    {
8167:	      copyset(leftovers, labels[ngrps]);
8168:	      copyset(intersect, labels[j]);
8169:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
8170:	      copy(&grps[j], &grps[ngrps]);
8171:	      ++ngrps;
8172:	    }
8173:
8174:	  /* Put the position in the current group.  Note that there is no
8175:	     reason to call insert() here. */
8176:	  grps[j].elems[grps[j].nelem++] = pos;
8177:
8178:	  /* If every character matching the current position has been
8179:	     accounted for, we're done. */
8180:	  if (! matchesf)
8181:	    break;
8182:	}
8183:
8184:      /* If we've passed the last group, and there are still characters
8185:	 unaccounted for, then we'll have to create a new group. */
8186:      if (j == ngrps)
8187:	{
8188:	  copyset(matches, labels[ngrps]);
8189:	  zeroset(matches);
8190:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
8191:	  grps[ngrps].nelem = 1;
8192:	  grps[ngrps].elems[0] = pos;
8193:	  ++ngrps;
8194:	}
8195:    }
8196:
8197:  MALLOC(follows.elems, position, d->nleaves);
8198:  MALLOC(tmp.elems, position, d->nleaves);
8199:
8200:  /* If we are a searching matcher, the default transition is to a state
8201:     containing the positions of state 0, otherwise the default transition
8202:     is to fail miserably. */
8203:  if (d->searchflag)
8204:    {
8205:      wants_newline = 0;
8206:      wants_letter = 0;
8207:      for (i = 0; i < d->states[0].elems.nelem; ++i)
8208:	{
8209:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
8210:	    wants_newline = 1;
8211:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
8212:	    wants_letter = 1;
8213:	}
8214:      copy(&d->states[0].elems, &follows);
8215:      state = state_index(d, &follows, 0, 0);
8216:      if (wants_newline)
8217:	state_newline = state_index(d, &follows, 1, 0);
8218:      else
8219:	state_newline = state;
8220:      if (wants_letter)
8221:	state_letter = state_index(d, &follows, 0, 1);
8222:      else
8223:	state_letter = state;
8224:      for (i = 0; i < NOTCHAR; ++i)
8225:	if (i == '\n')
8226:	  trans[i] = state_newline;
8227:	else if (ISALNUM(i))
8228:	  trans[i] = state_letter;
8229:	else
8230:	  trans[i] = state;
8231:    }
8232:  else
8233:    for (i = 0; i < NOTCHAR; ++i)
8234:      trans[i] = -1;
8235:
8236:  for (i = 0; i < ngrps; ++i)
8237:    {
8238:      follows.nelem = 0;
8239:
8240:      /* Find the union of the follows of the positions of the group.
8241:	 This is a hideously inefficient loop.  Fix it someday. */
8242:      for (j = 0; j < grps[i].nelem; ++j)
8243:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
8244:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
8245:
8246:      /* If we are building a searching matcher, throw in the positions
8247:	 of state 0 as well. */
8248:      if (d->searchflag)
8249:	for (j = 0; j < d->states[0].elems.nelem; ++j)
8250:	  insert(d->states[0].elems.elems[j], &follows);
8251:
8252:      /* Find out if the new state will want any context information. */
8253:      wants_newline = 0;
8254:      if (tstbit('\n', labels[i]))
8255:	for (j = 0; j < follows.nelem; ++j)
8256:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
8257:	    wants_newline = 1;
8258:
8259:      wants_letter = 0;
8260:      for (j = 0; j < CHARCLASS_INTS; ++j)
8261:	if (labels[i][j] & letters[j])
8262:	  break;
8263:      if (j < CHARCLASS_INTS)
8264:	for (j = 0; j < follows.nelem; ++j)
8265:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
8266:	    wants_letter = 1;
8267:
8268:      /* Find the state(s) corresponding to the union of the follows. */
8269:      state = state_index(d, &follows, 0, 0);
8270:      if (wants_newline)
8271:	state_newline = state_index(d, &follows, 1, 0);
8272:      else
8273:	state_newline = state;
8274:      if (wants_letter)
8275:	state_letter = state_index(d, &follows, 0, 1);
8276:      else
8277:	state_letter = state;
8278:
8279:      /* Set the transitions for each character in the current label. */
8280:      for (j = 0; j < CHARCLASS_INTS; ++j)
8281:	for (k = 0; k < INTBITS; ++k)
8282:	  if (labels[i][j] & 1 << k)
8283:	    {
8284:	      int c = j * INTBITS + k;
8285:
8286:	      if (c == '\n')
8287:		trans[c] = state_newline;
8288:	      else if (ISALNUM(c))
8289:		trans[c] = state_letter;
8290:	      else if (c < NOTCHAR)
8291:		trans[c] = state;
8292:	    }
8293:    }
8294:
8295:  for (i = 0; i < ngrps; ++i)
8296:    free(grps[i].elems);
8297:  free(follows.elems);
8298:  free(tmp.elems);
8299:}
8300:
8301:/* Some routines for manipulating a compiled dfa's transition tables.
8302:   Each state may or may not have a transition table; if it does, and it
8303:   is a non-accepting state, then d->trans[state] points to its table.
8304:   If it is an accepting state then d->fails[state] points to its table.
8305:   If it has no table at all, then d->trans[state] is NULL.
8306:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
8307:
8308:static void
8309:build_state(s, d)
8310:     int s;
8311:     struct dfa *d;
8312:{
8313:  int *trans;			/* The new transition table. */
8314:  int i;
8315:
8316:  /* Set an upper limit on the number of transition tables that will ever
8317:     exist at once.  1024 is arbitrary.  The idea is that the frequently
8318:     used transition tables will be quickly rebuilt, whereas the ones that
8319:     were only needed once or twice will be cleared away. */
8320:  if (d->trcount >= 1024)
8321:    {
8322:      for (i = 0; i < d->tralloc; ++i)
8323:	if (d->trans[i])
8324:	  {
8325:	    free((ptr_t) d->trans[i]);
8326:	    d->trans[i] = NULL;
8327:	  }
8328:	else if (d->fails[i])
8329:	  {
8330:	    free((ptr_t) d->fails[i]);
8331:	    d->fails[i] = NULL;
8332:	  }
8333:      d->trcount = 0;
8334:    }
8335:
8336:  ++d->trcount;
8337:
8338:  /* Set up the success bits for this state. */
8339:  d->success[s] = 0;
8340:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
8341:      s, *d))
8342:    d->success[s] |= 4;
8343:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
8344:      s, *d))
8345:    d->success[s] |= 2;
8346:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
8347:      s, *d))
8348:    d->success[s] |= 1;
8349:
8350:  MALLOC(trans, int, NOTCHAR);
8351:  dfastate(s, d, trans);
8352:
8353:  /* Now go through the new transition table, and make sure that the trans
8354:     and fail arrays are allocated large enough to hold a pointer for the
8355:     largest state mentioned in the table. */
8356:  for (i = 0; i < NOTCHAR; ++i)
8357:    if (trans[i] >= d->tralloc)
8358:      {
8359:	int oldalloc = d->tralloc;
8360:
8361:	while (trans[i] >= d->tralloc)
8362:	  d->tralloc *= 2;
8363:	REALLOC(d->realtrans, int *, d->tralloc + 1);
8364:	d->trans = d->realtrans + 1;
8365:	REALLOC(d->fails, int *, d->tralloc);
8366:	REALLOC(d->success, int, d->tralloc);
8367:	REALLOC(d->newlines, int, d->tralloc);
8368:	while (oldalloc < d->tralloc)
8369:	  {
8370:	    d->trans[oldalloc] = NULL;
8371:	    d->fails[oldalloc++] = NULL;
8372:	  }
8373:      }
8374:
8375:  /* Keep the newline transition in a special place so we can use it as
8376:     a sentinel. */
8377:  d->newlines[s] = trans['\n'];
8378:  trans['\n'] = -1;
8379:
8380:  if (ACCEPTING(s, *d))
8381:    d->fails[s] = trans;
8382:  else
8383:    d->trans[s] = trans;
8384:}
8385:
8386:static void
8387:build_state_zero(d)
8388:     struct dfa *d;
8389:{
8390:  d->tralloc = 1;
8391:  d->trcount = 0;
8392:  CALLOC(d->realtrans, int *, d->tralloc + 1);
8393:  d->trans = d->realtrans + 1;
8394:  CALLOC(d->fails, int *, d->tralloc);
8395:  MALLOC(d->success, int, d->tralloc);
8396:  MALLOC(d->newlines, int, d->tralloc);
8397:  build_state(0, d);
8398:}
8399:
8400:/* Search through a buffer looking for a match to the given struct dfa.
8401:   Find the first occurrence of a string matching the regexp in the buffer,
8402:   and the shortest possible version thereof.  Return a pointer to the first
8403:   character after the match, or NULL if none is found.  Begin points to
8404:   the beginning of the buffer, and end points to the first character after
8405:   its end.  We store a newline in *end to act as a sentinel, so end had
8406:   better point somewhere valid.  Newline is a flag indicating whether to
8407:   allow newlines to be in the matching string.  If count is non-
8408:   NULL it points to a place we're supposed to increment every time we
8409:   see a newline.  Finally, if backref is non-NULL it points to a place
8410:   where we're supposed to store a 1 if backreferencing happened and the
8411:   match needs to be verified by a backtracking matcher.  Otherwise
8412:   we store a 0 in *backref. */
8413:char *
8414:dfaexec(d, begin, end, newline, count, backref)
8415:     struct dfa *d;
8416:     char *begin;
8417:     char *end;
8418:     int newline;
8419:     int *count;
8420:     int *backref;
8421:{
8422:  register s, s1, tmp;		/* Current state. */
8423:  register unsigned char *p;	/* Current input character. */
8424:  register **trans, *t;		/* Copy of d->trans so it can be optimized
8425:				   into a register. */
8426:  static sbit[NOTCHAR];	/* Table for anding with d->success. */
8427:  static sbit_init;
8428:
8429:  if (! sbit_init)
8430:    {
8431:      int i;
8432:
8433:      sbit_init = 1;
8434:      for (i = 0; i < NOTCHAR; ++i)
8435:	if (i == '\n')
8436:	  sbit[i] = 4;
8437:	else if (ISALNUM(i))
8438:	  sbit[i] = 2;
8439:	else
8440:	  sbit[i] = 1;
8441:    }
8442:
8443:  if (! d->tralloc)
8444:    build_state_zero(d);
8445:
8446:  s = s1 = 0;
8447:  p = (unsigned char *) begin;
8448:  trans = d->trans;
8449:  *end = '\n';
8450:
8451:  for (;;)
8452:    {
8453:      /* The dreaded inner loop. */
8454:      if ((t = trans[s]) != 0)
8455:	do
8456:	  {
8457:	    s1 = t[*p++];
8458:	    if (! (t = trans[s1]))
8459:	      goto last_was_s;
8460:	    s = t[*p++];
8461:	  }
8462:        while ((t = trans[s]) != 0);
8463:      goto last_was_s1;
8464:    last_was_s:
8465:      tmp = s, s = s1, s1 = tmp;
8466:    last_was_s1:
8467:
8468:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
8469:	{
8470:	  if (d->success[s] & sbit[*p])
8471:	    {
8472:	      if (backref)
8473:		if (d->states[s].backref)
8474:		  *backref = 1;
8475:		else
8476:		  *backref = 0;
8477:	      return (char *) p;
8478:	    }
8479:
8480:	  s1 = s;
8481:	  s = d->fails[s][*p++];
8482:	  continue;
8483:	}
8484:
8485:      /* If the previous character was a newline, count it. */
8486:      if (count && (char *) p <= end && p[-1] == '\n')
8487:	++*count;
8488:
8489:      /* Check if we've run off the end of the buffer. */
8490:      if ((char *) p > end)
8491:	return NULL;
8492:
8493:      if (s >= 0)
8494:	{
8495:	  build_state(s, d);
8496:	  trans = d->trans;
8497:	  continue;
8498:	}
8499:
8500:      if (p[-1] == '\n' && newline)
8501:	{
8502:	  s = d->newlines[s1];
8503:	  continue;
8504:	}
8505:
8506:      s = 0;
8507:    }
8508:}
8509:
8510:/* Initialize the components of a dfa that the other routines don't
8511:   initialize for themselves. */
8512:void
8513:dfainit(d)
8514:     struct dfa *d;
8515:{
8516:  d->calloc = 1;
8517:  MALLOC(d->charclasses, charclass, d->calloc);
8518:  d->cindex = 0;
8519:
8520:  d->talloc = 1;
8521:  MALLOC(d->tokens, token, d->talloc);
8522:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
8523:
8524:  d->searchflag = 0;
8525:  d->tralloc = 0;
8526:
8527:  d->musts = 0;
8528:}
8529:
8530:/* Parse and analyze a single string of the given length. */
8531:void
8532:dfacomp(s, len, d, searchflag)
8533:     char *s;
8534:     size_t len;
8535:     struct dfa *d;
8536:     int searchflag;
8537:{
8538:  if (case_fold)	/* dummy folding in service of dfamust() */
8539:    {
8540:      char *copy;
8541:      int i;
8542:
8543:      copy = malloc(len);
8544:      if (!copy)
8545:	dfaerror("out of memory");
8546:      
8547:      /* This is a kludge. */
8548:      case_fold = 0;
8549:      for (i = 0; i < len; ++i)
8550:	if (ISUPPER(s[i]))
8551:	  copy[i] = tolower(s[i]);
8552:	else
8553:	  copy[i] = s[i];
8554:
8555:      dfainit(d);
8556:      dfaparse(copy, len, d);
8557:      free(copy);
8558:      dfamust(d);
8559:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
8560:      case_fold = 1;
8561:      dfaparse(s, len, d);
8562:      dfaanalyze(d, searchflag);
8563:    }
8564:  else
8565:    {
8566:        dfainit(d);
8567:        dfaparse(s, len, d);
8568:	dfamust(d);
8569:        dfaanalyze(d, searchflag);
8570:    }
8571:}
8572:
8573:/* Free the storage held by the components of a dfa. */
8574:void
8575:dfafree(d)
8576:     struct dfa *d;
8577:{
8578:  int i;
8579:  struct dfamust *dm, *ndm;
8580:
8581:  free((ptr_t) d->charclasses);
8582:  free((ptr_t) d->tokens);
8583:  for (i = 0; i < d->sindex; ++i)
8584:    free((ptr_t) d->states[i].elems.elems);
8585:  free((ptr_t) d->states);
8586:  for (i = 0; i < d->tindex; ++i)
8587:    if (d->follows[i].elems)
8588:      free((ptr_t) d->follows[i].elems);
8589:  free((ptr_t) d->follows);
8590:  for (i = 0; i < d->tralloc; ++i)
8591:    if (d->trans[i])
8592:      free((ptr_t) d->trans[i]);
8593:    else if (d->fails[i])
8594:      free((ptr_t) d->fails[i]);
8595:  free((ptr_t) d->realtrans);
8596:  free((ptr_t) d->fails);
8597:  free((ptr_t) d->newlines);
8598:  for (dm = d->musts; dm; dm = ndm)
8599:    {
8600:      ndm = dm->next;
8601:      free(dm->must);
8602:      free((ptr_t) dm);
8603:    }
8604:}
8605:
8606:/* Having found the postfix representation of the regular expression,
8607:   try to find a long sequence of characters that must appear in any line
8608:   containing the r.e.
8609:   Finding a "longest" sequence is beyond the scope here;
8610:   we take an easy way out and hope for the best.
8611:   (Take "(ab|a)b"--please.)
8612:
8613:   We do a bottom-up calculation of sequences of characters that must appear
8614:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
8615:   representation:
8616:	sequences that must appear at the left of the match ("left")
8617:	sequences that must appear at the right of the match ("right")
8618:	lists of sequences that must appear somewhere in the match ("in")
8619:	sequences that must constitute the match ("is")
8620:
8621:   When we get to the root of the tree, we use one of the longest of its
8622:   calculated "in" sequences as our answer.  The sequence we find is returned in
8623:   d->must (where "d" is the single argument passed to "dfamust");
8624:   the length of the sequence is returned in d->mustn.
8625:
8626:   The sequences calculated for the various types of node (in pseudo ANSI c)
8627:   are shown below.  "p" is the operand of unary operators (and the left-hand
8628:   operand of binary operators); "q" is the right-hand operand of binary
8629:   operators.
8630:
8631:   "ZERO" means "a zero-length sequence" below.
8632:
8633:	Type	left		right		is		in
8634:	----	----		-----		--		--
8635:	char c	# c		# c		# c		# c
8636:	
8637:	CSET	ZERO		ZERO		ZERO		ZERO
8638:	
8639:	STAR	ZERO		ZERO		ZERO		ZERO
8640:
8641:	QMARK	ZERO		ZERO		ZERO		ZERO
8642:
8643:	PLUS	p->left		p->right	ZERO		p->in
8644:
8645:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
8646:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
8647:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
8648:						ZERO
8649:					
8650:	OR	longest common	longest common	(do p->is and	substrings common to
8651:		leading		trailing	q->is have same	p->in and q->in
8652:		(sub)sequence	(sub)sequence	length and	
8653:		of p->left	of p->right	content) ?	
8654:		and q->left	and q->right	p->is : NULL	
8655:
8656:   If there's anything else we recognize in the tree, all four sequences get set
8657:   to zero-length sequences.  If there's something we don't recognize in the tree,
8658:   we just return a zero-length sequence.
8659:
8660:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
8661:   'aaa')?
8662:
8663:   And. . .is it here or someplace that we might ponder "optimizations" such as
8664:	egrep 'psi|epsilon'	->	egrep 'psi'
8665:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
8666:					(Yes, we now find "epsi" as a "string
8667:					that must occur", but we might also
8668:					simplify the *entire* r.e. being sought)
8669:	grep '[c]'		->	grep 'c'
8670:	grep '(ab|a)b'		->	grep 'ab'
8671:	grep 'ab*'		->	grep 'a'
8672:	grep 'a*b'		->	grep 'b'
8673:
8674:   There are several issues:
8675:
8676:   Is optimization easy (enough)?
8677:
8678:   Does optimization actually accomplish anything,
8679:   or is the automaton you get from "psi|epsilon" (for example)
8680:   the same as the one you get from "psi" (for example)?
8681:  
8682:   Are optimizable r.e.'s likely to be used in real-life situations
8683:   (something like 'ab*' is probably unlikely; something like is
8684:   'psi|epsilon' is likelier)? */
8685:
8686:static char *
8687:icatalloc(old, new)
8688:     char *old;
8689:     char *new;
8690:{
8691:  char *result;
8692:  int oldsize, newsize;
8693:
8694:  newsize = (new == NULL) ? 0 : strlen(new);
8695:  if (old == NULL)
8696:    oldsize = 0;
8697:  else if (newsize == 0)
8698:    return old;
8699:  else	oldsize = strlen(old);
8700:  if (old == NULL)
8701:    result = (char *) malloc(newsize + 1);
8702:  else
8703:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
8704:  if (result != NULL && new != NULL)
8705:    (void) strcpy(result + oldsize, new);
8706:  return result;
8707:}
8708:
8709:static char *
8710:icpyalloc(string)
8711:     char *string;
8712:{
8713:  return icatalloc((char *) NULL, string);
8714:}
8715:
8716:static char *
8717:istrstr(lookin, lookfor)
8718:     char *lookin;
8719:     char *lookfor;
8720:{
8721:  char *cp;
8722:  int len;
8723:
8724:  len = strlen(lookfor);
8725:  for (cp = lookin; *cp != '\0'; ++cp)
8726:    if (strncmp(cp, lookfor, len) == 0)
8727:      return cp;
8728:  return NULL;
8729:}
8730:
8731:static void
8732:ifree(cp)
8733:     char *cp;
8734:{
8735:  if (cp != NULL)
8736:    free(cp);
8737:}
8738:
8739:static void
8740:freelist(cpp)
8741:     char **cpp;
8742:{
8743:  int i;
8744:
8745:  if (cpp == NULL)
8746:    return;
8747:  for (i = 0; cpp[i] != NULL; ++i)
8748:    {
8749:      free(cpp[i]);
8750:      cpp[i] = NULL;
8751:    }
8752:}
8753:
8754:static char **
8755:enlist(cpp, new, len)
8756:     char **cpp;
8757:     char *new;
8758:     int len;
8759:{
8760:  int i, j;
8761:
8762:  if (cpp == NULL)
8763:    return NULL;
8764:  if ((new = icpyalloc(new)) == NULL)
8765:    {
8766:      freelist(cpp);
8767:      return NULL;
8768:    }
8769:  new[len] = '\0';
8770:  /* Is there already something in the list that's new (or longer)? */
8771:  for (i = 0; cpp[i] != NULL; ++i)
8772:    if (istrstr(cpp[i], new) != NULL)
8773:      {
8774:	free(new);
8775:	return cpp;
8776:      }
8777:  /* Eliminate any obsoleted strings. */
8778:  j = 0;
8779:  while (cpp[j] != NULL)
8780:    if (istrstr(new, cpp[j]) == NULL)
8781:      ++j;
8782:    else
8783:      {
8784:	free(cpp[j]);
8785:	if (--i == j)
8786:	  break;
8787:	cpp[j] = cpp[i];
8788:	cpp[i] = NULL;
8789:      }
8790:  /* Add the new string. */
8791:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
8792:  if (cpp == NULL)
8793:    return NULL;
8794:  cpp[i] = new;
8795:  cpp[i + 1] = NULL;
8796:  return cpp;
8797:}
8798:
8799:/* Given pointers to two strings, return a pointer to an allocated
8800:   list of their distinct common substrings. Return NULL if something
8801:   seems wild. */
8802:static char **
8803:comsubs(left, right)
8804:     char *left;
8805:     char *right;
8806:{
8807:  char **cpp;
8808:  char *lcp;
8809:  char *rcp;
8810:  int i, len;
8811:
8812:  if (left == NULL || right == NULL)
8813:    return NULL;
8814:  cpp = (char **) malloc(sizeof *cpp);
8815:  if (cpp == NULL)
8816:    return NULL;
8817:  cpp[0] = NULL;
8818:  for (lcp = left; *lcp != '\0'; ++lcp)
8819:    {
8820:      len = 0;
8821:      rcp = index(right, *lcp);
8822:      while (rcp != NULL)
8823:	{
8824:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
8825:	    ;
8826:	  if (i > len)
8827:	    len = i;
8828:	  rcp = index(rcp + 1, *lcp);
8829:	}
8830:      if (len == 0)
8831:	continue;
8832:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
8833:	break;
8834:    }
8835:  return cpp;
8836:}
8837:
8838:static char **
8839:addlists(old, new)
8840:char **old;
8841:char **new;
8842:{
8843:  int i;
8844:
8845:  if (old == NULL || new == NULL)
8846:    return NULL;
8847:  for (i = 0; new[i] != NULL; ++i)
8848:    {
8849:      old = enlist(old, new[i], strlen(new[i]));
8850:      if (old == NULL)
8851:	break;
8852:    }
8853:  return old;
8854:}
8855:
8856:/* Given two lists of substrings, return a new list giving substrings
8857:   common to both. */
8858:static char **
8859:inboth(left, right)
8860:     char **left;
8861:     char **right;
8862:{
8863:  char **both;
8864:  char **temp;
8865:  int lnum, rnum;
8866:
8867:  if (left == NULL || right == NULL)
8868:    return NULL;
8869:  both = (char **) malloc(sizeof *both);
8870:  if (both == NULL)
8871:    return NULL;
8872:  both[0] = NULL;
8873:  for (lnum = 0; left[lnum] != NULL; ++lnum)
8874:    {
8875:      for (rnum = 0; right[rnum] != NULL; ++rnum)
8876:	{
8877:	  temp = comsubs(left[lnum], right[rnum]);
8878:	  if (temp == NULL)
8879:	    {
8880:	      freelist(both);
8881:	      return NULL;
8882:	    }
8883:	  both = addlists(both, temp);
8884:	  freelist(temp);
8885:	  if (both == NULL)
8886:	    return NULL;
8887:	}
8888:    }
8889:  return both;
8890:}
8891:
8892:typedef struct
8893:{
8894:  char **in;
8895:  char *left;
8896:  char *right;
8897:  char *is;
8898:} must;
8899:
8900:static void
8901:resetmust(mp)
8902:must *mp;
8903:{
8904:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
8905:  freelist(mp->in);
8906:}
8907:
8908:static void
8909:dfamust(dfa)
8910:struct dfa *dfa;
8911:{
8912:  must *musts;
8913:  must *mp;
8914:  char *result;
8915:  int ri;
8916:  int i;
8917:  int exact;
8918:  token t;
8919:  static must must0;
8920:  struct dfamust *dm;
8921:
8922:  result = "";
8923:  exact = 0;
8924:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
8925:  if (musts == NULL)
8926:    return;
8927:  mp = musts;
8928:  for (i = 0; i <= dfa->tindex; ++i)
8929:    mp[i] = must0;
8930:  for (i = 0; i <= dfa->tindex; ++i)
8931:    {
8932:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
8933:      mp[i].left = malloc(2);
8934:      mp[i].right = malloc(2);
8935:      mp[i].is = malloc(2);
8936:      if (mp[i].in == NULL || mp[i].left == NULL ||
8937:	  mp[i].right == NULL || mp[i].is == NULL)
8938:	goto done;
8939:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
8940:      mp[i].in[0] = NULL;
8941:    }
8942:#ifdef DEBUG
8943:  fprintf(stderr, "dfamust:\n");
8944:  for (i = 0; i < dfa->tindex; ++i)
8945:    {
8946:      fprintf(stderr, " %d:", i);
8947:      prtok(dfa->tokens[i]);
8948:    }
8949:  putc('\n', stderr);
8950:#endif
8951:  for (ri = 0; ri < dfa->tindex; ++ri)
8952:    {
8953:      switch (t = dfa->tokens[ri])
8954:	{
8955:	case LPAREN:
8956:	case RPAREN:
8957:	  goto done;		/* "cannot happen" */
8958:	case EMPTY:
8959:	case BEGLINE:
8960:	case ENDLINE:
8961:	case BEGWORD:
8962:	case ENDWORD:
8963:	case LIMWORD:
8964:	case NOTLIMWORD:
8965:	case BACKREF:
8966:	  resetmust(mp);
8967:	  break;
8968:	case STAR:
8969:	case QMARK:
8970:	  if (mp <= musts)
8971:	    goto done;		/* "cannot happen" */
8972:	  --mp;
8973:	  resetmust(mp);
8974:	  break;
8975:	case OR:
8976:	case ORTOP:
8977:	  if (mp < &musts[2])
8978:	    goto done;		/* "cannot happen" */
8979:	  {
8980:	    char **new;
8981:	    must *lmp;
8982:	    must *rmp;
8983:	    int j, ln, rn, n;
8984:
8985:	    rmp = --mp;
8986:	    lmp = --mp;
8987:	    /* Guaranteed to be.  Unlikely, but. . . */
8988:	    if (strcmp(lmp->is, rmp->is) != 0)
8989:	      lmp->is[0] = '\0';
8990:	    /* Left side--easy */
8991:	    i = 0;
8992:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
8993:	      ++i;
8994:	    lmp->left[i] = '\0';
8995:	    /* Right side */
8996:	    ln = strlen(lmp->right);
8997:	    rn = strlen(rmp->right);
8998:	    n = ln;
8999:	    if (n > rn)
9000:	      n = rn;
9001:	    for (i = 0; i < n; ++i)
9002:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
9003:		break;
9004:	    for (j = 0; j < i; ++j)
9005:	      lmp->right[j] = lmp->right[(ln - i) + j];
9006:	    lmp->right[j] = '\0';
9007:	    new = inboth(lmp->in, rmp->in);
9008:	    if (new == NULL)
9009:	      goto done;
9010:	    freelist(lmp->in);
9011:	    free((char *) lmp->in);
9012:	    lmp->in = new;
9013:	  }
9014:	  break;
9015:	case PLUS:
9016:	  if (mp <= musts)
9017:	    goto done;		/* "cannot happen" */
9018:	  --mp;
9019:	  mp->is[0] = '\0';
9020:	  break;
9021:	case END:
9022:	  if (mp != &musts[1])
9023:	    goto done;		/* "cannot happen" */
9024:	  for (i = 0; musts[0].in[i] != NULL; ++i)
9025:	    if (strlen(musts[0].in[i]) > strlen(result))
9026:	      result = musts[0].in[i];
9027:	  if (strcmp(result, musts[0].is) == 0)
9028:	    exact = 1;
9029:	  goto done;
9030:	case CAT:
9031:	  if (mp < &musts[2])
9032:	    goto done;		/* "cannot happen" */
9033:	  {
9034:	    must *lmp;
9035:	    must *rmp;
9036:
9037:	    rmp = --mp;
9038:	    lmp = --mp;
9039:	    /* In.  Everything in left, plus everything in
9040:	       right, plus catenation of
9041:	       left's right and right's left. */
9042:	    lmp->in = addlists(lmp->in, rmp->in);
9043:	    if (lmp->in == NULL)
9044:	      goto done;
9045:	    if (lmp->right[0] != '\0' &&
9046:		rmp->left[0] != '\0')
9047:	      {
9048:		char *tp;
9049:
9050:		tp = icpyalloc(lmp->right);
9051:		if (tp == NULL)
9052:		  goto done;
9053:		tp = icatalloc(tp, rmp->left);
9054:		if (tp == NULL)
9055:		  goto done;
9056:		lmp->in = enlist(lmp->in, tp,
9057:				 strlen(tp));
9058:		free(tp);
9059:		if (lmp->in == NULL)
9060:		  goto done;
9061:	      }
9062:	    /* Left-hand */
9063:	    if (lmp->is[0] != '\0')
9064:	      {
9065:		lmp->left = icatalloc(lmp->left,
9066:				      rmp->left);
9067:		if (lmp->left == NULL)
9068:		  goto done;
9069:	      }
9070:	    /* Right-hand */
9071:	    if (rmp->is[0] == '\0')
9072:	      lmp->right[0] = '\0';
9073:	    lmp->right = icatalloc(lmp->right, rmp->right);
9074:	    if (lmp->right == NULL)
9075:	      goto done;
9076:	    /* Guaranteed to be */
9077:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
9078:	      {
9079:		lmp->is = icatalloc(lmp->is, rmp->is);
9080:		if (lmp->is == NULL)
9081:		  goto done;
9082:	      }
9083:	    else
9084:	      lmp->is[0] = '\0';
9085:	  }
9086:	  break;
9087:	default:
9088:	  if (t < END)
9089:	    {
9090:	      /* "cannot happen" */
9091:	      goto done;
9092:	    }
9093:	  else if (t == '\0')
9094:	    {
9095:	      /* not on *my* shift */
9096:	      goto done;
9097:	    }
9098:	  else if (t >= CSET)
9099:	    {
9100:	      /* easy enough */
9101:	      resetmust(mp);
9102:	    }
9103:	  else
9104:	    {
9105:	      /* plain character */
9106:	      resetmust(mp);
9107:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
9108:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
9109:	      mp->in = enlist(mp->in, mp->is, 1);
9110:	      if (mp->in == NULL)
9111:		goto done;
9112:	    }
9113:	  break;
9114:	}
9115:#ifdef DEBUG
9116:      fprintf(stderr, " node: %d:", ri);
9117:      prtok(dfa->tokens[ri]);
9118:      fprintf(stderr, "\n  in:");
9119:      for (i = 0; mp->in[i]; ++i)
9120:	fprintf(stderr, " \"%s\"", mp->in[i]);
9121:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
9122:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
9123:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
9124:#endif
9125:      ++mp;
9126:    }
9127: done:
9128:  if (strlen(result))
9129:    {
9130:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
9131:      dm->exact = exact;
9132:      dm->must = malloc(strlen(result) + 1);
9133:      strcpy(dm->must, result);
9134:      dm->next = dfa->musts;
9135:      dfa->musts = dm;
9136:    }
9137:  mp = musts;
9138:  for (i = 0; i <= dfa->tindex; ++i)
9139:    {
9140:      freelist(mp[i].in);
9141:      ifree((char *) mp[i].in);
9142:      ifree(mp[i].left);
9143:      ifree(mp[i].right);
9144:      ifree(mp[i].is);
9145:    }
9146:  free((char *) mp);
9147:}
9148:/* kwset.c - search for any of a set of keywords.
9149:   Copyright 1989 Free Software Foundation
9150:		  Written August 1989 by Mike Haertel.
9151:
9152:   This program is free software; you can redistribute it and/or modify
9153:   it under the terms of the GNU General Public License as published by
9154:   the Free Software Foundation; either version 1, or (at your option)
9155:   any later version.
9156:
9157:   This program is distributed in the hope that it will be useful,
9158:   but WITHOUT ANY WARRANTY; without even the implied warranty of
9159:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
9160:   GNU General Public License for more details.
9161:
9162:   You should have received a copy of the GNU General Public License
9163:   along with this program; if not, write to the Free Software
9164:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
9165:
9166:   The author may be reached (Email) at the address mike@ai.mit.edu,
9167:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
9168:
9169:/* The algorithm implemented by these routines bears a startling resemblence
9170:   to one discovered by Beate Commentz-Walter, although it is not identical.
9171:   See "A String Matching Algorithm Fast on the Average," Technical Report,
9172:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
9173:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
9174:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
9175:   Vol. 18, No. 6, which describes the failure function used below. */
9176:
9177:
9178:#ifdef STDC_HEADERS
9179:#undef RE_DUP_MAX
9181:#define flag_limits 1
9182:#if flag_stdlib==0 
9184:#define flag_stdlib 1
9185:#endif
9186:#else
9187:#define INT_MAX 2147483647
9188:#define UCHAR_MAX 255
9189:#ifdef __STDC__
9191:#else
9192:#if flag_systypes==0
9194:#define flag_systypes 1
9195:#endif
9196:#endif
9197:extern char *malloc();
9198:extern void free();
9199:#endif
9200:
9201:#ifdef HAVE_MEMCHR
9202:#if flag_string==0
9204:#define flag_string 1
9205:#endif
9206:#ifdef NEED_MEMORY_H
9207:#if flag_memory==0
9209:#define flag_memory 1
9210:#endif
9211:#endif
9212:#else
9213:#ifdef __STDC__
9214:extern void *memchr();
9215:#else
9216:extern char *memchr();
9217:#endif
9218:#endif
9219:
9220:#ifdef GREP
9221:extern char *xmalloc();
9222:#define malloc xmalloc
9223:#endif
9224:
9227:
9228:#define NCHAR (UCHAR_MAX + 1)
9229:#define obstack_chunk_alloc malloc
9230:#define obstack_chunk_free free
9231:
9232:/* Balanced tree of edges and labels leaving a given trie node. */
9233:struct tree
9234:{
9235:  struct tree *llink;		/* Left link; MUST be first field. */
9236:  struct tree *rlink;		/* Right link (to larger labels). */
9237:  struct trie *trie;		/* Trie node pointed to by this edge. */
9238:  unsigned char label;		/* Label on this edge. */
9239:  char balance;			/* Difference in depths of subtrees. */
9240:};
9241:
9242:/* Node of a trie representing a set of reversed keywords. */
9243:struct trie
9244:{
9245:  unsigned int accepting;	/* Word index of accepted word, or zero. */
9246:  struct tree *links;		/* Tree of edges leaving this node. */
9247:  struct trie *parent;		/* Parent of this node. */
9248:  struct trie *next;		/* List of all trie nodes in level order. */
9249:  struct trie *fail;		/* Aho-Corasick failure function. */
9250:  int depth;			/* Depth of this node from the root. */
9251:  int shift;			/* Shift function for search failures. */
9252:  int maxshift;			/* Max shift of self and descendents. */
9253:};
9254:
9255:/* Structure returned opaquely to the caller, containing everything. */
9256:struct kwset
9257:{
9258:  struct obstack obstack;	/* Obstack for node allocation. */
9259:  int words;			/* Number of words in the trie. */
9260:  struct trie *trie;		/* The trie itself. */
9261:  int mind;			/* Minimum depth of an accepting node. */
9262:  int maxd;			/* Maximum depth of any node. */
9263:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
9264:  struct trie *next[NCHAR];	/* Table of children of the root. */
9265:  char *target;			/* Target string if there's only one. */
9266:  int mind2;			/* Used in Boyer-Moore search for one string. */
9267:  char *trans;			/* Character translation table. */
9268:};
9269:
9270:/* Allocate and initialize a keyword set object, returning an opaque
9271:   pointer to it.  Return NULL if memory is not available. */
9272:kwset_t
9273:kwsalloc(trans)
9274:     char *trans;
9275:{
9276:  struct kwset *kwset;
9277:
9278:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
9279:  if (!kwset)
9280:    return 0;
9281:
9282:  obstack_init(&kwset->obstack);
9283:  kwset->words = 0;
9284:  kwset->trie
9285:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
9286:  if (!kwset->trie)
9287:    {
9288:      kwsfree((kwset_t) kwset);
9289:      return 0;
9290:    }
9291:  kwset->trie->accepting = 0;
9292:  kwset->trie->links = 0;
9293:  kwset->trie->parent = 0;
9294:  kwset->trie->next = 0;
9295:  kwset->trie->fail = 0;
9296:  kwset->trie->depth = 0;
9297:  kwset->trie->shift = 0;
9298:  kwset->mind = INT_MAX;
9299:  kwset->maxd = -1;
9300:  kwset->target = 0;
9301:  kwset->trans = trans;
9302:
9303:  return (kwset_t) kwset;
9304:}
9305:
9306:/* Add the given string to the contents of the keyword set.  Return NULL
9307:   for success, an error message otherwise. */
9308:char *
9309:kwsincr(kws, text, len)
9310:     kwset_t kws;
9311:     char *text;
9312:     size_t len;
9313:{
9314:  struct kwset *kwset;
9315:  register struct trie *trie;
9316:  register unsigned char label;
9317:  register struct tree *link;
9318:  register int depth;
9319:  struct tree *links[12];
9320:  enum { L, R } dirs[12];
9321:  struct tree *t, *r, *l, *rl, *lr;
9322:
9323:  kwset = (struct kwset *) kws;
9324:  trie = kwset->trie;
9325:  text += len;
9326:
9327:  /* Descend the trie (built of reversed keywords) character-by-character,
9328:     installing new nodes when necessary. */
9329:  while (len--)
9330:    {
9331:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
9332:
9333:      /* Descend the tree of outgoing links for this trie node,
9334:	 looking for the current character and keeping track
9335:	 of the path followed. */
9336:      link = trie->links;
9337:      links[0] = (struct tree *) &trie->links;
9338:      dirs[0] = L;
9339:      depth = 1;
9340:
9341:      while (link && label != link->label)
9342:	{
9343:	  links[depth] = link;
9344:	  if (label < link->label)
9345:	    dirs[depth++] = L, link = link->llink;
9346:	  else
9347:	    dirs[depth++] = R, link = link->rlink;
9348:	}
9349:
9350:      /* The current character doesn't have an outgoing link at
9351:	 this trie node, so build a new trie node and install
9352:	 a link in the current trie node's tree. */
9353:      if (!link)
9354:	{
9355:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
9356:					       sizeof (struct tree));
9357:	  if (!link)
9358:	    return "memory exhausted";
9359:	  link->llink = 0;
9360:	  link->rlink = 0;
9361:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
9362:						     sizeof (struct trie));
9363:	  if (!link->trie)
9364:	    return "memory exhausted";
9365:	  link->trie->accepting = 0;
9366:	  link->trie->links = 0;
9367:	  link->trie->parent = trie;
9368:	  link->trie->next = 0;
9369:	  link->trie->fail = 0;
9370:	  link->trie->depth = trie->depth + 1;
9371:	  link->trie->shift = 0;
9372:	  link->label = label;
9373:	  link->balance = 0;
9374:
9375:	  /* Install the new tree node in its parent. */
9376:	  if (dirs[--depth] == L)
9377:	    links[depth]->llink = link;
9378:	  else
9379:	    links[depth]->rlink = link;
9380:
9381:	  /* Back up the tree fixing the balance flags. */
9382:	  while (depth && !links[depth]->balance)
9383:	    {
9384:	      if (dirs[depth] == L)
9385:		--links[depth]->balance;
9386:	      else
9387:		++links[depth]->balance;
9388:	      --depth;
9389:	    }
9390:
9391:	  /* Rebalance the tree by pointer rotations if necessary. */
9392:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
9393:			|| (dirs[depth] == R && ++links[depth]->balance)))
9394:	    {
9395:	      switch (links[depth]->balance)
9396:		{
9397:		case (char) -2:
9398:		  switch (dirs[depth + 1])
9399:		    {
9400:		    case L:
9401:		      r = links[depth], t = r->llink, rl = t->rlink;
9402:		      t->rlink = r, r->llink = rl;
9403:		      t->balance = r->balance = 0;
9404:		      break;
9405:		    case R:
9406:		      r = links[depth], l = r->llink, t = l->rlink;
9407:		      rl = t->rlink, lr = t->llink;
9408:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
9409:		      l->balance = t->balance != 1 ? 0 : -1;
9410:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9411:		      t->balance = 0;
9412:		      break;
9413:		    }
9414:		  break;
9415:		case 2:
9416:		  switch (dirs[depth + 1])
9417:		    {
9418:		    case R:
9419:		      l = links[depth], t = l->rlink, lr = t->llink;
9420:		      t->llink = l, l->rlink = lr;
9421:		      t->balance = l->balance = 0;
9422:		      break;
9423:		    case L:
9424:		      l = links[depth], r = l->rlink, t = r->llink;
9425:		      lr = t->llink, rl = t->rlink;
9426:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
9427:		      l->balance = t->balance != 1 ? 0 : -1;
9428:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9429:		      t->balance = 0;
9430:		      break;
9431:		    }
9432:		  break;
9433:		}
9434:
9435:	      if (dirs[depth - 1] == L)
9436:		links[depth - 1]->llink = t;
9437:	      else
9438:		links[depth - 1]->rlink = t;
9439:	    }
9440:	}
9441:
9442:      trie = link->trie;
9443:    }
9444:
9445:  /* Mark the node we finally reached as accepting, encoding the
9446:     index number of this word in the keyword set so far. */
9447:  if (!trie->accepting)
9448:    trie->accepting = 1 + 2 * kwset->words;
9449:  ++kwset->words;
9450:
9451:  /* Keep track of the longest and shortest string of the keyword set. */
9452:  if (trie->depth < kwset->mind)
9453:    kwset->mind = trie->depth;
9454:  if (trie->depth > kwset->maxd)
9455:    kwset->maxd = trie->depth;
9456:
9457:  return 0;
9458:}
9459:
9460:/* Enqueue the trie nodes referenced from the given tree in the
9461:   given queue. */
9462:static void
9463:enqueue(tree, last)
9464:     struct tree *tree;
9465:     struct trie **last;
9466:{
9467:  if (!tree)
9468:    return;
9469:  enqueue(tree->llink, last);
9470:  enqueue(tree->rlink, last);
9471:  (*last) = (*last)->next = tree->trie;
9472:}
9473:
9474:/* Compute the Aho-Corasick failure function for the trie nodes referenced
9475:   from the given tree, given the failure function for their parent as
9476:   well as a last resort failure node. */
9477:static void
9478:treefails(tree, fail, recourse)
9479:     register struct tree *tree;
9480:     struct trie *fail;
9481:     struct trie *recourse;
9482:{
9483:  register struct tree *link;
9484:
9485:  if (!tree)
9486:    return;
9487:
9488:  treefails(tree->llink, fail, recourse);
9489:  treefails(tree->rlink, fail, recourse);
9490:
9491:  /* Find, in the chain of fails going back to the root, the first
9492:     node that has a descendent on the current label. */
9493:  while (fail)
9494:    {
9495:      link = fail->links;
9496:      while (link && tree->label != link->label)
9497:	if (tree->label < link->label)
9498:	  link = link->llink;
9499:	else
9500:	  link = link->rlink;
9501:      if (link)
9502:	{
9503:	  tree->trie->fail = link->trie;
9504:	  return;
9505:	}
9506:      fail = fail->fail;
9507:    }
9508:
9509:  tree->trie->fail = recourse;
9510:}
9511:
9512:/* Set delta entries for the links of the given tree such that
9513:   the preexisting delta value is larger than the current depth. */
9514:static void
9515:treedelta(tree, depth, delta)
9516:     register struct tree *tree;
9517:     register unsigned int depth;
9518:     unsigned char delta[];
9519:{
9520:  if (!tree)
9521:    return;
9522:  treedelta(tree->llink, depth, delta);
9523:  treedelta(tree->rlink, depth, delta);
9524:  if (depth < delta[tree->label])
9525:    delta[tree->label] = depth;
9526:}
9527:
9528:/* Return true if A has every label in B. */
9529:static int
9530:hasevery(a, b)
9531:     register struct tree *a;
9532:     register struct tree *b;
9533:{
9534:  if (!b)
9535:    return 1;
9536:  if (!hasevery(a, b->llink))
9537:    return 0;
9538:  if (!hasevery(a, b->rlink))
9539:    return 0;
9540:  while (a && b->label != a->label)
9541:    if (b->label < a->label)
9542:      a = a->llink;
9543:    else
9544:      a = a->rlink;
9545:  return !!a;
9546:}
9547:
9548:/* Compute a vector, indexed by character code, of the trie nodes
9549:   referenced from the given tree. */
9550:static void
9551:treenext(tree, next)
9552:     struct tree *tree;
9553:     struct trie *next[];
9554:{
9555:  if (!tree)
9556:    return;
9557:  treenext(tree->llink, next);
9558:  treenext(tree->rlink, next);
9559:  next[tree->label] = tree->trie;
9560:}
9561:
9562:/* Compute the shift for each trie node, as well as the delta
9563:   table and next cache for the given keyword set. */
9564:char *
9565:kwsprep(kws)
9566:     kwset_t kws;
9567:{
9568:  register struct kwset *kwset;
9569:  register int i;
9570:  register struct trie *curr, *fail;
9571:  register char *trans;
9572:  unsigned char delta[NCHAR];
9573:  struct trie *last, *next[NCHAR];
9574:
9575:  kwset = (struct kwset *) kws;
9576:
9577:  /* Initial values for the delta table; will be changed later.  The
9578:     delta entry for a given character is the smallest depth of any
9579:     node at which an outgoing edge is labeled by that character. */
9580:  if (kwset->mind < 256)
9581:    for (i = 0; i < NCHAR; ++i)
9582:      delta[i] = kwset->mind;
9583:  else
9584:    for (i = 0; i < NCHAR; ++i)
9585:      delta[i] = 255;
9586:
9587:  /* Check if we can use the simple boyer-moore algorithm, instead
9588:     of the hairy commentz-walter algorithm. */
9589:  if (kwset->words == 1 && kwset->trans == 0)
9590:    {
9591:      /* Looking for just one string.  Extract it from the trie. */
9592:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
9593:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
9594:	{
9595:	  kwset->target[i] = curr->links->label;
9596:	  curr = curr->links->trie;
9597:	}
9598:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
9599:      for (i = 0; i < kwset->mind; ++i)
9600:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
9601:      kwset->mind2 = kwset->mind;
9602:      /* Find the minimal delta2 shift that we might make after
9603:	 a backwards match has failed. */
9604:      for (i = 0; i < kwset->mind - 1; ++i)
9605:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
9606:	  kwset->mind2 = kwset->mind - (i + 1);
9607:    }
9608:  else
9609:    {
9610:      /* Traverse the nodes of the trie in level order, simultaneously
9611:	 computing the delta table, failure function, and shift function. */
9612:      for (curr = last = kwset->trie; curr; curr = curr->next)
9613:	{
9614:	  /* Enqueue the immediate descendents in the level order queue. */
9615:	  enqueue(curr->links, &last);
9616:
9617:	  curr->shift = kwset->mind;
9618:	  curr->maxshift = kwset->mind;
9619:
9620:	  /* Update the delta table for the descendents of this node. */
9621:	  treedelta(curr->links, curr->depth, delta);
9622:
9623:	  /* Compute the failure function for the decendents of this node. */
9624:	  treefails(curr->links, curr->fail, kwset->trie);
9625:
9626:	  /* Update the shifts at each node in the current node's chain
9627:	     of fails back to the root. */
9628:	  for (fail = curr->fail; fail; fail = fail->fail)
9629:	    {
9630:	      /* If the current node has some outgoing edge that the fail
9631:		 doesn't, then the shift at the fail should be no larger
9632:		 than the difference of their depths. */
9633:	      if (!hasevery(fail->links, curr->links))
9634:		if (curr->depth - fail->depth < fail->shift)
9635:		  fail->shift = curr->depth - fail->depth;
9636:
9637:	      /* If the current node is accepting then the shift at the
9638:		 fail and its descendents should be no larger than the
9639:		 difference of their depths. */
9640:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
9641:		fail->maxshift = curr->depth - fail->depth;
9642:	    }
9643:	}
9644:
9645:      /* Traverse the trie in level order again, fixing up all nodes whose
9646:	 shift exceeds their inherited maxshift. */
9647:      for (curr = kwset->trie->next; curr; curr = curr->next)
9648:	{
9649:	  if (curr->maxshift > curr->parent->maxshift)
9650:	    curr->maxshift = curr->parent->maxshift;
9651:	  if (curr->shift > curr->maxshift)
9652:	    curr->shift = curr->maxshift;
9653:	}
9654:
9655:      /* Create a vector, indexed by character code, of the outgoing links
9656:	 from the root node. */
9657:      for (i = 0; i < NCHAR; ++i)
9658:	next[i] = 0;
9659:      treenext(kwset->trie->links, next);
9660:
9661:      if ((trans = kwset->trans) != 0)
9662:	for (i = 0; i < NCHAR; ++i)
9663:	  kwset->next[i] = next[(unsigned char) trans[i]];
9664:      else
9665:	for (i = 0; i < NCHAR; ++i)
9666:	  kwset->next[i] = next[i];
9667:    }
9668:
9669:  /* Fix things up for any translation table. */
9670:  if ((trans = kwset->trans) != 0)
9671:    for (i = 0; i < NCHAR; ++i)
9672:      kwset->delta[i] = delta[(unsigned char) trans[i]];
9673:  else
9674:    for (i = 0; i < NCHAR; ++i)
9675:      kwset->delta[i] = delta[i];
9676:
9677:  return 0;
9678:}
9679:
9680:#define U(C) ((unsigned char) (C))
9681:
9682:/* Fast boyer-moore search. */
9683:static char *
9684:bmexec(kws, text, size)
9685:     kwset_t kws;
9686:     char *text;
9687:     size_t size;
9688:{
9689:  struct kwset *kwset;
9690:  register unsigned char *d1;
9691:  register char *ep, *sp, *tp;
9692:  register int d, gc, i, len, md2;
9693:
9694:  kwset = (struct kwset *) kws;
9695:  len = kwset->mind;
9696:
9697:  if (len == 0)
9698:    return text;
9699:  if (len > size)
9700:    return 0;
9701:  if (len == 1)
9702:    return memchr(text, kwset->target[0], size);
9703:
9704:  d1 = kwset->delta;
9705:  sp = kwset->target + len;
9706:  gc = U(sp[-2]);
9707:  md2 = kwset->mind2;
9708:  tp = text + len;
9709:
9710:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
9711:  if (size > 12 * len)
9712:    /* 11 is not a bug, the initial offset happens only once. */
9713:    for (ep = text + size - 11 * len;;)
9714:      {
9715:	while (tp <= ep)
9716:	  {
9717:	    d = d1[U(tp[-1])], tp += d;
9718:	    d = d1[U(tp[-1])], tp += d;
9719:	    if (d == 0)
9720:	      goto found;
9721:	    d = d1[U(tp[-1])], tp += d;
9722:	    d = d1[U(tp[-1])], tp += d;
9723:	    d = d1[U(tp[-1])], tp += d;
9724:	    if (d == 0)
9725:	      goto found;
9726:	    d = d1[U(tp[-1])], tp += d;
9727:	    d = d1[U(tp[-1])], tp += d;
9728:	    d = d1[U(tp[-1])], tp += d;
9729:	    if (d == 0)
9730:	      goto found;
9731:	    d = d1[U(tp[-1])], tp += d;
9732:	    d = d1[U(tp[-1])], tp += d;
9733:	  }
9734:	break;
9735:      found:
9736:	if (U(tp[-2]) == gc)
9737:	  {
9738:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
9739:	      ;
9740:	    if (i > len)
9741:	      return tp - len;
9742:	  }
9743:	tp += md2;
9744:      }
9745:
9746:  /* Now we have only a few characters left to search.  We
9747:     carefully avoid ever producing an out-of-bounds pointer. */
9748:  ep = text + size;
9749:  d = d1[U(tp[-1])];
9750:  while (d <= ep - tp)
9751:    {
9752:      d = d1[U((tp += d)[-1])];
9753:      if (d != 0)
9754:	continue;
9755:      if (tp[-2] == gc)
9756:	{
9757:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
9758:	    ;
9759:	  if (i > len)
9760:	    return tp - len;
9761:	}
9762:      d = md2;
9763:    }
9764:
9765:  return 0;
9766:}
9767:
9768:/* Hairy multiple string search. */
9769:static char *
9770:cwexec(kws, text, len, kwsmatch)
9771:     kwset_t kws;
9772:     char *text;
9773:     size_t len;
9774:     struct kwsmatch *kwsmatch;
9775:{
9776:  struct kwset *kwset;
9777:  struct trie **next, *trie, *accept;
9778:  char *beg, *lim, *mch, *lmch;
9779:  register unsigned char c, *delta;
9780:  register int d;
9781:  register char *end, *qlim;
9782:  register struct tree *tree;
9783:  register char *trans;
9784:
9785:  /* Initialize register copies and look for easy ways out. */
9786:  kwset = (struct kwset *) kws;
9787:  if (len < kwset->mind)
9788:    return 0;
9789:  next = kwset->next;
9790:  delta = kwset->delta;
9791:  trans = kwset->trans;
9792:  lim = text + len;
9793:  end = text;
9794:  if ((d = kwset->mind) != 0)
9795:    mch = 0;
9796:  else
9797:    {
9798:      mch = text, accept = kwset->trie;
9799:      goto match;
9800:    }
9801:
9802:  if (len >= 4 * kwset->mind)
9803:    qlim = lim - 4 * kwset->mind;
9804:  else
9805:    qlim = 0;
9806:
9807:  while (lim - end >= d)
9808:    {
9809:      if (qlim && end <= qlim)
9810:	{
9811:	  end += d - 1;
9812:	  while ((d = delta[c = *end]) && end < qlim)
9813:	    {
9814:	      end += d;
9815:	      end += delta[(unsigned char) *end];
9816:	      end += delta[(unsigned char) *end];
9817:	    }
9818:	  ++end;
9819:	}
9820:      else
9821:	d = delta[c = (end += d)[-1]];
9822:      if (d)
9823:	continue;
9824:      beg = end - 1;
9825:      trie = next[c];
9826:      if (trie->accepting)
9827:	{
9828:	  mch = beg;
9829:	  accept = trie;
9830:	}
9831:      d = trie->shift;
9832:      while (beg > text)
9833:	{
9834:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
9835:	  tree = trie->links;
9836:	  while (tree && c != tree->label)
9837:	    if (c < tree->label)
9838:	      tree = tree->llink;
9839:	    else
9840:	      tree = tree->rlink;
9841:	  if (tree)
9842:	    {
9843:	      trie = tree->trie;
9844:	      if (trie->accepting)
9845:		{
9846:		  mch = beg;
9847:		  accept = trie;
9848:		}
9849:	    }
9850:	  else
9851:	    break;
9852:	  d = trie->shift;
9853:	}
9854:      if (mch)
9855:	goto match;
9856:    }
9857:  return 0;
9858:
9859: match:
9860:  /* Given a known match, find the longest possible match anchored
9861:     at or before its starting point.  This is nearly a verbatim
9862:     copy of the preceding main search loops. */
9863:  if (lim - mch > kwset->maxd)
9864:    lim = mch + kwset->maxd;
9865:  lmch = 0;
9866:  d = 1;
9867:  while (lim - end >= d)
9868:    {
9869:      if ((d = delta[c = (end += d)[-1]]) != 0)
9870:	continue;
9871:      beg = end - 1;
9872:      if (!(trie = next[c]))
9873:	{
9874:	  d = 1;
9875:	  continue;
9876:	}
9877:      if (trie->accepting && beg <= mch)
9878:	{
9879:	  lmch = beg;
9880:	  accept = trie;
9881:	}
9882:      d = trie->shift;
9883:      while (beg > text)
9884:	{
9885:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
9886:	  tree = trie->links;
9887:	  while (tree && c != tree->label)
9888:	    if (c < tree->label)
9889:	      tree = tree->llink;
9890:	    else
9891:	      tree = tree->rlink;
9892:	  if (tree)
9893:	    {
9894:	      trie = tree->trie;
9895:	      if (trie->accepting && beg <= mch)
9896:		{
9897:		  lmch = beg;
9898:		  accept = trie;
9899:		}
9900:	    }
9901:	  else
9902:	    break;
9903:	  d = trie->shift;
9904:	}
9905:      if (lmch)
9906:	{
9907:	  mch = lmch;
9908:	  goto match;
9909:	}
9910:      if (!d)
9911:	d = 1;
9912:    }
9913:
9914:  if (kwsmatch)
9915:    {
9916:      kwsmatch->index = accept->accepting / 2;
9917:      kwsmatch->beg[0] = mch;
9918:      kwsmatch->size[0] = accept->depth;
9919:    }
9920:  return mch;
9921:}
9922:  
9923:/* Search through the given text for a match of any member of the
9924:   given keyword set.  Return a pointer to the first character of
9925:   the matching substring, or NULL if no match is found.  If FOUNDLEN
9926:   is non-NULL store in the referenced location the length of the
9927:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
9928:   in the referenced location the index number of the particular
9929:   keyword matched. */
9930:char *
9931:kwsexec(kws, text, size, kwsmatch)
9932:     kwset_t kws;
9933:     char *text;
9934:     size_t size;
9935:     struct kwsmatch *kwsmatch;
9936:{
9937:  struct kwset *kwset;
9938:  char *ret;
9939:
9940:  kwset = (struct kwset *) kws;
9941:  if (kwset->words == 1 && kwset->trans == 0)
9942:    {
9943:      ret = bmexec(kws, text, size);
9944:      if (kwsmatch != 0 && ret != 0)
9945:	{
9946:	  kwsmatch->index = 0;
9947:	  kwsmatch->beg[0] = ret;
9948:	  kwsmatch->size[0] = kwset->mind;
9949:	}
9950:      return ret;
9951:    }
9952:  else
9953:    return cwexec(kws, text, size, kwsmatch);
9954:}
9955:
9956:/* Free the components of the given keyword set. */
9957:void
9958:kwsfree(kws)
9959:     kwset_t kws;
9960:{
9961:  struct kwset *kwset;
9962:
9963:  kwset = (struct kwset *) kws;
9964:  obstack_free(&kwset->obstack, 0);
9965:  free(kws);
9966:}
9967:/* obstack.c - subroutines used implicitly by object stack macros
9968:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
9969:
9970:This program is free software; you can redistribute it and/or modify it
9971:under the terms of the GNU General Public License as published by the
9972:Free Software Foundation; either version 2, or (at your option) any
9973:later version.
9974:
9975:This program is distributed in the hope that it will be useful,
9976:but WITHOUT ANY WARRANTY; without even the implied warranty of
9977:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
9978:GNU General Public License for more details.
9979:
9980:You should have received a copy of the GNU General Public License
9981:along with this program; if not, write to the Free Software
9982:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
9983:
9985:
9986:/* This is just to get __GNU_LIBRARY__ defined.  */
9988:
9989:/* Comment out all this code if we are using the GNU C Library, and are not
9990:   actually compiling the library itself.  This code is part of the GNU C
9992:   and linking in this code is a waste when using the GNU C library
9993:   (especially if it is a shared library).  Rather than having every GNU
9994:   program understand `configure --with-gnu-libc' and omit the object files,
9995:   it is simpler to just do this in the source for each such file.  */
9996:
9997:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
9998:
9999:
10000:#ifdef __STDC__
10001:#define POINTER void *
10002:#else
10003:#define POINTER char *
10004:#endif
10005:
10006:/* Determine default alignment.  */
10007:struct fooalign {char x; double d;};
10008:#define DEFAULT_ALIGNMENT  \
10009:  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
10010:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
10011:   But in fact it might be less smart and round addresses to as much as
10012:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
10013:union fooround {long x; double d;};
10014:#define DEFAULT_ROUNDING (sizeof (union fooround))
10015:
10016:/* When we copy a long block of data, this is the unit to do it with.
10017:   On some machines, copying successive ints does not work;
10018:   in such a case, redefine COPYING_UNIT to `long' (if that works)
10019:   or `char' as a last resort.  */
10020:#ifndef COPYING_UNIT
10021:#define COPYING_UNIT int
10022:#endif
10023:
10024:/* The non-GNU-C macros copy the obstack into this global variable
10025:   to avoid multiple evaluation.  */
10026:
10027:struct obstack *_obstack;
10028:
10029:/* Define a macro that either calls functions with the traditional malloc/free
10030:   calling interface, or calls functions with the mmalloc/mfree interface
10031:   (that adds an extra first argument), based on the state of use_extra_arg.
10032:   For free, do not use ?:, since some compilers, like the MIPS compilers,
10033:   do not allow (expr) ? void : void.  */
10034:
10035:#define CALL_CHUNKFUN(h, size) \
10036:  (((h) -> use_extra_arg) \
10037:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
10038:   : (*(h)->chunkfun) ((size)))
10039:
10040:#define CALL_FREEFUN(h, old_chunk) \
10041:  do { \
10042:    if ((h) -> use_extra_arg) \
10043:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
10044:    else \
10045:      (*(h)->freefun) ((old_chunk)); \
10046:  } while (0)
10047:
10048:
10049:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
10050:   Objects start on multiples of ALIGNMENT (0 means use default).
10051:   CHUNKFUN is the function to use to allocate chunks,
10052:   and FREEFUN the function to free them.  */
10053:
10054:void
10055:_obstack_begin (h, size, alignment, chunkfun, freefun)
10056:     struct obstack *h;
10057:     int size;
10058:     int alignment;
10059:     POINTER (*chunkfun) ();
10060:     void (*freefun) ();
10061:{
10062:  register struct _obstack_chunk* chunk; /* points to new chunk */
10063:
10064:  if (alignment == 0)
10065:    alignment = DEFAULT_ALIGNMENT;
10066:  if (size == 0)
10067:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
10068:    {
10069:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10070:	 Use the values for range checking, because if range checking is off,
10071:	 the extra bytes won't be missed terribly, but if range checking is on
10072:	 and we used a larger request, a whole extra 4096 bytes would be
10073:	 allocated.
10074:
10075:	 These number are irrelevant to the new GNU malloc.  I suspect it is
10076:	 less sensitive to the size of the request.  */
10077:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10078:		    + 4 + DEFAULT_ROUNDING - 1)
10079:		   & ~(DEFAULT_ROUNDING - 1));
10080:      size = 4096 - extra;
10081:    }
10082:
10083:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
10084:  h->freefun = freefun;
10085:  h->chunk_size = size;
10086:  h->alignment_mask = alignment - 1;
10087:  h->use_extra_arg = 0;
10088:
10089:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
10090:  h->next_free = h->object_base = chunk->contents;
10091:  h->chunk_limit = chunk->limit
10092:    = (char *) chunk + h->chunk_size;
10093:  chunk->prev = 0;
10094:  /* The initial chunk now contains no empty object.  */
10095:  h->maybe_empty_object = 0;
10096:}
10097:
10098:void
10099:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
10100:     struct obstack *h;
10101:     int size;
10102:     int alignment;
10103:     POINTER (*chunkfun) ();
10104:     void (*freefun) ();
10105:     POINTER arg;
10106:{
10107:  register struct _obstack_chunk* chunk; /* points to new chunk */
10108:
10109:  if (alignment == 0)
10110:    alignment = DEFAULT_ALIGNMENT;
10111:  if (size == 0)
10112:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
10113:    {
10114:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10115:	 Use the values for range checking, because if range checking is off,
10116:	 the extra bytes won't be missed terribly, but if range checking is on
10117:	 and we used a larger request, a whole extra 4096 bytes would be
10118:	 allocated.
10119:
10120:	 These number are irrelevant to the new GNU malloc.  I suspect it is
10121:	 less sensitive to the size of the request.  */
10122:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10123:		    + 4 + DEFAULT_ROUNDING - 1)
10124:		   & ~(DEFAULT_ROUNDING - 1));
10125:      size = 4096 - extra;
10126:    }
10127:
10128:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
10129:  h->freefun = freefun;
10130:  h->chunk_size = size;
10131:  h->alignment_mask = alignment - 1;
10132:  h->extra_arg = arg;
10133:  h->use_extra_arg = 1;
10134:
10135:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
10136:  h->next_free = h->object_base = chunk->contents;
10137:  h->chunk_limit = chunk->limit
10138:    = (char *) chunk + h->chunk_size;
10139:  chunk->prev = 0;
10140:  /* The initial chunk now contains no empty object.  */
10141:  h->maybe_empty_object = 0;
10142:}
10143:
10144:/* Allocate a new current chunk for the obstack *H
10145:   on the assumption that LENGTH bytes need to be added
10146:   to the current object, or a new object of length LENGTH allocated.
10147:   Copies any partial object from the end of the old chunk
10148:   to the beginning of the new one.  */
10149:
10150:void
10151:_obstack_newchunk (h, length)
10152:     struct obstack *h;
10153:     int length;
10154:{
10155:  register struct _obstack_chunk*	old_chunk = h->chunk;
10156:  register struct _obstack_chunk*	new_chunk;
10157:  register long	new_size;
10158:  register int obj_size = h->next_free - h->object_base;
10159:  register int i;
10160:  int already;
10161:
10162:  /* Compute size for new chunk.  */
10163:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
10164:  if (new_size < h->chunk_size)
10165:    new_size = h->chunk_size;
10166:
10167:  /* Allocate and initialize the new chunk.  */
10168:  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
10169:  new_chunk->prev = old_chunk;
10170:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
10171:
10172:  /* Move the existing object to the new chunk.
10173:     Word at a time is fast and is safe if the object
10174:     is sufficiently aligned.  */
10175:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
10176:    {
10177:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
10178:	   i >= 0; i--)
10179:	((COPYING_UNIT *)new_chunk->contents)[i]
10180:	  = ((COPYING_UNIT *)h->object_base)[i];
10181:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
10182:	 but that can cross a page boundary on a machine
10183:	 which does not do strict alignment for COPYING_UNITS.  */
10184:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
10185:    }
10186:  else
10187:    already = 0;
10188:  /* Copy remaining bytes one by one.  */
10189:  for (i = already; i < obj_size; i++)
10190:    new_chunk->contents[i] = h->object_base[i];
10191:
10192:  /* If the object just copied was the only data in OLD_CHUNK,
10193:     free that chunk and remove it from the chain.
10194:     But not if that chunk might contain an empty object.  */
10195:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
10196:    {
10197:      new_chunk->prev = old_chunk->prev;
10198:      CALL_FREEFUN (h, old_chunk);
10199:    }
10200:
10201:  h->object_base = new_chunk->contents;
10202:  h->next_free = h->object_base + obj_size;
10203:  /* The new chunk certainly contains no empty object yet.  */
10204:  h->maybe_empty_object = 0;
10205:}
10206:
10207:/* Return nonzero if object OBJ has been allocated from obstack H.
10208:   This is here for debugging.
10209:   If you use it in a program, you are probably losing.  */
10210:
10211:int
10212:_obstack_allocated_p (h, obj)
10213:     struct obstack *h;
10214:     POINTER obj;
10215:{
10216:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10217:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10218:
10219:  lp = (h)->chunk;
10220:  /* We use >= rather than > since the object cannot be exactly at
10221:     the beginning of the chunk but might be an empty object exactly
10222:     at the end of an adjacent chunk. */
10223:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10224:    {
10225:      plp = lp->prev;
10226:      lp = plp;
10227:    }
10228:  return lp != 0;
10229:}
10230:
10231:/* Free objects in obstack H, including OBJ and everything allocate
10232:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
10233:
10234:#undef obstack_free
10235:
10236:/* This function has two names with identical definitions.
10237:   This is the first one, called from non-ANSI code.  */
10238:
10239:void
10240:_obstack_free (h, obj)
10241:     struct obstack *h;
10242:     POINTER obj;
10243:{
10244:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10245:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10246:
10247:  lp = h->chunk;
10248:  /* We use >= because there cannot be an object at the beginning of a chunk.
10249:     But there can be an empty object at that address
10250:     at the end of another chunk.  */
10251:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10252:    {
10253:      plp = lp->prev;
10254:      CALL_FREEFUN (h, lp);
10255:      lp = plp;
10256:      /* If we switch chunks, we can't tell whether the new current
10257:	 chunk contains an empty object, so assume that it may.  */
10258:      h->maybe_empty_object = 1;
10259:    }
10260:  if (lp)
10261:    {
10262:      h->object_base = h->next_free = (char *)(obj);
10263:      h->chunk_limit = lp->limit;
10264:      h->chunk = lp;
10265:    }
10266:  else if (obj != 0)
10267:    /* obj is not in any of the chunks! */
10268:    abort ();
10269:}
10270:
10271:/* This function is used from ANSI code.  */
10272:
10273:void
10274:obstack_free (h, obj)
10275:     struct obstack *h;
10276:     POINTER obj;
10277:{
10278:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
10279:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
10280:
10281:  lp = h->chunk;
10282:  /* We use >= because there cannot be an object at the beginning of a chunk.
10283:     But there can be an empty object at that address
10284:     at the end of another chunk.  */
10285:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
10286:    {
10287:      plp = lp->prev;
10288:      CALL_FREEFUN (h, lp);
10289:      lp = plp;
10290:      /* If we switch chunks, we can't tell whether the new current
10291:	 chunk contains an empty object, so assume that it may.  */
10292:      h->maybe_empty_object = 1;
10293:    }
10294:  if (lp)
10295:    {
10296:      h->object_base = h->next_free = (char *)(obj);
10297:      h->chunk_limit = lp->limit;
10298:      h->chunk = lp;
10299:    }
10300:  else if (obj != 0)
10301:    /* obj is not in any of the chunks! */
10302:    abort ();
10303:}
10304:
10305:#if 0
10306:/* These are now turned off because the applications do not use it
10307:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
10308:
10309:/* Now define the functional versions of the obstack macros.
10310:   Define them to simply use the corresponding macros to do the job.  */
10311:
10312:#ifdef __STDC__
10313:/* These function definitions do not work with non-ANSI preprocessors;
10314:   they won't pass through the macro names in parentheses.  */
10315:
10316:/* The function names appear in parentheses in order to prevent
10317:   the macro-definitions of the names from being expanded there.  */
10318:
10319:POINTER (obstack_base) (obstack)
10320:     struct obstack *obstack;
10321:{
10322:  return obstack_base (obstack);
10323:}
10324:
10325:POINTER (obstack_next_free) (obstack)
10326:     struct obstack *obstack;
10327:{
10328:  return obstack_next_free (obstack);
10329:}
10330:
10331:int (obstack_object_size) (obstack)
10332:     struct obstack *obstack;
10333:{
10334:  return obstack_object_size (obstack);
10335:}
10336:
10337:int (obstack_room) (obstack)
10338:     struct obstack *obstack;
10339:{
10340:  return obstack_room (obstack);
10341:}
10342:
10343:void (obstack_grow) (obstack, pointer, length)
10344:     struct obstack *obstack;
10345:     POINTER pointer;
10346:     int length;
10347:{
10348:  obstack_grow (obstack, pointer, length);
10349:}
10350:
10351:void (obstack_grow0) (obstack, pointer, length)
10352:     struct obstack *obstack;
10353:     POINTER pointer;
10354:     int length;
10355:{
10356:  obstack_grow0 (obstack, pointer, length);
10357:}
10358:
10359:void (obstack_1grow) (obstack, character)
10360:     struct obstack *obstack;
10361:     int character;
10362:{
10363:  obstack_1grow (obstack, character);
10364:}
10365:
10366:void (obstack_blank) (obstack, length)
10367:     struct obstack *obstack;
10368:     int length;
10369:{
10370:  obstack_blank (obstack, length);
10371:}
10372:
10373:void (obstack_1grow_fast) (obstack, character)
10374:     struct obstack *obstack;
10375:     int character;
10376:{
10377:  obstack_1grow_fast (obstack, character);
10378:}
10379:
10380:void (obstack_blank_fast) (obstack, length)
10381:     struct obstack *obstack;
10382:     int length;
10383:{
10384:  obstack_blank_fast (obstack, length);
10385:}
10386:
10387:POINTER (obstack_finish) (obstack)
10388:     struct obstack *obstack;
10389:{
10390:  return obstack_finish (obstack);
10391:}
10392:
10393:POINTER (obstack_alloc) (obstack, length)
10394:     struct obstack *obstack;
10395:     int length;
10396:{
10397:  return obstack_alloc (obstack, length);
10398:}
10399:
10400:POINTER (obstack_copy) (obstack, pointer, length)
10401:     struct obstack *obstack;
10402:     POINTER pointer;
10403:     int length;
10404:{
10405:  return obstack_copy (obstack, pointer, length);
10406:}
10407:
10408:POINTER (obstack_copy0) (obstack, pointer, length)
10409:     struct obstack *obstack;
10410:     POINTER pointer;
10411:     int length;
10412:{
10413:  return obstack_copy0 (obstack, pointer, length);
10414:}
10415:
10416:#endif /* __STDC__ */
10417:
10418:#endif /* 0 */
10419:
10420:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
10421:/* search.c - searching subroutines using dfa, kwset and regex for grep.
10422:   Copyright (C) 1992 Free Software Foundation, Inc.
10423:
10424:   This program is free software; you can redistribute it and/or modify
10425:   it under the terms of the GNU General Public License as published by
10426:   the Free Software Foundation; either version 2, or (at your option)
10427:   any later version.
10428:
10429:   This program is distributed in the hope that it will be useful,
10430:   but WITHOUT ANY WARRANTY; without even the implied warranty of
10431:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
10432:   GNU General Public License for more details.
10433:
10434:   You should have received a copy of the GNU General Public License
10435:   along with this program; if not, write to the Free Software
10436:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
10437:
10438:   Written August 1992 by Mike Haertel. */
10439:
10441:
10442:#ifdef STDC_HEADERS
10443:#if flag_limits==0
10444:#undef RE_DUP_MAX
10446:#define flag_limits 1
10447:#endif
10448:#if flag_stdlib==0
10450:#define flag_stdlib 1
10451:#endif
10452:#else
10453:#define UCHAR_MAX 255
10454:#if flag_systypes==0
10456:#define flag_systypes 1
10457:#endif
10458:extern char *malloc();
10459:#endif
10460:
10461:#ifdef HAVE_MEMCHR
10462:#if flag_string==0
10464:#define flag_string 1
10465:#endif
10466:#ifdef NEED_MEMORY_H
10467:#if flag_memory==0
10469:#define flag_memory 1
10470:#endif
10471:#endif
10472:#else
10473:#ifdef __STDC__
10474:extern void *memchr();
10475:#else
10476:extern char *memchr();
10477:#endif
10478:#endif
10479:
10480:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
10481:#undef bcopy
10482:#define bcopy(s, d, n) memcpy((d), (s), (n))
10483:#endif
10484:
10485:#ifdef isascii
10486:#define ISALNUM(C) (isascii(C) && isalnum(C))
10487:#define ISUPPER(C) (isascii(C) && isupper(C))
10488:#else
10489:#define ISALNUM(C) isalnum(C)
10490:#define ISUPPER(C) isupper(C)
10491:#endif
10492:
10493:#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))
10494:
10499:
10500:#define NCHAR (UCHAR_MAX + 1)
10501:
10502:#if __STDC__
10503:static void Gcompile(char *, size_t);
10504:static void Ecompile(char *, size_t);
10505:static char *EGexecute(char *, size_t, char **);
10506:static void Fcompile(char *, size_t);
10507:static char *Fexecute(char *, size_t, char **);
10508:#else
10509:static void Gcompile();
10510:static void Ecompile();
10511:static char *EGexecute();
10512:static void Fcompile();
10513:static char *Fexecute();
10514:#endif
10515:
10516:/* Here is the matchers vector for the main program. */
10517:struct matcher matchers[] = {
10518:  { "default", Gcompile, EGexecute },
10519:  { "grep", Gcompile, EGexecute },
10520:  { "ggrep", Gcompile, EGexecute },
10521:  { "egrep", Ecompile, EGexecute },
10522:  { "posix-egrep", Ecompile, EGexecute },
10523:  { "gegrep", Ecompile, EGexecute },
10524:  { "fgrep", Fcompile, Fexecute },
10525:  { "gfgrep", Fcompile, Fexecute },
10526:  { 0, 0, 0 },
10527:};
10528:
10529:/* For -w, we also consider _ to be word constituent.  */
10530:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
10531:
10532:/* DFA compiled regexp. */
10533:static struct dfa dfa_1;
10534:
10535:/* Regex compiled regexp. */
10536:static struct re_pattern_buffer regex;
10537:
10538:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
10539:   a list of strings, at least one of which is known to occur in
10540:   any string matching the regexp. */
10541:static kwset_t kwset;
10542:
10543:/* Last compiled fixed string known to exactly match the regexp.
10544:   If kwsexec() returns < lastexact, then we don't need to
10545:   call the regexp matcher at all. */
10546:static int lastexact;
10547:
10548:void
10549:dfaerror(mesg)
10550:     char *mesg;
10551:{
10552:  fatal(mesg, 0);
10553:}
10554:
10555:static void
10556:kwsinit()
10557:{
10558:  static char trans[NCHAR];
10559:  int i;
10560:
10561:  if (match_icase)
10562:    for (i = 0; i < NCHAR; ++i)
10563:      trans[i] = TOLOWER(i);
10564:
10565:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
10566:    fatal("memory exhausted", 0);
10567:}  
10568:
10569:/* If the DFA turns out to have some set of fixed strings one of
10570:   which must occur in the match, then we build a kwset matcher
10571:   to find those strings, and thus quickly filter out impossible
10572:   matches. */
10573:static void
10574:kwsmusts()
10575:{
10576:  struct dfamust *dm;
10577:  char *err;
10578:
10579:  if (dfa_1.musts)
10580:    {
10581:      kwsinit();
10582:      /* First, we compile in the substrings known to be exact
10583:	 matches.  The kwset matcher will return the index
10584:	 of the matching string that it chooses. */
10585:      for (dm = dfa_1.musts; dm; dm = dm->next)
10586:	{
10587:	  if (!dm->exact)
10588:	    continue;
10589:	  ++lastexact;
10590:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
10591:	    fatal(err, 0);
10592:	}
10593:      /* Now, we compile the substrings that will require
10594:	 the use of the regexp matcher.  */
10595:      for (dm = dfa_1.musts; dm; dm = dm->next)
10596:	{
10597:	  if (dm->exact)
10598:	    continue;
10599:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
10600:	    fatal(err, 0);
10601:	}
10602:      if ((err = kwsprep(kwset)) != 0)
10603:	fatal(err, 0);
10604:    }
10605:}
10606:
10607:static void
10608:Gcompile(pattern, size)
10609:     char *pattern;
10610:     size_t size;
10611:{
10612:#ifdef __STDC__
10613:  const
10614:#endif
10615:  char *err;
10616:
10617:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
10618:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase);
10619:
10620:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
10621:    fatal(err, 0);
10622:
10623:  dfainit(&dfa_1);
10624:
10625:  /* In the match_words and match_lines cases, we use a different pattern
10626:     for the DFA matcher that will quickly throw out cases that won't work.
10627:     Then if DFA succeeds we do some hairy stuff using the regex matcher
10628:     to decide whether the match should really count. */
10629:  if (match_words || match_lines)
10630:    {
10631:      /* In the whole-word case, we use the pattern:
10632:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
10633:	 In the whole-line case, we use the pattern:
10634:	 ^(userpattern)$.
10635:	 BUG: Using [A-Za-z_] is locale-dependent!  */
10636:
10637:      char *n = malloc(size + 50);
10638:      int i = 0;
10639:
10640:      strcpy(n, "");
10641:
10642:      if (match_lines)
10643:	strcpy(n, "^\\(");
10644:      if (match_words)
10645:	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
10646:
10647:      i = strlen(n);
10648:      bcopy(pattern, n + i, size);
10649:      i += size;
10650:
10651:      if (match_words)
10652:	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
10653:      if (match_lines)
10654:	strcpy(n + i, "\\)$");
10655:
10656:      i += strlen(n + i);
10657:      dfacomp(n, i, &dfa_1, 1);
10658:    }
10659:  else
10660:    dfacomp(pattern, size, &dfa_1, 1);
10661:
10662:  kwsmusts();
10663:}
10664:
10665:static void
10666:Ecompile(pattern, size)
10667:     char *pattern;
10668:     size_t size;
10669:{
10670:#ifdef __STDC__
10671:  const
10672:#endif
10673:  char *err;
10674:
10675:  if (strcmp(matcher, "posix-egrep") == 0)
10676:    {
10677:      re_set_syntax(RE_SYNTAX_POSIX_EGREP);
10678:      dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase);
10679:    }
10680:  else
10681:    {
10682:      re_set_syntax(RE_SYNTAX_EGREP);
10683:      dfasyntax(RE_SYNTAX_EGREP, match_icase);
10684:    }
10685:
10686:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
10687:    fatal(err, 0);
10688:
10689:  dfainit(&dfa_1);
10690:
10691:  /* In the match_words and match_lines cases, we use a different pattern
10692:     for the DFA matcher that will quickly throw out cases that won't work.
10693:     Then if DFA succeeds we do some hairy stuff using the regex matcher
10694:     to decide whether the match should really count. */
10695:  if (match_words || match_lines)
10696:    {
10697:      /* In the whole-word case, we use the pattern:
10698:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
10699:	 In the whole-line case, we use the pattern:
10700:	 ^(userpattern)$.
10701:	 BUG: Using [A-Za-z_] is locale-dependent!  */
10702:
10703:      char *n = malloc(size + 50);
10704:      int i = 0;
10705:
10706:      strcpy(n, "");
10707:
10708:      if (match_lines)
10709:	strcpy(n, "^(");
10710:      if (match_words)
10711:	strcpy(n, "(^|[^0-9A-Za-z_])(");
10712:
10713:      i = strlen(n);
10714:      bcopy(pattern, n + i, size);
10715:      i += size;
10716:
10717:      if (match_words)
10718:	strcpy(n + i, ")([^0-9A-Za-z_]|$)");
10719:      if (match_lines)
10720:	strcpy(n + i, ")$");
10721:
10722:      i += strlen(n + i);
10723:      dfacomp(n, i, &dfa_1, 1);
10724:    }
10725:  else
10726:    dfacomp(pattern, size, &dfa_1, 1);
10727:
10728:  kwsmusts();
10729:}
10730:
10731:static char *
10732:EGexecute(buf, size, endp)
10733:     char *buf;
10734:     size_t size;
10735:     char **endp;
10736:{
10737:  register char *buflim, *beg, *end, save;
10738:  int backref, start, len;
10739:  struct kwsmatch kwsm;
10740:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
10741:				    Q@#%!# library interface in regex.c.  */
10742:
10743:  buflim = buf + size;
10744:
10745:  for (beg = end = buf; end < buflim; beg = end + 1)
10746:    {
10747:      if (kwset)
10748:	{
10749:	  /* Find a possible match using the KWset matcher. */
10750:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
10751:	  if (!beg)
10752:	    goto failure;
10753:	  /* Narrow down to the line containing the candidate, and
10754:	     run it through DFA. */
10755:	  end = memchr(beg, '\n', buflim - beg);
10756:	  if (!end)
10757:	    end = buflim;
10758:	  while (beg > buf && beg[-1] != '\n')
10759:	    --beg;
10760:	  save = *end;
10761:	  if (kwsm.index < lastexact)
10762:	    goto success;
10763:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
10764:	    {
10765:	      *end = save;
10766:	      continue;
10767:	    }
10768:	  *end = save;
10769:	  /* Successful, no backreferences encountered. */
10770:	  if (!backref)
10771:	    goto success;
10772:	}
10773:      else
10774:	{
10775:	  /* No good fixed strings; start with DFA. */
10776:	  save = *buflim;
10777:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
10778:	  *buflim = save;
10779:	  if (!beg)
10780:	    goto failure;
10781:	  /* Narrow down to the line we've found. */
10782:	  end = memchr(beg, '\n', buflim - beg);
10783:	  if (!end)
10784:	    end = buflim;
10785:	  while (beg > buf && beg[-1] != '\n')
10786:	    --beg;
10787:	  /* Successful, no backreferences encountered! */
10788:	  if (!backref)
10789:	    goto success;
10790:	}
10791:      /* If we've made it to this point, this means DFA has seen
10792:	 a probable match, and we need to run it through Regex. */
10793:      regex.not_eol = 0;
10794:      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
10795:	{
10796:	  len = regs.end[0] - start;
10797:	  if (!match_lines && !match_words || match_lines && len == end - beg)
10798:	    goto success;
10799:	  /* If -w, check if the match aligns with word boundaries.
10800:	     We do this iteratively because:
10801:	     (a) the line may contain more than one occurence of the pattern, and
10802:	     (b) Several alternatives in the pattern might be valid at a given
10803:	     point, and we may need to consider a shorter one to find a word
10804:	     boundary. */
10805:	  if (match_words)
10806:	    while (start >= 0)
10807:	      {
10808:		if ((start == 0 || !WCHAR(beg[start - 1]))
10809:		    && (len == end - beg || !WCHAR(beg[start + len])))
10810:		  goto success;
10811:		if (len > 0)
10812:		  {
10813:		    /* Try a shorter length anchored at the same place. */
10814:		    --len;
10815:		    regex.not_eol = 1;
10816:		    len = re_match(&regex, beg, start + len, start, &regs);
10817:		  }
10818:		if (len <= 0)
10819:		  {
10820:		    /* Try looking further on. */
10821:		    if (start == end - beg)
10822:		      break;
10823:		    ++start;
10824:		    regex.not_eol = 0;
10825:		    start = re_search(&regex, beg, end - beg,
10826:				      start, end - beg - start, &regs);
10827:		    len = regs.end[0] - start;
10828:		  }
10829:	      }
10830:	}
10831:    }
10832:
10833: failure:
10834:  return 0;
10835:
10836: success:
10837:  *endp = end < buflim ? end + 1 : end;
10838:  return beg;
10839:}
10840:
10841:static void
10842:Fcompile(pattern, size)
10843:     char *pattern;
10844:     size_t size;
10845:{
10846:  char *beg, *lim, *err;
10847:
10848:  kwsinit();
10849:  beg = pattern;
10850:  do
10851:    {
10852:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
10853:	;
10854:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
10855:	fatal(err, 0);
10856:      if (lim < pattern + size)
10857:	++lim;
10858:      beg = lim;
10859:    }
10860:  while (beg < pattern + size);
10861:
10862:  if ((err = kwsprep(kwset)) != 0)
10863:    fatal(err, 0);
10864:}
10865:
10866:static char *
10867:Fexecute(buf, size, endp)
10868:     char *buf;
10869:     size_t size;
10870:     char **endp;
10871:{
10872:  register char *beg, *try, *end;
10873:  register size_t len;
10874:  struct kwsmatch kwsmatch;
10875:
10876:  for (beg = buf; beg <= buf + size; ++beg)
10877:    {
10878:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
10879:	return 0;
10880:      len = kwsmatch.size[0];
10881:      if (match_lines)
10882:	{
10883:	  if (beg > buf && beg[-1] != '\n')
10884:	    continue;
10885:	  if (beg + len < buf + size && beg[len] != '\n')
10886:	    continue;
10887:	  goto success;
10888:	}
10889:      else if (match_words)
10890:	for (try = beg; len && try;)
10891:	  {
10892:	    if (try > buf && WCHAR((unsigned char) try[-1]))
10893:	      break;
10894:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
10895:	      {
10896:		try = kwsexec(kwset, beg, --len, &kwsmatch);
10897:		len = kwsmatch.size[0];
10898:	      }
10899:	    else
10900:	      goto success;
10901:	  }
10902:      else
10903:	goto success;
10904:    }
10905:
10906:  return 0;
10907:
10908: success:
10909:  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
10910:    ++end;
10911:  else
10912:    end = buf + size;
10913:  *endp = end;
10914:  while (beg > buf && beg[-1] != '\n')
10915:    --beg;
10916:  return beg;
10917:}
10918:
10919:if (out)
10920:if (gout)
10921:if (gsth)
10922:if out
10923:if gout
10924:if agout
10925:if agout end = buf + size;
10926:if aout
10927:if ag
10928:if g
10929:if a
10930:
10931:swswsif (out)
10932:wwif (gout)
10933:wssif (gsth)
10934:wswswsif out
10935:3if gout
10936:wsif agout
10937:3eif agout end = buf + size;
10938:dseif aout
10939:dsif ag
10940:isxsif g
10941:xxsxif awwsw
10942:
10943:swswsif (out)fvvfvf
10944:wwif (gout)
10945:wssif (gsth)
10946:wswswsif outvfvf
10947:3if goutfvf
10948:wsif agoutvfv
10949:3eif agoutvf end = buf + size;
10950:dseif aoutvfv
10951:dsif agvff
10952:isxsif gvfv
10953:xxsxif awwsw
10954:
10955:s  if (out)
10956:    if (gout)
10957: sds if (gsth)
10958:  if out
10959:dc if gout
10960:dv if agout
10961:argue if agout end = buf + size;
10962:  if aout
10963:          if ag
10964:  argue if g
10965: if a