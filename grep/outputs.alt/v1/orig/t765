   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#define MAX(A,B) ((A) > (B) ? (A) : (B))
static char *buffer;		/* Base of buffer. */
static char *bufbeg;		/* Beginning of user-visible stuff. */
#ifndef BUFSALLOC
      bufsalloc = BUFSALLOC;
/* Print the lines between BEG and LIM.  Deal with context crap.
   If NLINESP is non-null, store a count of lines between BEG and LIM. */
  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
      case 'B':
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
   to get __GNU_LIBRARY__ defined.  */
#ifdef	__GNU_LIBRARY__
   long-named option.  Because this is not POSIX.2 compliant, it is
#ifdef	__GNU_LIBRARY__
   But we pretend they're const in the prototype to be compatible
#endif	/* _LIBC or not __GNU_LIBRARY__.  */
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/* We used to test for `BSTRING' here, but only GCC and Emacs define
   `BSTRING', as far as I know, and neither of them use this code.  */
#ifdef SYNTAX_TABLE
#else /* not SYNTAX_TABLE */
#endif /* not SYNTAX_TABLE */
#define ISBLANK(c) (isascii (c) && isblank (c))
#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
   (Per Bothner suggested the basic approach.)  */
   Because we sometimes use alloca, some routines have to be macros,
#define BYTEWIDTH 8 /* In bits.  */
           for a bitmap saying which chars are in.  Bits in each byte
/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
#define STORE_NUMBER(destination, number)				\
/* Same as STORE_NUMBER, except increment DESTINATION to
#define STORE_NUMBER_AND_INCR(destination, number)			\
    STORE_NUMBER (destination, number);					\
#define EXTRACT_NUMBER(destination, source)				\
#ifdef DEBUG
#undef EXTRACT_NUMBER
#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
#endif /* DEBUG */
/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
    EXTRACT_NUMBER (destination, source);				\
#ifdef DEBUG
#undef EXTRACT_NUMBER_AND_INCR
#define EXTRACT_NUMBER_AND_INCR(dest, src) \
#endif /* DEBUG */
/* If DEBUG is defined, Regex prints many voluminous messages about what
#ifdef DEBUG
#define DEBUG_STATEMENT(e) e
#define DEBUG_PRINT1(x) if (debug) printf (x)
#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
  while (i < (1 << BYTEWIDTH))
          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
#else /* not DEBUG */
#define DEBUG_STATEMENT(e)
#define DEBUG_PRINT1(x)
#define DEBUG_PRINT2(x1, x2)
#define DEBUG_PRINT3(x1, x2, x3)
#define DEBUG_PRINT4(x1, x2, x3, x4)
#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
#endif /* not DEBUG */
    "Invalid regular expression",		/* REG_BADPAT */
    "Invalid back reference",			/* REG_ESUBREG */
    "Unmatched [ or [^",			/* REG_EBRACK */
    "Unmatched \\{",				/* REG_EBRACE */
    "Invalid content of \\{\\}",		/* REG_BADBR */
    "Invalid preceding regular expression",	/* REG_BADRPT */
   `char *', to avoid warnings when a string constant is passed.  But
#define INIT_BUF_SIZE  32
#define GET_BUFFER_SPACE(n)						\
      EXTEND_BUFFER ()
#define BUF_PUSH(c)							\
    GET_BUFFER_SPACE (1);						\
#define BUF_PUSH_2(c1, c2)						\
    GET_BUFFER_SPACE (2);						\
/* As with BUF_PUSH_2, except for three bytes.  */
#define BUF_PUSH_3(c1, c2, c3)						\
    GET_BUFFER_SPACE (3);						\
#define MAX_BUF_SIZE (1L << 16)
   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
#define EXTEND_BUFFER()							\
    if (bufp->allocated == MAX_BUF_SIZE) 				\
    if (bufp->allocated > MAX_BUF_SIZE)					\
      bufp->allocated = MAX_BUF_SIZE; 					\
/* But patterns can have more than `MAX_REGNUM' registers.  We just
   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
#define SET_LIST_BIT(c)                               \
  (b[((unsigned char) (c)) / BYTEWIDTH]               \
   |= 1 << (((unsigned char) c) % BYTEWIDTH))
#define GET_UNSIGNED_NUMBER(num) 					\
   fields are set in BUFP on entry.
   If it succeeds, results are put in BUFP (if it returns an error, the
   contents of BUFP are undefined):
#ifdef DEBUG
  DEBUG_PRINT1 ("\nCompiling pattern: ");
#endif /* DEBUG */
#if !defined (emacs) && !defined (SYNTAX_TABLE)
          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
      bufp->allocated = INIT_BUF_SIZE;
              BUF_PUSH (begline);
               BUF_PUSH (endline);
          if ((syntax & RE_BK_PLUS_QM)
                return REG_BADRPT;
                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
                   But if we are at the `*' in the exact sequence `.*\n',
                GET_BUFFER_SPACE (3);
            GET_BUFFER_SPACE (3);
                GET_BUFFER_SPACE (3);
          BUF_PUSH (anychar);
            if (p == pend) return REG_EBRACK;
	    GET_BUFFER_SPACE (34);
               statement, so we only need one BUF_PUSH.  */
            BUF_PUSH (*p == '^' ? charset_not : charset); 
            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
              SET_LIST_BIT ('\n');
                if (p == pend) return REG_EBRACK;
                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
                    SET_LIST_BIT (c1);
                    if (p == pend) return REG_EBRACK;
                        if (p == pend) return REG_EBRACK;
                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
                                || (is_blank  && ISBLANK (ch))
                            SET_LIST_BIT (ch);
                        SET_LIST_BIT ('[');
                        SET_LIST_BIT (':');
                    SET_LIST_BIT (c);
          if (syntax & RE_NO_BK_PARENS)
          if (syntax & RE_NO_BK_PARENS)
          if (syntax & RE_NO_BK_VBAR)
           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
             distinguish, e.g., \B from \b, even if we normally would
             translate, e.g., B to b.  */
              if (syntax & RE_NO_BK_PARENS)
                 groups inner to this one.  But do not push a
                  BUF_PUSH_3 (start_memory, regnum, 0);
              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
                  BUF_PUSH (push_dummy_failure);
                    BUF_PUSH_3 (stop_memory, this_group_regnum,
              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
              GET_BUFFER_SPACE (3);
              GET_BUFFER_SPACE (3);
                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
                    if (syntax & RE_NO_BK_BRACES)
                      return REG_EBRACE;
                GET_UNSIGNED_NUMBER (lower_bound);
                    GET_UNSIGNED_NUMBER (upper_bound);
                    if (syntax & RE_NO_BK_BRACES)
                      return REG_BADBR;
                if (!(syntax & RE_NO_BK_BRACES)) 
                    if (c != '\\') return REG_EBRACE;
                    if (syntax & RE_NO_BK_BRACES)
                      return REG_BADBR;
                      return REG_BADRPT;
                     GET_BUFFER_SPACE (3);
                     GET_BUFFER_SPACE (nbytes);
                            for the relative address.  But we are
               if (!(syntax & RE_NO_BK_BRACES))
              BUF_PUSH (at_dot);
              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
              BUF_PUSH (wordchar);
              BUF_PUSH (notwordchar);
              BUF_PUSH (wordbeg);
              BUF_PUSH (wordend);
              BUF_PUSH (wordbound);
            case 'B':
              BUF_PUSH (notwordbound);
              BUF_PUSH (begbuf);
              BUF_PUSH (endbuf);
              if (syntax & RE_NO_BK_REFS)
                return REG_ESUBREG;
              BUF_PUSH_2 (duplicate, c1);
              if (syntax & RE_BK_PLUS_QM)
	      || *pending_exact == (1 << BYTEWIDTH) - 1
	      || ((syntax & RE_BK_PLUS_QM)
                  && ((syntax & RE_NO_BK_BRACES)
	      BUF_PUSH_2 (exactn, 0);
	  BUF_PUSH (c);
#ifdef DEBUG
      DEBUG_PRINT1 ("\nCompiled pattern: \n");
#endif /* DEBUG */
  STORE_NUMBER (loc + 1, arg);
  STORE_NUMBER (loc + 1, arg1);
  STORE_NUMBER (loc + 3, arg2);
       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
       /* Before a subexpression?  */
       (syntax & RE_NO_BK_PARENS ? *next == ')'
       /* Before an alternative?  */
    || (syntax & RE_NO_BK_VBAR ? *next == '|'
   ending characters (inclusive) in the compiled pattern B.
      SET_LIST_BIT (TRANSLATE (this_char));
#define DOUBLE_FAIL_STACK(fail_stack)					\
    && !DOUBLE_FAIL_STACK (fail_stack))					\
#ifdef DEBUG
#define DEBUG_PUSH PUSH_FAILURE_ITEM
#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
#define DEBUG_PUSH(item)
#define DEBUG_POP(item_addr)
   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
    DEBUG_STATEMENT (failure_id++);					\
    DEBUG_STATEMENT (nfailure_points_pushed++);				\
    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
        if (!DOUBLE_FAIL_STACK (fail_stack))			\
        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
    DEBUG_PRINT1 ("\n");						\
	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
        DEBUG_STATEMENT (num_regs_pushed++);				\
	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
        DEBUG_PRINT2 (" match_null=%d",					\
        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
        DEBUG_PRINT2 (" matched_something=%d",				\
        DEBUG_PRINT2 (" ever_matched=%d",				\
	DEBUG_PRINT1 ("\n");						\
    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
    DEBUG_PRINT1 ("'\n");						\
    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
    DEBUG_PUSH (failure_id);						\
#ifdef DEBUG
  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
  DEBUG_POP (&failure_id);						\
  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
  DEBUG_PRINT1 ("'\n");							\
  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
  DEBUG_STATEMENT (nfailure_points_popped++);				\
   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
   area as BUFP->fastmap.
  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
#ifdef SWITCH_ENUM_BUG
          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
	  for (j = 0; j < (1 << BYTEWIDTH); j++)
	  for (j = 0; j < (1 << BYTEWIDTH); j++)
	  for (j = 0; j < (1 << BYTEWIDTH); j++)
	  for (j = 0; j < (1 << BYTEWIDTH); j++)
	  for (j = 0; j < (1 << BYTEWIDTH); j++)
          EXTRACT_NUMBER_AND_INCR (j, p);
          EXTRACT_NUMBER_AND_INCR (j, p);
          EXTRACT_NUMBER_AND_INCR (j, p);
              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
          EXTRACT_NUMBER_AND_INCR (k, p);
   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
   PATTERN_BUFFER will allocate its own register data, without
/* Using the compiled pattern in BUFP->buffer, first tries to match the
   and STRING2 that matched the entire BUFP->buffer and its contained
#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
#define AT_WORD_BOUNDARY(d)						\
  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
#define FREE_VARIABLES()						\
#define FREE_VARIABLES() alloca (0)
#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
/* re_match_2 matches the compiled pattern in BUFP against the
   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
#ifdef DEBUG
  /* Logically, this is `best_regend[0]'.  But we don't want to have to
#ifdef DEBUG
  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
          FREE_VARIABLES ();
         `FREE_VARIABLES' doesn't try to free them.  */
      FREE_VARIABLES ();
  DEBUG_PRINT1 ("The compiled pattern is: ");
  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
  DEBUG_PRINT1 ("The string to match is: `");
  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
  DEBUG_PRINT1 ("'\n");
      DEBUG_PRINT2 ("\n0x%x: ", p);
          DEBUG_PRINT1 ("end of pattern ... ");
              DEBUG_PRINT1 ("backtracking.\n");
                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
                  DEBUG_PRINT1 ("Restoring best registers.\n");
          DEBUG_PRINT1 ("Accepting match.\n");
          FREE_VARIABLES ();
          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
#ifdef SWITCH_ENUM_BUG
          DEBUG_PRINT1 ("EXECUTING no_op.\n");
          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING anychar.\n");
          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
	    if (c < (unsigned) (*p * BYTEWIDTH)
		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
	  DEBUG_PRINT2 ("      old_regend: %d\n", 
	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
          DEBUG_PRINT1 ("EXECUTING begline.\n");
          if (AT_STRINGS_BEG (d))
          DEBUG_PRINT1 ("EXECUTING endline.\n");
          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
          if (AT_STRINGS_BEG (d))
          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
           then the . fails against the \n.  But the next thing we want
           Because this is used only in specific cases, we don't need to
          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
          EXTRACT_NUMBER_AND_INCR (mcnt, p);
          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
          EXTRACT_NUMBER_AND_INCR (mcnt, p);
          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
          DEBUG_PRINT1 (":\n");
          EXTRACT_NUMBER_AND_INCR (mcnt, p);
          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
               (e.g., if the string was `ab').  But instead of trying to
                DEBUG_PRINT1
                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
              DEBUG_PRINT1 ("  Match => jump.\n");
            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
          DEBUG_PRINT2 ("(to 0x%x).\n", p);
          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
          EXTRACT_NUMBER (mcnt, p + 2);
          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
               STORE_NUMBER_AND_INCR (p, mcnt);
               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
          EXTRACT_NUMBER (mcnt, p + 2);
          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
               STORE_NUMBER (p + 2, mcnt);
            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
            EXTRACT_NUMBER_AND_INCR (mcnt, p);
            EXTRACT_NUMBER_AND_INCR (mcnt, p);
            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
	    STORE_NUMBER (p1, mcnt);
          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
          if (AT_WORD_BOUNDARY (d))
          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
	  if (AT_WORD_BOUNDARY (d))
          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
          DEBUG_PRINT1 ("EXECUTING wordend.\n");
	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
          DEBUG_PRINT1 ("\nFAIL:\n");
                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
  FREE_VARIABLES ();
          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
                  /* Break if it's the beginning of an n-th alternative
                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
              EXTRACT_NUMBER (mcnt, p1 - 2);
          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
   compiles PATTERN (of length SIZE) and puts the result in BUFP.
   are set in BUFP on entry.
/* Entry points compatible with 4.2 BSD regex library.  We don't define
/* BSD has one and only one pattern buffer.  */
      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
       RE_SYNTAX_POSIX_BASIC;
     If REG_NOSUB is set, then when PREG is passed to regexec, that
      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
  preg->no_sub = !!(cflags & REG_NOSUB);
   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
   REG_NOTBOL is set, then ^ does not match at the beginning of the
  private_preg.not_bol = !!(eflags & REG_NOTBOL);
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
#ifdef DEBUG
	case BACKREF: s = "BACKREF"; break;
	case BEGLINE: s = "BEGLINE"; break;
	case BEGWORD: s = "BEGWORD"; break;
#endif /* DEBUG */
  return c[b / INTBITS] & 1 << b % INTBITS;
  c[b / INTBITS] |= 1 << b % INTBITS;
  c[b / INTBITS] &= ~(1 << b % INTBITS);
  /* Basic plan: We fetch a character.  If it's a backslash,
	    return lasttok = BEGLINE;
	      || (syntax_bits & RE_NO_BK_PARENS
	      || (syntax_bits & RE_NO_BK_VBAR
	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
	      return lasttok = BACKREF;
	    return lasttok = BEGWORD;
	case 'B':
	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
	  if (!(syntax_bits & RE_NO_BK_BRACES))
	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
     BACKREF
     BEGLINE
     BEGWORD
  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
    else if (d->tokens[s->elems[j].index] == BACKREF)
	&& d->tokens[s->elems[i].index] != BACKREF
	  case BEGLINE:
	    p.constraint &= BEGLINE_CONSTRAINT;
	  case BEGWORD:
	    p.constraint &= BEGWORD_CONSTRAINT;
   Because of the postfix representation of the parse tree, the depth-first
#ifdef DEBUG
#ifdef DEBUG
	   Backreferences have to get a real position so we can detect
	   transitions on them later.  But they are nullable. */
	*nullable++ = d->tokens[i] == BACKREF;
#ifdef DEBUG
    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
#ifdef DEBUG
  /* Build the initial state. */
	for (k = 0; k < INTBITS; ++k)
	      int c = j * INTBITS + k;
   character after the match, or NULL if none is found.  Begin points to
   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
#ifdef DEBUG
	case BEGLINE:
	case BEGWORD:
	case BACKREF:
#ifdef DEBUG
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   to one discovered by Beate Commentz-Walter, although it is not identical.
   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
/* Balanced tree of edges and labels leaving a given trie node. */
  int mind2;			/* Used in Boyer-Moore search for one string. */
	  /* Back up the tree fixing the balance flags. */
/* Return true if A has every label in B. */
      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
/* This is just to get __GNU_LIBRARY__ defined.  */
#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
   But in fact it might be less smart and round addresses to as much as
     But not if that chunk might contain an empty object.  */
/* Return nonzero if object OBJ has been allocated from obstack H.
/* Free objects in obstack H, including OBJ and everything allocate
   more recently than OBJ.  If OBJ is zero, free everything in H.  */
     But there can be an empty object at that address
     But there can be an empty object at that address
#endif	/* _LIBC or not __GNU_LIBRARY__.  */
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
	 BUG: Using [A-Za-z_] is locale-dependent!  */
	 BUG: Using [A-Za-z_] is locale-dependent!  */
  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
