#include "getpagesize.h"
     size_t n;
xmalloc(size)
     size_t size;
  result = malloc(size);
  if (size && !result)
xrealloc(ptr, size)
     size_t size;
    result = realloc(ptr, size);
    result = malloc(size);
  if (size && !result)
extern void *valloc(size_t);
   page size. */
static size_t bufsalloc;	/* Allocated size of buffer save region. */
static size_t bufalloc;		/* Total buffer size. */
      bufsalloc = MAX(8192, getpagesize());
     size_t save;
  static int pagesize;
  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
  if (bufmapped && bufoffset % pagesize == 0
      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
static size_t totalcc;		/* Total character count before bufbeg. */
static size_t totalnl;		/* Total newline count before lastnl. */
  size_t residue, save;
  size_t keycc, oldcc, keyalloc;
my_bcopy (from, to, size)
     int size;
  for (i = 0; i < size; i++)
  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
  char **temp = (char **) __alloca (nonopts_size);
  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
	    (optind - last_nonopt) * sizeof (char *));
	    nonopts_size);
   bzero (re_syntax_table, sizeof re_syntax_table);
#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
#define REGEX_REALLOCATE(source, osize, nsize)				\
  (destination = (char *) alloca (nsize),				\
   bcopy (source, destination, osize),					\
/* True if `size1' is non-NULL and PTR is pointing anywhere inside
  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
print_double_string (where, string1, size1, string2, size2)
    int size1;
    int size2;
          for (this_char = where - string1; this_char < size1; this_char++)
      for (this_char = where - string2; this_char < size2; this_char++)
/* Extend the buffer by twice its current size via realloc and
  unsigned size;
#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
regex_compile (pattern, size, syntax, bufp)
     int size;
  const char *pend = pattern + size;
      for (debug_count = 0; debug_count < size; debug_count++)
  compile_stack.size = INIT_COMPILE_STACK_SIZE;
                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
                  compile_stack.size <<= 1;
  unsigned size;
#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
    fail_stack.size = INIT_FAILURE_ALLOC;				\
/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
          (fail_stack).size * sizeof (fail_stack_elt_t),		\
          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
      : ((fail_stack).size <<= 1, 					\
    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
		       (fail_stack).size);				\
    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
				 size2);				\
#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
   `pend', `string1', `size1', `string2', and `size2'.  */
  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
  unsigned long size = bufp->used;
  register unsigned char *pend = pattern + size;
   be at least NUM_REGS * sizeof (regoff_t) bytes long.
re_search (bufp, string, size, startpos, range, regs)
     int size, startpos, range;
  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
		      regs, size);
re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
     int size1, size2;
  int total_size = size1 + size2;
  if (startpos < 0 || startpos > total_size)
  else if (endpos > total_size)
    range = total_size - startpos;
      if (fastmap && startpos < total_size && !bufp->can_be_null)
              if (startpos < size1 && startpos + range >= size1)
                lim = range - (size1 - startpos);
	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
	      register char c = (size1 == 0 || startpos >= size1
                                 ? string2[startpos - size1] 
      if (range >= 0 && startpos == total_size && fastmap
      val = re_match_2 (bufp, string1, size1, string2, size2,
  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
re_match (bufp, string, size, pos, regs)
     int size, pos;
  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
     int size1, size2;
  if (pos < 0 || pos > size1 + size2)
  if (size2 == 0 && string1 != NULL)
      size2 = size1;
      size1 = 0;
  end1 = string1 + size1;
  end2 = string2 + size2;
  if (stop <= size1)
      end_match_2 = string2 + stop - size1;
  if (size1 > 0 && pos <= size1)
      d = string2 + pos - size1;
  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
			          : d - string2 + size1);
			    : string2 - size1);
    size_t nmatch; 
size_t
regerror (errcode, preg, errbuf, errbuf_size)
    size_t errbuf_size;
  size_t msg_size;
      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
  msg_size = strlen (msg) + 1; /* Includes the null.  */
  if (errbuf_size != 0)
      if (msg_size > errbuf_size)
          strncpy (errbuf, msg, errbuf_size - 1);
          errbuf[errbuf_size - 1] = 0;
  return msg_size;
     size_t s;
     size_t n;
     size_t n;
#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
     size_t len;
     size_t len;
  int oldsize, newsize;
  newsize = (new == NULL) ? 0 : strlen(new);
    oldsize = 0;
  else if (newsize == 0)
  else	oldsize = strlen(old);
    result = (char *) malloc(newsize + 1);
    result = (char *) realloc((void *) old, oldsize + newsize + 1);
    (void) strcpy(result + oldsize, new);
  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
  cpp = (char **) malloc(sizeof *cpp);
  both = (char **) malloc(sizeof *both);
  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
      mp[i].in = (char **) malloc(sizeof *mp[i].in);
      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
  kwset = (struct kwset *) malloc(sizeof (struct kwset));
    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
     size_t len;
					       sizeof (struct tree));
						     sizeof (struct trie));
bmexec(kws, text, size)
     size_t size;
  if (len > size)
    return memchr(text, kwset->target[0], size);
  if (size > 12 * len)
    for (ep = text + size - 11 * len;;)
  ep = text + size;
     size_t len;
      kwsmatch->size[0] = accept->depth;
kwsexec(kws, text, size, kwsmatch)
     size_t size;
      ret = bmexec(kws, text, size);
	  kwsmatch->size[0] = kwset->mind;
    return cwexec(kws, text, size, kwsmatch);
#define DEFAULT_ROUNDING (sizeof (union fooround))
#define CALL_CHUNKFUN(h, size) \
   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
   : (*(h)->chunkfun) ((size)))
/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
_obstack_begin (h, size, alignment, chunkfun, freefun)
     int size;
  if (size == 0)
    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
	 less sensitive to the size of the request.  */
      size = 4096 - extra;
  h->chunk_size = size;
  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
    = (char *) chunk + h->chunk_size;
_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
     int size;
  if (size == 0)
    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
	 less sensitive to the size of the request.  */
      size = 4096 - extra;
  h->chunk_size = size;
  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
    = (char *) chunk + h->chunk_size;
  register long	new_size;
  register int obj_size = h->next_free - h->object_base;
  /* Compute size for new chunk.  */
  new_size = (obj_size + length) + (obj_size >> 3) + 100;
  if (new_size < h->chunk_size)
    new_size = h->chunk_size;
  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
  for (i = already; i < obj_size; i++)
  h->next_free = h->object_base + obj_size;
int (obstack_object_size) (obstack)
  return obstack_object_size (obstack);
static void Gcompile(char *, size_t);
static void Ecompile(char *, size_t);
static char *EGexecute(char *, size_t, char **);
static void Fcompile(char *, size_t);
static char *Fexecute(char *, size_t, char **);
Gcompile(pattern, size)
     size_t size;
  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
      char *n = malloc(size + 50);
      bcopy(pattern, n + i, size);
      i += size;
    dfacomp(pattern, size, &dfa_1, 1);
Ecompile(pattern, size)
     size_t size;
  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
      char *n = malloc(size + 50);
      bcopy(pattern, n + i, size);
      i += size;
    dfacomp(pattern, size, &dfa_1, 1);
EGexecute(buf, size, endp)
     size_t size;
  buflim = buf + size;
Fcompile(pattern, size)
     size_t size;
      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
      if (lim < pattern + size)
  while (beg < pattern + size);
Fexecute(buf, size, endp)
     size_t size;
  register size_t len;
  for (beg = buf; beg <= buf + size; ++beg)
      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
      len = kwsmatch.size[0];
	  if (beg + len < buf + size && beg[len] != '\n')
	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
		len = kwsmatch.size[0];
  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
    end = buf + size;
if agout end = buf + size;
3eif agout end = buf + size;
3eif agoutvf end = buf + size;
argue if agout end = buf + size;
