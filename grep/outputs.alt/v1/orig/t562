../inputs/grep0.dat:0:Before an alternative
../inputs/grep0.dat:22:store_op2 (op, loc, arg1, arg2)
../inputs/grep0.dat:54:store_op2 (op, loc, arg1, arg2)
../inputs/grep0.dat:86:syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep0.dat:126:re_opcode_t op;
../inputs/grep0.dat:142:static void
../inputs/grep0.dat:154:syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep0.dat:194:        : next_backslash && next_next && *next_next == ')')
../inputs/grep0.dat:254:Before an alternative
../inputs/grep0.dat:284:struct trie
../inputs/grep0.dat:296: ../inputs/grep1.dat:0:/* grep.c - main driver file for grep.
../inputs/grep1.dat:39:   Copyright (C) 1992 Free Software Foundation, Inc.
../inputs/grep1.dat:92:
../inputs/grep1.dat:93:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:165:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:237:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:308:   any later version.
../inputs/grep1.dat:330:
../inputs/grep1.dat:331:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:398:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:464:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:529:   GNU General Public License for more details.
../inputs/grep1.dat:577:
../inputs/grep1.dat:578:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:647:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:710:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:771:
../inputs/grep1.dat:772:   Written July 1992 by Mike Haertel.  */
../inputs/grep1.dat:814:
../inputs/grep1.dat:815:
../inputs/grep1.dat:816:/* I added a series define from makefile here in order to run cfe */
../inputs/grep1.dat:885:#define GREP 1
../inputs/grep1.dat:900:#define STDC_HEADERS 1
../inputs/grep1.dat:923:#define HAVE_STRING_H 1
../inputs/grep1.dat:947:#define HAVE_SYS_PARAM_H 1
../inputs/grep1.dat:974:#define HAVE_UNISTD_H 1
../inputs/grep1.dat:998:#define HAVE_ALLOCA_H 1
../inputs/grep1.dat:1022:#define HAVE_GETPAGESIZE 1
../inputs/grep1.dat:1049:#define HAVE_MEMCHR 1
../inputs/grep1.dat:1071:#define HAVE_STRERROR 1
../inputs/grep1.dat:1095:#define HAVE_VALLOC 1
../inputs/grep1.dat:1117:#define HAVE_WORKING_MMAP 1
../inputs/grep1.dat:1145:/*** end of cfe purpose **/
../inputs/grep1.dat:1173:
../inputs/grep1.dat:1212:
../inputs/grep1.dat:1213:#ifndef errno
../inputs/grep1.dat:1227:extern int errno;
../inputs/grep1.dat:1245:#endif
../inputs/grep1.dat:1252:
../inputs/grep1.dat:1253:#ifdef STDC_HEADERS
../inputs/grep1.dat:1293:#define flag_stdlib 1
../inputs/grep1.dat:1315:#else
../inputs/grep1.dat:1344:#define flag_systypes 1
../inputs/grep1.dat:1368:extern char *malloc(), *realloc();
../inputs/grep1.dat:1403:extern void free();
../inputs/grep1.dat:1423:#endif
../inputs/grep1.dat:1430:
../inputs/grep1.dat:1431:#if defined(STDC_HEADERS) || defined(HAVE_STRING_H)
../inputs/grep1.dat:1503:#define flag_string 1
../inputs/grep1.dat:1525:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:1566:#define flag_memory 1
../inputs/grep1.dat:1588:#endif
../inputs/grep1.dat:1595:#else
../inputs/grep1.dat:1622:#define flag_strings 1
../inputs/grep1.dat:1645:#ifdef __STDC__
../inputs/grep1.dat:1661:extern void *memchr();
../inputs/grep1.dat:1684:#else
../inputs/grep1.dat:1690:extern char *memchr();
../inputs/grep1.dat:1713:#endif
../inputs/grep1.dat:1720:#define strrchr rindex
../inputs/grep1.dat:1743:#endif
../inputs/grep1.dat:1750:
../inputs/grep1.dat:1751:#ifdef HAVE_UNISTD_H
../inputs/grep1.dat:1772:#if flag_systypes==0
../inputs/grep1.dat:1816:#define flag_systypes 1
../inputs/grep1.dat:1840:#endif
../inputs/grep1.dat:1886:#else
../inputs/grep1.dat:1892:#define O_RDONLY 0
../inputs/grep1.dat:1911:extern int open(), read(), close();
../inputs/grep1.dat:1947:#endif
../inputs/grep1.dat:1954:
../inputs/grep1.dat:1998:
../inputs/grep1.dat:1999:#undef MAX
../inputs/grep1.dat:2010:#define MAX(A,B) ((A) > (B) ? (A) : (B))
../inputs/grep1.dat:2051:
../inputs/grep1.dat:2052:/* Provide missing ANSI features if necessary. */
../inputs/grep1.dat:2102:
../inputs/grep1.dat:2103:#ifndef HAVE_STRERROR
../inputs/grep1.dat:2125:extern int sys_nerr;
../inputs/grep1.dat:2146:extern char *sys_errlist[];
../inputs/grep1.dat:2174:#define strerror(E) ((E) < sys_nerr ? sys_errlist[(E)] : "bogus error number")
../inputs/grep1.dat:2253:#endif
../inputs/grep1.dat:2260:
../inputs/grep1.dat:2261:#ifndef HAVE_MEMCHR
../inputs/grep1.dat:2281:#ifdef __STDC__
../inputs/grep1.dat:2297:#define VOID void
../inputs/grep1.dat:2315:#else
../inputs/grep1.dat:2321:#define VOID char
../inputs/grep1.dat:2339:#endif
../inputs/grep1.dat:2346:VOID *
../inputs/grep1.dat:2353:memchr(vp, c, n)
../inputs/grep1.dat:2370:     VOID *vp;
../inputs/grep1.dat:2385:     int c;
../inputs/grep1.dat:2397:     size_t n;
../inputs/grep1.dat:2412:{
../inputs/grep1.dat:2414:  unsigned char *p;
../inputs/grep1.dat:2434:
../inputs/grep1.dat:2435:  for (p = (unsigned char *) vp; n--; ++p)
../inputs/grep1.dat:2478:    if (*p == c)
../inputs/grep1.dat:2495:      return (VOID *) p;
../inputs/grep1.dat:2520:  return 0;
../inputs/grep1.dat:2532:}
../inputs/grep1.dat:2534:#endif
../inputs/grep1.dat:2541:    
../inputs/grep1.dat:2546:/* Define flags declared in grep.h. */
../inputs/grep1.dat:2585:char *matcher;
../inputs/grep1.dat:2600:int match_icase;
../inputs/grep1.dat:2617:int match_words;
../inputs/grep1.dat:2634:int match_lines;
../inputs/grep1.dat:2651:
../inputs/grep1.dat:2652:/* Functions we'll use to search. */
../inputs/grep1.dat:2689:static void (*compile)();
../inputs/grep1.dat:2715:static char *(*execute)();
../inputs/grep1.dat:2742:
../inputs/grep1.dat:2743:/* For error messages. */
../inputs/grep1.dat:2769:static char *prog;
../inputs/grep1.dat:2788:static char *filename;
../inputs/grep1.dat:2811:static int errseen;
../inputs/grep1.dat:2831:
../inputs/grep1.dat:2832:/* Print a message and possibly an error string.  Remember
../inputs/grep1.dat:2891:   that something awful happened. */
../inputs/grep1.dat:2928:static void
../inputs/grep1.dat:2940:error(mesg, errnum)
../inputs/grep1.dat:2960:#ifdef __STDC__
../inputs/grep1.dat:2976:     const
../inputs/grep1.dat:2987:#endif
../inputs/grep1.dat:2994:     char *mesg;
../inputs/grep1.dat:3011:     int errnum;
../inputs/grep1.dat:3028:{
../inputs/grep1.dat:3030:  if (errnum)
../inputs/grep1.dat:3044:    fprintf(stderr, "%s: %s: %s\n", prog, mesg, strerror(errnum));
../inputs/grep1.dat:3111:  else
../inputs/grep1.dat:3118:    fprintf(stderr, "%s: %s\n", prog, mesg);
../inputs/grep1.dat:3163:  errseen = 1;
../inputs/grep1.dat:3178:}
../inputs/grep1.dat:3180:
../inputs/grep1.dat:3181:/* Like error(), but die horribly after printing. */
../inputs/grep1.dat:3234:void
../inputs/grep1.dat:3239:fatal(mesg, errnum)
../inputs/grep1.dat:3259:#ifdef __STDC__
../inputs/grep1.dat:3275:     const
../inputs/grep1.dat:3286:#endif
../inputs/grep1.dat:3293:     char *mesg;
../inputs/grep1.dat:3310:     int errnum;
../inputs/grep1.dat:3327:{
../inputs/grep1.dat:3329:  error(mesg, errnum);
../inputs/grep1.dat:3352:  exit(2);
../inputs/grep1.dat:3363:}
../inputs/grep1.dat:3365:
../inputs/grep1.dat:3366:/* Interface to handle errors and fix library lossage. */
../inputs/grep1.dat:3424:char *
../inputs/grep1.dat:3431:xmalloc(size)
../inputs/grep1.dat:3445:     size_t size;
../inputs/grep1.dat:3463:{
../inputs/grep1.dat:3465:  char *result;
../inputs/grep1.dat:3481:
../inputs/grep1.dat:3482:  result = malloc(size);
../inputs/grep1.dat:3507:  if (size && !result)
../inputs/grep1.dat:3530:    fatal("memory exhausted", 0);
../inputs/grep1.dat:3564:  return result;
../inputs/grep1.dat:3581:}
../inputs/grep1.dat:3583:
../inputs/grep1.dat:3584:/* Interface to handle errors and fix some library lossage. */
../inputs/grep1.dat:3647:char *
../inputs/grep1.dat:3654:xrealloc(ptr, size)
../inputs/grep1.dat:3674:     char *ptr;
../inputs/grep1.dat:3690:     size_t size;
../inputs/grep1.dat:3708:{
../inputs/grep1.dat:3710:  char *result;
../inputs/grep1.dat:3726:
../inputs/grep1.dat:3727:  if (ptr)
../inputs/grep1.dat:3738:    result = realloc(ptr, size);
../inputs/grep1.dat:3771:  else
../inputs/grep1.dat:3778:    result = malloc(size);
../inputs/grep1.dat:3805:  if (size && !result)
../inputs/grep1.dat:3828:    fatal("memory exhausted", 0);
../inputs/grep1.dat:3862:  return result;
../inputs/grep1.dat:3879:}
../inputs/grep1.dat:3881:
../inputs/grep1.dat:3882:#if !defined(HAVE_VALLOC)
../inputs/grep1.dat:3908:#define valloc malloc
../inputs/grep1.dat:3930:#else
../inputs/grep1.dat:3936:#ifdef __STDC__
../inputs/grep1.dat:3952:extern void *valloc(size_t);
../inputs/grep1.dat:3981:#else
../inputs/grep1.dat:3987:extern char *valloc();
../inputs/grep1.dat:4010:#endif
../inputs/grep1.dat:4017:#endif
../inputs/grep1.dat:4024:
../inputs/grep1.dat:4025:/* Hairy buffering mechanism for grep.  The intent is to keep
../inputs/grep1.dat:4087:   all reads aligned on a page boundary and multiples of the
../inputs/grep1.dat:4148:   page size. */
../inputs/grep1.dat:4165:
../inputs/grep1.dat:4166:static char *buffer;		/* Base of buffer. */
../inputs/grep1.dat:4210:static size_t bufsalloc;	/* Allocated size of buffer save region. */
../inputs/grep1.dat:4279:static size_t bufalloc;		/* Total buffer size. */
../inputs/grep1.dat:4329:static int bufdesc;		/* File descriptor. */
../inputs/grep1.dat:4373:static char *bufbeg;		/* Beginning of user-visible stuff. */
../inputs/grep1.dat:4434:static char *buflim;		/* Limit of user-visible stuff. */
../inputs/grep1.dat:4491:
../inputs/grep1.dat:4492:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:4523:#if flag_systypes==0
../inputs/grep1.dat:4567:#define flag_systypes 1
../inputs/grep1.dat:4591:#endif
../inputs/grep1.dat:4642:
../inputs/grep1.dat:4643:static int bufmapped;		/* True for ordinary files. */
../inputs/grep1.dat:4697:static struct stat bufstat;	/* From fstat(). */
../inputs/grep1.dat:4745:static off_t bufoffset;		/* What read() normally remembers. */
../inputs/grep1.dat:4808:#endif
../inputs/grep1.dat:4815:
../inputs/grep1.dat:4816:/* Reset the buffer for a new file.  Initialize
../inputs/grep1.dat:4864:   on the first time through. */
../inputs/grep1.dat:4897:void
../inputs/grep1.dat:4902:reset(fd)
../inputs/grep1.dat:4912:     int fd;
../inputs/grep1.dat:4925:{
../inputs/grep1.dat:4927:  static int initialized;
../inputs/grep1.dat:4953:
../inputs/grep1.dat:4954:  if (!initialized)
../inputs/grep1.dat:4974:    {
../inputs/grep1.dat:4980:      initialized = 1;
../inputs/grep1.dat:5003:#ifndef BUFSALLOC
../inputs/grep1.dat:5021:      bufsalloc = MAX(8192, getpagesize());
../inputs/grep1.dat:5065:#else
../inputs/grep1.dat:5071:      bufsalloc = BUFSALLOC;
../inputs/grep1.dat:5100:#endif
../inputs/grep1.dat:5107:      bufalloc = 5 * bufsalloc;
../inputs/grep1.dat:5139:      /* The 1 byte of overflow is a kludge for dfaexec(), which
../inputs/grep1.dat:5204:	 inserts a sentinel newline at the end of the buffer
../inputs/grep1.dat:5258:	 being searched.  There's gotta be a better way... */
../inputs/grep1.dat:5313:      buffer = valloc(bufalloc + 1);
../inputs/grep1.dat:5350:      if (!buffer)
../inputs/grep1.dat:5369:	fatal("memory exhausted", 0);
../inputs/grep1.dat:5400:      bufbeg = buffer;
../inputs/grep1.dat:5423:      buflim = buffer;
../inputs/grep1.dat:5446:    }
../inputs/grep1.dat:5452:  bufdesc = fd;
../inputs/grep1.dat:5468:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:5499:  if (fstat(fd, &bufstat) < 0 || !S_ISREG(bufstat.st_mode))
../inputs/grep1.dat:5559:    bufmapped = 0;
../inputs/grep1.dat:5578:  else
../inputs/grep1.dat:5585:    {
../inputs/grep1.dat:5591:      bufmapped = 1;
../inputs/grep1.dat:5612:      bufoffset = lseek(fd, 0, 1);
../inputs/grep1.dat:5647:    }
../inputs/grep1.dat:5653:#endif
../inputs/grep1.dat:5660:}
../inputs/grep1.dat:5662:
../inputs/grep1.dat:5663:/* Read new stuff into the buffer, saving the specified
../inputs/grep1.dat:5719:   amount of old stuff.  When we're done, 'bufbeg' points
../inputs/grep1.dat:5777:   to the beginning of the buffer contents, and 'buflim'
../inputs/grep1.dat:5834:   points just after the end.  Return count of new stuff. */
../inputs/grep1.dat:5895:static int
../inputs/grep1.dat:5906:fillbuf(save)
../inputs/grep1.dat:5920:     size_t save;
../inputs/grep1.dat:5938:{
../inputs/grep1.dat:5940:  char *nbuffer, *dp, *sp;
../inputs/grep1.dat:5967:  int cc;
../inputs/grep1.dat:5977:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:6008:  caddr_t maddr;
../inputs/grep1.dat:6025:#endif
../inputs/grep1.dat:6032:  static int pagesize;
../inputs/grep1.dat:6055:
../inputs/grep1.dat:6056:  if (pagesize == 0 && (pagesize = getpagesize()) == 0)
../inputs/grep1.dat:6112:    abort();
../inputs/grep1.dat:6125:
../inputs/grep1.dat:6126:  if (save > bufsalloc)
../inputs/grep1.dat:6150:    {
../inputs/grep1.dat:6156:      while (save > bufsalloc)
../inputs/grep1.dat:6187:	bufsalloc *= 2;
../inputs/grep1.dat:6204:      bufalloc = 5 * bufsalloc;
../inputs/grep1.dat:6236:      nbuffer = valloc(bufalloc + 1);
../inputs/grep1.dat:6274:      if (!nbuffer)
../inputs/grep1.dat:6294:	fatal("memory exhausted", 0);
../inputs/grep1.dat:6325:    }
../inputs/grep1.dat:6331:  else
../inputs/grep1.dat:6338:    nbuffer = buffer;
../inputs/grep1.dat:6360:
../inputs/grep1.dat:6361:  sp = buflim - save;
../inputs/grep1.dat:6383:  dp = nbuffer + bufsalloc - save;
../inputs/grep1.dat:6418:  bufbeg = dp;
../inputs/grep1.dat:6433:  while (save--)
../inputs/grep1.dat:6450:    *dp++ = *sp++;
../inputs/grep1.dat:6469:
../inputs/grep1.dat:6470:  /* We may have allocated a new, larger buffer.  Since
../inputs/grep1.dat:6526:     there is no portable vfree(), we just have to forget
../inputs/grep1.dat:6584:     about the old one.  Sorry. */
../inputs/grep1.dat:6619:  buffer = nbuffer;
../inputs/grep1.dat:6639:
../inputs/grep1.dat:6640:#if defined(HAVE_WORKING_MMAP)
../inputs/grep1.dat:6671:  if (bufmapped && bufoffset % pagesize == 0
../inputs/grep1.dat:6716:      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
../inputs/grep1.dat:6778:    {
../inputs/grep1.dat:6784:      maddr = buffer + bufsalloc;
../inputs/grep1.dat:6818:      maddr = mmap(maddr, bufalloc - bufsalloc, PROT_READ | PROT_WRITE,
../inputs/grep1.dat:6890:		   MAP_PRIVATE | MAP_FIXED, bufdesc, bufoffset);
../inputs/grep1.dat:6941:      if (maddr == (caddr_t) -1)
../inputs/grep1.dat:6974:	{
../inputs/grep1.dat:6977:	  fprintf(stderr, "%s: warning: %s: %s\n", filename,
../inputs/grep1.dat:7031:		  strerror(errno));
../inputs/grep1.dat:7053:	  goto tryread;
../inputs/grep1.dat:7070:	}
../inputs/grep1.dat:7073:#if 0
../inputs/grep1.dat:7079:      /* You might thing this (or MADV_WILLNEED) would help,
../inputs/grep1.dat:7140:	 but it doesn't, at least not on a Sun running 4.1.
../inputs/grep1.dat:7193:	 In fact, it actually slows us down about 30%! */
../inputs/grep1.dat:7244:      madvise(maddr, bufalloc - bufsalloc, MADV_SEQUENTIAL);
../inputs/grep1.dat:7305:#endif
../inputs/grep1.dat:7312:      cc = bufalloc - bufsalloc;
../inputs/grep1.dat:7345:      bufoffset += cc;
../inputs/grep1.dat:7368:    }
../inputs/grep1.dat:7374:  else
../inputs/grep1.dat:7381:    {
../inputs/grep1.dat:7387:    tryread:
../inputs/grep1.dat:7400:      /* We come here when we're not going to use mmap() any more.
../inputs/grep1.dat:7467:	 Note that we need to synchronize the file offset the
../inputs/grep1.dat:7522:	 first time through. */
../inputs/grep1.dat:7547:      if (bufmapped)
../inputs/grep1.dat:7568:	{
../inputs/grep1.dat:7571:	  bufmapped = 0;
../inputs/grep1.dat:7589:	  lseek(bufdesc, bufoffset, 0);
../inputs/grep1.dat:7622:	}
../inputs/grep1.dat:7625:      cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
../inputs/grep1.dat:7693:    }
../inputs/grep1.dat:7699:#else
../inputs/grep1.dat:7705:  cc = read(bufdesc, buffer + bufsalloc, bufalloc - bufsalloc);
../inputs/grep1.dat:7769:#endif
../inputs/grep1.dat:7776:  if (cc > 0)
../inputs/grep1.dat:7790:    buflim = buffer + bufsalloc + cc;
../inputs/grep1.dat:7828:  else
../inputs/grep1.dat:7835:    buflim = buffer + bufsalloc;
../inputs/grep1.dat:7868:  return cc;
../inputs/grep1.dat:7881:}
../inputs/grep1.dat:7883:
../inputs/grep1.dat:7884:/* Flags controlling the style of output. */
../inputs/grep1.dat:7929:static int out_quiet;		/* Suppress all normal output. */
../inputs/grep1.dat:7986:static int out_invert;		/* Print nonmatching stuff. */
../inputs/grep1.dat:8041:static int out_file;		/* Print filenames. */
../inputs/grep1.dat:8086:static int out_line;		/* Print line numbers. */
../inputs/grep1.dat:8134:static int out_byte;		/* Print byte offsets. */
../inputs/grep1.dat:8182:static int out_before;		/* Lines of leading context. */
../inputs/grep1.dat:8238:static int out_after;		/* Lines of trailing context. */
../inputs/grep1.dat:8294:
../inputs/grep1.dat:8295:/* Internal variables to keep track of byte count, context, etc. */
../inputs/grep1.dat:8363:static size_t totalcc;		/* Total character count before bufbeg. */
../inputs/grep1.dat:8430:static char *lastnl;		/* Pointer after last newline counted. */
../inputs/grep1.dat:8494:static char *lastout;		/* Pointer after last character output;
../inputs/grep1.dat:8557:				   NULL if no character has been output
../inputs/grep1.dat:8601:				   or if it's conceptually before bufbeg. */
../inputs/grep1.dat:8650:static size_t totalnl;		/* Total newline count before lastnl. */
../inputs/grep1.dat:8715:static int pending;		/* Pending lines of output. */
../inputs/grep1.dat:8767:
../inputs/grep1.dat:8768:static void
../inputs/grep1.dat:8780:nlscan(lim)
../inputs/grep1.dat:8792:     char *lim;
../inputs/grep1.dat:8808:{
../inputs/grep1.dat:8810:  char *beg;
../inputs/grep1.dat:8823:
../inputs/grep1.dat:8824:  for (beg = lastnl; beg < lim; ++beg)
../inputs/grep1.dat:8863:    if (*beg == '\n')
../inputs/grep1.dat:8885:      ++totalnl;
../inputs/grep1.dat:8902:  lastnl = beg;
../inputs/grep1.dat:8918:}
../inputs/grep1.dat:8920:
../inputs/grep1.dat:8921:static void
../inputs/grep1.dat:8933:prline(beg, lim, sep)
../inputs/grep1.dat:8955:     char *beg;
../inputs/grep1.dat:8971:     char *lim;
../inputs/grep1.dat:8987:     char sep;
../inputs/grep1.dat:9002:{
../inputs/grep1.dat:9004:  if (out_file)
../inputs/grep1.dat:9020:    printf("%s%c", filename, sep);
../inputs/grep1.dat:9055:  if (out_line)
../inputs/grep1.dat:9071:    {
../inputs/grep1.dat:9077:      nlscan(beg);
../inputs/grep1.dat:9096:      printf("%d%c", ++totalnl, sep);
../inputs/grep1.dat:9134:      lastnl = lim;
../inputs/grep1.dat:9154:    }
../inputs/grep1.dat:9160:  if (out_byte)
../inputs/grep1.dat:9176:    printf("%lu%c", totalcc + (beg - bufbeg), sep);
../inputs/grep1.dat:9228:  fwrite(beg, 1, lim - beg, stdout);
../inputs/grep1.dat:9265:  if (ferror(stdout))
../inputs/grep1.dat:9287:    error("writing output", errno);
../inputs/grep1.dat:9323:  lastout = lim;
../inputs/grep1.dat:9340:}
../inputs/grep1.dat:9342:
../inputs/grep1.dat:9343:/* Print pending lines of trailing context prior to LIM. */
../inputs/grep1.dat:9403:static void
../inputs/grep1.dat:9415:prpending(lim)
../inputs/grep1.dat:9430:     char *lim;
../inputs/grep1.dat:9446:{
../inputs/grep1.dat:9448:  char *nl;
../inputs/grep1.dat:9460:
../inputs/grep1.dat:9461:  if (!lastout)
../inputs/grep1.dat:9477:    lastout = bufbeg;
../inputs/grep1.dat:9499:  while (pending > 0 && lastout < lim)
../inputs/grep1.dat:9538:    {
../inputs/grep1.dat:9544:      --pending;
../inputs/grep1.dat:9561:      if ((nl = memchr(lastout, '\n', lim - lastout)) != 0)
../inputs/grep1.dat:9621:	++nl;
../inputs/grep1.dat:9628:      else
../inputs/grep1.dat:9639:	nl = lim;
../inputs/grep1.dat:9650:      prline(lastout, nl, '-');
../inputs/grep1.dat:9682:    }
../inputs/grep1.dat:9688:}
../inputs/grep1.dat:9690:
../inputs/grep1.dat:9691:/* Print the lines between BEG and LIM.  Deal with context crap.
../inputs/grep1.dat:9756:   If NLINESP is non-null, store a count of lines between BEG and LIM. */
../inputs/grep1.dat:9830:static void
../inputs/grep1.dat:9842:prtext(beg, lim, nlinesp)
../inputs/grep1.dat:9868:     char *beg;
../inputs/grep1.dat:9884:     char *lim;
../inputs/grep1.dat:9900:     int *nlinesp;
../inputs/grep1.dat:9919:{
../inputs/grep1.dat:9921:  static int used;		/* avoid printing "--" before any output */
../inputs/grep1.dat:9985:  char *bp, *p, *nl;
../inputs/grep1.dat:10006:  int i, n;
../inputs/grep1.dat:10018:
../inputs/grep1.dat:10019:  if (!out_quiet && pending > 0)
../inputs/grep1.dat:10052:    prpending(beg);
../inputs/grep1.dat:10072:
../inputs/grep1.dat:10073:  p = beg;
../inputs/grep1.dat:10084:
../inputs/grep1.dat:10085:  if (!out_quiet)
../inputs/grep1.dat:10103:    {
../inputs/grep1.dat:10109:      /* Deal with leading context crap. */
../inputs/grep1.dat:10153:
../inputs/grep1.dat:10154:      bp = lastout ? lastout : bufbeg;
../inputs/grep1.dat:10193:      for (i = 0; i < out_before; ++i)
../inputs/grep1.dat:10232:	if (p > bp)
../inputs/grep1.dat:10245:	  do
../inputs/grep1.dat:10251:	    --p;
../inputs/grep1.dat:10261:	  while (p > bp && p[-1] != '\n');
../inputs/grep1.dat:10297:
../inputs/grep1.dat:10298:      /* We only print the "--" separator if our output is
../inputs/grep1.dat:10357:	 discontiguous from the last output in the file. */
../inputs/grep1.dat:10410:      if ((out_before || out_after) && used && p != lastout)
../inputs/grep1.dat:10471:	puts("--");
../inputs/grep1.dat:10484:
../inputs/grep1.dat:10485:      while (p < beg)
../inputs/grep1.dat:10507:	{
../inputs/grep1.dat:10510:	  nl = memchr(p, '\n', beg - p);
../inputs/grep1.dat:10544:	  prline(p, nl + 1, '-');
../inputs/grep1.dat:10571:	  p = nl + 1;
../inputs/grep1.dat:10586:	}
../inputs/grep1.dat:10589:    }
../inputs/grep1.dat:10595:
../inputs/grep1.dat:10596:  if (nlinesp)
../inputs/grep1.dat:10611:    {
../inputs/grep1.dat:10617:      /* Caller wants a line count. */
../inputs/grep1.dat:10656:      for (n = 0; p < lim; ++n)
../inputs/grep1.dat:10688:	{
../inputs/grep1.dat:10691:	  if ((nl = memchr(p, '\n', lim - p)) != 0)
../inputs/grep1.dat:10736:	    ++nl;
../inputs/grep1.dat:10747:	  else
../inputs/grep1.dat:10755:	    nl = lim;
../inputs/grep1.dat:10770:	  if (!out_quiet)
../inputs/grep1.dat:10789:	    prline(p, nl, ':');
../inputs/grep1.dat:10814:	  p = nl;
../inputs/grep1.dat:10825:	}
../inputs/grep1.dat:10828:      *nlinesp = n;
../inputs/grep1.dat:10848:    }
../inputs/grep1.dat:10854:  else
../inputs/grep1.dat:10861:    if (!out_quiet)
../inputs/grep1.dat:10881:      prline(beg, lim, ':');
../inputs/grep1.dat:10910:
../inputs/grep1.dat:10911:  pending = out_after;
../inputs/grep1.dat:10934:  used = 1;
../inputs/grep1.dat:10946:}
../inputs/grep1.dat:10948:
../inputs/grep1.dat:10949:/* Scan the specified portion of the buffer, matching lines (or
../inputs/grep1.dat:11013:   between matching lines if OUT_INVERT is true).  Return a count of
../inputs/grep1.dat:11082:   lines printed. */
../inputs/grep1.dat:11103:static int
../inputs/grep1.dat:11114:grepbuf(beg, lim)
../inputs/grep1.dat:11132:     char *beg;
../inputs/grep1.dat:11148:     char *lim;
../inputs/grep1.dat:11164:{
../inputs/grep1.dat:11166:  int nlines, n;
../inputs/grep1.dat:11183:  register char *p, *b;
../inputs/grep1.dat:11207:  char *endp;
../inputs/grep1.dat:11221:
../inputs/grep1.dat:11222:  nlines = 0;
../inputs/grep1.dat:11236:  p = beg;
../inputs/grep1.dat:11247:  while ((b = (*execute)(p, lim - p, &endp)) != 0)
../inputs/grep1.dat:11298:    {
../inputs/grep1.dat:11304:      /* Avoid matching the empty line at the end of the buffer. */
../inputs/grep1.dat:11372:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
../inputs/grep1.dat:11436:	break;
../inputs/grep1.dat:11444:      if (!out_invert)
../inputs/grep1.dat:11467:	{
../inputs/grep1.dat:11470:	  prtext(b, endp, (int *) 0);
../inputs/grep1.dat:11501:	  nlines += 1;
../inputs/grep1.dat:11517:	}
../inputs/grep1.dat:11520:      else if (p < b)
../inputs/grep1.dat:11542:	{
../inputs/grep1.dat:11545:	  prtext(p, b, &n);
../inputs/grep1.dat:11566:	  nlines += n;
../inputs/grep1.dat:11582:	}
../inputs/grep1.dat:11585:      p = endp;
../inputs/grep1.dat:11601:    }
../inputs/grep1.dat:11607:  if (out_invert && p < lim)
../inputs/grep1.dat:11636:    {
../inputs/grep1.dat:11642:      prtext(p, lim, &n);
../inputs/grep1.dat:11668:      nlines += n;
../inputs/grep1.dat:11687:    }
../inputs/grep1.dat:11693:  return nlines;
../inputs/grep1.dat:11710:}
../inputs/grep1.dat:11712:
../inputs/grep1.dat:11713:/* Search a given file.  Return a count of lines printed. */
../inputs/grep1.dat:11774:static int
../inputs/grep1.dat:11785:grep(fd)
../inputs/grep1.dat:11794:     int fd;
../inputs/grep1.dat:11807:{
../inputs/grep1.dat:11809:  int nlines, i;
../inputs/grep1.dat:11826:  size_t residue, save;
../inputs/grep1.dat:11850:  char *beg, *lim;
../inputs/grep1.dat:11869:
../inputs/grep1.dat:11870:  reset(fd);
../inputs/grep1.dat:11883:
../inputs/grep1.dat:11884:  totalcc = 0;
../inputs/grep1.dat:11899:  lastout = 0;
../inputs/grep1.dat:11914:  totalnl = 0;
../inputs/grep1.dat:11929:  pending = 0;
../inputs/grep1.dat:11944:
../inputs/grep1.dat:11945:  nlines = 0;
../inputs/grep1.dat:11959:  residue = 0;
../inputs/grep1.dat:11974:  save = 0;
../inputs/grep1.dat:11986:
../inputs/grep1.dat:11987:  for (;;)
../inputs/grep1.dat:11998:    {
../inputs/grep1.dat:12004:      if (fillbuf(save) < 0)
../inputs/grep1.dat:12033:	{
../inputs/grep1.dat:12036:	  error(filename, errno);
../inputs/grep1.dat:12063:	  return nlines;
../inputs/grep1.dat:12081:	}
../inputs/grep1.dat:12084:      lastnl = bufbeg;
../inputs/grep1.dat:12107:      if (lastout)
../inputs/grep1.dat:12126:	lastout = bufbeg;
../inputs/grep1.dat:12145:      if (buflim - bufbeg == save)
../inputs/grep1.dat:12180:	break;
../inputs/grep1.dat:12188:      beg = bufbeg + save - residue;
../inputs/grep1.dat:12225:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
../inputs/grep1.dat:12287:	;
../inputs/grep1.dat:12290:      residue = buflim - lim;
../inputs/grep1.dat:12320:      if (beg < lim)
../inputs/grep1.dat:12341:	{
../inputs/grep1.dat:12344:	  nlines += grepbuf(beg, lim);
../inputs/grep1.dat:12376:	  if (pending)
../inputs/grep1.dat:12392:	    prpending(lim);
../inputs/grep1.dat:12413:	}
../inputs/grep1.dat:12416:      i = 0;
../inputs/grep1.dat:12429:      beg = lim;
../inputs/grep1.dat:12446:      while (i < out_before && beg > bufbeg && beg != lastout)
../inputs/grep1.dat:12509:	{
../inputs/grep1.dat:12512:	  ++i;
../inputs/grep1.dat:12520:	  do
../inputs/grep1.dat:12526:	    --beg;
../inputs/grep1.dat:12538:	  while (beg > bufbeg && beg[-1] != '\n');
../inputs/grep1.dat:12582:	}
../inputs/grep1.dat:12585:      if (beg != lastout)
../inputs/grep1.dat:12611:	lastout = 0;
../inputs/grep1.dat:12625:      save = residue + lim - beg;
../inputs/grep1.dat:12659:      totalcc += buflim - bufbeg - save;
../inputs/grep1.dat:12700:      if (out_line)
../inputs/grep1.dat:12720:	nlscan(beg);
../inputs/grep1.dat:12734:    }
../inputs/grep1.dat:12740:  if (residue)
../inputs/grep1.dat:12755:    {
../inputs/grep1.dat:12761:      nlines += grepbuf(bufbeg + save - residue, buflim);
../inputs/grep1.dat:12819:      if (pending)
../inputs/grep1.dat:12838:	prpending(buflim);
../inputs/grep1.dat:12858:    }
../inputs/grep1.dat:12864:  return nlines;
../inputs/grep1.dat:12881:}
../inputs/grep1.dat:12883:
../inputs/grep1.dat:12884:static char version[] = "GNU grep version 2.0";
../inputs/grep1.dat:12932:
../inputs/grep1.dat:12933:#define USAGE \
../inputs/grep1.dat:12949:  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
../inputs/grep1.dat:13030:
../inputs/grep1.dat:13031:static void
../inputs/grep1.dat:13043:usage()
../inputs/grep1.dat:13051:{
../inputs/grep1.dat:13053:  fprintf(stderr, USAGE, prog);
../inputs/grep1.dat:13085:  exit(2);
../inputs/grep1.dat:13096:}
../inputs/grep1.dat:13098:
../inputs/grep1.dat:13099:/* Go through the matchers vector and look for the specified matcher.
../inputs/grep1.dat:13169:   If we find it, install it in compile and execute, and return 1.  */
../inputs/grep1.dat:13240:int
../inputs/grep1.dat:13244:setmatcher(name)
../inputs/grep1.dat:13261:     char *name;
../inputs/grep1.dat:13278:{
../inputs/grep1.dat:13280:  int i;
../inputs/grep1.dat:13289:
../inputs/grep1.dat:13290:  for (i = 0; matchers[i].name; ++i)
../inputs/grep1.dat:13327:    if (strcmp(name, matchers[i].name) == 0)
../inputs/grep1.dat:13372:      {
../inputs/grep1.dat:13380:	compile = matchers[i].compile;
../inputs/grep1.dat:13412:	execute = matchers[i].execute;
../inputs/grep1.dat:13444:	return 1;
../inputs/grep1.dat:13455:      }
../inputs/grep1.dat:13463:  return 0;
../inputs/grep1.dat:13475:}  
../inputs/grep1.dat:13479:
../inputs/grep1.dat:13480:int
../inputs/grep1.dat:13484:main(argc, argv)
../inputs/grep1.dat:13501:     int argc;
../inputs/grep1.dat:13516:     char *argv[];
../inputs/grep1.dat:13535:{
../inputs/grep1.dat:13537:  char *keys;
../inputs/grep1.dat:13551:  size_t keycc, oldcc, keyalloc;
../inputs/grep1.dat:13584:  int keyfound, count_matches, no_filenames, list_files, suppress_errors;
../inputs/grep1.dat:13658:  int opt, cc, desc, count, status;
../inputs/grep1.dat:13694:  FILE *fp;
../inputs/grep1.dat:13706:  extern char *optarg;
../inputs/grep1.dat:13729:  extern int optind;
../inputs/grep1.dat:13750:
../inputs/grep1.dat:13751:  prog = argv[0];
../inputs/grep1.dat:13769:  if (prog && strrchr(prog, '/'))
../inputs/grep1.dat:13803:    prog = strrchr(prog, '/') + 1;
../inputs/grep1.dat:13838:
../inputs/grep1.dat:13839:  keys = NULL;
../inputs/grep1.dat:13854:  keycc = 0;
../inputs/grep1.dat:13867:  keyfound = 0;
../inputs/grep1.dat:13883:  count_matches = 0;
../inputs/grep1.dat:13904:  no_filenames = 0;
../inputs/grep1.dat:13924:  list_files = 0;
../inputs/grep1.dat:13942:  suppress_errors = 0;
../inputs/grep1.dat:13965:  matcher = NULL;
../inputs/grep1.dat:13983:
../inputs/grep1.dat:13984:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
../inputs/grep1.dat:14062:	 != EOF)
../inputs/grep1.dat:14072:    switch (opt)
../inputs/grep1.dat:14089:      {
../inputs/grep1.dat:14097:      case '0':
../inputs/grep1.dat:14113:      case '1':
../inputs/grep1.dat:14129:      case '2':
../inputs/grep1.dat:14145:      case '3':
../inputs/grep1.dat:14161:      case '4':
../inputs/grep1.dat:14177:      case '5':
../inputs/grep1.dat:14193:      case '6':
../inputs/grep1.dat:14209:      case '7':
../inputs/grep1.dat:14225:      case '8':
../inputs/grep1.dat:14241:      case '9':
../inputs/grep1.dat:14257:	out_before = 10 * out_before + opt - '0';
../inputs/grep1.dat:14300:	out_after = 10 * out_after + opt - '0';
../inputs/grep1.dat:14341:	break;
../inputs/grep1.dat:14349:      case 'A':
../inputs/grep1.dat:14365:	out_after = atoi(optarg);
../inputs/grep1.dat:14392:	if (out_after < 0)
../inputs/grep1.dat:14412:	  usage();
../inputs/grep1.dat:14424:	break;
../inputs/grep1.dat:14432:      case 'B':
../inputs/grep1.dat:14448:	out_before = atoi(optarg);
../inputs/grep1.dat:14476:	if (out_before < 0)
../inputs/grep1.dat:14497:	  usage();
../inputs/grep1.dat:14509:	break;
../inputs/grep1.dat:14517:      case 'C':
../inputs/grep1.dat:14533:	out_before = out_after = 2;
../inputs/grep1.dat:14562:	break;
../inputs/grep1.dat:14570:      case 'E':
../inputs/grep1.dat:14586:	if (matcher && strcmp(matcher, "egrep") != 0)
../inputs/grep1.dat:14633:	  fatal("you may specify only one of -E, -F, or -G", 0);
../inputs/grep1.dat:14691:	matcher = "posix-egrep";
../inputs/grep1.dat:14717:	break;
../inputs/grep1.dat:14725:      case 'F':
../inputs/grep1.dat:14741:	if (matcher && strcmp(matcher, "fgrep") != 0)
../inputs/grep1.dat:14788:	  fatal("you may specify only one of -E, -F, or -G", 0);;
../inputs/grep1.dat:14847:	matcher = "fgrep";
../inputs/grep1.dat:14867:	break;
../inputs/grep1.dat:14875:      case 'G':
../inputs/grep1.dat:14891:	if (matcher && strcmp(matcher, "grep") != 0)
../inputs/grep1.dat:14937:	  fatal("you may specify only one of -E, -F, or -G", 0);
../inputs/grep1.dat:14995:	matcher = "grep";
../inputs/grep1.dat:15014:	break;
../inputs/grep1.dat:15022:      case 'V':
../inputs/grep1.dat:15038:	fprintf(stderr, "%s\n", version);
../inputs/grep1.dat:15073:	break;
../inputs/grep1.dat:15081:      case 'X':
../inputs/grep1.dat:15097:	if (matcher)
../inputs/grep1.dat:15111:	  fatal("matcher already specified", 0);
../inputs/grep1.dat:15153:	matcher = optarg;
../inputs/grep1.dat:15172:	break;
../inputs/grep1.dat:15180:      case 'b':
../inputs/grep1.dat:15196:	out_byte = 1;
../inputs/grep1.dat:15211:	break;
../inputs/grep1.dat:15219:      case 'c':
../inputs/grep1.dat:15235:	out_quiet = 1;
../inputs/grep1.dat:15251:	count_matches = 1;
../inputs/grep1.dat:15271:	break;
../inputs/grep1.dat:15279:      case 'e':
../inputs/grep1.dat:15295:	cc = strlen(optarg);
../inputs/grep1.dat:15317:	keys = xrealloc(keys, keycc + cc + 1);
../inputs/grep1.dat:15357:	if (keyfound)
../inputs/grep1.dat:15372:	  keys[keycc++] = '\n';
../inputs/grep1.dat:15397:	strcpy(&keys[keycc], optarg);
../inputs/grep1.dat:15428:	keycc += cc;
../inputs/grep1.dat:15442:	keyfound = 1;
../inputs/grep1.dat:15457:	break;
../inputs/grep1.dat:15465:      case 'f':
../inputs/grep1.dat:15481:	fp = strcmp(optarg, "-") != 0 ? fopen(optarg, "r") : stdin;
../inputs/grep1.dat:15542:	if (!fp)
../inputs/grep1.dat:15552:	  fatal(optarg, errno);
../inputs/grep1.dat:15577:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
../inputs/grep1.dat:15631:	  ;
../inputs/grep1.dat:15636:	keys = xrealloc(keys, keyalloc);
../inputs/grep1.dat:15670:	oldcc = keycc;
../inputs/grep1.dat:15686:	if (keyfound)
../inputs/grep1.dat:15701:	  keys[keycc++] = '\n';
../inputs/grep1.dat:15726:	while (!feof(fp)
../inputs/grep1.dat:15744:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
../inputs/grep1.dat:15812:	  {
../inputs/grep1.dat:15817:	    keycc += cc;
../inputs/grep1.dat:15835:	    if (keycc == keyalloc)
../inputs/grep1.dat:15863:	      keys = xrealloc(keys, keyalloc *= 2);
../inputs/grep1.dat:15908:	  }
../inputs/grep1.dat:15913:	if (fp != stdin)
../inputs/grep1.dat:15931:	  fclose(fp);
../inputs/grep1.dat:15946:	/* Nuke the final newline to avoid matching a null string. */
../inputs/grep1.dat:16009:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
../inputs/grep1.dat:16060:	  --keycc;
../inputs/grep1.dat:16072:	keyfound = 1;
../inputs/grep1.dat:16087:	break;
../inputs/grep1.dat:16095:      case 'h':
../inputs/grep1.dat:16111:	no_filenames = 1;
../inputs/grep1.dat:16130:	break;
../inputs/grep1.dat:16138:      case 'i':
../inputs/grep1.dat:16154:      case 'y':			/* For old-timers . . . */
../inputs/grep1.dat:16199:	match_icase = 1;
../inputs/grep1.dat:16217:	break;
../inputs/grep1.dat:16225:      case 'L':
../inputs/grep1.dat:16241:	/* Like -l, except list files that don't contain matches.
../inputs/grep1.dat:16300:	   Inspired by the same option in Hume's gre. */
../inputs/grep1.dat:16350:	out_quiet = 1;
../inputs/grep1.dat:16366:	list_files = -1;
../inputs/grep1.dat:16384:	break;
../inputs/grep1.dat:16392:      case 'l':
../inputs/grep1.dat:16408:	out_quiet = 1;
../inputs/grep1.dat:16424:	list_files = 1;
../inputs/grep1.dat:16441:	break;
../inputs/grep1.dat:16449:      case 'n':
../inputs/grep1.dat:16465:	out_line = 1;
../inputs/grep1.dat:16480:	break;
../inputs/grep1.dat:16488:      case 'q':
../inputs/grep1.dat:16504:	out_quiet = 1;
../inputs/grep1.dat:16520:	break;
../inputs/grep1.dat:16528:      case 's':
../inputs/grep1.dat:16544:	suppress_errors = 1;
../inputs/grep1.dat:16566:	break;
../inputs/grep1.dat:16574:      case 'v':
../inputs/grep1.dat:16590:	out_invert = 1;
../inputs/grep1.dat:16607:	break;
../inputs/grep1.dat:16615:      case 'w':
../inputs/grep1.dat:16631:	match_words = 1;
../inputs/grep1.dat:16649:	break;
../inputs/grep1.dat:16657:      case 'x':
../inputs/grep1.dat:16673:	match_lines = 1;
../inputs/grep1.dat:16691:	break;
../inputs/grep1.dat:16699:      default:
../inputs/grep1.dat:16714:	usage();
../inputs/grep1.dat:16724:	break;
../inputs/grep1.dat:16732:      }
../inputs/grep1.dat:16740:
../inputs/grep1.dat:16741:  if (!keyfound)
../inputs/grep1.dat:16758:    if (optind < argc)
../inputs/grep1.dat:16781:      {
../inputs/grep1.dat:16789:	keys = argv[optind++];
../inputs/grep1.dat:16813:	keycc = strlen(keys);
../inputs/grep1.dat:16836:      }
../inputs/grep1.dat:16844:    else
../inputs/grep1.dat:16853:      usage();
../inputs/grep1.dat:16868:
../inputs/grep1.dat:16869:  if (!matcher)
../inputs/grep1.dat:16885:    matcher = prog;
../inputs/grep1.dat:16905:
../inputs/grep1.dat:16906:  if (!setmatcher(matcher) && !setmatcher("default"))
../inputs/grep1.dat:16960:    abort();
../inputs/grep1.dat:16973:
../inputs/grep1.dat:16974:  (*compile)(keys, keycc);
../inputs/grep1.dat:17001:
../inputs/grep1.dat:17002:  if (argc - optind > 1 && !no_filenames)
../inputs/grep1.dat:17044:    out_file = 1;
../inputs/grep1.dat:17062:
../inputs/grep1.dat:17063:  status = 1;
../inputs/grep1.dat:17077:
../inputs/grep1.dat:17078:  if (optind < argc)
../inputs/grep1.dat:17099:    while (optind < argc)
../inputs/grep1.dat:17125:      {
../inputs/grep1.dat:17133:	desc = strcmp(argv[optind], "-") ? open(argv[optind], O_RDONLY) : 0;
../inputs/grep1.dat:17203:	if (desc < 0)
../inputs/grep1.dat:17218:	  {
../inputs/grep1.dat:17223:	    if (!suppress_errors)
../inputs/grep1.dat:17250:	      error(argv[optind], errno);
../inputs/grep1.dat:17285:	  }
../inputs/grep1.dat:17290:	else
../inputs/grep1.dat:17296:	  {
../inputs/grep1.dat:17301:	    filename = desc == 0 ? "(standard input)" : argv[optind];
../inputs/grep1.dat:17364:	    count = grep(desc);
../inputs/grep1.dat:17389:	    if (count_matches)
../inputs/grep1.dat:17413:	      {
../inputs/grep1.dat:17422:		if (out_file)
../inputs/grep1.dat:17438:		  printf("%s:", filename);
../inputs/grep1.dat:17467:		printf("%d\n", count);
../inputs/grep1.dat:17492:	      }
../inputs/grep1.dat:17501:	    if (count)
../inputs/grep1.dat:17517:	      {
../inputs/grep1.dat:17526:		status = 0;
../inputs/grep1.dat:17540:		if (list_files == 1)
../inputs/grep1.dat:17563:		  printf("%s\n", filename);
../inputs/grep1.dat:17593:	      }
../inputs/grep1.dat:17602:	    else if (list_files == -1)
../inputs/grep1.dat:17634:	      printf("%s\n", filename);
../inputs/grep1.dat:17667:	  }
../inputs/grep1.dat:17672:	if (desc != 0)
../inputs/grep1.dat:17688:	  close(desc);
../inputs/grep1.dat:17704:	++optind;
../inputs/grep1.dat:17715:      }
../inputs/grep1.dat:17723:  else
../inputs/grep1.dat:17730:    {
../inputs/grep1.dat:17736:      filename = "(standard input)";
../inputs/grep1.dat:17773:      count = grep(0);
../inputs/grep1.dat:17796:      if (count_matches)
../inputs/grep1.dat:17821:	printf("%d\n", count);
../inputs/grep1.dat:17845:      if (count)
../inputs/grep1.dat:17862:	{
../inputs/grep1.dat:17865:	  status = 0;
../inputs/grep1.dat:17880:	  if (list_files == 1)
../inputs/grep1.dat:17904:	    printf("(standard input)\n");
../inputs/grep1.dat:17939:	}
../inputs/grep1.dat:17942:      else if (list_files == -1)
../inputs/grep1.dat:17975:	printf("(standard input)\n");
../inputs/grep1.dat:18006:    }
../inputs/grep1.dat:18012:
../inputs/grep1.dat:18013:  exit(errseen ? 2 : status);
../inputs/grep1.dat:18043:}
../inputs/grep1.dat:18045:/* Getopt for GNU.
../inputs/grep1.dat:18064:   NOTE: getopt is now part of the C library, so if you don't know what
../inputs/grep1.dat:18136:   "Keep this file name-space clean" means, talk to roland@gnu.ai.mit.edu
../inputs/grep1.dat:18210:   before changing it!
../inputs/grep1.dat:18233:
../inputs/grep1.dat:18234:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
../inputs/grep1.dat:18282:   	Free Software Foundation, Inc.
../inputs/grep1.dat:18317:
../inputs/grep1.dat:18318:   This program is free software; you can redistribute it and/or modify it
../inputs/grep1.dat:18393:   under the terms of the GNU General Public License as published by the
../inputs/grep1.dat:18466:   Free Software Foundation; either version 2, or (at your option) any
../inputs/grep1.dat:18537:   later version.
../inputs/grep1.dat:18555:
../inputs/grep1.dat:18556:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:18623:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:18689:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:18754:   GNU General Public License for more details.
../inputs/grep1.dat:18802:
../inputs/grep1.dat:18803:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:18872:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:18935:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:18994:
../inputs/grep1.dat:18996:/* NOTE!!!  AIX requires this to be the first thing in the file.
../inputs/grep1.dat:19061:   Do not put ANYTHING before it!  */
../inputs/grep1.dat:19099:#if !defined (__GNUC__) && defined (_AIX)
../inputs/grep1.dat:19141: #pragma alloca
../inputs/grep1.dat:19157:#endif
../inputs/grep1.dat:19164:
../inputs/grep1.dat:19165:#ifdef HAVE_CONFIG_H
../inputs/grep1.dat:19206:#define flag_config 1
../inputs/grep1.dat:19228:#endif
../inputs/grep1.dat:19235:
../inputs/grep1.dat:19236:#ifdef __GNUC__
../inputs/grep1.dat:19252:#define alloca __builtin_alloca
../inputs/grep1.dat:19284:#else /* not __GNUC__ */
../inputs/grep1.dat:19309:#if defined (HAVE_ALLOCA_H) || (defined(sparc) && (defined(sun) || (!defined(USG) && !defined(SVR4) && !defined(__svr4__))))
../inputs/grep1.dat:19454:#define flag_alloca 1
../inputs/grep1.dat:19476:#else
../inputs/grep1.dat:19482:#ifndef _AIX
../inputs/grep1.dat:19495:char *alloca ();
../inputs/grep1.dat:19512:#endif
../inputs/grep1.dat:19519:#endif /* alloca.h */
../inputs/grep1.dat:19541:#endif /* not __GNUC__ */
../inputs/grep1.dat:19567:
../inputs/grep1.dat:19568:#if !__STDC__ && !defined(const) && IN_GCC
../inputs/grep1.dat:19611:#define const
../inputs/grep1.dat:19625:#endif
../inputs/grep1.dat:19632:
../inputs/grep1.dat:19633:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
../inputs/grep1.dat:19710:#ifndef _NO_PROTO
../inputs/grep1.dat:19728:#define _NO_PROTO
../inputs/grep1.dat:19746:#endif
../inputs/grep1.dat:19753:
../inputs/grep1.dat:19778:
../inputs/grep1.dat:19779:/* Comment out all this code if we are using the GNU C Library, and are not
../inputs/grep1.dat:19855:   actually compiling the library itself.  This code is part of the GNU C
../inputs/grep1.dat:20003:   and linking in this code is a waste when using the GNU C library
../inputs/grep1.dat:20071:   (especially if it is a shared library).  Rather than having every GNU
../inputs/grep1.dat:20144:   program understand `configure --with-gnu-libc' and omit the object files,
../inputs/grep1.dat:20221:   it is simpler to just do this in the source for each such file.  */
../inputs/grep1.dat:20292:
../inputs/grep1.dat:20293:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
../inputs/grep1.dat:20343:
../inputs/grep1.dat:20344:
../inputs/grep1.dat:20395:   to get __GNU_LIBRARY__ defined.  */
../inputs/grep1.dat:20434:#ifdef	__GNU_LIBRARY__
../inputs/grep1.dat:20457:#undef	alloca
../inputs/grep1.dat:20542:   contain conflicting prototypes for getopt.  */
../inputs/grep1.dat:20592:#if flag_stdlib==0   
../inputs/grep1.dat:20634:#define flag_stdlib 1
../inputs/grep1.dat:20656:#endif
../inputs/grep1.dat:20663:#else	/* Not GNU C library.  */
../inputs/grep1.dat:20695:#define	__alloca	alloca
../inputs/grep1.dat:20719:#endif	/* GNU C library.  */
../inputs/grep1.dat:20748:
../inputs/grep1.dat:20749:/* If GETOPT_COMPAT is defined, `+' as well as `--' can introduce a
../inputs/grep1.dat:20817:   long-named option.  Because this is not POSIX.2 compliant, it is
../inputs/grep1.dat:20885:   being phased out.  */
../inputs/grep1.dat:20910:/* #define GETOPT_COMPAT */
../inputs/grep1.dat:20938:
../inputs/grep1.dat:20939:/* This version of `getopt' appears to the caller like standard Unix `getopt'
../inputs/grep1.dat:21017:   but it behaves differently for the user, since it allows the user
../inputs/grep1.dat:21086:   to intersperse the options with the other arguments.
../inputs/grep1.dat:21142:
../inputs/grep1.dat:21143:   As `getopt' works, it permutes the elements of ARGV so that,
../inputs/grep1.dat:21207:   when it is done, all the options precede everything else.  Thus
../inputs/grep1.dat:21274:   all application programs are extended to handle flexible argument order.
../inputs/grep1.dat:21350:
../inputs/grep1.dat:21351:   Setting the environment variable POSIXLY_CORRECT disables permutation.
../inputs/grep1.dat:21425:   Then the behavior is completely standard.
../inputs/grep1.dat:21470:
../inputs/grep1.dat:21471:   GNU application programs can use a third alternative mode in which
../inputs/grep1.dat:21541:   they can distinguish the relative order of options and other arguments.  */
../inputs/grep1.dat:21620:
../inputs/grep1.dat:21641:
../inputs/grep1.dat:21642:/* For communication from `getopt' to the caller.
../inputs/grep1.dat:21692:   When `getopt' finds an option that takes an argument,
../inputs/grep1.dat:21749:   the argument value is returned here.
../inputs/grep1.dat:21789:   Also, when `ordering' is RETURN_IN_ORDER,
../inputs/grep1.dat:21834:   each non-option ARGV-element is returned here.  */
../inputs/grep1.dat:21888:
../inputs/grep1.dat:21889:char *optarg = 0;
../inputs/grep1.dat:21907:
../inputs/grep1.dat:21908:/* Index in ARGV of the next element to be scanned.
../inputs/grep1.dat:21960:   This is used for communication to and from the caller
../inputs/grep1.dat:22017:   and for communication between successive calls to `getopt'.
../inputs/grep1.dat:22080:
../inputs/grep1.dat:22081:   On entry to `getopt', zero means this is the first call; initialize.
../inputs/grep1.dat:22153:
../inputs/grep1.dat:22154:   When `getopt' returns EOF, this is the index of the first of the
../inputs/grep1.dat:22222:   non-option elements that the caller should itself scan.
../inputs/grep1.dat:22281:
../inputs/grep1.dat:22282:   Otherwise, `optind' communicates from one call to the next
../inputs/grep1.dat:22344:   how much of ARGV has been scanned so far.  */
../inputs/grep1.dat:22393:
../inputs/grep1.dat:22394:/* XXX 1003.2 says this must be 1 before any call.  */
../inputs/grep1.dat:22449:int optind = 0;
../inputs/grep1.dat:22465:
../inputs/grep1.dat:22466:/* The next char to be scanned in the option-element
../inputs/grep1.dat:22519:   in which the last option character we returned was found.
../inputs/grep1.dat:22580:   This allows us to pick up the scan where we left off.
../inputs/grep1.dat:22637:
../inputs/grep1.dat:22638:   If this is zero, or a null string, it means resume the scan
../inputs/grep1.dat:22701:   by advancing to the next ARGV-element.  */
../inputs/grep1.dat:22747:
../inputs/grep1.dat:22748:static char *nextchar;
../inputs/grep1.dat:22771:
../inputs/grep1.dat:22772:/* Callers store zero here to inhibit the error message
../inputs/grep1.dat:22828:   for unrecognized options.  */
../inputs/grep1.dat:22861:
../inputs/grep1.dat:22862:int opterr = 1;
../inputs/grep1.dat:22878:
../inputs/grep1.dat:22879:/* Set to an option character which was unrecognized.
../inputs/grep1.dat:22933:   This must be initialized on some systems to avoid linking in the
../inputs/grep1.dat:23001:   system's own getopt implementation.  */
../inputs/grep1.dat:23044:
../inputs/grep1.dat:23045:int optopt = '?';
../inputs/grep1.dat:23063:
../inputs/grep1.dat:23064:/* Describe how to deal with options that follow non-option ARGV-elements.
../inputs/grep1.dat:23139:
../inputs/grep1.dat:23140:   If the caller did not specify anything,
../inputs/grep1.dat:23183:   the default is REQUIRE_ORDER if the environment variable
../inputs/grep1.dat:23243:   POSIXLY_CORRECT is defined, PERMUTE otherwise.
../inputs/grep1.dat:23293:
../inputs/grep1.dat:23294:   REQUIRE_ORDER means don't recognize them as options;
../inputs/grep1.dat:23350:   stop option processing when the first non-option is seen.
../inputs/grep1.dat:23411:   This is what Unix does.
../inputs/grep1.dat:23438:   This mode of operation is selected by either setting the environment
../inputs/grep1.dat:23510:   variable POSIXLY_CORRECT, or using `+' as the first character
../inputs/grep1.dat:23575:   of the list of option characters.
../inputs/grep1.dat:23612:
../inputs/grep1.dat:23613:   PERMUTE is the default.  We permute the contents of ARGV as we scan,
../inputs/grep1.dat:23685:   so that eventually all the non-options are at the end.  This allows options
../inputs/grep1.dat:23764:   to be given in any order, even with programs that were not written to
../inputs/grep1.dat:23837:   expect this.
../inputs/grep1.dat:23853:
../inputs/grep1.dat:23854:   RETURN_IN_ORDER is an option available to programs that were written
../inputs/grep1.dat:23926:   to expect options and other ARGV-elements in any order and that care about
../inputs/grep1.dat:24004:   the ordering of the two.  We describe each non-option ARGV-element
../inputs/grep1.dat:24074:   as if it were the argument of an option with character code 1.
../inputs/grep1.dat:24140:   Using `-' as the first character of the list of option characters
../inputs/grep1.dat:24209:   selects this mode of operation.
../inputs/grep1.dat:24244:
../inputs/grep1.dat:24245:   The special argument `--' forces an end of option-scanning regardless
../inputs/grep1.dat:24318:   of the value of `ordering'.  In the case of RETURN_IN_ORDER, only
../inputs/grep1.dat:24387:   `--' can cause `getopt' to return EOF with `optind' != ARGC.  */
../inputs/grep1.dat:24455:
../inputs/grep1.dat:24456:static enum
../inputs/grep1.dat:24468:{
../inputs/grep1.dat:24470:  REQUIRE_ORDER, PERMUTE, RETURN_IN_ORDER
../inputs/grep1.dat:24512:} ordering;
../inputs/grep1.dat:24524:
../inputs/grep1.dat:24526:#ifdef	__GNU_LIBRARY__
../inputs/grep1.dat:24549:/* We want to avoid inclusion of string.h with non-GNU libraries
../inputs/grep1.dat:24614:   because there are many ways it can cause trouble.
../inputs/grep1.dat:24667:   On some systems, it contains special magic macros that don't work
../inputs/grep1.dat:24736:   in GCC.  */
../inputs/grep1.dat:24751:#if flag_string==0   
../inputs/grep1.dat:24793:#define flag_string 1
../inputs/grep1.dat:24815:#endif
../inputs/grep1.dat:24822:#define	my_index	strchr
../inputs/grep1.dat:24846:#define	my_bcopy(src, dst, n)	memcpy ((dst), (src), (n))
../inputs/grep1.dat:24903:#else
../inputs/grep1.dat:24909:
../inputs/grep1.dat:24910:/* Avoid depending on library functions or files
../inputs/grep1.dat:24959:   whose names are inconsistent.  */
../inputs/grep1.dat:24996:
../inputs/grep1.dat:24997:char *getenv ();
../inputs/grep1.dat:25014:
../inputs/grep1.dat:25015:static char *
../inputs/grep1.dat:25029:my_index (str, chr)
../inputs/grep1.dat:25049:     const char *str;
../inputs/grep1.dat:25071:     int chr;
../inputs/grep1.dat:25085:{
../inputs/grep1.dat:25087:  while (*str)
../inputs/grep1.dat:25102:    {
../inputs/grep1.dat:25108:      if (*str == chr)
../inputs/grep1.dat:25131:	return (char *) str;
../inputs/grep1.dat:25153:      str++;
../inputs/grep1.dat:25166:    }
../inputs/grep1.dat:25172:  return 0;
../inputs/grep1.dat:25184:}
../inputs/grep1.dat:25186:
../inputs/grep1.dat:25187:static void
../inputs/grep1.dat:25199:my_bcopy (from, to, size)
../inputs/grep1.dat:25225:     const char *from;
../inputs/grep1.dat:25248:     char *to;
../inputs/grep1.dat:25263:     int size;
../inputs/grep1.dat:25278:{
../inputs/grep1.dat:25280:  int i;
../inputs/grep1.dat:25289:  for (i = 0; i < size; i++)
../inputs/grep1.dat:25318:    to[i] = from[i];
../inputs/grep1.dat:25339:}
../inputs/grep1.dat:25341:#endif				/* GNU C library.  */
../inputs/grep1.dat:25373:
../inputs/grep1.dat:25375:/* Handle permutation of arguments.  */
../inputs/grep1.dat:25415:
../inputs/grep1.dat:25416:/* Describe the part of ARGV that contains non-options that have
../inputs/grep1.dat:25481:   been skipped.  `first_nonopt' is the index in ARGV of the first of them;
../inputs/grep1.dat:25557:   `last_nonopt' is the index after the last of them.  */
../inputs/grep1.dat:25615:
../inputs/grep1.dat:25616:static int first_nonopt;
../inputs/grep1.dat:25641:static int last_nonopt;
../inputs/grep1.dat:25665:
../inputs/grep1.dat:25666:/* Exchange two adjacent subsequences of ARGV.
../inputs/grep1.dat:25713:   One subsequence is elements [first_nonopt,last_nonopt)
../inputs/grep1.dat:25771:   which contains all the non-options that have been skipped so far.
../inputs/grep1.dat:25840:   The other is elements [last_nonopt,optind), which contains all
../inputs/grep1.dat:25906:   the options processed since those non-options were skipped.
../inputs/grep1.dat:25969:
../inputs/grep1.dat:25970:   `first_nonopt' and `last_nonopt' are relocated so that they describe
../inputs/grep1.dat:26042:   the new indices of the non-options in ARGV after they are moved.  */
../inputs/grep1.dat:26114:
../inputs/grep1.dat:26115:static void
../inputs/grep1.dat:26127:exchange (argv)
../inputs/grep1.dat:26143:     char **argv;
../inputs/grep1.dat:26161:{
../inputs/grep1.dat:26163:  int nonopts_size = (last_nonopt - first_nonopt) * sizeof (char *);
../inputs/grep1.dat:26232:  char **temp = (char **) __alloca (nonopts_size);
../inputs/grep1.dat:26283:
../inputs/grep1.dat:26284:  /* Interchange the two blocks of data in ARGV.  */
../inputs/grep1.dat:26337:
../inputs/grep1.dat:26338:  my_bcopy ((char *) &argv[first_nonopt], (char *) temp, nonopts_size);
../inputs/grep1.dat:26410:  my_bcopy ((char *) &argv[last_nonopt], (char *) &argv[first_nonopt],
../inputs/grep1.dat:26481:	    (optind - last_nonopt) * sizeof (char *));
../inputs/grep1.dat:26529:  my_bcopy ((char *) temp,
../inputs/grep1.dat:26556:	    (char *) &argv[first_nonopt + optind - last_nonopt],
../inputs/grep1.dat:26614:	    nonopts_size);
../inputs/grep1.dat:26634:
../inputs/grep1.dat:26635:  /* Update records for the slots the non-options now occupy.  */
../inputs/grep1.dat:26701:
../inputs/grep1.dat:26702:  first_nonopt += (optind - last_nonopt);
../inputs/grep1.dat:26744:  last_nonopt = optind;
../inputs/grep1.dat:26768:}
../inputs/grep1.dat:26770:
../inputs/grep1.dat:26772:/* Scan elements of ARGV (whose length is ARGC) for option characters
../inputs/grep1.dat:26842:   given in OPTSTRING.
../inputs/grep1.dat:26865:
../inputs/grep1.dat:26866:   If an element of ARGV starts with '-', and is not exactly "-" or "--",
../inputs/grep1.dat:26940:   then it is an option element.  The characters of this element
../inputs/grep1.dat:27005:   (aside from the initial '-') are option characters.  If `getopt'
../inputs/grep1.dat:27073:   is called repeatedly, it returns successively each of the option characters
../inputs/grep1.dat:27152:   from each of the option elements.
../inputs/grep1.dat:27189:
../inputs/grep1.dat:27190:   If `getopt' finds another option character, it returns that character,
../inputs/grep1.dat:27264:   updating `optind' and `nextchar' so that the next call to `getopt' can
../inputs/grep1.dat:27338:   resume the scan with the following option character or ARGV-element.
../inputs/grep1.dat:27410:
../inputs/grep1.dat:27411:   If there are no more option characters, `getopt' returns `EOF'.
../inputs/grep1.dat:27478:   Then `optind' is the index in ARGV of the first ARGV-element
../inputs/grep1.dat:27542:   that is not an option.  (The ARGV-elements have been permuted
../inputs/grep1.dat:27607:   so that those that are not options now come last.)
../inputs/grep1.dat:27661:
../inputs/grep1.dat:27662:   OPTSTRING is a string containing the legitimate option characters.
../inputs/grep1.dat:27732:   If an option character is seen that is not listed in OPTSTRING,
../inputs/grep1.dat:27799:   return '?' after printing an error message.  If you set `opterr' to
../inputs/grep1.dat:27870:   zero, the error message is suppressed but we still return '?'.
../inputs/grep1.dat:27936:
../inputs/grep1.dat:27937:   If a char in OPTSTRING is followed by a colon, that means it wants an arg,
../inputs/grep1.dat:28015:   so the following text in the same ARGV-element, or the text of the following
../inputs/grep1.dat:28095:   ARGV-element, is returned in `optarg'.  Two colons mean an option that
../inputs/grep1.dat:28169:   wants an optional arg; if there is text in the current ARGV-element,
../inputs/grep1.dat:28241:   it is returned in `optarg', otherwise `optarg' is set to zero.
../inputs/grep1.dat:28307:
../inputs/grep1.dat:28308:   If OPTSTRING starts with `-' or `+', it requests different methods of
../inputs/grep1.dat:28381:   handling the non-option ARGV-elements.
../inputs/grep1.dat:28423:   See the comments about RETURN_IN_ORDER and REQUIRE_ORDER, above.
../inputs/grep1.dat:28491:
../inputs/grep1.dat:28492:   Long-named options begin with `--' instead of `-'.
../inputs/grep1.dat:28546:   Their names may be abbreviated as long as the abbreviation is unique
../inputs/grep1.dat:28618:   or is an exact match for some defined option.  If they have an
../inputs/grep1.dat:28684:   argument, it follows the option name in the same ARGV-element, separated
../inputs/grep1.dat:28760:   from the option name by a `=', or else the in next ARGV-element.
../inputs/grep1.dat:28828:   When `getopt' finds a long-named option, it returns 0 if that option's
../inputs/grep1.dat:28902:   `flag' field is nonzero, the value of the option's `val' field
../inputs/grep1.dat:28968:   if the `flag' field is zero.
../inputs/grep1.dat:29000:
../inputs/grep1.dat:29001:   The elements of ARGV aren't really const, because we permute them.
../inputs/grep1.dat:29071:   But we pretend they're const in the prototype to be compatible
../inputs/grep1.dat:29137:   with other systems.
../inputs/grep1.dat:29160:
../inputs/grep1.dat:29161:   LONGOPTS is a vector of `struct option' terminated by an
../inputs/grep1.dat:29221:   element containing a name which is zero.
../inputs/grep1.dat:29265:
../inputs/grep1.dat:29266:   LONGIND returns the index in LONGOPT of the long-named option found.
../inputs/grep1.dat:29338:   It is only valid when a long-named option has been found by the most
../inputs/grep1.dat:29410:   recent call.
../inputs/grep1.dat:29426:
../inputs/grep1.dat:29427:   If LONG_ONLY is nonzero, '-' as well as '--' can introduce
../inputs/grep1.dat:29489:   long-named options.  */
../inputs/grep1.dat:29516:
../inputs/grep1.dat:29517:int
../inputs/grep1.dat:29521:_getopt_internal (argc, argv, optstring, longopts, longind, long_only)
../inputs/grep1.dat:29592:     int argc;
../inputs/grep1.dat:29607:     char *const *argv;
../inputs/grep1.dat:29631:     const char *optstring;
../inputs/grep1.dat:29659:     const struct option *longopts;
../inputs/grep1.dat:29695:     int *longind;
../inputs/grep1.dat:29714:     int long_only;
../inputs/grep1.dat:29734:{
../inputs/grep1.dat:29736:  int option_index;
../inputs/grep1.dat:29756:
../inputs/grep1.dat:29757:  optarg = 0;
../inputs/grep1.dat:29771:
../inputs/grep1.dat:29772:  /* Initialize the internal data when the first call is made.
../inputs/grep1.dat:29835:     Start processing options with ARGV-element 1 (since ARGV-element 0
../inputs/grep1.dat:29907:     is the program name); the sequence of previously skipped
../inputs/grep1.dat:29969:     non-option ARGV-elements is empty.  */
../inputs/grep1.dat:30013:
../inputs/grep1.dat:30014:  if (optind == 0)
../inputs/grep1.dat:30033:    {
../inputs/grep1.dat:30039:      first_nonopt = last_nonopt = optind = 1;
../inputs/grep1.dat:30086:
../inputs/grep1.dat:30087:      nextchar = NULL;
../inputs/grep1.dat:30110:
../inputs/grep1.dat:30111:      /* Determine how to handle the ordering of options and nonoptions.  */
../inputs/grep1.dat:30188:
../inputs/grep1.dat:30189:      if (optstring[0] == '-')
../inputs/grep1.dat:30220:	{
../inputs/grep1.dat:30223:	  ordering = RETURN_IN_ORDER;
../inputs/grep1.dat:30254:	  ++optstring;
../inputs/grep1.dat:30270:	}
../inputs/grep1.dat:30273:      else if (optstring[0] == '+')
../inputs/grep1.dat:30309:	{
../inputs/grep1.dat:30312:	  ordering = REQUIRE_ORDER;
../inputs/grep1.dat:30341:	  ++optstring;
../inputs/grep1.dat:30357:	}
../inputs/grep1.dat:30360:      else if (getenv ("POSIXLY_CORRECT") != NULL)
../inputs/grep1.dat:30411:	ordering = REQUIRE_ORDER;
../inputs/grep1.dat:30438:      else
../inputs/grep1.dat:30449:	ordering = PERMUTE;
../inputs/grep1.dat:30470:    }
../inputs/grep1.dat:30476:
../inputs/grep1.dat:30477:  if (nextchar == NULL || *nextchar == '\0')
../inputs/grep1.dat:30522:    {
../inputs/grep1.dat:30528:      if (ordering == PERMUTE)
../inputs/grep1.dat:30559:	{
../inputs/grep1.dat:30562:	  /* If we have just processed some options following some non-options,
../inputs/grep1.dat:30635:	     exchange them so that the options come first.  */
../inputs/grep1.dat:30691:
../inputs/grep1.dat:30692:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
../inputs/grep1.dat:30753:	    exchange ((char **) argv);
../inputs/grep1.dat:30785:	  else if (last_nonopt != optind)
../inputs/grep1.dat:30820:	    first_nonopt = optind;
../inputs/grep1.dat:30848:
../inputs/grep1.dat:30849:	  /* Now skip any additional non-options
../inputs/grep1.dat:30891:	     and extend the range of non-options previously skipped.  */
../inputs/grep1.dat:30957:
../inputs/grep1.dat:30958:	  while (optind < argc
../inputs/grep1.dat:30982:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
../inputs/grep1.dat:31040:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:31061:		 && (longopts == NULL
../inputs/grep1.dat:31085:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
../inputs/grep1.dat:31146:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:31176:		 )
../inputs/grep1.dat:31181:	    optind++;
../inputs/grep1.dat:31196:	  last_nonopt = optind;
../inputs/grep1.dat:31221:	}
../inputs/grep1.dat:31224:
../inputs/grep1.dat:31225:      /* Special ARGV-element `--' means premature end of options.
../inputs/grep1.dat:31292:	 Skip it like a null option,
../inputs/grep1.dat:31322:	 then exchange with previous non-options as if it were an option,
../inputs/grep1.dat:31389:	 then skip everything else like a non-option.  */
../inputs/grep1.dat:31440:
../inputs/grep1.dat:31441:      if (optind != argc && !strcmp (argv[optind], "--"))
../inputs/grep1.dat:31499:	{
../inputs/grep1.dat:31502:	  optind++;
../inputs/grep1.dat:31515:
../inputs/grep1.dat:31516:	  if (first_nonopt != last_nonopt && last_nonopt != optind)
../inputs/grep1.dat:31577:	    exchange ((char **) argv);
../inputs/grep1.dat:31609:	  else if (first_nonopt == last_nonopt)
../inputs/grep1.dat:31650:	    first_nonopt = optind;
../inputs/grep1.dat:31678:	  last_nonopt = argc;
../inputs/grep1.dat:31701:
../inputs/grep1.dat:31702:	  optind = argc;
../inputs/grep1.dat:31720:	}
../inputs/grep1.dat:31723:
../inputs/grep1.dat:31724:      /* If we have done all the ARGV-elements, stop the scan
../inputs/grep1.dat:31786:	 and back over any non-options that we skipped and permuted.  */
../inputs/grep1.dat:31852:
../inputs/grep1.dat:31853:      if (optind == argc)
../inputs/grep1.dat:31879:	{
../inputs/grep1.dat:31882:	  /* Set the next-arg-index to point at the non-options
../inputs/grep1.dat:31939:	     that we previously skipped, so the caller will digest them.  */
../inputs/grep1.dat:32009:	  if (first_nonopt != last_nonopt)
../inputs/grep1.dat:32045:	    optind = first_nonopt;
../inputs/grep1.dat:32073:	  return EOF;
../inputs/grep1.dat:32088:	}
../inputs/grep1.dat:32091:
../inputs/grep1.dat:32092:      /* If we have come to a non-option and did not permute it,
../inputs/grep1.dat:32157:	 either stop the scan or describe it to the caller and pass it by.  */
../inputs/grep1.dat:32229:
../inputs/grep1.dat:32230:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
../inputs/grep1.dat:32292:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:32313:	  && (longopts == NULL
../inputs/grep1.dat:32337:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
../inputs/grep1.dat:32398:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:32428:	  )
../inputs/grep1.dat:32433:	{
../inputs/grep1.dat:32436:	  if (ordering == REQUIRE_ORDER)
../inputs/grep1.dat:32470:	    return EOF;
../inputs/grep1.dat:32487:	  optarg = argv[optind++];
../inputs/grep1.dat:32515:	  return 1;
../inputs/grep1.dat:32528:	}
../inputs/grep1.dat:32531:
../inputs/grep1.dat:32532:      /* We have found another option-ARGV-element.
../inputs/grep1.dat:32584:	 Start decoding its characters.  */
../inputs/grep1.dat:32621:
../inputs/grep1.dat:32622:      nextchar = (argv[optind] + 1
../inputs/grep1.dat:32657:		  + (longopts != NULL && argv[optind][1] == '-'));
../inputs/grep1.dat:32710:    }
../inputs/grep1.dat:32716:
../inputs/grep1.dat:32717:  if (longopts != NULL
../inputs/grep1.dat:32740:      && ((argv[optind][0] == '-'
../inputs/grep1.dat:32774:	   && (argv[optind][1] == '-' || long_only))
../inputs/grep1.dat:32820:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:32841:	  || argv[optind][0] == '+'
../inputs/grep1.dat:32870:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:32900:	  ))
../inputs/grep1.dat:32906:    {
../inputs/grep1.dat:32912:      const struct option *p;
../inputs/grep1.dat:32942:      char *s = nextchar;
../inputs/grep1.dat:32968:      int exact = 0;
../inputs/grep1.dat:32989:      int ambig = 0;
../inputs/grep1.dat:33010:      const struct option *pfound = NULL;
../inputs/grep1.dat:33052:      int indfound;
../inputs/grep1.dat:33072:
../inputs/grep1.dat:33073:      while (*s && *s != '=')
../inputs/grep1.dat:33103:	s++;
../inputs/grep1.dat:33109:
../inputs/grep1.dat:33110:      /* Test all options for either exact match or abbreviated matches.  */
../inputs/grep1.dat:33187:      for (p = longopts, option_index = 0; p->name;
../inputs/grep1.dat:33239:	   p++, option_index++)
../inputs/grep1.dat:33264:	if (!strncmp (p->name, nextchar, s - nextchar))
../inputs/grep1.dat:33313:	  {
../inputs/grep1.dat:33318:	    if (s - nextchar == strlen (p->name))
../inputs/grep1.dat:33361:	      {
../inputs/grep1.dat:33370:		/* Exact match found.  */
../inputs/grep1.dat:33398:		pfound = p;
../inputs/grep1.dat:33412:		indfound = option_index;
../inputs/grep1.dat:33439:		exact = 1;
../inputs/grep1.dat:33452:		break;
../inputs/grep1.dat:33461:	      }
../inputs/grep1.dat:33470:	    else if (pfound == NULL)
../inputs/grep1.dat:33500:	      {
../inputs/grep1.dat:33509:		/* First nonexact match found.  */
../inputs/grep1.dat:33546:		pfound = p;
../inputs/grep1.dat:33560:		indfound = option_index;
../inputs/grep1.dat:33587:	      }
../inputs/grep1.dat:33596:	    else
../inputs/grep1.dat:33606:	      /* Second nonexact match found.  */
../inputs/grep1.dat:33649:	      ambig = 1;
../inputs/grep1.dat:33667:	  }
../inputs/grep1.dat:33672:
../inputs/grep1.dat:33673:      if (ambig && !exact)
../inputs/grep1.dat:33700:	{
../inputs/grep1.dat:33703:	  if (opterr)
../inputs/grep1.dat:33718:	    fprintf (stderr, "%s: option `%s' is ambiguous\n",
../inputs/grep1.dat:33774:		     argv[0], argv[optind]);
../inputs/grep1.dat:33805:	  nextchar += strlen (nextchar);
../inputs/grep1.dat:33839:	  optind++;
../inputs/grep1.dat:33852:	  return '?';
../inputs/grep1.dat:33867:	}
../inputs/grep1.dat:33870:
../inputs/grep1.dat:33871:      if (pfound != NULL)
../inputs/grep1.dat:33897:	{
../inputs/grep1.dat:33900:	  option_index = indfound;
../inputs/grep1.dat:33928:	  optind++;
../inputs/grep1.dat:33941:	  if (*s)
../inputs/grep1.dat:33952:	    {
../inputs/grep1.dat:33959:	      /* Don't test has_arg with >, because some C compilers don't
../inputs/grep1.dat:34027:		 allow it to be used on enums.  */
../inputs/grep1.dat:34064:	      if (pfound->has_arg)
../inputs/grep1.dat:34092:		optarg = s + 1;
../inputs/grep1.dat:34110:	      else
../inputs/grep1.dat:34122:		{
../inputs/grep1.dat:34126:		  if (opterr)
../inputs/grep1.dat:34142:		    {
../inputs/grep1.dat:34150:		      if (argv[optind - 1][1] == '-')
../inputs/grep1.dat:34190:			/* --option */
../inputs/grep1.dat:34208:			fprintf (stderr,
../inputs/grep1.dat:34228:				 "%s: option `--%s' doesn't allow an argument\n",
../inputs/grep1.dat:34282:				 argv[0], pfound->name);
../inputs/grep1.dat:34311:		      else
../inputs/grep1.dat:34324:			/* +option or -option */
../inputs/grep1.dat:34352:			fprintf (stderr,
../inputs/grep1.dat:34372:			     "%s: option `%c%s' doesn't allow an argument\n",
../inputs/grep1.dat:34429:			     argv[0], argv[optind - 1][0], pfound->name);
../inputs/grep1.dat:34482:		    }
../inputs/grep1.dat:34490:		  nextchar += strlen (nextchar);
../inputs/grep1.dat:34525:		  return '?';
../inputs/grep1.dat:34541:		}
../inputs/grep1.dat:34545:	    }
../inputs/grep1.dat:34552:	  else if (pfound->has_arg == 1)
../inputs/grep1.dat:34586:	    {
../inputs/grep1.dat:34593:	      if (optind < argc)
../inputs/grep1.dat:34619:		optarg = argv[optind++];
../inputs/grep1.dat:34646:	      else
../inputs/grep1.dat:34658:		{
../inputs/grep1.dat:34662:		  if (opterr)
../inputs/grep1.dat:34678:		    fprintf (stderr, "%s: option `%s' requires an argument\n",
../inputs/grep1.dat:34743:			     argv[0], argv[optind - 1]);
../inputs/grep1.dat:34779:		  nextchar += strlen (nextchar);
../inputs/grep1.dat:34814:		  return optstring[0] == ':' ? ':' : '?';
../inputs/grep1.dat:34858:		}
../inputs/grep1.dat:34862:	    }
../inputs/grep1.dat:34869:	  nextchar += strlen (nextchar);
../inputs/grep1.dat:34903:	  if (longind != NULL)
../inputs/grep1.dat:34927:	    *longind = option_index;
../inputs/grep1.dat:34957:	  if (pfound->flag)
../inputs/grep1.dat:34978:	    {
../inputs/grep1.dat:34985:	      *(pfound->flag) = pfound->val;
../inputs/grep1.dat:35023:	      return 0;
../inputs/grep1.dat:35040:	    }
../inputs/grep1.dat:35047:	  return pfound->val;
../inputs/grep1.dat:35070:	}
../inputs/grep1.dat:35073:      /* Can't find it as a long option.  If this is not getopt_long_only,
../inputs/grep1.dat:35148:	 or the option starts with '--' or is not a valid short
../inputs/grep1.dat:35205:	 option, then it's an error.
../inputs/grep1.dat:35235:	 Otherwise interpret it as a short option.  */
../inputs/grep1.dat:35283:      if (!long_only || argv[optind][1] == '-'
../inputs/grep1.dat:35330:#ifdef GETOPT_COMPAT
../inputs/grep1.dat:35351:	  || argv[optind][0] == '+'
../inputs/grep1.dat:35380:#endif				/* GETOPT_COMPAT */
../inputs/grep1.dat:35410:	  || my_index (optstring, *nextchar) == NULL)
../inputs/grep1.dat:35457:	{
../inputs/grep1.dat:35460:	  if (opterr)
../inputs/grep1.dat:35475:	    {
../inputs/grep1.dat:35482:	      if (argv[optind][1] == '-')
../inputs/grep1.dat:35517:		/* --option */
../inputs/grep1.dat:35534:		fprintf (stderr, "%s: unrecognized option `--%s'\n",
../inputs/grep1.dat:35589:			 argv[0], nextchar);
../inputs/grep1.dat:35613:	      else
../inputs/grep1.dat:35625:		/* +option or -option */
../inputs/grep1.dat:35652:		fprintf (stderr, "%s: unrecognized option `%c%s'\n",
../inputs/grep1.dat:35707:			 argv[0], argv[optind][0], nextchar);
../inputs/grep1.dat:35748:	    }
../inputs/grep1.dat:35755:	  nextchar = (char *) "";
../inputs/grep1.dat:35782:	  optind++;
../inputs/grep1.dat:35795:	  return '?';
../inputs/grep1.dat:35810:	}
../inputs/grep1.dat:35813:    }
../inputs/grep1.dat:35819:
../inputs/grep1.dat:35820:  /* Look at and handle the next option-character.  */
../inputs/grep1.dat:35875:
../inputs/grep1.dat:35876:  {
../inputs/grep1.dat:35880:    char c = *nextchar++;
../inputs/grep1.dat:35906:    char *temp = my_index (optstring, c);
../inputs/grep1.dat:35948:
../inputs/grep1.dat:35949:    /* Increment `optind' when we start to process its last character.  */
../inputs/grep1.dat:36024:    if (*nextchar == '\0')
../inputs/grep1.dat:36051:      ++optind;
../inputs/grep1.dat:36067:
../inputs/grep1.dat:36068:    if (temp == NULL || c == ':')
../inputs/grep1.dat:36102:      {
../inputs/grep1.dat:36110:	if (opterr)
../inputs/grep1.dat:36123:	  {
../inputs/grep1.dat:36128:#if 0
../inputs/grep1.dat:36134:	    if (c < 040 || c >= 0177)
../inputs/grep1.dat:36165:	      fprintf (stderr, "%s: unrecognized option, character code 0%o\n",
../inputs/grep1.dat:36238:		       argv[0], c);
../inputs/grep1.dat:36260:	    else
../inputs/grep1.dat:36270:	      fprintf (stderr, "%s: unrecognized option `-%c'\n", argv[0], c);
../inputs/grep1.dat:36342:#else
../inputs/grep1.dat:36348:	    /* 1003.2 specifies the format of this message.  */
../inputs/grep1.dat:36405:	    fprintf (stderr, "%s: illegal option -- %c\n", argv[0], c);
../inputs/grep1.dat:36470:#endif
../inputs/grep1.dat:36477:	  }
../inputs/grep1.dat:36482:	optopt = c;
../inputs/grep1.dat:36495:	return '?';
../inputs/grep1.dat:36508:      }
../inputs/grep1.dat:36516:    if (temp[1] == ':')
../inputs/grep1.dat:36540:      {
../inputs/grep1.dat:36548:	if (temp[2] == ':')
../inputs/grep1.dat:36569:	  {
../inputs/grep1.dat:36574:	    /* This is an option that accepts an argument optionally.  */
../inputs/grep1.dat:36641:	    if (*nextchar != '\0')
../inputs/grep1.dat:36669:	      {
../inputs/grep1.dat:36678:		optarg = nextchar;
../inputs/grep1.dat:36699:		optind++;
../inputs/grep1.dat:36711:	      }
../inputs/grep1.dat:36720:	    else
../inputs/grep1.dat:36730:	      optarg = 0;
../inputs/grep1.dat:36749:	    nextchar = NULL;
../inputs/grep1.dat:36771:	  }
../inputs/grep1.dat:36776:	else
../inputs/grep1.dat:36782:	  {
../inputs/grep1.dat:36787:	    /* This is an option that requires an argument.  */
../inputs/grep1.dat:36844:	    if (*nextchar != '\0')
../inputs/grep1.dat:36872:	      {
../inputs/grep1.dat:36881:		optarg = nextchar;
../inputs/grep1.dat:36902:		/* If we end this ARGV-element by taking the rest as an arg,
../inputs/grep1.dat:36965:		   we must advance to the next element now.  */
../inputs/grep1.dat:37015:		optind++;
../inputs/grep1.dat:37027:	      }
../inputs/grep1.dat:37036:	    else if (optind == argc)
../inputs/grep1.dat:37066:	      {
../inputs/grep1.dat:37075:		if (opterr)
../inputs/grep1.dat:37089:		  {
../inputs/grep1.dat:37095:#if 0
../inputs/grep1.dat:37101:		    fprintf (stderr, "%s: option `-%c' requires an argument\n",
../inputs/grep1.dat:37167:			     argv[0], c);
../inputs/grep1.dat:37188:#else
../inputs/grep1.dat:37194:		    /* 1003.2 specifies the format of this message.  */
../inputs/grep1.dat:37252:		    fprintf (stderr, "%s: option requires an argument -- %c\n",
../inputs/grep1.dat:37318:			     argv[0], c);
../inputs/grep1.dat:37339:#endif
../inputs/grep1.dat:37346:		  }
../inputs/grep1.dat:37352:		optopt = c;
../inputs/grep1.dat:37366:		if (optstring[0] == ':')
../inputs/grep1.dat:37393:		  c = ':';
../inputs/grep1.dat:37406:		else
../inputs/grep1.dat:37413:		  c = '?';
../inputs/grep1.dat:37426:	      }
../inputs/grep1.dat:37435:	    else
../inputs/grep1.dat:37445:	      /* We already incremented `optind' once;
../inputs/grep1.dat:37493:		 increment it again when taking next ARGV-elt as argument.  */
../inputs/grep1.dat:37558:	      optarg = argv[optind++];
../inputs/grep1.dat:37590:	    nextchar = NULL;
../inputs/grep1.dat:37612:	  }
../inputs/grep1.dat:37617:      }
../inputs/grep1.dat:37625:    return c;
../inputs/grep1.dat:37639:  }
../inputs/grep1.dat:37643:}
../inputs/grep1.dat:37645:
../inputs/grep1.dat:37646:int
../inputs/grep1.dat:37650:getopt (argc, argv, optstring)
../inputs/grep1.dat:37681:     int argc;
../inputs/grep1.dat:37696:     char *const *argv;
../inputs/grep1.dat:37720:     const char *optstring;
../inputs/grep1.dat:37748:{
../inputs/grep1.dat:37750:  return _getopt_internal (argc, argv, optstring,
../inputs/grep1.dat:37800:			   (const struct option *) 0,
../inputs/grep1.dat:37833:			   (int *) 0,
../inputs/grep1.dat:37850:			   0);
../inputs/grep1.dat:37860:}
../inputs/grep1.dat:37862:
../inputs/grep1.dat:37863:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
../inputs/grep1.dat:37907:
../inputs/grep1.dat:37909:#ifdef TEST
../inputs/grep1.dat:37921:
../inputs/grep1.dat:37922:/* Compile with -DTEST to make an executable for use in testing
../inputs/grep1.dat:37986:   the above definition of `getopt'.  */
../inputs/grep1.dat:38027:
../inputs/grep1.dat:38028:int
../inputs/grep1.dat:38032:main (argc, argv)
../inputs/grep1.dat:38050:     int argc;
../inputs/grep1.dat:38065:     char **argv;
../inputs/grep1.dat:38083:{
../inputs/grep1.dat:38085:  int c;
../inputs/grep1.dat:38094:  int digit_optind = 0;
../inputs/grep1.dat:38118:
../inputs/grep1.dat:38119:  while (1)
../inputs/grep1.dat:38131:    {
../inputs/grep1.dat:38137:      int this_option_optind = optind ? optind : 1;
../inputs/grep1.dat:38189:
../inputs/grep1.dat:38190:      c = getopt (argc, argv, "abc:d:0123456789");
../inputs/grep1.dat:38241:      if (c == EOF)
../inputs/grep1.dat:38261:	break;
../inputs/grep1.dat:38269:
../inputs/grep1.dat:38270:      switch (c)
../inputs/grep1.dat:38287:	{
../inputs/grep1.dat:38290:	case '0':
../inputs/grep1.dat:38301:	case '1':
../inputs/grep1.dat:38312:	case '2':
../inputs/grep1.dat:38323:	case '3':
../inputs/grep1.dat:38334:	case '4':
../inputs/grep1.dat:38345:	case '5':
../inputs/grep1.dat:38356:	case '6':
../inputs/grep1.dat:38367:	case '7':
../inputs/grep1.dat:38378:	case '8':
../inputs/grep1.dat:38389:	case '9':
../inputs/grep1.dat:38400:	  if (digit_optind != 0 && digit_optind != this_option_optind)
../inputs/grep1.dat:38464:	    printf ("digits occur in two different argv-elements.\n");
../inputs/grep1.dat:38528:	  digit_optind = this_option_optind;
../inputs/grep1.dat:38566:	  printf ("option %c\n", c);
../inputs/grep1.dat:38596:	  break;
../inputs/grep1.dat:38606:
../inputs/grep1.dat:38607:	case 'a':
../inputs/grep1.dat:38618:	  printf ("option a\n");
../inputs/grep1.dat:38644:	  break;
../inputs/grep1.dat:38654:
../inputs/grep1.dat:38655:	case 'b':
../inputs/grep1.dat:38666:	  printf ("option b\n");
../inputs/grep1.dat:38692:	  break;
../inputs/grep1.dat:38702:
../inputs/grep1.dat:38703:	case 'c':
../inputs/grep1.dat:38714:	  printf ("option c with value `%s'\n", optarg);
../inputs/grep1.dat:38764:	  break;
../inputs/grep1.dat:38774:
../inputs/grep1.dat:38775:	case '?':
../inputs/grep1.dat:38786:	  break;
../inputs/grep1.dat:38796:
../inputs/grep1.dat:38797:	default:
../inputs/grep1.dat:38807:	  printf ("?? getopt returned character code 0%o ??\n", c);
../inputs/grep1.dat:38868:	}
../inputs/grep1.dat:38871:    }
../inputs/grep1.dat:38877:
../inputs/grep1.dat:38878:  if (optind < argc)
../inputs/grep1.dat:38899:    {
../inputs/grep1.dat:38905:      printf ("non-option ARGV-elements: ");
../inputs/grep1.dat:38950:      while (optind < argc)
../inputs/grep1.dat:38978:	printf ("%s ", argv[optind++]);
../inputs/grep1.dat:39011:      printf ("\n");
../inputs/grep1.dat:39032:    }
../inputs/grep1.dat:39038:
../inputs/grep1.dat:39039:  exit (0);
../inputs/grep1.dat:39051:}
../inputs/grep1.dat:39053:
../inputs/grep1.dat:39054:#endif /* TEST */
../inputs/grep1.dat:39072:/* Extended regular expression matching and search library,
../inputs/grep1.dat:39132:   version 0.12.
../inputs/grep1.dat:39149:   (Implements POSIX draft P10003.2/D11.2, except for
../inputs/grep1.dat:39203:   internationalization features.)
../inputs/grep1.dat:39238:
../inputs/grep1.dat:39239:   Copyright (C) 1993 Free Software Foundation, Inc.
../inputs/grep1.dat:39292:
../inputs/grep1.dat:39293:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:39365:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:39437:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:39508:   any later version.
../inputs/grep1.dat:39530:
../inputs/grep1.dat:39531:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:39598:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:39664:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:39729:   GNU General Public License for more details.
../inputs/grep1.dat:39777:
../inputs/grep1.dat:39778:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:39847:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:39910:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:39975:
../inputs/grep1.dat:39976:/* AIX requires this to be the first thing in the file. */
../inputs/grep1.dat:40035:#if defined (_AIX) && !defined (REGEX_MALLOC)
../inputs/grep1.dat:40081:  #pragma alloca
../inputs/grep1.dat:40098:#endif
../inputs/grep1.dat:40105:
../inputs/grep1.dat:40106:#define _GNU_SOURCE
../inputs/grep1.dat:40126:
../inputs/grep1.dat:40203:#if flag_systypes==0
../inputs/grep1.dat:40247:#define flag_systypes 1
../inputs/grep1.dat:40271:#endif
../inputs/grep1.dat:40278:
../inputs/grep1.dat:40279:#ifdef HAVE_CONFIG_H
../inputs/grep1.dat:40300:#if flag_config==0
../inputs/grep1.dat:40339:#define flag_config 1
../inputs/grep1.dat:40361:#endif
../inputs/grep1.dat:40368:#endif
../inputs/grep1.dat:40375:
../inputs/grep1.dat:40376:/* The `emacs' switch turns on certain matching commands
../inputs/grep1.dat:40433:   that make sense only in Emacs. */
../inputs/grep1.dat:40470:#ifdef emacs
../inputs/grep1.dat:40483:
../inputs/grep1.dat:40542:
../inputs/grep1.dat:40543:/* Emacs uses `NULL' as a predicate.  */
../inputs/grep1.dat:40584:#undef NULL
../inputs/grep1.dat:40596:
../inputs/grep1.dat:40597:#else  /* not emacs */
../inputs/grep1.dat:40620:
../inputs/grep1.dat:40621:/* We used to test for `BSTRING' here, but only GCC and Emacs define
../inputs/grep1.dat:40690:   `BSTRING', as far as I know, and neither of them use this code.  */
../inputs/grep1.dat:40761:#if HAVE_STRING_H || STDC_HEADERS
../inputs/grep1.dat:40795:#if flag_string==0
../inputs/grep1.dat:40834:#define flag_string 1
../inputs/grep1.dat:40856:#endif
../inputs/grep1.dat:40863:#ifndef bcmp
../inputs/grep1.dat:40876:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
../inputs/grep1.dat:40925:#endif
../inputs/grep1.dat:40932:#ifndef bcopy
../inputs/grep1.dat:40946:#define bcopy(s, d, n)	memcpy ((d), (s), (n))
../inputs/grep1.dat:40992:#endif
../inputs/grep1.dat:40999:#ifndef bzero
../inputs/grep1.dat:41013:#define bzero(s, n)	memset ((s), 0, (n))
../inputs/grep1.dat:41054:#endif
../inputs/grep1.dat:41061:#else
../inputs/grep1.dat:41067:#if flag_strings==0
../inputs/grep1.dat:41108:#define flag_strings 1
../inputs/grep1.dat:41131:#endif
../inputs/grep1.dat:41138:#endif
../inputs/grep1.dat:41145:
../inputs/grep1.dat:41146:#ifdef STDC_HEADERS
../inputs/grep1.dat:41166:#if flag_stdlib==0 
../inputs/grep1.dat:41206:#define flag_stdlib 1
../inputs/grep1.dat:41228:#endif
../inputs/grep1.dat:41235:#else
../inputs/grep1.dat:41241:char *malloc ();
../inputs/grep1.dat:41258:char *realloc ();
../inputs/grep1.dat:41276:#endif
../inputs/grep1.dat:41283:
../inputs/grep1.dat:41284:
../inputs/grep1.dat:41285:/* Define the syntax stuff for \<, \>, etc.  */
../inputs/grep1.dat:41333:
../inputs/grep1.dat:41334:/* This must be nonzero for the wordchar and notwordchar pattern
../inputs/grep1.dat:41399:   commands in re_match_2.  */
../inputs/grep1.dat:41430:#ifndef Sword 
../inputs/grep1.dat:41445:#define Sword 1
../inputs/grep1.dat:41461:#endif
../inputs/grep1.dat:41468:
../inputs/grep1.dat:41469:#ifdef SYNTAX_TABLE
../inputs/grep1.dat:41489:
../inputs/grep1.dat:41490:extern char *re_syntax_table;
../inputs/grep1.dat:41520:
../inputs/grep1.dat:41521:#else /* not SYNTAX_TABLE */
../inputs/grep1.dat:41550:
../inputs/grep1.dat:41551:/* How many characters in the character set.  */
../inputs/grep1.dat:41600:#define CHAR_SET_SIZE 256
../inputs/grep1.dat:41626:
../inputs/grep1.dat:41627:static char re_syntax_table[CHAR_SET_SIZE];
../inputs/grep1.dat:41671:
../inputs/grep1.dat:41672:static void
../inputs/grep1.dat:41684:init_syntax_once ()
../inputs/grep1.dat:41704:{
../inputs/grep1.dat:41706:   register int c;
../inputs/grep1.dat:41725:   static int done = 0;
../inputs/grep1.dat:41749:
../inputs/grep1.dat:41750:   if (done)
../inputs/grep1.dat:41763:     return;
../inputs/grep1.dat:41776:
../inputs/grep1.dat:41777:   bzero (re_syntax_table, sizeof re_syntax_table);
../inputs/grep1.dat:41829:
../inputs/grep1.dat:41830:   for (c = 'a'; c <= 'z'; c++)
../inputs/grep1.dat:41862:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:41895:
../inputs/grep1.dat:41896:   for (c = 'A'; c <= 'Z'; c++)
../inputs/grep1.dat:41928:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:41961:
../inputs/grep1.dat:41962:   for (c = '0'; c <= '9'; c++)
../inputs/grep1.dat:41994:     re_syntax_table[c] = Sword;
../inputs/grep1.dat:42027:
../inputs/grep1.dat:42028:   re_syntax_table['_'] = Sword;
../inputs/grep1.dat:42061:
../inputs/grep1.dat:42062:   done = 1;
../inputs/grep1.dat:42075:}
../inputs/grep1.dat:42077:
../inputs/grep1.dat:42078:#endif /* not SYNTAX_TABLE */
../inputs/grep1.dat:42108:
../inputs/grep1.dat:42109:#define SYNTAX(c) re_syntax_table[c]
../inputs/grep1.dat:42146:
../inputs/grep1.dat:42147:#endif /* not emacs */
../inputs/grep1.dat:42170:
../inputs/grep1.dat:42172:/* Get the interface, including the syntax bits.  */
../inputs/grep1.dat:42244:
../inputs/grep1.dat:42245:/* isalpha etc. are used for the character classes.  */
../inputs/grep1.dat:42320:
../inputs/grep1.dat:42321:/* Jim Meyering writes:
../inputs/grep1.dat:42345:
../inputs/grep1.dat:42346:   "... Some ctype macros are valid only for character codes that
../inputs/grep1.dat:42412:   isascii says are ASCII (SGI's IRIX-4.0.5 is one such system --when
../inputs/grep1.dat:42482:   using /bin/cc or gcc but without giving an ansi option).  So, all
../inputs/grep1.dat:42551:   ctype uses should be through macros like ISPRINT...  If
../inputs/grep1.dat:42610:   STDC_HEADERS is defined, then autoconf has verified that the ctype
../inputs/grep1.dat:42680:   macros don't need to be guarded with references to isascii. ...
../inputs/grep1.dat:42747:   Defining isascii to 1 should let any compiler worth its salt
../inputs/grep1.dat:42811:   eliminate the && through constant folding."  */
../inputs/grep1.dat:42862:#if ! defined (isascii) || defined (STDC_HEADERS)
../inputs/grep1.dat:42912:#undef isascii
../inputs/grep1.dat:42927:#define isascii(c) 1
../inputs/grep1.dat:42948:#endif
../inputs/grep1.dat:42955:
../inputs/grep1.dat:42956:#ifdef isblank
../inputs/grep1.dat:42971:#define ISBLANK(c) (isascii (c) && isblank (c))
../inputs/grep1.dat:43019:#else
../inputs/grep1.dat:43025:#define ISBLANK(c) ((c) == ' ' || (c) == '\t')
../inputs/grep1.dat:43072:#endif
../inputs/grep1.dat:43079:#ifdef isgraph
../inputs/grep1.dat:43094:#define ISGRAPH(c) (isascii (c) && isgraph (c))
../inputs/grep1.dat:43142:#else
../inputs/grep1.dat:43148:#define ISGRAPH(c) (isascii (c) && isprint (c) && !isspace (c))
../inputs/grep1.dat:43212:#endif
../inputs/grep1.dat:43219:
../inputs/grep1.dat:43220:#define ISPRINT(c) (isascii (c) && isprint (c))
../inputs/grep1.dat:43268:#define ISDIGIT(c) (isascii (c) && isdigit (c))
../inputs/grep1.dat:43316:#define ISALNUM(c) (isascii (c) && isalnum (c))
../inputs/grep1.dat:43364:#define ISALPHA(c) (isascii (c) && isalpha (c))
../inputs/grep1.dat:43412:#define ISCNTRL(c) (isascii (c) && iscntrl (c))
../inputs/grep1.dat:43460:#define ISLOWER(c) (isascii (c) && islower (c))
../inputs/grep1.dat:43508:#define ISPUNCT(c) (isascii (c) && ispunct (c))
../inputs/grep1.dat:43556:#define ISSPACE(c) (isascii (c) && isspace (c))
../inputs/grep1.dat:43604:#define ISUPPER(c) (isascii (c) && isupper (c))
../inputs/grep1.dat:43652:#define ISXDIGIT(c) (isascii (c) && isxdigit (c))
../inputs/grep1.dat:43702:
../inputs/grep1.dat:43703:#ifndef NULL
../inputs/grep1.dat:43716:#define NULL 0
../inputs/grep1.dat:43731:#endif
../inputs/grep1.dat:43738:
../inputs/grep1.dat:43739:/* We remove any previous definition of `SIGN_EXTEND_CHAR',
../inputs/grep1.dat:43799:   since ours (we hope) works properly with all combinations of
../inputs/grep1.dat:43863:   machines, compilers, `char' and `unsigned char' argument types.
../inputs/grep1.dat:43930:   (Per Bothner suggested the basic approach.)  */
../inputs/grep1.dat:43981:#undef SIGN_EXTEND_CHAR
../inputs/grep1.dat:44005:#if __STDC__
../inputs/grep1.dat:44018:#define SIGN_EXTEND_CHAR(c) ((signed char) (c))
../inputs/grep1.dat:44066:#else  /* not __STDC__ */
../inputs/grep1.dat:44092:/* As in Harbison and Steele.  */
../inputs/grep1.dat:44126:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
../inputs/grep1.dat:44192:#endif
../inputs/grep1.dat:44199:
../inputs/grep1.dat:44201:/* Should we use malloc or alloca?  If REGEX_MALLOC is not defined, we
../inputs/grep1.dat:44272:   use `alloca' instead of `malloc'.  This is because using malloc in
../inputs/grep1.dat:44342:   re_search* or re_match* could cause memory leaks when C-g is used in
../inputs/grep1.dat:44414:   Emacs; also, malloc is slower and causes storage fragmentation.  On
../inputs/grep1.dat:44485:   the other hand, malloc is more portable, and easier to debug.  
../inputs/grep1.dat:44552:   
../inputs/grep1.dat:44556:   Because we sometimes use alloca, some routines have to be macros,
../inputs/grep1.dat:44625:   not functions -- `alloca'-allocated space disappears at the end of the
../inputs/grep1.dat:44699:   function it is called in.  */
../inputs/grep1.dat:44732:
../inputs/grep1.dat:44733:#ifdef REGEX_MALLOC
../inputs/grep1.dat:44753:
../inputs/grep1.dat:44754:#define REGEX_ALLOCATE malloc
../inputs/grep1.dat:44784:#define REGEX_REALLOCATE(source, osize, nsize) realloc (source, nsize)
../inputs/grep1.dat:44855:
../inputs/grep1.dat:44856:#else /* not REGEX_MALLOC  */
../inputs/grep1.dat:44886:
../inputs/grep1.dat:44887:/* Emacs already defines alloca, sometimes.  */
../inputs/grep1.dat:44935:#ifndef alloca
../inputs/grep1.dat:44950:
../inputs/grep1.dat:44951:/* Make alloca work the best possible way.  */
../inputs/grep1.dat:44998:#ifdef __GNUC__
../inputs/grep1.dat:45014:#define alloca __builtin_alloca
../inputs/grep1.dat:45046:#else /* not __GNUC__ */
../inputs/grep1.dat:45071:#if HAVE_ALLOCA_H
../inputs/grep1.dat:45089:#if flag_alloca==0
../inputs/grep1.dat:45128:#define flag_alloca 1
../inputs/grep1.dat:45150:#endif 
../inputs/grep1.dat:45158:#else /* not __GNUC__ or HAVE_ALLOCA_H */
../inputs/grep1.dat:45200:#ifndef _AIX /* Already did AIX, up at the top.  */
../inputs/grep1.dat:45252:char *alloca ();
../inputs/grep1.dat:45269:#endif /* not _AIX */
../inputs/grep1.dat:45291:#endif /* not HAVE_ALLOCA_H */ 
../inputs/grep1.dat:45323:#endif /* not __GNUC__ */
../inputs/grep1.dat:45349:
../inputs/grep1.dat:45350:#endif /* not alloca */
../inputs/grep1.dat:45374:
../inputs/grep1.dat:45375:#define REGEX_ALLOCATE alloca
../inputs/grep1.dat:45405:
../inputs/grep1.dat:45406:/* Assumes a `char *destination' variable.  */
../inputs/grep1.dat:45453:#define REGEX_REALLOCATE(source, osize, nsize)				\
../inputs/grep1.dat:45505:  (destination = (char *) alloca (nsize),				\
../inputs/grep1.dat:45552:   bcopy (source, destination, osize),					\
../inputs/grep1.dat:45597:   destination)
../inputs/grep1.dat:45613:
../inputs/grep1.dat:45614:#endif /* not REGEX_MALLOC */
../inputs/grep1.dat:45644:
../inputs/grep1.dat:45645:
../inputs/grep1.dat:45646:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
../inputs/grep1.dat:45713:   `string1' or just past its end.  This works if PTR is NULL, which is
../inputs/grep1.dat:45785:   a good thing.  */
../inputs/grep1.dat:45806:#define FIRST_STRING_P(ptr) 					\
../inputs/grep1.dat:45841:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
../inputs/grep1.dat:45899:
../inputs/grep1.dat:45900:/* (Re)Allocate N items of type T using malloc, or fail.  */
../inputs/grep1.dat:45961:#define TALLOC(n, t) ((t *) malloc ((n) * sizeof (t)))
../inputs/grep1.dat:46016:#define RETALLOC(addr, n, t) ((addr) = (t *) realloc (addr, (n) * sizeof (t)))
../inputs/grep1.dat:46095:#define REGEX_TALLOC(n, t) ((t *) REGEX_ALLOCATE ((n) * sizeof (t)))
../inputs/grep1.dat:46164:
../inputs/grep1.dat:46165:#define BYTEWIDTH 8 /* In bits.  */
../inputs/grep1.dat:46201:
../inputs/grep1.dat:46202:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
../inputs/grep1.dat:46249:
../inputs/grep1.dat:46250:#undef MAX               /****** added later *******/
../inputs/grep1.dat:46304:#define MAX(a, b) ((a) > (b) ? (a) : (b))
../inputs/grep1.dat:46346:#define MIN(a, b) ((a) < (b) ? (a) : (b))
../inputs/grep1.dat:46388:
../inputs/grep1.dat:46389:typedef char boolean;
../inputs/grep1.dat:46411:#define false 0
../inputs/grep1.dat:46427:#define true 1
../inputs/grep1.dat:46442:
../inputs/grep1.dat:46444:/* These are the command codes that appear in compiled regular
../inputs/grep1.dat:46507:   expressions.  Some opcodes are followed by argument bytes.  A
../inputs/grep1.dat:46572:   command code can specify any interpretation whatsoever for its
../inputs/grep1.dat:46638:   arguments.  Zero bytes may appear in the compiled regular expression.
../inputs/grep1.dat:46711:
../inputs/grep1.dat:46712:   The value of `exactn' is needed in search.c (search_buffer) in Emacs.
../inputs/grep1.dat:46785:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
../inputs/grep1.dat:46856:   `exactn' we use here must also be 1.  */
../inputs/grep1.dat:46900:
../inputs/grep1.dat:46901:typedef enum
../inputs/grep1.dat:46914:{
../inputs/grep1.dat:46916:  no_op = 0,
../inputs/grep1.dat:46929:
../inputs/grep1.dat:46930:        /* Followed by one byte giving n, then by n literal bytes.  */
../inputs/grep1.dat:47001:  exactn = 1,
../inputs/grep1.dat:47015:
../inputs/grep1.dat:47016:        /* Matches any (more or less) character.  */
../inputs/grep1.dat:47069:  anychar,
../inputs/grep1.dat:47080:
../inputs/grep1.dat:47081:        /* Matches any one char belonging to specified set.  First
../inputs/grep1.dat:47148:           following byte is number of bitmap bytes.  Then come bytes
../inputs/grep1.dat:47218:           for a bitmap saying which chars are in.  Bits in each byte
../inputs/grep1.dat:47288:           are ordered low-bit-first.  A character is in the set if its
../inputs/grep1.dat:47360:           bit is 1.  A character too large to have a bit in the map is
../inputs/grep1.dat:47432:           automatically not in the set.  */
../inputs/grep1.dat:47477:  charset,
../inputs/grep1.dat:47488:
../inputs/grep1.dat:47489:        /* Same parameters as charset, but match any character that is
../inputs/grep1.dat:47560:           not one of those specified.  */
../inputs/grep1.dat:47603:  charset_not,
../inputs/grep1.dat:47618:
../inputs/grep1.dat:47619:        /* Start remembering the text that is matched, for storing in a
../inputs/grep1.dat:47691:           register.  Followed by one byte with the register number, in
../inputs/grep1.dat:47763:           the range 0 to one less than the pattern buffer's re_nsub
../inputs/grep1.dat:47832:           field.  Then followed by one byte with the number of groups
../inputs/grep1.dat:47903:           inner to this one.  (This last has to be part of the
../inputs/grep1.dat:47967:           start_memory only because we need it in the on_failure_jump
../inputs/grep1.dat:48038:           of re_match_2.)  */
../inputs/grep1.dat:48069:  start_memory,
../inputs/grep1.dat:48085:
../inputs/grep1.dat:48086:        /* Stop remembering the text that is matched and store it in a
../inputs/grep1.dat:48157:           memory register.  Followed by one byte with the register
../inputs/grep1.dat:48225:           number, in the range 0 to one less than `re_nsub' in the
../inputs/grep1.dat:48293:           pattern buffer, and one byte with the number of inner groups,
../inputs/grep1.dat:48366:           just like `start_memory'.  (We need the number of inner
../inputs/grep1.dat:48433:           groups here because we don't have any easy way of finding the
../inputs/grep1.dat:48506:           corresponding start_memory when we're at a stop_memory.)  */
../inputs/grep1.dat:48578:  stop_memory,
../inputs/grep1.dat:48593:
../inputs/grep1.dat:48594:        /* Match a duplicate of something remembered. Followed by one
../inputs/grep1.dat:48664:           byte containing the register number.  */
../inputs/grep1.dat:48716:  duplicate,
../inputs/grep1.dat:48729:
../inputs/grep1.dat:48730:        /* Fail unless at beginning of line.  */
../inputs/grep1.dat:48779:  begline,
../inputs/grep1.dat:48790:
../inputs/grep1.dat:48791:        /* Fail unless at end of line.  */
../inputs/grep1.dat:48834:  endline,
../inputs/grep1.dat:48845:
../inputs/grep1.dat:48846:        /* Succeeds if at beginning of buffer (if emacs) or at beginning
../inputs/grep1.dat:48919:           of string to be matched (if not).  */
../inputs/grep1.dat:48968:  begbuf,
../inputs/grep1.dat:48978:
../inputs/grep1.dat:48979:        /* Analogously, for end of buffer/string.  */
../inputs/grep1.dat:49033:  endbuf,
../inputs/grep1.dat:49043: 
../inputs/grep1.dat:49045:        /* Followed by two byte relative address to which to jump.  */
../inputs/grep1.dat:49116:  jump, 
../inputs/grep1.dat:49125:
../inputs/grep1.dat:49126:	/* Same as jump, but marks the end of an alternative.  */
../inputs/grep1.dat:49185:  jump_past_alt,
../inputs/grep1.dat:49202:
../inputs/grep1.dat:49203:        /* Followed by two-byte relative address of place to resume at
../inputs/grep1.dat:49274:           in case of failure.  */
../inputs/grep1.dat:49309:  on_failure_jump,
../inputs/grep1.dat:49328:	
../inputs/grep1.dat:49330:        /* Like on_failure_jump, but pushes a placeholder instead of the
../inputs/grep1.dat:49403:           current string position when executed.  */
../inputs/grep1.dat:49457:  on_failure_keep_string_jump,
../inputs/grep1.dat:49488:  
../inputs/grep1.dat:49491:        /* Throw away latest failure point and then jump to following
../inputs/grep1.dat:49561:           two-byte relative address.  */
../inputs/grep1.dat:49603:  pop_failure_jump,
../inputs/grep1.dat:49623:
../inputs/grep1.dat:49624:        /* Change to pop_failure_jump if know won't have to backtrack to
../inputs/grep1.dat:49697:           match; otherwise change to jump.  This is used to jump
../inputs/grep1.dat:49763:           back to the beginning of a repeat.  If what follows this jump
../inputs/grep1.dat:49836:           clearly won't match what the repeat does, such that we can be
../inputs/grep1.dat:49909:           sure that there is no use backtracking out of repetitions
../inputs/grep1.dat:49978:           already matched, then we change it to a pop_failure_jump.
../inputs/grep1.dat:50047:           Followed by two-byte address.  */
../inputs/grep1.dat:50092:  maybe_pop_jump,
../inputs/grep1.dat:50110:
../inputs/grep1.dat:50111:        /* Jump to following two-byte address, and push a dummy failure
../inputs/grep1.dat:50183:           point. This failure point will be thrown away if an attempt
../inputs/grep1.dat:50254:           is made to use it for a failure.  A `+' construct makes this
../inputs/grep1.dat:50326:           before the first repeat.  Also used as an intermediary kind
../inputs/grep1.dat:50397:           of jump when compiling an alternative.  */
../inputs/grep1.dat:50451:  dummy_failure_jump,
../inputs/grep1.dat:50473:
../inputs/grep1.dat:50474:	/* Push a dummy failure point and continue.  Used at the end of
../inputs/grep1.dat:50539:	   alternatives.  */
../inputs/grep1.dat:50561:  push_dummy_failure,
../inputs/grep1.dat:50583:
../inputs/grep1.dat:50584:        /* Followed by two-byte relative address and two-byte number n.
../inputs/grep1.dat:50656:           After matching N times, jump to the address upon failure.  */
../inputs/grep1.dat:50729:  succeed_n,
../inputs/grep1.dat:50742:
../inputs/grep1.dat:50743:        /* Followed by two-byte relative address, and two-byte number n.
../inputs/grep1.dat:50816:           Jump to the address N times, then fail.  */
../inputs/grep1.dat:50871:  jump_n,
../inputs/grep1.dat:50881:
../inputs/grep1.dat:50882:        /* Set the following two-byte relative address to the
../inputs/grep1.dat:51015:           bytes of number.  */
../inputs/grep1.dat:51047:  set_number_at,
../inputs/grep1.dat:51064:
../inputs/grep1.dat:51065:  wordchar,	/* Matches any word-constituent character.  */
../inputs/grep1.dat:51124:  notwordchar,	/* Matches any char that is not a word-constituent.  */
../inputs/grep1.dat:51195:
../inputs/grep1.dat:51196:  wordbeg,	/* Succeeds if at word beginning.  */
../inputs/grep1.dat:51245:  wordend,	/* Succeeds if at word end.  */
../inputs/grep1.dat:51288:
../inputs/grep1.dat:51289:  wordbound,	/* Succeeds if at a word boundary.  */
../inputs/grep1.dat:51341:  notwordbound	/* Succeeds if not at a word boundary.  */
../inputs/grep1.dat:51399:
../inputs/grep1.dat:51400:#ifdef emacs
../inputs/grep1.dat:51413:  ,before_dot,	/* Succeeds if before point.  */
../inputs/grep1.dat:51461:  at_dot,	/* Succeeds if at point.  */
../inputs/grep1.dat:51500:  after_dot,	/* Succeeds if after point.  */
../inputs/grep1.dat:51545:
../inputs/grep1.dat:51546:	/* Matches any character whose syntax is specified.  Followed by
../inputs/grep1.dat:51612:           a byte which contains a syntax code, e.g., Sword.  */
../inputs/grep1.dat:51677:  syntaxspec,
../inputs/grep1.dat:51691:
../inputs/grep1.dat:51692:	/* Matches any character whose syntax is not that specified.  */
../inputs/grep1.dat:51758:  notsyntaxspec
../inputs/grep1.dat:51774:#endif /* emacs */
../inputs/grep1.dat:51793:} re_opcode_t;
../inputs/grep1.dat:51808:
../inputs/grep1.dat:51810:/* Common operations on the compiled pattern.  */
../inputs/grep1.dat:51860:
../inputs/grep1.dat:51861:/* Store NUMBER in two contiguous bytes starting at DESTINATION.  */
../inputs/grep1.dat:51930:
../inputs/grep1.dat:51931:#define STORE_NUMBER(destination, number)				\
../inputs/grep1.dat:51978:  do {									\
../inputs/grep1.dat:51995:    (destination)[0] = (number) & 0377;					\
../inputs/grep1.dat:52041:    (destination)[1] = (number) >> 8;					\
../inputs/grep1.dat:52085:  } while (0)
../inputs/grep1.dat:52099:
../inputs/grep1.dat:52100:/* Same as STORE_NUMBER, except increment DESTINATION to
../inputs/grep1.dat:52157:   the byte after where the number is stored.  Therefore, DESTINATION
../inputs/grep1.dat:52227:   must be an lvalue.  */
../inputs/grep1.dat:52253:
../inputs/grep1.dat:52254:#define STORE_NUMBER_AND_INCR(destination, number)			\
../inputs/grep1.dat:52309:  do {									\
../inputs/grep1.dat:52326:    STORE_NUMBER (destination, number);					\
../inputs/grep1.dat:52372:    (destination) += 2;							\
../inputs/grep1.dat:52404:  } while (0)
../inputs/grep1.dat:52418:
../inputs/grep1.dat:52419:/* Put into DESTINATION a number stored in two contiguous bytes starting
../inputs/grep1.dat:52492:   at SOURCE.  */
../inputs/grep1.dat:52510:
../inputs/grep1.dat:52511:#define EXTRACT_NUMBER(destination, source)				\
../inputs/grep1.dat:52560:  do {									\
../inputs/grep1.dat:52577:    (destination) = *(source) & 0377;					\
../inputs/grep1.dat:52621:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
../inputs/grep1.dat:52686:  } while (0)
../inputs/grep1.dat:52700:
../inputs/grep1.dat:52701:#ifdef DEBUG
../inputs/grep1.dat:52714:static void
../inputs/grep1.dat:52726:extract_number (dest, source)
../inputs/grep1.dat:52756:    int *dest;
../inputs/grep1.dat:52771:    unsigned char *source;
../inputs/grep1.dat:52798:{
../inputs/grep1.dat:52800:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
../inputs/grep1.dat:52848:  *dest = *source & 0377;
../inputs/grep1.dat:52874:  *dest += temp << 8;
../inputs/grep1.dat:52896:}
../inputs/grep1.dat:52898:
../inputs/grep1.dat:52899:#ifndef EXTRACT_MACROS /* To debug the macros.  */
../inputs/grep1.dat:52950:#undef EXTRACT_NUMBER
../inputs/grep1.dat:52972:#define EXTRACT_NUMBER(dest, src) extract_number (&dest, src)
../inputs/grep1.dat:53034:#endif /* not EXTRACT_MACROS */
../inputs/grep1.dat:53066:
../inputs/grep1.dat:53067:#endif /* DEBUG */
../inputs/grep1.dat:53086:
../inputs/grep1.dat:53087:/* Same as EXTRACT_NUMBER, except increment SOURCE to after the number.
../inputs/grep1.dat:53159:   SOURCE must be an lvalue.  */
../inputs/grep1.dat:53192:
../inputs/grep1.dat:53193:#define EXTRACT_NUMBER_AND_INCR(destination, source)			\
../inputs/grep1.dat:53250:  do {									\
../inputs/grep1.dat:53267:    EXTRACT_NUMBER (destination, source);				\
../inputs/grep1.dat:53314:    (source) += 2; 							\
../inputs/grep1.dat:53342:  } while (0)
../inputs/grep1.dat:53356:
../inputs/grep1.dat:53357:#ifdef DEBUG
../inputs/grep1.dat:53370:static void
../inputs/grep1.dat:53382:extract_number_and_incr (destination, source)
../inputs/grep1.dat:53428:    int *destination;
../inputs/grep1.dat:53450:    unsigned char **source;
../inputs/grep1.dat:53478:{ 
../inputs/grep1.dat:53481:  extract_number (destination, *source);
../inputs/grep1.dat:53522:  *source += 2;
../inputs/grep1.dat:53538:}
../inputs/grep1.dat:53540:
../inputs/grep1.dat:53541:#ifndef EXTRACT_MACROS
../inputs/grep1.dat:53564:#undef EXTRACT_NUMBER_AND_INCR
../inputs/grep1.dat:53595:#define EXTRACT_NUMBER_AND_INCR(dest, src) \
../inputs/grep1.dat:53640:  extract_number_and_incr (&dest, &src)
../inputs/grep1.dat:53680:#endif /* not EXTRACT_MACROS */
../inputs/grep1.dat:53712:
../inputs/grep1.dat:53713:#endif /* DEBUG */
../inputs/grep1.dat:53732:
../inputs/grep1.dat:53734:/* If DEBUG is defined, Regex prints many voluminous messages about what
../inputs/grep1.dat:53807:   it is doing (if the variable `debug' is nonzero).  If linked with the
../inputs/grep1.dat:53880:   main program in `iregex.c', you can enter patterns and strings
../inputs/grep1.dat:53946:   interactively.  And if linked with the main program in `main.c' and
../inputs/grep1.dat:54017:   the other test files, you can run the already-written tests.  */
../inputs/grep1.dat:54085:
../inputs/grep1.dat:54086:#ifdef DEBUG
../inputs/grep1.dat:54099:
../inputs/grep1.dat:54100:/* We use standard I/O for debugging.  */
../inputs/grep1.dat:54165:
../inputs/grep1.dat:54166:/* It is useful to test things that ``must'' be true when debugging.  */
../inputs/grep1.dat:54259:
../inputs/grep1.dat:54260:static int debug = 0;
../inputs/grep1.dat:54282:
../inputs/grep1.dat:54283:#define DEBUG_STATEMENT(e) e
../inputs/grep1.dat:54312:#define DEBUG_PRINT1(x) if (debug) printf (x)
../inputs/grep1.dat:54358:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
../inputs/grep1.dat:54414:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
../inputs/grep1.dat:54478:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
../inputs/grep1.dat:54550:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e) 				\
../inputs/grep1.dat:54602:  if (debug) print_partial_compiled_pattern (s, e)
../inputs/grep1.dat:54653:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
../inputs/grep1.dat:54712:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
../inputs/grep1.dat:54767:
../inputs/grep1.dat:54768:
../inputs/grep1.dat:54769:extern void printchar ();
../inputs/grep1.dat:54795:
../inputs/grep1.dat:54796:/* Print the fastmap in human-readable form.  */
../inputs/grep1.dat:54845:
../inputs/grep1.dat:54846:void
../inputs/grep1.dat:54851:print_fastmap (fastmap)
../inputs/grep1.dat:54875:    char *fastmap;
../inputs/grep1.dat:54894:{
../inputs/grep1.dat:54896:  unsigned was_a_range = 0;
../inputs/grep1.dat:54924:  unsigned i = 0;  
../inputs/grep1.dat:54944:  
../inputs/grep1.dat:54947:  while (i < (1 << BYTEWIDTH))
../inputs/grep1.dat:54978:    {
../inputs/grep1.dat:54984:      if (fastmap[i++])
../inputs/grep1.dat:55008:	{
../inputs/grep1.dat:55011:	  was_a_range = 0;
../inputs/grep1.dat:55031:          printchar (i - 1);
../inputs/grep1.dat:55060:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
../inputs/grep1.dat:55115:            {
../inputs/grep1.dat:55129:              was_a_range = 1;
../inputs/grep1.dat:55160:              i++;
../inputs/grep1.dat:55179:            }
../inputs/grep1.dat:55193:	  if (was_a_range)
../inputs/grep1.dat:55213:            {
../inputs/grep1.dat:55227:              printf ("-");
../inputs/grep1.dat:55255:              printchar (i - 1);
../inputs/grep1.dat:55288:            }
../inputs/grep1.dat:55302:        }
../inputs/grep1.dat:55312:    }
../inputs/grep1.dat:55318:  putchar ('\n'); 
../inputs/grep1.dat:55337:}
../inputs/grep1.dat:55339:
../inputs/grep1.dat:55340:
../inputs/grep1.dat:55341:/* Print a compiled pattern string in human-readable form, starting at
../inputs/grep1.dat:55412:   the START pointer into it and ending just before the pointer END.  */
../inputs/grep1.dat:55485:
../inputs/grep1.dat:55486:void
../inputs/grep1.dat:55491:print_partial_compiled_pattern (start, end)
../inputs/grep1.dat:55535:    unsigned char *start;
../inputs/grep1.dat:55561:    unsigned char *end;
../inputs/grep1.dat:55585:{
../inputs/grep1.dat:55587:  int mcnt, mcnt2;
../inputs/grep1.dat:55606:  unsigned char *p = start;
../inputs/grep1.dat:55634:  unsigned char *pend = end;
../inputs/grep1.dat:55663:
../inputs/grep1.dat:55664:  if (start == NULL)
../inputs/grep1.dat:55685:    {
../inputs/grep1.dat:55691:      printf ("(null)\n");
../inputs/grep1.dat:55718:      return;
../inputs/grep1.dat:55732:    }
../inputs/grep1.dat:55738:    
../inputs/grep1.dat:55743:  /* Loop over pattern commands.  */
../inputs/grep1.dat:55780:  while (p < pend)
../inputs/grep1.dat:55799:    {
../inputs/grep1.dat:55805:      printf ("%d:\t", p - start);
../inputs/grep1.dat:55840:
../inputs/grep1.dat:55841:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:55875:	{
../inputs/grep1.dat:55878:        case no_op:
../inputs/grep1.dat:55898:          printf ("/no_op");
../inputs/grep1.dat:55927:          break;
../inputs/grep1.dat:55944:
../inputs/grep1.dat:55945:	case exactn:
../inputs/grep1.dat:55959:	  mcnt = *p++;
../inputs/grep1.dat:55975:          printf ("/exactn/%d", mcnt);
../inputs/grep1.dat:56014:          do
../inputs/grep1.dat:56027:	    {
../inputs/grep1.dat:56034:              putchar ('/');
../inputs/grep1.dat:56063:	      printchar (*p++);
../inputs/grep1.dat:56088:            }
../inputs/grep1.dat:56102:          while (--mcnt);
../inputs/grep1.dat:56128:          break;
../inputs/grep1.dat:56145:
../inputs/grep1.dat:56146:	case start_memory:
../inputs/grep1.dat:56166:          mcnt = *p++;
../inputs/grep1.dat:56189:          printf ("/start_memory/%d/%d", mcnt, *p++);
../inputs/grep1.dat:56243:          break;
../inputs/grep1.dat:56260:
../inputs/grep1.dat:56261:	case stop_memory:
../inputs/grep1.dat:56280:          mcnt = *p++;
../inputs/grep1.dat:56303:	  printf ("/stop_memory/%d/%d", mcnt, *p++);
../inputs/grep1.dat:56349:          break;
../inputs/grep1.dat:56366:
../inputs/grep1.dat:56367:	case duplicate:
../inputs/grep1.dat:56384:	  printf ("/duplicate/%d", *p++);
../inputs/grep1.dat:56419:	  break;
../inputs/grep1.dat:56429:
../inputs/grep1.dat:56430:	case anychar:
../inputs/grep1.dat:56445:	  printf ("/anychar");
../inputs/grep1.dat:56469:	  break;
../inputs/grep1.dat:56479:
../inputs/grep1.dat:56480:	case charset:
../inputs/grep1.dat:56495:        case charset_not:
../inputs/grep1.dat:56521:          {
../inputs/grep1.dat:56533:            register int c, last = -100;
../inputs/grep1.dat:56574:	    register int in_range = 0;
../inputs/grep1.dat:56606:
../inputs/grep1.dat:56607:	    printf ("/charset [%s",
../inputs/grep1.dat:56636:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
../inputs/grep1.dat:56700:            
../inputs/grep1.dat:56713:            assert (p + *p < pend);
../inputs/grep1.dat:56749:
../inputs/grep1.dat:56750:            for (c = 0; c < 256; c++)
../inputs/grep1.dat:56788:	      if (c / 8 < *p
../inputs/grep1.dat:56810:		  && (p[1 + (c/8)] & (1 << (c % 8))))
../inputs/grep1.dat:56850:		{
../inputs/grep1.dat:56854:		  /* Are we starting a range?  */
../inputs/grep1.dat:56890:		  if (last + 1 == c && ! in_range)
../inputs/grep1.dat:56927:		    {
../inputs/grep1.dat:56935:		      putchar ('-');
../inputs/grep1.dat:56958:		      in_range = 1;
../inputs/grep1.dat:56980:		    }
../inputs/grep1.dat:56988:		  /* Have we broken a range?  */
../inputs/grep1.dat:57023:		  else if (last + 1 != c && in_range)
../inputs/grep1.dat:57063:              {
../inputs/grep1.dat:57079:		      printchar (last);
../inputs/grep1.dat:57105:		      in_range = 0;
../inputs/grep1.dat:57127:		    }
../inputs/grep1.dat:57135:                
../inputs/grep1.dat:57152:		  if (! in_range)
../inputs/grep1.dat:57172:		    printchar (c);
../inputs/grep1.dat:57193:
../inputs/grep1.dat:57194:		  last = c;
../inputs/grep1.dat:57208:              }
../inputs/grep1.dat:57224:
../inputs/grep1.dat:57225:	    if (in_range)
../inputs/grep1.dat:57244:	      printchar (last);
../inputs/grep1.dat:57269:
../inputs/grep1.dat:57270:	    putchar (']');
../inputs/grep1.dat:57290:
../inputs/grep1.dat:57291:	    p += 1 + *p;
../inputs/grep1.dat:57309:	  }
../inputs/grep1.dat:57314:	  break;
../inputs/grep1.dat:57324:
../inputs/grep1.dat:57325:	case begline:
../inputs/grep1.dat:57340:	  printf ("/begline");
../inputs/grep1.dat:57364:          break;
../inputs/grep1.dat:57381:
../inputs/grep1.dat:57382:	case endline:
../inputs/grep1.dat:57397:          printf ("/endline");
../inputs/grep1.dat:57428:          break;
../inputs/grep1.dat:57445:
../inputs/grep1.dat:57446:	case on_failure_jump:
../inputs/grep1.dat:57469:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:57516:  	  printf ("/on_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:57574:          break;
../inputs/grep1.dat:57591:
../inputs/grep1.dat:57592:	case on_failure_keep_string_jump:
../inputs/grep1.dat:57627:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:57674:  	  printf ("/on_failure_keep_string_jump to %d", p + mcnt - start);
../inputs/grep1.dat:57744:          break;
../inputs/grep1.dat:57761:
../inputs/grep1.dat:57762:	case dummy_failure_jump:
../inputs/grep1.dat:57788:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:57835:  	  printf ("/dummy_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:57896:          break;
../inputs/grep1.dat:57913:
../inputs/grep1.dat:57914:	case push_dummy_failure:
../inputs/grep1.dat:57940:          printf ("/push_dummy_failure");
../inputs/grep1.dat:57982:          break;
../inputs/grep1.dat:57999:          
../inputs/grep1.dat:58010:        case maybe_pop_jump:
../inputs/grep1.dat:58039:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58086:  	  printf ("/maybe_pop_jump to %d", p + mcnt - start);
../inputs/grep1.dat:58143:	  break;
../inputs/grep1.dat:58153:
../inputs/grep1.dat:58154:        case pop_failure_jump:
../inputs/grep1.dat:58185:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58225:  	  printf ("/pop_failure_jump to %d", p + mcnt - start);
../inputs/grep1.dat:58284:	  break;          
../inputs/grep1.dat:58304:          
../inputs/grep1.dat:58315:        case jump_past_alt:
../inputs/grep1.dat:58343:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58383:  	  printf ("/jump_past_alt to %d", p + mcnt - start);
../inputs/grep1.dat:58439:	  break;          
../inputs/grep1.dat:58459:          
../inputs/grep1.dat:58470:        case jump:
../inputs/grep1.dat:58489:	  extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58529:  	  printf ("/jump to %d", p + mcnt - start);
../inputs/grep1.dat:58576:	  break;
../inputs/grep1.dat:58586:
../inputs/grep1.dat:58587:        case succeed_n: 
../inputs/grep1.dat:58612:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58659:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:58707:	  printf ("/succeed_n to %d, %d times", p + mcnt - start, mcnt2);
../inputs/grep1.dat:58774:          break;
../inputs/grep1.dat:58791:        
../inputs/grep1.dat:58800:        case jump_n: 
../inputs/grep1.dat:58822:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:58869:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:58917:	  printf ("/jump_n to %d, %d times", p + mcnt - start, mcnt2);
../inputs/grep1.dat:58981:          break;
../inputs/grep1.dat:58998:        
../inputs/grep1.dat:59007:        case set_number_at: 
../inputs/grep1.dat:59036:          extract_number_and_incr (&mcnt, &p);
../inputs/grep1.dat:59083:          extract_number_and_incr (&mcnt2, &p);
../inputs/grep1.dat:59131:	  printf ("/set_number_at location %d to %d", p + mcnt - start, mcnt2);
../inputs/grep1.dat:59204:          break;
../inputs/grep1.dat:59221:        
../inputs/grep1.dat:59230:        case wordbound:
../inputs/grep1.dat:59254:	  printf ("/wordbound");
../inputs/grep1.dat:59280:	  break;
../inputs/grep1.dat:59290:
../inputs/grep1.dat:59291:	case notwordbound:
../inputs/grep1.dat:59311:	  printf ("/notwordbound");
../inputs/grep1.dat:59340:          break;
../inputs/grep1.dat:59357:
../inputs/grep1.dat:59358:	case wordbeg:
../inputs/grep1.dat:59373:	  printf ("/wordbeg");
../inputs/grep1.dat:59397:	  break;
../inputs/grep1.dat:59407:          
../inputs/grep1.dat:59418:	case wordend:
../inputs/grep1.dat:59433:	  printf ("/wordend");
../inputs/grep1.dat:59457:          
../inputs/grep1.dat:59468:#ifdef emacs
../inputs/grep1.dat:59481:	case before_dot:
../inputs/grep1.dat:59499:	  printf ("/before_dot");
../inputs/grep1.dat:59526:          break;
../inputs/grep1.dat:59543:
../inputs/grep1.dat:59544:	case at_dot:
../inputs/grep1.dat:59558:	  printf ("/at_dot");
../inputs/grep1.dat:59581:          break;
../inputs/grep1.dat:59598:
../inputs/grep1.dat:59599:	case after_dot:
../inputs/grep1.dat:59616:	  printf ("/after_dot");
../inputs/grep1.dat:59642:          break;
../inputs/grep1.dat:59659:
../inputs/grep1.dat:59660:	case syntaxspec:
../inputs/grep1.dat:59678:          printf ("/syntaxspec");
../inputs/grep1.dat:59712:	  mcnt = *p++;
../inputs/grep1.dat:59728:	  printf ("/%d", mcnt);
../inputs/grep1.dat:59753:          break;
../inputs/grep1.dat:59770:	  
../inputs/grep1.dat:59774:	case notsyntaxspec:
../inputs/grep1.dat:59795:          printf ("/notsyntaxspec");
../inputs/grep1.dat:59832:	  mcnt = *p++;
../inputs/grep1.dat:59848:	  printf ("/%d", mcnt);
../inputs/grep1.dat:59873:	  break;
../inputs/grep1.dat:59883:#endif /* emacs */
../inputs/grep1.dat:59902:
../inputs/grep1.dat:59903:	case wordchar:
../inputs/grep1.dat:59919:	  printf ("/wordchar");
../inputs/grep1.dat:59944:          break;
../inputs/grep1.dat:59961:	  
../inputs/grep1.dat:59965:	case notwordchar:
../inputs/grep1.dat:59984:	  printf ("/notwordchar");
../inputs/grep1.dat:60012:          break;
../inputs/grep1.dat:60029:
../inputs/grep1.dat:60030:	case begbuf:
../inputs/grep1.dat:60044:	  printf ("/begbuf");
../inputs/grep1.dat:60067:          break;
../inputs/grep1.dat:60084:
../inputs/grep1.dat:60085:	case endbuf:
../inputs/grep1.dat:60099:	  printf ("/endbuf");
../inputs/grep1.dat:60122:          break;
../inputs/grep1.dat:60139:
../inputs/grep1.dat:60140:        default:
../inputs/grep1.dat:60157:          printf ("?%d", *(p-1));
../inputs/grep1.dat:60191:	}
../inputs/grep1.dat:60194:
../inputs/grep1.dat:60195:      putchar ('\n');
../inputs/grep1.dat:60217:    }
../inputs/grep1.dat:60223:
../inputs/grep1.dat:60224:  printf ("%d:\tend of pattern.\n", p - start);
../inputs/grep1.dat:60272:}
../inputs/grep1.dat:60274:
../inputs/grep1.dat:60275:
../inputs/grep1.dat:60276:void
../inputs/grep1.dat:60281:print_compiled_pattern (bufp)
../inputs/grep1.dat:60311:    struct re_pattern_buffer *bufp;
../inputs/grep1.dat:60347:{
../inputs/grep1.dat:60349:  unsigned char *buffer = bufp->buffer;
../inputs/grep1.dat:60389:
../inputs/grep1.dat:60390:  print_partial_compiled_pattern (buffer, buffer + bufp->used);
../inputs/grep1.dat:60454:  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
../inputs/grep1.dat:60533:
../inputs/grep1.dat:60534:  if (bufp->fastmap_accurate && bufp->fastmap)
../inputs/grep1.dat:60581:    {
../inputs/grep1.dat:60587:      printf ("fastmap: ");
../inputs/grep1.dat:60615:      print_fastmap (bufp->fastmap);
../inputs/grep1.dat:60652:    }
../inputs/grep1.dat:60658:
../inputs/grep1.dat:60659:  printf ("re_nsub: %d\t", bufp->re_nsub);
../inputs/grep1.dat:60702:  printf ("regs_alloc: %d\t", bufp->regs_allocated);
../inputs/grep1.dat:60755:  printf ("can_be_null: %d\t", bufp->can_be_null);
../inputs/grep1.dat:60806:  printf ("newline_anchor: %d\n", bufp->newline_anchor);
../inputs/grep1.dat:60863:  printf ("no_sub: %d\t", bufp->no_sub);
../inputs/grep1.dat:60904:  printf ("not_bol: %d\t", bufp->not_bol);
../inputs/grep1.dat:60947:  printf ("not_eol: %d\t", bufp->not_eol);
../inputs/grep1.dat:60990:  printf ("syntax: %d\n", bufp->syntax);
../inputs/grep1.dat:61031:  /* Perhaps we should print the translate table?  */
../inputs/grep1.dat:61085:}
../inputs/grep1.dat:61087:
../inputs/grep1.dat:61088:
../inputs/grep1.dat:61089:void
../inputs/grep1.dat:61094:print_double_string (where, string1, size1, string2, size2)
../inputs/grep1.dat:61154:    const char *where;
../inputs/grep1.dat:61177:    const char *string1;
../inputs/grep1.dat:61202:    const char *string2;
../inputs/grep1.dat:61227:    int size1;
../inputs/grep1.dat:61242:    int size2;
../inputs/grep1.dat:61257:{
../inputs/grep1.dat:61259:  unsigned this_char;
../inputs/grep1.dat:61281:  
../inputs/grep1.dat:61284:  if (where == NULL)
../inputs/grep1.dat:61305:    printf ("(null)");
../inputs/grep1.dat:61328:  else
../inputs/grep1.dat:61335:    {
../inputs/grep1.dat:61341:      if (FIRST_STRING_P (where))
../inputs/grep1.dat:61375:        {
../inputs/grep1.dat:61385:          for (this_char = where - string1; this_char < size1; this_char++)
../inputs/grep1.dat:61461:            printchar (string1[this_char]);
../inputs/grep1.dat:61505:
../inputs/grep1.dat:61506:          where = string2;    
../inputs/grep1.dat:61537:        }
../inputs/grep1.dat:61547:
../inputs/grep1.dat:61548:      for (this_char = where - string2; this_char < size2; this_char++)
../inputs/grep1.dat:61620:        printchar (string2[this_char]);
../inputs/grep1.dat:61660:    }
../inputs/grep1.dat:61666:}
../inputs/grep1.dat:61668:
../inputs/grep1.dat:61669:#else /* not DEBUG */
../inputs/grep1.dat:61691:
../inputs/grep1.dat:61692:#undef assert
../inputs/grep1.dat:61706:#define assert(e)
../inputs/grep1.dat:61724:
../inputs/grep1.dat:61725:#define DEBUG_STATEMENT(e)
../inputs/grep1.dat:61752:#define DEBUG_PRINT1(x)
../inputs/grep1.dat:61776:#define DEBUG_PRINT2(x1, x2)
../inputs/grep1.dat:61805:#define DEBUG_PRINT3(x1, x2, x3)
../inputs/grep1.dat:61838:#define DEBUG_PRINT4(x1, x2, x3, x4)
../inputs/grep1.dat:61875:#define DEBUG_PRINT_COMPILED_PATTERN(p, s, e)
../inputs/grep1.dat:61921:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
../inputs/grep1.dat:61976:
../inputs/grep1.dat:61977:#endif /* not DEBUG */
../inputs/grep1.dat:62000:
../inputs/grep1.dat:62002:/* Set by `re_set_syntax' to the current regexp syntax to recognize.  Can
../inputs/grep1.dat:62076:   also be assigned to arbitrarily: each pattern buffer stores its own
../inputs/grep1.dat:62147:   syntax, so it can be changed between regex compilations.  */
../inputs/grep1.dat:62211:reg_syntax_t re_syntax_options = RE_SYNTAX_EMACS;
../inputs/grep1.dat:62261:
../inputs/grep1.dat:62262:
../inputs/grep1.dat:62263:/* Specify the precise syntax of regexps for compilation.  This provides
../inputs/grep1.dat:62336:   for compatibility for various utilities which historically have
../inputs/grep1.dat:62403:   different, incompatible syntaxes.
../inputs/grep1.dat:62440:
../inputs/grep1.dat:62441:   The argument SYNTAX is a bit mask comprised of the various bits
../inputs/grep1.dat:62508:   defined in regex.h.  We return the old syntax.  */
../inputs/grep1.dat:62562:
../inputs/grep1.dat:62563:reg_syntax_t
../inputs/grep1.dat:62576:re_set_syntax (syntax)
../inputs/grep1.dat:62599:    reg_syntax_t syntax;
../inputs/grep1.dat:62624:{
../inputs/grep1.dat:62626:  reg_syntax_t ret = re_syntax_options;
../inputs/grep1.dat:62666:  
../inputs/grep1.dat:62669:  re_syntax_options = syntax;
../inputs/grep1.dat:62699:  return ret;
../inputs/grep1.dat:62713:}
../inputs/grep1.dat:62715:
../inputs/grep1.dat:62717:/* This table gives an error message for each of the error codes listed
../inputs/grep1.dat:62789:   in regex.h.  Obviously the order here has to be same as there.  */
../inputs/grep1.dat:62859:
../inputs/grep1.dat:62860:static const char *re_error_msg[] =
../inputs/grep1.dat:62896:  { NULL,					/* REG_NOERROR */
../inputs/grep1.dat:62928:    "No match",					/* REG_NOMATCH */
../inputs/grep1.dat:62966:    "Invalid regular expression",		/* REG_BADPAT */
../inputs/grep1.dat:63018:    "Invalid collation character",		/* REG_ECOLLATE */
../inputs/grep1.dat:63073:    "Invalid character class name",		/* REG_ECTYPE */
../inputs/grep1.dat:63127:    "Trailing backslash",			/* REG_EESCAPE */
../inputs/grep1.dat:63173:    "Invalid back reference",			/* REG_ESUBREG */
../inputs/grep1.dat:63223:    "Unmatched [ or [^",			/* REG_EBRACK */
../inputs/grep1.dat:63267:    "Unmatched ( or \\(",			/* REG_EPAREN */
../inputs/grep1.dat:63312:    "Unmatched \\{",				/* REG_EBRACE */
../inputs/grep1.dat:63353:    "Invalid content of \\{\\}",		/* REG_BADBR */
../inputs/grep1.dat:63403:    "Invalid range end",			/* REG_ERANGE */
../inputs/grep1.dat:63447:    "Memory exhausted",				/* REG_ESPACE */
../inputs/grep1.dat:63491:    "Invalid preceding regular expression",	/* REG_BADRPT */
../inputs/grep1.dat:63552:    "Premature end of regular expression",	/* REG_EEND */
../inputs/grep1.dat:63610:    "Regular expression too big",		/* REG_ESIZE */
../inputs/grep1.dat:63661:    "Unmatched ) or \\)",			/* REG_ERPAREN */
../inputs/grep1.dat:63707:  };
../inputs/grep1.dat:63712:
../inputs/grep1.dat:63714:/* Subroutine declarations and macros for regex_compile.  */
../inputs/grep1.dat:63775:
../inputs/grep1.dat:63776:static void store_op1 (), store_op2 ();
../inputs/grep1.dat:63816:static void insert_op1 (), insert_op2 ();
../inputs/grep1.dat:63858:static boolean at_begline_loc_p (), at_endline_loc_p ();
../inputs/grep1.dat:63915:static boolean group_in_compile_stack ();
../inputs/grep1.dat:63957:static reg_errcode_t compile_range ();
../inputs/grep1.dat:63996:
../inputs/grep1.dat:63997:/* Fetch the next character in the uncompiled pattern---translating it 
../inputs/grep1.dat:64069:   if necessary.  Also cast from a signed character in the constant
../inputs/grep1.dat:64137:   string passed to us by the user to an unsigned char that we can use
../inputs/grep1.dat:64208:   as an array index (in, e.g., `translate').  */
../inputs/grep1.dat:64258:#define PATFETCH(c)							\
../inputs/grep1.dat:64286:  do {if (p == pend) return REG_EEND;					\
../inputs/grep1.dat:64330:    c = (unsigned char) *p++;						\
../inputs/grep1.dat:64367:    if (translate) c = translate[c]; 					\
../inputs/grep1.dat:64411:  } while (0)
../inputs/grep1.dat:64425:
../inputs/grep1.dat:64426:/* Fetch the next character in the uncompiled pattern, with no
../inputs/grep1.dat:64489:   translation.  */
../inputs/grep1.dat:64509:#define PATFETCH_RAW(c)							\
../inputs/grep1.dat:64541:  do {if (p == pend) return REG_EEND;					\
../inputs/grep1.dat:64585:    c = (unsigned char) *p++; 						\
../inputs/grep1.dat:64623:  } while (0)
../inputs/grep1.dat:64637:
../inputs/grep1.dat:64638:/* Go backwards one character in the pattern.  */
../inputs/grep1.dat:64688:#define PATUNFETCH p--
../inputs/grep1.dat:64711:
../inputs/grep1.dat:64712:
../inputs/grep1.dat:64713:/* If `translate' is non-null, return translate[D], else just D.  We
../inputs/grep1.dat:64782:   cast the subscript to translate because some data is declared as
../inputs/grep1.dat:64850:   `char *', to avoid warnings when a string constant is passed.  But
../inputs/grep1.dat:64920:   when we use a character as a subscript we must make it unsigned.  */
../inputs/grep1.dat:64992:#define TRANSLATE(d) (translate ? translate[(unsigned char) (d)] : (d))
../inputs/grep1.dat:65064:
../inputs/grep1.dat:65065:
../inputs/grep1.dat:65066:/* Macros for outputting the compiled pattern into `buffer'.  */
../inputs/grep1.dat:65131:
../inputs/grep1.dat:65132:/* If the buffer isn't allocated when it comes in, use this.  */
../inputs/grep1.dat:65197:#define INIT_BUF_SIZE  32
../inputs/grep1.dat:65223:
../inputs/grep1.dat:65224:/* Make sure we have at least N more bytes of space in buffer.  */
../inputs/grep1.dat:65291:#define GET_BUFFER_SPACE(n)						\
../inputs/grep1.dat:65326:    while (b - bufp->buffer + (n) > bufp->allocated)			\
../inputs/grep1.dat:65383:      EXTEND_BUFFER ()
../inputs/grep1.dat:65406:
../inputs/grep1.dat:65407:/* Make sure we have one more byte of buffer space and then add C to it.  */
../inputs/grep1.dat:65484:#define BUF_PUSH(c)							\
../inputs/grep1.dat:65512:  do {									\
../inputs/grep1.dat:65529:    GET_BUFFER_SPACE (1);						\
../inputs/grep1.dat:65562:    *b++ = (unsigned char) (c);						\
../inputs/grep1.dat:65601:  } while (0)
../inputs/grep1.dat:65615:
../inputs/grep1.dat:65616:
../inputs/grep1.dat:65617:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
../inputs/grep1.dat:65697:#define BUF_PUSH_2(c1, c2)						\
../inputs/grep1.dat:65731:  do {									\
../inputs/grep1.dat:65748:    GET_BUFFER_SPACE (2);						\
../inputs/grep1.dat:65781:    *b++ = (unsigned char) (c1);					\
../inputs/grep1.dat:65820:    *b++ = (unsigned char) (c2);					\
../inputs/grep1.dat:65859:  } while (0)
../inputs/grep1.dat:65873:
../inputs/grep1.dat:65874:
../inputs/grep1.dat:65875:/* As with BUF_PUSH_2, except for three bytes.  */
../inputs/grep1.dat:65926:#define BUF_PUSH_3(c1, c2, c3)						\
../inputs/grep1.dat:65964:  do {									\
../inputs/grep1.dat:65981:    GET_BUFFER_SPACE (3);						\
../inputs/grep1.dat:66014:    *b++ = (unsigned char) (c1);					\
../inputs/grep1.dat:66053:    *b++ = (unsigned char) (c2);					\
../inputs/grep1.dat:66092:    *b++ = (unsigned char) (c3);					\
../inputs/grep1.dat:66131:  } while (0)
../inputs/grep1.dat:66145:
../inputs/grep1.dat:66146:
../inputs/grep1.dat:66147:/* Store a jump with opcode OP at LOC to location TO.  We store a
../inputs/grep1.dat:66213:   relative address offset by the three bytes the jump itself occupies.  */
../inputs/grep1.dat:66289:#define STORE_JUMP(op, loc, to) \
../inputs/grep1.dat:66323:  store_op1 (op, loc, (to) - (loc) - 3)
../inputs/grep1.dat:66363:
../inputs/grep1.dat:66364:/* Likewise, for a two-argument jump.  */
../inputs/grep1.dat:66406:#define STORE_JUMP2(op, loc, to, arg) \
../inputs/grep1.dat:66446:  store_op2 (op, loc, (to) - (loc) - 3, arg)
../inputs/grep1.dat:66491:
../inputs/grep1.dat:66492:/* Like `STORE_JUMP', but for inserting.  Assume `b' is the buffer end.  */
../inputs/grep1.dat:66568:#define INSERT_JUMP(op, loc, to) \
../inputs/grep1.dat:66603:  insert_op1 (op, loc, (to) - (loc) - 3, b)
../inputs/grep1.dat:66647:
../inputs/grep1.dat:66648:/* Like `STORE_JUMP2', but for inserting.  Assume `b' is the buffer end.  */
../inputs/grep1.dat:66725:#define INSERT_JUMP2(op, loc, to, arg) \
../inputs/grep1.dat:66766:  insert_op2 (op, loc, (to) - (loc) - 3, arg, b)
../inputs/grep1.dat:66815:
../inputs/grep1.dat:66816:
../inputs/grep1.dat:66817:/* This is not an arbitrary limit: the arguments which represent offsets
../inputs/grep1.dat:66890:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
../inputs/grep1.dat:66961:   be too small, many things would have to change.  */
../inputs/grep1.dat:67016:#define MAX_BUF_SIZE (1L << 16)
../inputs/grep1.dat:67048:
../inputs/grep1.dat:67049:
../inputs/grep1.dat:67050:/* Extend the buffer by twice its current size via realloc and
../inputs/grep1.dat:67113:   reset the pointers that pointed into the old block to point to the
../inputs/grep1.dat:67183:   correct places in the new one.  If extending the buffer results in it
../inputs/grep1.dat:67256:   being larger than MAX_BUF_SIZE, then flag memory exhausted.  */
../inputs/grep1.dat:67323:#define EXTEND_BUFFER()							\
../inputs/grep1.dat:67355:  do { 									\
../inputs/grep1.dat:67373:    unsigned char *old_buffer = bufp->buffer;				\
../inputs/grep1.dat:67424:    if (bufp->allocated == MAX_BUF_SIZE) 				\
../inputs/grep1.dat:67471:      return REG_ESIZE;							\
../inputs/grep1.dat:67503:    bufp->allocated <<= 1;						\
../inputs/grep1.dat:67537:    if (bufp->allocated > MAX_BUF_SIZE)					\
../inputs/grep1.dat:67583:      bufp->allocated = MAX_BUF_SIZE; 					\
../inputs/grep1.dat:67628:    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
../inputs/grep1.dat:67707:    if (bufp->buffer == NULL)						\
../inputs/grep1.dat:67744:      return REG_ESPACE;						\
../inputs/grep1.dat:67776:    /* If the buffer moved, move all the pointers into it.  */		\
../inputs/grep1.dat:67842:    if (old_buffer != bufp->buffer)					\
../inputs/grep1.dat:67884:      {									\
../inputs/grep1.dat:67902:        b = (b - old_buffer) + bufp->buffer;				\
../inputs/grep1.dat:67952:        begalt = (begalt - old_buffer) + bufp->buffer;			\
../inputs/grep1.dat:68011:        if (fixup_alt_jump)						\
../inputs/grep1.dat:68046:          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
../inputs/grep1.dat:68120:        if (laststart)							\
../inputs/grep1.dat:68151:          laststart = (laststart - old_buffer) + bufp->buffer;		\
../inputs/grep1.dat:68217:        if (pending_exact)						\
../inputs/grep1.dat:68251:          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
../inputs/grep1.dat:68324:      }									\
../inputs/grep1.dat:68342:  } while (0)
../inputs/grep1.dat:68356:
../inputs/grep1.dat:68357:
../inputs/grep1.dat:68358:/* Since we have one byte reserved for the register number argument to
../inputs/grep1.dat:68429:   {start,stop}_memory, the maximum number of groups we can report
../inputs/grep1.dat:68496:   things about is what fits in that byte.  */
../inputs/grep1.dat:68543:#define MAX_REGNUM 255
../inputs/grep1.dat:68566:
../inputs/grep1.dat:68567:/* But patterns can have more than `MAX_REGNUM' registers.  We just
../inputs/grep1.dat:68635:   ignore the excess.  */
../inputs/grep1.dat:68661:typedef unsigned regnum_t;
../inputs/grep1.dat:68688:
../inputs/grep1.dat:68689:
../inputs/grep1.dat:68690:/* Macros for the compile stack.  */
../inputs/grep1.dat:68727:
../inputs/grep1.dat:68728:/* Since offsets can go either forwards or backwards, this type needs to
../inputs/grep1.dat:68801:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
../inputs/grep1.dat:68877:typedef int pattern_offset_t;
../inputs/grep1.dat:68907:
../inputs/grep1.dat:68908:typedef struct
../inputs/grep1.dat:68923:{
../inputs/grep1.dat:68925:  pattern_offset_t begalt_offset;
../inputs/grep1.dat:68959:  pattern_offset_t fixup_alt_jump;
../inputs/grep1.dat:68994:  pattern_offset_t inner_group_offset;
../inputs/grep1.dat:69033:  pattern_offset_t laststart_offset;  
../inputs/grep1.dat:69072:  regnum_t regnum;
../inputs/grep1.dat:69091:} compile_stack_elt_t;
../inputs/grep1.dat:69114:
../inputs/grep1.dat:69115:
../inputs/grep1.dat:69116:typedef struct
../inputs/grep1.dat:69131:{
../inputs/grep1.dat:69133:  compile_stack_elt_t *stack;
../inputs/grep1.dat:69163:  unsigned size;
../inputs/grep1.dat:69180:  unsigned avail;			/* Offset of next open position.  */
../inputs/grep1.dat:69237:} compile_stack_type;
../inputs/grep1.dat:69259:
../inputs/grep1.dat:69260:
../inputs/grep1.dat:69261:#define INIT_COMPILE_STACK_SIZE 32
../inputs/grep1.dat:69296:
../inputs/grep1.dat:69297:#define COMPILE_STACK_EMPTY  (compile_stack.avail == 0)
../inputs/grep1.dat:69353:#define COMPILE_STACK_FULL  (compile_stack.avail == compile_stack.size)
../inputs/grep1.dat:69425:
../inputs/grep1.dat:69426:/* The next available element.  */
../inputs/grep1.dat:69461:#define COMPILE_STACK_TOP (compile_stack.stack[compile_stack.avail])
../inputs/grep1.dat:69530:
../inputs/grep1.dat:69531:
../inputs/grep1.dat:69532:/* Set the bit for character C in a list.  */
../inputs/grep1.dat:69578:#define SET_LIST_BIT(c)                               \
../inputs/grep1.dat:69634:  (b[((unsigned char) (c)) / BYTEWIDTH]               \
../inputs/grep1.dat:69690:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
../inputs/grep1.dat:69736:
../inputs/grep1.dat:69737:
../inputs/grep1.dat:69738:/* Get the next unsigned number in the uncompiled pattern.  */
../inputs/grep1.dat:69801:#define GET_UNSIGNED_NUMBER(num) 					\
../inputs/grep1.dat:69841:  { if (p != pend)							\
../inputs/grep1.dat:69868:     {									\
../inputs/grep1.dat:69885:       PATFETCH (c); 							\
../inputs/grep1.dat:69915:       while (ISDIGIT (c)) 						\
../inputs/grep1.dat:69950:         { 								\
../inputs/grep1.dat:69971:           if (num < 0)							\
../inputs/grep1.dat:70003:              num = 0;							\
../inputs/grep1.dat:70034:           num = num * 10 + c - '0'; 					\
../inputs/grep1.dat:70078:           if (p == pend) 						\
../inputs/grep1.dat:70112:              break; 							\
../inputs/grep1.dat:70142:           PATFETCH (c);						\
../inputs/grep1.dat:70174:         } 								\
../inputs/grep1.dat:70195:       } 								\
../inputs/grep1.dat:70214:    }		
../inputs/grep1.dat:70222:
../inputs/grep1.dat:70223:#define CHAR_CLASS_MAX_LENGTH  6 /* Namely, `xdigit'.  */
../inputs/grep1.dat:70281:
../inputs/grep1.dat:70282:#define IS_CHAR_CLASS(string)						\
../inputs/grep1.dat:70319:   (STREQ (string, "alpha") || STREQ (string, "upper")			\
../inputs/grep1.dat:70378:    || STREQ (string, "lower") || STREQ (string, "digit")		\
../inputs/grep1.dat:70439:    || STREQ (string, "alnum") || STREQ (string, "xdigit")		\
../inputs/grep1.dat:70501:    || STREQ (string, "space") || STREQ (string, "print")		\
../inputs/grep1.dat:70562:    || STREQ (string, "punct") || STREQ (string, "graph")		\
../inputs/grep1.dat:70623:    || STREQ (string, "cntrl") || STREQ (string, "blank"))
../inputs/grep1.dat:70682:
../inputs/grep1.dat:70684:/* `regex_compile' compiles PATTERN (of length SIZE) according to SYNTAX.
../inputs/grep1.dat:70758:   Returns one of error codes defined in `regex.h', or zero for success.
../inputs/grep1.dat:70831:
../inputs/grep1.dat:70832:   Assumes the `allocated' (and perhaps `buffer') and `translate'
../inputs/grep1.dat:70898:   fields are set in BUFP on entry.
../inputs/grep1.dat:70934:
../inputs/grep1.dat:70935:   If it succeeds, results are put in BUFP (if it returns an error, the
../inputs/grep1.dat:71007:   contents of BUFP are undefined):
../inputs/grep1.dat:71043:     `buffer' is the compiled pattern;
../inputs/grep1.dat:71082:     `syntax' is set to SYNTAX;
../inputs/grep1.dat:71114:     `used' is set to the length of the compiled pattern;
../inputs/grep1.dat:71172:     `fastmap_accurate' is zero;
../inputs/grep1.dat:71205:     `re_nsub' is the number of subexpressions in PATTERN;
../inputs/grep1.dat:71264:     `not_bol' and `not_eol' are zero;
../inputs/grep1.dat:71303:   
../inputs/grep1.dat:71307:   The `fastmap' and `newline_anchor' fields are neither
../inputs/grep1.dat:71364:   examined nor set.  */
../inputs/grep1.dat:71389:
../inputs/grep1.dat:71390:static reg_errcode_t
../inputs/grep1.dat:71411:regex_compile (pattern, size, syntax, bufp)
../inputs/grep1.dat:71455:     const char *pattern;
../inputs/grep1.dat:71481:     int size;
../inputs/grep1.dat:71496:     reg_syntax_t syntax;
../inputs/grep1.dat:71522:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:71559:{
../inputs/grep1.dat:71561:  /* We fetch characters from PATTERN here.  Even though PATTERN is
../inputs/grep1.dat:71629:     `char *' (i.e., signed), we declare these variables as unsigned, so
../inputs/grep1.dat:71702:     they can be reliably used as array indices.  */
../inputs/grep1.dat:71755:  register unsigned char c, c1;
../inputs/grep1.dat:71787:  
../inputs/grep1.dat:71790:  /* A random tempory spot in PATTERN.  */
../inputs/grep1.dat:71833:  const char *p1;
../inputs/grep1.dat:71851:
../inputs/grep1.dat:71852:  /* Points to the end of the buffer, where we should append.  */
../inputs/grep1.dat:71918:  register unsigned char *b;
../inputs/grep1.dat:71947:  
../inputs/grep1.dat:71950:  /* Keeps track of unclosed groups.  */
../inputs/grep1.dat:71991:  compile_stack_type compile_stack;
../inputs/grep1.dat:72027:
../inputs/grep1.dat:72028:  /* Points to the current (ending) position in the pattern.  */
../inputs/grep1.dat:72093:  const char *p = pattern;
../inputs/grep1.dat:72120:  const char *pend = pattern + size;
../inputs/grep1.dat:72157:  
../inputs/grep1.dat:72160:  /* How to translate the characters in the pattern.  */
../inputs/grep1.dat:72217:  char *translate = bufp->translate;
../inputs/grep1.dat:72254:
../inputs/grep1.dat:72255:  /* Address of the count-byte of the most recently inserted `exactn'
../inputs/grep1.dat:72325:     command.  This makes it possible to tell if a new exact-match
../inputs/grep1.dat:72392:     character can be added to that command or if the character requires
../inputs/grep1.dat:72465:     a new `exactn' command.  */
../inputs/grep1.dat:72498:  unsigned char *pending_exact = 0;
../inputs/grep1.dat:72534:
../inputs/grep1.dat:72535:  /* Address of start of the most recently finished expression.
../inputs/grep1.dat:72599:     This tells, e.g., postfix * where to find the start of its
../inputs/grep1.dat:72663:     operand.  Reset at the beginning of groups and alternatives.  */
../inputs/grep1.dat:72733:  unsigned char *laststart = 0;
../inputs/grep1.dat:72765:
../inputs/grep1.dat:72766:  /* Address of beginning of regexp, or inside of last group.  */
../inputs/grep1.dat:72832:  unsigned char *begalt;
../inputs/grep1.dat:72857:
../inputs/grep1.dat:72858:  /* Place in the uncompiled pattern (i.e., the {) to
../inputs/grep1.dat:72912:     which to go back if the interval is invalid.  */
../inputs/grep1.dat:72966:  const char *beg_interval;
../inputs/grep1.dat:72994:                
../inputs/grep1.dat:73011:  /* Address of the place where a forward jump should go to the end of
../inputs/grep1.dat:73082:     the containing expression.  Each alternative of an `or' -- except the
../inputs/grep1.dat:73157:     last -- ends with a forward jump of this sort.  */
../inputs/grep1.dat:73213:  unsigned char *fixup_alt_jump = 0;
../inputs/grep1.dat:73250:
../inputs/grep1.dat:73251:  /* Counts open-groups as they are encountered.  Remembered for the
../inputs/grep1.dat:73320:     matching close-group on the compile stack, so the same register
../inputs/grep1.dat:73389:     number is put in the stop_memory as the start_memory.  */
../inputs/grep1.dat:73452:  regnum_t regnum = 0;
../inputs/grep1.dat:73475:
../inputs/grep1.dat:73476:#ifdef DEBUG
../inputs/grep1.dat:73489:  DEBUG_PRINT1 ("\nCompiling pattern: ");
../inputs/grep1.dat:73531:  if (debug)
../inputs/grep1.dat:73544:    {
../inputs/grep1.dat:73550:      unsigned debug_count;
../inputs/grep1.dat:73578:      
../inputs/grep1.dat:73585:      for (debug_count = 0; debug_count < size; debug_count++)
../inputs/grep1.dat:73648:        printchar (pattern[debug_count]);
../inputs/grep1.dat:73690:      putchar ('\n');
../inputs/grep1.dat:73712:    }
../inputs/grep1.dat:73718:#endif /* DEBUG */
../inputs/grep1.dat:73737:
../inputs/grep1.dat:73738:  /* Initialize the compile stack.  */
../inputs/grep1.dat:73777:  compile_stack.stack = TALLOC (INIT_COMPILE_STACK_SIZE, compile_stack_elt_t);
../inputs/grep1.dat:73856:  if (compile_stack.stack == NULL)
../inputs/grep1.dat:73891:    return REG_ESPACE;
../inputs/grep1.dat:73914:
../inputs/grep1.dat:73915:  compile_stack.size = INIT_COMPILE_STACK_SIZE;
../inputs/grep1.dat:73963:  compile_stack.avail = 0;
../inputs/grep1.dat:73990:
../inputs/grep1.dat:73991:  /* Initialize the pattern buffer.  */
../inputs/grep1.dat:74031:  bufp->syntax = syntax;
../inputs/grep1.dat:74056:  bufp->fastmap_accurate = 0;
../inputs/grep1.dat:74086:  bufp->not_bol = bufp->not_eol = 0;
../inputs/grep1.dat:74123:
../inputs/grep1.dat:74124:  /* Set `used' to zero, so that if we return an error, the pattern
../inputs/grep1.dat:74192:     printer (for debugging) will think there's no pattern.  We reset it
../inputs/grep1.dat:74265:     at the end.  */
../inputs/grep1.dat:74286:  bufp->used = 0;
../inputs/grep1.dat:74304:  
../inputs/grep1.dat:74307:  /* Always count groups, whether or not bufp->no_sub is set.  */
../inputs/grep1.dat:74373:  bufp->re_nsub = 0;				
../inputs/grep1.dat:74398:
../inputs/grep1.dat:74399:#if !defined (emacs) && !defined (SYNTAX_TABLE)
../inputs/grep1.dat:74447:  /* Initialize the syntax table.  */
../inputs/grep1.dat:74485:   init_syntax_once ();
../inputs/grep1.dat:74509:#endif
../inputs/grep1.dat:74516:
../inputs/grep1.dat:74517:  if (bufp->allocated == 0)
../inputs/grep1.dat:74545:    {
../inputs/grep1.dat:74551:      if (bufp->buffer)
../inputs/grep1.dat:74575:	{ /* If zero allocated, but buffer is non-null, try to realloc
../inputs/grep1.dat:74639:             enough space.  This loses if buffer's address is bogus, but
../inputs/grep1.dat:74712:             that is the user's responsibility.  */
../inputs/grep1.dat:74764:          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
../inputs/grep1.dat:74829:        }
../inputs/grep1.dat:74839:      else
../inputs/grep1.dat:74850:        { /* Caller did not allocate a buffer.  Do it for them.  */
../inputs/grep1.dat:74918:          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
../inputs/grep1.dat:74982:        }
../inputs/grep1.dat:74992:      if (!bufp->buffer) return REG_ESPACE;
../inputs/grep1.dat:75036:
../inputs/grep1.dat:75037:      bufp->allocated = INIT_BUF_SIZE;
../inputs/grep1.dat:75076:    }
../inputs/grep1.dat:75082:
../inputs/grep1.dat:75083:  begalt = b = bufp->buffer;
../inputs/grep1.dat:75112:
../inputs/grep1.dat:75113:  /* Loop through the uncompiled pattern until we're at the end.  */
../inputs/grep1.dat:75182:  while (p != pend)
../inputs/grep1.dat:75202:    {
../inputs/grep1.dat:75208:      PATFETCH (c);
../inputs/grep1.dat:75228:
../inputs/grep1.dat:75229:      switch (c)
../inputs/grep1.dat:75246:        {
../inputs/grep1.dat:75256:        case '^':
../inputs/grep1.dat:75274:          {
../inputs/grep1.dat:75286:            if (   /* If at start of pattern, it's an operator.  */
../inputs/grep1.dat:75354:                   p == pattern + 1
../inputs/grep1.dat:75390:                   /* If context independent, it's an operator.  */
../inputs/grep1.dat:75458:                || syntax & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:75511:                   /* Otherwise, depends on what's come before.  */
../inputs/grep1.dat:75579:                || at_begline_loc_p (pattern, p, syntax))
../inputs/grep1.dat:75637:              BUF_PUSH (begline);
../inputs/grep1.dat:75671:            else
../inputs/grep1.dat:75688:              goto normal_char;
../inputs/grep1.dat:75720:          }
../inputs/grep1.dat:75732:          break;
../inputs/grep1.dat:75749:
../inputs/grep1.dat:75750:
../inputs/grep1.dat:75751:        case '$':
../inputs/grep1.dat:75769:          {
../inputs/grep1.dat:75781:            if (   /* If at end of pattern, it's an operator.  */
../inputs/grep1.dat:75847:                   p == pend 
../inputs/grep1.dat:75877:                   /* If context independent, it's an operator.  */
../inputs/grep1.dat:75945:                || syntax & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:75998:                   /* Otherwise, depends on what's next.  */
../inputs/grep1.dat:76059:                || at_endline_loc_p (p, pend, syntax))
../inputs/grep1.dat:76114:               BUF_PUSH (endline);
../inputs/grep1.dat:76149:             else
../inputs/grep1.dat:76167:               goto normal_char;
../inputs/grep1.dat:76200:           }
../inputs/grep1.dat:76213:           break;
../inputs/grep1.dat:76231:
../inputs/grep1.dat:76232:
../inputs/grep1.dat:76233:	case '+':
../inputs/grep1.dat:76244:        case '?':
../inputs/grep1.dat:76262:          if ((syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:76301:              || (syntax & RE_LIMITED_OPS))
../inputs/grep1.dat:76345:            goto normal_char;
../inputs/grep1.dat:76375:        handle_plus:
../inputs/grep1.dat:76396:        case '*':
../inputs/grep1.dat:76414:          /* If there is no previous pattern... */
../inputs/grep1.dat:76465:          if (!laststart)
../inputs/grep1.dat:76491:            {
../inputs/grep1.dat:76505:              if (syntax & RE_CONTEXT_INVALID_OPS)
../inputs/grep1.dat:76556:                return REG_BADRPT;
../inputs/grep1.dat:76591:              else if (!(syntax & RE_CONTEXT_INDEP_OPS))
../inputs/grep1.dat:76648:                goto normal_char;
../inputs/grep1.dat:76682:            }
../inputs/grep1.dat:76696:
../inputs/grep1.dat:76697:          {
../inputs/grep1.dat:76709:            /* Are we optimizing this jump?  */
../inputs/grep1.dat:76757:            boolean keep_string_p = false;
../inputs/grep1.dat:76800:            
../inputs/grep1.dat:76813:            /* 1 means zero (many) matches is allowed.  */
../inputs/grep1.dat:76872:            char zero_times_ok = 0, many_times_ok = 0;
../inputs/grep1.dat:76927:
../inputs/grep1.dat:76928:            /* If there is a sequence of repetition chars, collapse it
../inputs/grep1.dat:76999:               down to just one (the right one).  We can't combine
../inputs/grep1.dat:77066:               interval operators with these because of, e.g., `a{2}*',
../inputs/grep1.dat:77138:               which should only match an even number of `a's.  */
../inputs/grep1.dat:77205:
../inputs/grep1.dat:77206:            for (;;)
../inputs/grep1.dat:77227:              {
../inputs/grep1.dat:77243:                zero_times_ok |= c != '+';
../inputs/grep1.dat:77286:                many_times_ok |= c != '?';
../inputs/grep1.dat:77329:
../inputs/grep1.dat:77330:                if (p == pend)
../inputs/grep1.dat:77361:                  break;
../inputs/grep1.dat:77386:
../inputs/grep1.dat:77387:                PATFETCH (c);
../inputs/grep1.dat:77417:
../inputs/grep1.dat:77418:                if (c == '*'
../inputs/grep1.dat:77447:                    || (!(syntax & RE_BK_PLUS_QM) && (c == '+' || c == '?')))
../inputs/grep1.dat:77525:                  ;
../inputs/grep1.dat:77545:
../inputs/grep1.dat:77546:                else if (syntax & RE_BK_PLUS_QM  &&  c == '\\')
../inputs/grep1.dat:77610:                  {
../inputs/grep1.dat:77630:                    if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:77685:
../inputs/grep1.dat:77686:                    PATFETCH (c1);
../inputs/grep1.dat:77721:                    if (!(c1 == '+' || c1 == '?'))
../inputs/grep1.dat:77772:                      {
../inputs/grep1.dat:77796:                        PATUNFETCH;
../inputs/grep1.dat:77832:                        PATUNFETCH;
../inputs/grep1.dat:77868:                        break;
../inputs/grep1.dat:77899:                      }
../inputs/grep1.dat:77923:
../inputs/grep1.dat:77924:                    c = c1;
../inputs/grep1.dat:77952:                  }
../inputs/grep1.dat:77972:                else
../inputs/grep1.dat:77993:                  {
../inputs/grep1.dat:78013:                    PATUNFETCH;
../inputs/grep1.dat:78045:                    break;
../inputs/grep1.dat:78072:                  }
../inputs/grep1.dat:78092:
../inputs/grep1.dat:78093:                /* If we get here, we found another repeat character.  */
../inputs/grep1.dat:78167:               }
../inputs/grep1.dat:78184:
../inputs/grep1.dat:78185:            /* Star, etc. applied to an empty pattern is equivalent
../inputs/grep1.dat:78253:               to an empty pattern.  */
../inputs/grep1.dat:78293:            if (!laststart)  
../inputs/grep1.dat:78323:              break;
../inputs/grep1.dat:78344:
../inputs/grep1.dat:78345:            /* Now we know whether or not zero matches is allowed
../inputs/grep1.dat:78411:               and also whether or not two or more matches is allowed.  */
../inputs/grep1.dat:78486:            if (many_times_ok)
../inputs/grep1.dat:78517:              { /* More than one repetition is allowed, so put in at the
../inputs/grep1.dat:78590:                   end a backward relative jump from `b' to before the next
../inputs/grep1.dat:78666:                   jump we're going to put in below (which jumps from
../inputs/grep1.dat:78736:                   laststart to after this jump).  
../inputs/grep1.dat:78788:
../inputs/grep1.dat:78789:                   But if we are at the `*' in the exact sequence `.*\n',
../inputs/grep1.dat:78863:                   insert an unconditional jump backwards to the .,
../inputs/grep1.dat:78931:                   instead of the beginning of the loop.  This way we only
../inputs/grep1.dat:79006:                   push a failure point once, instead of every time
../inputs/grep1.dat:79074:                   through the loop.  */
../inputs/grep1.dat:79115:                assert (p - 1 > pattern);
../inputs/grep1.dat:79157:
../inputs/grep1.dat:79158:                /* Allocate the space for the jump.  */
../inputs/grep1.dat:79214:                GET_BUFFER_SPACE (3);
../inputs/grep1.dat:79252:
../inputs/grep1.dat:79253:                /* We know we are not at the first character of the pattern,
../inputs/grep1.dat:79330:                   because laststart was nonzero.  And we've already
../inputs/grep1.dat:79399:                   incremented `p', by the way, to be the character after
../inputs/grep1.dat:79473:                   the `*'.  Do we have to do something analogous here
../inputs/grep1.dat:79544:                   for null bytes, because of RE_DOT_NOT_NULL?  */
../inputs/grep1.dat:79611:                if (TRANSLATE (*(p - 2)) == TRANSLATE ('.')
../inputs/grep1.dat:79671:		    && zero_times_ok
../inputs/grep1.dat:79694:                    && p < pend && TRANSLATE (*p) == TRANSLATE ('\n')
../inputs/grep1.dat:79764:                    && !(syntax & RE_DOT_NEWLINE))
../inputs/grep1.dat:79815:                  { /* We have .*\n.  */
../inputs/grep1.dat:79856:                    STORE_JUMP (jump, b, laststart);
../inputs/grep1.dat:79909:                    keep_string_p = true;
../inputs/grep1.dat:79951:                  }
../inputs/grep1.dat:79971:                else
../inputs/grep1.dat:79992:                  /* Anything else.  */
../inputs/grep1.dat:80032:                  STORE_JUMP (maybe_pop_jump, b, laststart - 3);
../inputs/grep1.dat:80097:
../inputs/grep1.dat:80098:                /* We've added more stuff to the buffer.  */
../inputs/grep1.dat:80159:                b += 3;
../inputs/grep1.dat:80183:              }
../inputs/grep1.dat:80199:
../inputs/grep1.dat:80200:            /* On failure, jump from laststart to b + 3, which will be the
../inputs/grep1.dat:80275:               end of the buffer after this jump is inserted.  */
../inputs/grep1.dat:80341:            GET_BUFFER_SPACE (3);
../inputs/grep1.dat:80375:            INSERT_JUMP (keep_string_p ? on_failure_keep_string_jump
../inputs/grep1.dat:80444:                                       : on_failure_jump,
../inputs/grep1.dat:80502:                         laststart, b + 3);
../inputs/grep1.dat:80546:            pending_exact = 0;
../inputs/grep1.dat:80577:            b += 3;
../inputs/grep1.dat:80597:
../inputs/grep1.dat:80598:            if (!zero_times_ok)
../inputs/grep1.dat:80630:              {
../inputs/grep1.dat:80646:                /* At least one repetition is required, so insert a
../inputs/grep1.dat:80714:                   `dummy_failure_jump' before the initial
../inputs/grep1.dat:80773:                   `on_failure_jump' instruction of the loop. This
../inputs/grep1.dat:80840:                   effects a skip over that instruction the first time
../inputs/grep1.dat:80911:                   we hit that loop.  */
../inputs/grep1.dat:80952:                GET_BUFFER_SPACE (3);
../inputs/grep1.dat:80990:                INSERT_JUMP (dummy_failure_jump, laststart, laststart + 6);
../inputs/grep1.dat:81066:                b += 3;
../inputs/grep1.dat:81090:              }
../inputs/grep1.dat:81106:            }
../inputs/grep1.dat:81120:	  break;
../inputs/grep1.dat:81130:
../inputs/grep1.dat:81131:
../inputs/grep1.dat:81132:	case '.':
../inputs/grep1.dat:81143:          laststart = b;
../inputs/grep1.dat:81168:          BUF_PUSH (anychar);
../inputs/grep1.dat:81198:          break;
../inputs/grep1.dat:81215:
../inputs/grep1.dat:81216:
../inputs/grep1.dat:81217:        case '[':
../inputs/grep1.dat:81235:          {
../inputs/grep1.dat:81247:            boolean had_char_class = false;
../inputs/grep1.dat:81291:
../inputs/grep1.dat:81292:            if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:81338:
../inputs/grep1.dat:81339:            /* Ensure that we have enough space to push a charset: the
../inputs/grep1.dat:81410:               opcode, the length count, and the bitset; 34 bytes in all.  */
../inputs/grep1.dat:81488:	    GET_BUFFER_SPACE (34);
../inputs/grep1.dat:81516:
../inputs/grep1.dat:81517:            laststart = b;
../inputs/grep1.dat:81544:
../inputs/grep1.dat:81545:            /* We test `*p == '^' twice, instead of using an if
../inputs/grep1.dat:81609:               statement, so we only need one BUF_PUSH.  */
../inputs/grep1.dat:81669:            BUF_PUSH (*p == '^' ? charset_not : charset); 
../inputs/grep1.dat:81728:            if (*p == '^')
../inputs/grep1.dat:81755:              p++;
../inputs/grep1.dat:81774:
../inputs/grep1.dat:81775:            /* Remember the first position in the bracket expression.  */
../inputs/grep1.dat:81849:            p1 = p;
../inputs/grep1.dat:81869:
../inputs/grep1.dat:81870:            /* Push the number of bytes in the bitmap.  */
../inputs/grep1.dat:81929:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
../inputs/grep1.dat:81982:
../inputs/grep1.dat:81983:            /* Clear the whole map.  */
../inputs/grep1.dat:82023:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
../inputs/grep1.dat:82076:
../inputs/grep1.dat:82077:            /* charset_not matches newline according to a syntax bit.  */
../inputs/grep1.dat:82151:            if ((re_opcode_t) b[-2] == charset_not
../inputs/grep1.dat:82202:                && (syntax & RE_HAT_LISTS_NOT_NEWLINE))
../inputs/grep1.dat:82258:              SET_LIST_BIT ('\n');
../inputs/grep1.dat:82293:
../inputs/grep1.dat:82294:            /* Read in characters and ranges, setting map bits.  */
../inputs/grep1.dat:82362:            for (;;)
../inputs/grep1.dat:82383:              {
../inputs/grep1.dat:82399:                if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:82449:
../inputs/grep1.dat:82450:                PATFETCH (c);
../inputs/grep1.dat:82480:
../inputs/grep1.dat:82481:                /* \ might escape characters inside [...] and [^...].  */
../inputs/grep1.dat:82555:                if ((syntax & RE_BACKSLASH_ESCAPE_IN_LISTS) && c == '\\')
../inputs/grep1.dat:82629:                  {
../inputs/grep1.dat:82649:                    if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:82704:
../inputs/grep1.dat:82705:                    PATFETCH (c1);
../inputs/grep1.dat:82740:                    SET_LIST_BIT (c1);
../inputs/grep1.dat:82779:                    continue;
../inputs/grep1.dat:82809:                  }
../inputs/grep1.dat:82829:
../inputs/grep1.dat:82830:                /* Could be the end of the bracket expression.  If it's
../inputs/grep1.dat:82902:                   not (i.e., when the bracket expression is `[]' so
../inputs/grep1.dat:82971:                   far), the ']' character bit gets set way below.  */
../inputs/grep1.dat:83042:                if (c == ']' && p != p1 + 1)
../inputs/grep1.dat:83087:                  break;
../inputs/grep1.dat:83112:
../inputs/grep1.dat:83113:                /* Look ahead to see if it's a range when the last thing
../inputs/grep1.dat:83186:                   was a character class.  */
../inputs/grep1.dat:83232:                if (had_char_class && c == '-' && *p != ']')
../inputs/grep1.dat:83293:                  return REG_ERANGE;
../inputs/grep1.dat:83330:
../inputs/grep1.dat:83331:                /* Look ahead to see if it's a range when the last thing
../inputs/grep1.dat:83404:                   was a character: if this is a hyphen not at the
../inputs/grep1.dat:83471:                   beginning or the end of a list, then it's the range
../inputs/grep1.dat:83542:                   operator.  */
../inputs/grep1.dat:83575:                if (c == '-' 
../inputs/grep1.dat:83605:                    && !(p - 2 >= pattern && p[-2] == '[') 
../inputs/grep1.dat:83665:                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
../inputs/grep1.dat:83740:                    && *p != ']')
../inputs/grep1.dat:83774:                  {
../inputs/grep1.dat:83794:                    reg_errcode_t ret
../inputs/grep1.dat:83832:                      = compile_range (&p, pend, translate, syntax, b);
../inputs/grep1.dat:83904:                    if (ret != REG_NOERROR) return ret;
../inputs/grep1.dat:83960:                  }
../inputs/grep1.dat:83980:
../inputs/grep1.dat:83981:                else if (p[0] == '-' && p[1] != ']')
../inputs/grep1.dat:84034:                  { /* This handles ranges made up of characters only.  */
../inputs/grep1.dat:84109:                    reg_errcode_t ret;
../inputs/grep1.dat:84148:
../inputs/grep1.dat:84149:		    /* Move past the `-'.  */
../inputs/grep1.dat:84181:                    PATFETCH (c1);
../inputs/grep1.dat:84216:                    
../inputs/grep1.dat:84237:                    ret = compile_range (&p, pend, translate, syntax, b);
../inputs/grep1.dat:84311:                    if (ret != REG_NOERROR) return ret;
../inputs/grep1.dat:84367:                  }
../inputs/grep1.dat:84387:
../inputs/grep1.dat:84388:                /* See if we're at the beginning of a possible character
../inputs/grep1.dat:84461:                   class.  */
../inputs/grep1.dat:84491:
../inputs/grep1.dat:84492:                else if (syntax & RE_CHAR_CLASSES && c == '[' && *p == ':')
../inputs/grep1.dat:84568:                  { /* Leave room for the null.  */
../inputs/grep1.dat:84620:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
../inputs/grep1.dat:84677:
../inputs/grep1.dat:84678:                    PATFETCH (c);
../inputs/grep1.dat:84712:                    c1 = 0;
../inputs/grep1.dat:84740:
../inputs/grep1.dat:84741:                    /* If pattern is `[[:'.  */
../inputs/grep1.dat:84789:                    if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:84843:
../inputs/grep1.dat:84844:                    for (;;)
../inputs/grep1.dat:84873:                      {
../inputs/grep1.dat:84897:                        PATFETCH (c);
../inputs/grep1.dat:84935:                        if (c == ':' || c == ']' || p == pend
../inputs/grep1.dat:84997:                            || c1 == CHAR_CLASS_MAX_LENGTH)
../inputs/grep1.dat:85057:                          break;
../inputs/grep1.dat:85090:                        str[c1++] = c;
../inputs/grep1.dat:85129:                      }
../inputs/grep1.dat:85153:                    str[c1] = '\0';
../inputs/grep1.dat:85189:
../inputs/grep1.dat:85190:                    /* If isn't a word bracketed by `[:' and:`]':
../inputs/grep1.dat:85256:                       undo the ending character, the letters, and leave 
../inputs/grep1.dat:85330:                       the leading `:' and `[' (but set bits for them).  */
../inputs/grep1.dat:85406:                    if (c == ':' && *p == ']')
../inputs/grep1.dat:85453:                      {
../inputs/grep1.dat:85477:                        int ch;
../inputs/grep1.dat:85509:                        boolean is_alnum = STREQ (str, "alnum");
../inputs/grep1.dat:85574:                        boolean is_alpha = STREQ (str, "alpha");
../inputs/grep1.dat:85639:                        boolean is_blank = STREQ (str, "blank");
../inputs/grep1.dat:85704:                        boolean is_cntrl = STREQ (str, "cntrl");
../inputs/grep1.dat:85769:                        boolean is_digit = STREQ (str, "digit");
../inputs/grep1.dat:85834:                        boolean is_graph = STREQ (str, "graph");
../inputs/grep1.dat:85899:                        boolean is_lower = STREQ (str, "lower");
../inputs/grep1.dat:85964:                        boolean is_print = STREQ (str, "print");
../inputs/grep1.dat:86029:                        boolean is_punct = STREQ (str, "punct");
../inputs/grep1.dat:86094:                        boolean is_space = STREQ (str, "space");
../inputs/grep1.dat:86159:                        boolean is_upper = STREQ (str, "upper");
../inputs/grep1.dat:86224:                        boolean is_xdigit = STREQ (str, "xdigit");
../inputs/grep1.dat:86291:                        
../inputs/grep1.dat:86316:                        if (!IS_CHAR_CLASS (str)) return REG_ECTYPE;
../inputs/grep1.dat:86385:
../inputs/grep1.dat:86386:                        /* Throw away the ] at the end of the character
../inputs/grep1.dat:86458:                           class.  */
../inputs/grep1.dat:86496:                        PATFETCH (c);					
../inputs/grep1.dat:86539:
../inputs/grep1.dat:86540:                        if (p == pend) return REG_EBRACK;
../inputs/grep1.dat:86598:
../inputs/grep1.dat:86599:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
../inputs/grep1.dat:86663:                          {
../inputs/grep1.dat:86691:                            if (   (is_alnum  && ISALNUM (ch))
../inputs/grep1.dat:86754:                                || (is_alpha  && ISALPHA (ch))
../inputs/grep1.dat:86817:                                || (is_blank  && ISBLANK (ch))
../inputs/grep1.dat:86880:                                || (is_cntrl  && ISCNTRL (ch))
../inputs/grep1.dat:86943:                                || (is_digit  && ISDIGIT (ch))
../inputs/grep1.dat:87006:                                || (is_graph  && ISGRAPH (ch))
../inputs/grep1.dat:87069:                                || (is_lower  && ISLOWER (ch))
../inputs/grep1.dat:87132:                                || (is_print  && ISPRINT (ch))
../inputs/grep1.dat:87195:                                || (is_punct  && ISPUNCT (ch))
../inputs/grep1.dat:87258:                                || (is_space  && ISSPACE (ch))
../inputs/grep1.dat:87321:                                || (is_upper  && ISUPPER (ch))
../inputs/grep1.dat:87384:                                || (is_xdigit && ISXDIGIT (ch)))
../inputs/grep1.dat:87449:                            SET_LIST_BIT (ch);
../inputs/grep1.dat:87496:                          }
../inputs/grep1.dat:87524:                        had_char_class = true;
../inputs/grep1.dat:87571:                      }
../inputs/grep1.dat:87595:                    else
../inputs/grep1.dat:87620:                      {
../inputs/grep1.dat:87644:                        c1++;
../inputs/grep1.dat:87674:                        while (c1--)    
../inputs/grep1.dat:87715:                          PATUNFETCH;
../inputs/grep1.dat:87753:                        SET_LIST_BIT ('[');
../inputs/grep1.dat:87797:                        SET_LIST_BIT (':');
../inputs/grep1.dat:87841:                        had_char_class = false;
../inputs/grep1.dat:87889:                      }
../inputs/grep1.dat:87913:                  }
../inputs/grep1.dat:87933:                else
../inputs/grep1.dat:87954:                  {
../inputs/grep1.dat:87974:                    had_char_class = false;
../inputs/grep1.dat:88018:                    SET_LIST_BIT (c);
../inputs/grep1.dat:88056:                  }
../inputs/grep1.dat:88076:              }
../inputs/grep1.dat:88092:
../inputs/grep1.dat:88093:            /* Discard any (non)matching list bytes that are all 0 at the
../inputs/grep1.dat:88167:               end of the map.  Decrease the map-length byte too.  */
../inputs/grep1.dat:88237:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
../inputs/grep1.dat:88295:              b[-1]--; 
../inputs/grep1.dat:88319:            b += b[-1];
../inputs/grep1.dat:88343:          }
../inputs/grep1.dat:88355:          break;
../inputs/grep1.dat:88372:
../inputs/grep1.dat:88373:
../inputs/grep1.dat:88374:	case '(':
../inputs/grep1.dat:88385:          if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:88425:            goto handle_open;
../inputs/grep1.dat:88455:          else
../inputs/grep1.dat:88470:            goto normal_char;
../inputs/grep1.dat:88500:
../inputs/grep1.dat:88501:
../inputs/grep1.dat:88502:        case ')':
../inputs/grep1.dat:88520:          if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:88560:            goto handle_close;
../inputs/grep1.dat:88591:          else
../inputs/grep1.dat:88606:            goto normal_char;
../inputs/grep1.dat:88636:
../inputs/grep1.dat:88637:
../inputs/grep1.dat:88638:        case '\n':
../inputs/grep1.dat:88657:          if (syntax & RE_NEWLINE_ALT)
../inputs/grep1.dat:88696:            goto handle_alt;
../inputs/grep1.dat:88725:          else
../inputs/grep1.dat:88740:            goto normal_char;
../inputs/grep1.dat:88770:
../inputs/grep1.dat:88771:
../inputs/grep1.dat:88772:	case '|':
../inputs/grep1.dat:88783:          if (syntax & RE_NO_BK_VBAR)
../inputs/grep1.dat:88821:            goto handle_alt;
../inputs/grep1.dat:88850:          else
../inputs/grep1.dat:88865:            goto normal_char;
../inputs/grep1.dat:88895:
../inputs/grep1.dat:88896:
../inputs/grep1.dat:88897:        case '{':
../inputs/grep1.dat:88915:           if (syntax & RE_INTERVALS && syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:88981:             goto handle_interval;
../inputs/grep1.dat:89016:           else
../inputs/grep1.dat:89032:             goto normal_char;
../inputs/grep1.dat:89063:
../inputs/grep1.dat:89064:
../inputs/grep1.dat:89065:        case '\\':
../inputs/grep1.dat:89084:          if (p == pend) return REG_EESCAPE;
../inputs/grep1.dat:89129:
../inputs/grep1.dat:89130:          /* Do not translate the character after the \, so that we can
../inputs/grep1.dat:89202:             distinguish, e.g., \B from \b, even if we normally would
../inputs/grep1.dat:89272:             translate, e.g., B to b.  */
../inputs/grep1.dat:89314:          PATFETCH_RAW (c);
../inputs/grep1.dat:89342:
../inputs/grep1.dat:89343:          switch (c)
../inputs/grep1.dat:89364:            {
../inputs/grep1.dat:89378:            case '(':
../inputs/grep1.dat:89400:              if (syntax & RE_NO_BK_PARENS)
../inputs/grep1.dat:89444:                goto normal_backslash;
../inputs/grep1.dat:89483:
../inputs/grep1.dat:89484:            handle_open:
../inputs/grep1.dat:89509:              bufp->re_nsub++;
../inputs/grep1.dat:89540:              regnum++;
../inputs/grep1.dat:89564:
../inputs/grep1.dat:89565:              if (COMPILE_STACK_FULL)
../inputs/grep1.dat:89603:                { 
../inputs/grep1.dat:89622:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
../inputs/grep1.dat:89696:                            compile_stack_elt_t);
../inputs/grep1.dat:89746:                  if (compile_stack.stack == NULL) return REG_ESPACE;
../inputs/grep1.dat:89816:
../inputs/grep1.dat:89817:                  compile_stack.size <<= 1;
../inputs/grep1.dat:89861:                }
../inputs/grep1.dat:89879:
../inputs/grep1.dat:89880:              /* These are the values to restore when we hit end of this
../inputs/grep1.dat:89953:                 group.  They are all relative offsets, so that if the
../inputs/grep1.dat:90024:                 whole pattern moves because of realloc, they will still
../inputs/grep1.dat:90097:                 be valid.  */
../inputs/grep1.dat:90128:              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
../inputs/grep1.dat:90199:              COMPILE_STACK_TOP.fixup_alt_jump 
../inputs/grep1.dat:90247:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
../inputs/grep1.dat:90321:              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
../inputs/grep1.dat:90390:              COMPILE_STACK_TOP.regnum = regnum;
../inputs/grep1.dat:90439:
../inputs/grep1.dat:90440:              /* We will eventually replace the 0 with the number of
../inputs/grep1.dat:90509:                 groups inner to this one.  But do not push a
../inputs/grep1.dat:90571:                 start_memory for groups beyond the last one we can
../inputs/grep1.dat:90639:                 represent in the compiled pattern.  */
../inputs/grep1.dat:90695:              if (regnum <= MAX_REGNUM)
../inputs/grep1.dat:90735:                {
../inputs/grep1.dat:90753:                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
../inputs/grep1.dat:90832:                  BUF_PUSH_3 (start_memory, regnum, 0);
../inputs/grep1.dat:90888:                }
../inputs/grep1.dat:90906:                
../inputs/grep1.dat:90923:              compile_stack.avail++;
../inputs/grep1.dat:90960:
../inputs/grep1.dat:90961:              fixup_alt_jump = 0;
../inputs/grep1.dat:90995:              laststart = 0;
../inputs/grep1.dat:91024:              begalt = b;
../inputs/grep1.dat:91050:	      /* If we've reached MAX_REGNUM groups, then this open
../inputs/grep1.dat:91111:		 won't actually generate any code, so we'll have to
../inputs/grep1.dat:91165:		 clear pending_exact explicitly.  */
../inputs/grep1.dat:91204:	      pending_exact = 0;
../inputs/grep1.dat:91230:              break;
../inputs/grep1.dat:91251:
../inputs/grep1.dat:91252:
../inputs/grep1.dat:91253:            case ')':
../inputs/grep1.dat:91275:              if (syntax & RE_NO_BK_PARENS) goto normal_backslash;
../inputs/grep1.dat:91342:
../inputs/grep1.dat:91343:              if (COMPILE_STACK_EMPTY)
../inputs/grep1.dat:91382:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:91441:                  goto normal_backslash;
../inputs/grep1.dat:91482:                else
../inputs/grep1.dat:91503:                  return REG_ERPAREN;
../inputs/grep1.dat:91541:
../inputs/grep1.dat:91542:            handle_close:
../inputs/grep1.dat:91568:              if (fixup_alt_jump)
../inputs/grep1.dat:91602:                { /* Push a dummy failure point at the end of the
../inputs/grep1.dat:91668:                     alternative for a possible future
../inputs/grep1.dat:91723:                     `pop_failure_jump' to pop.  See comments at
../inputs/grep1.dat:91788:                     `push_dummy_failure' in `re_match_2'.  */
../inputs/grep1.dat:91851:                  BUF_PUSH (push_dummy_failure);
../inputs/grep1.dat:91900:                  
../inputs/grep1.dat:91919:                  /* We allocated space for this jump when we assigned
../inputs/grep1.dat:91990:                     to `fixup_alt_jump', in the `handle_alt' case below.  */
../inputs/grep1.dat:92068:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
../inputs/grep1.dat:92137:                }
../inputs/grep1.dat:92155:
../inputs/grep1.dat:92156:              /* See similar code for backslashed left paren above.  */
../inputs/grep1.dat:92228:              if (COMPILE_STACK_EMPTY)
../inputs/grep1.dat:92267:                if (syntax & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:92326:                  goto normal_char;
../inputs/grep1.dat:92362:                else
../inputs/grep1.dat:92383:                  return REG_ERPAREN;
../inputs/grep1.dat:92421:
../inputs/grep1.dat:92422:              /* Since we just checked for an empty stack above, this
../inputs/grep1.dat:92492:                 ``can't happen''.  */
../inputs/grep1.dat:92531:              assert (compile_stack.avail != 0);
../inputs/grep1.dat:92580:              {
../inputs/grep1.dat:92596:                /* We don't just want to restore into `regnum', because
../inputs/grep1.dat:92668:                   later groups should continue to be numbered higher,
../inputs/grep1.dat:92739:                   as in `(ab)c(de)' -- the second group is #2.  */
../inputs/grep1.dat:92807:                regnum_t this_group_regnum;
../inputs/grep1.dat:92851:
../inputs/grep1.dat:92852:                compile_stack.avail--;		
../inputs/grep1.dat:92893:                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
../inputs/grep1.dat:92966:                fixup_alt_jump
../inputs/grep1.dat:92997:                  = COMPILE_STACK_TOP.fixup_alt_jump
../inputs/grep1.dat:93050:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
../inputs/grep1.dat:93125:                    : 0;
../inputs/grep1.dat:93150:                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
../inputs/grep1.dat:93229:                this_group_regnum = COMPILE_STACK_TOP.regnum;
../inputs/grep1.dat:93291:		/* If we've reached MAX_REGNUM groups, then this open
../inputs/grep1.dat:93347:		   won't actually generate any code, so we'll have to
../inputs/grep1.dat:93403:		   clear pending_exact explicitly.  */
../inputs/grep1.dat:93444:		pending_exact = 0;
../inputs/grep1.dat:93465:
../inputs/grep1.dat:93466:                /* We're at the end of the group, so now we know how many
../inputs/grep1.dat:93540:                   groups were inside this one.  */
../inputs/grep1.dat:93592:                if (this_group_regnum <= MAX_REGNUM)
../inputs/grep1.dat:93645:                  {
../inputs/grep1.dat:93665:                    unsigned char *inner_group_loc
../inputs/grep1.dat:93716:                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
../inputs/grep1.dat:93793:                    
../inputs/grep1.dat:93814:                    *inner_group_loc = regnum - this_group_regnum;
../inputs/grep1.dat:93881:                    BUF_PUSH_3 (stop_memory, this_group_regnum,
../inputs/grep1.dat:93945:                                regnum - this_group_regnum);
../inputs/grep1.dat:94006:                  }
../inputs/grep1.dat:94026:              }
../inputs/grep1.dat:94042:              break;
../inputs/grep1.dat:94063:
../inputs/grep1.dat:94064:
../inputs/grep1.dat:94065:            case '|':					/* `\|'.  */
../inputs/grep1.dat:94104:              if (syntax & RE_LIMITED_OPS || syntax & RE_NO_BK_VBAR)
../inputs/grep1.dat:94173:                goto normal_backslash;
../inputs/grep1.dat:94212:            handle_alt:
../inputs/grep1.dat:94236:              if (syntax & RE_LIMITED_OPS)
../inputs/grep1.dat:94279:                goto normal_char;
../inputs/grep1.dat:94313:
../inputs/grep1.dat:94314:              /* Insert before the previous alternative a jump which
../inputs/grep1.dat:94383:                 jumps to this alternative if the former fails.  */
../inputs/grep1.dat:94451:              GET_BUFFER_SPACE (3);
../inputs/grep1.dat:94487:              INSERT_JUMP (on_failure_jump, begalt, b + 6);
../inputs/grep1.dat:94547:              pending_exact = 0;
../inputs/grep1.dat:94580:              b += 3;
../inputs/grep1.dat:94602:
../inputs/grep1.dat:94603:              /* The alternative before this one has a jump after it
../inputs/grep1.dat:94672:                 which gets executed if it gets matched.  Adjust that
../inputs/grep1.dat:94742:                 jump so it will jump to this alternative's analogous
../inputs/grep1.dat:94812:                 jump (put in below, which in turn will jump to the next
../inputs/grep1.dat:94885:                 (if any) alternative's such jump, etc.).  The last such
../inputs/grep1.dat:94958:                 jump jumps to the correct final destination.  A picture:
../inputs/grep1.dat:95032:                          _____ _____ 
../inputs/grep1.dat:95071:                          |   | |   |   
../inputs/grep1.dat:95112:                          |   v |   v 
../inputs/grep1.dat:95151:                         a | b   | c   
../inputs/grep1.dat:95191:
../inputs/grep1.dat:95192:                 If we are at `b', then fixup_alt_jump right now points to a
../inputs/grep1.dat:95269:                 three-byte space after `a'.  We'll put in the jump, set
../inputs/grep1.dat:95342:                 fixup_alt_jump to right after `b', and leave behind three
../inputs/grep1.dat:95417:                 bytes which we'll fill in when we get to after `c'.  */
../inputs/grep1.dat:95490:
../inputs/grep1.dat:95491:              if (fixup_alt_jump)
../inputs/grep1.dat:95525:                STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
../inputs/grep1.dat:95588:
../inputs/grep1.dat:95589:              /* Mark and leave space for a jump after this alternative,
../inputs/grep1.dat:95662:                 to be filled in later either by next alternative or
../inputs/grep1.dat:95731:                 when know we're at the end of a series of alternatives.  */
../inputs/grep1.dat:95808:              fixup_alt_jump = b;
../inputs/grep1.dat:95842:              GET_BUFFER_SPACE (3);
../inputs/grep1.dat:95878:              b += 3;
../inputs/grep1.dat:95900:
../inputs/grep1.dat:95901:              laststart = 0;
../inputs/grep1.dat:95930:              begalt = b;
../inputs/grep1.dat:95956:              break;
../inputs/grep1.dat:95977:
../inputs/grep1.dat:95978:
../inputs/grep1.dat:95979:            case '{': 
../inputs/grep1.dat:96002:              /* If \{ is a literal.  */
../inputs/grep1.dat:96043:              if (!(syntax & RE_INTERVALS)
../inputs/grep1.dat:96086:                     /* If we're at `\{' and it's not the open-interval 
../inputs/grep1.dat:96159:                        operator.  */
../inputs/grep1.dat:96197:                  || ((syntax & RE_INTERVALS) && (syntax & RE_NO_BK_BRACES))
../inputs/grep1.dat:96274:                  || (p - 2 == pattern  &&  p == pend))
../inputs/grep1.dat:96330:                goto normal_backslash;
../inputs/grep1.dat:96369:
../inputs/grep1.dat:96370:            handle_interval:
../inputs/grep1.dat:96399:              {
../inputs/grep1.dat:96415:                /* If got here, then the syntax allows intervals.  */
../inputs/grep1.dat:96485:
../inputs/grep1.dat:96486:                /* At least (most) this many matches must be made.  */
../inputs/grep1.dat:96557:                int lower_bound = -1, upper_bound = -1;
../inputs/grep1.dat:96613:
../inputs/grep1.dat:96614:                beg_interval = p - 1;
../inputs/grep1.dat:96652:
../inputs/grep1.dat:96653:                if (p == pend)
../inputs/grep1.dat:96684:                  {
../inputs/grep1.dat:96704:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:96754:                      goto unfetch_interval;
../inputs/grep1.dat:96799:                    else
../inputs/grep1.dat:96824:                      return REG_EBRACE;
../inputs/grep1.dat:96865:                  }
../inputs/grep1.dat:96885:
../inputs/grep1.dat:96886:                GET_UNSIGNED_NUMBER (lower_bound);
../inputs/grep1.dat:96937:
../inputs/grep1.dat:96938:                if (c == ',')
../inputs/grep1.dat:96968:                  {
../inputs/grep1.dat:96988:                    GET_UNSIGNED_NUMBER (upper_bound);
../inputs/grep1.dat:97043:                    if (upper_bound < 0) upper_bound = RE_DUP_MAX;
../inputs/grep1.dat:97110:                  }
../inputs/grep1.dat:97130:                else
../inputs/grep1.dat:97151:                  /* Interval such as `{1}' => match exactly once. */
../inputs/grep1.dat:97221:                  upper_bound = lower_bound;
../inputs/grep1.dat:97266:
../inputs/grep1.dat:97267:                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
../inputs/grep1.dat:97331:                    || lower_bound > upper_bound)
../inputs/grep1.dat:97381:                  {
../inputs/grep1.dat:97401:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:97451:                      goto unfetch_interval;
../inputs/grep1.dat:97496:                    else 
../inputs/grep1.dat:97522:                      return REG_BADBR;
../inputs/grep1.dat:97562:                  }
../inputs/grep1.dat:97582:
../inputs/grep1.dat:97583:                if (!(syntax & RE_NO_BK_BRACES)) 
../inputs/grep1.dat:97633:                  {
../inputs/grep1.dat:97653:                    if (c != '\\') return REG_EBRACE;
../inputs/grep1.dat:97707:
../inputs/grep1.dat:97708:                    PATFETCH (c);
../inputs/grep1.dat:97742:                  }
../inputs/grep1.dat:97762:
../inputs/grep1.dat:97763:                if (c != '}')
../inputs/grep1.dat:97793:                  {
../inputs/grep1.dat:97813:                    if (syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:97863:                      goto unfetch_interval;
../inputs/grep1.dat:97908:                    else 
../inputs/grep1.dat:97934:                      return REG_BADBR;
../inputs/grep1.dat:97974:                  }
../inputs/grep1.dat:97994:
../inputs/grep1.dat:97995:                /* We just parsed a valid interval.  */
../inputs/grep1.dat:98051:
../inputs/grep1.dat:98052:                /* If it's invalid to have no preceding re.  */
../inputs/grep1.dat:98116:                if (!laststart)
../inputs/grep1.dat:98148:                  {
../inputs/grep1.dat:98168:                    if (syntax & RE_CONTEXT_INVALID_OPS)
../inputs/grep1.dat:98225:                      return REG_BADRPT;
../inputs/grep1.dat:98266:                    else if (syntax & RE_CONTEXT_INDEP_OPS)
../inputs/grep1.dat:98326:                      laststart = b;
../inputs/grep1.dat:98363:                    else
../inputs/grep1.dat:98388:                      goto unfetch_interval;
../inputs/grep1.dat:98433:                  }
../inputs/grep1.dat:98453:
../inputs/grep1.dat:98454:                /* If the upper bound is zero, don't want to succeed at
../inputs/grep1.dat:98526:                   all; jump from `laststart' to `b + 3', which will be
../inputs/grep1.dat:98598:                   the end of the buffer after we insert the jump.  */
../inputs/grep1.dat:98669:                 if (upper_bound == 0)
../inputs/grep1.dat:98708:                   {
../inputs/grep1.dat:98729:                     GET_BUFFER_SPACE (3);
../inputs/grep1.dat:98772:                     INSERT_JUMP (jump, laststart, b + 3);
../inputs/grep1.dat:98831:                     b += 3;
../inputs/grep1.dat:98860:                   }
../inputs/grep1.dat:98881:
../inputs/grep1.dat:98882:                 /* Otherwise, we have a nontrivial interval.  When
../inputs/grep1.dat:98950:                    we're all done, the pattern will look like:
../inputs/grep1.dat:99014:                      set_number_at <jump count> <upper bound>
../inputs/grep1.dat:99077:                      set_number_at <succeed_n count> <lower bound>
../inputs/grep1.dat:99145:                      succeed_n <after jump addr> <succed_n count>
../inputs/grep1.dat:99212:                      <body of loop>
../inputs/grep1.dat:99249:                      jump_n <succeed_n addr> <jump count>
../inputs/grep1.dat:99308:                    (The upper bound and `jump_n' are omitted if
../inputs/grep1.dat:99373:                    `upper_bound' is 1, though.)  */
../inputs/grep1.dat:99426:                 else 
../inputs/grep1.dat:99449:                   { /* If the upper bound is > 1, we need to insert
../inputs/grep1.dat:99518:                        more at the end of the loop.  */
../inputs/grep1.dat:99575:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
../inputs/grep1.dat:99643:
../inputs/grep1.dat:99644:                     GET_BUFFER_SPACE (nbytes);
../inputs/grep1.dat:99692:
../inputs/grep1.dat:99693:                     /* Initialize lower bound of the `succeed_n', even
../inputs/grep1.dat:99765:                        though it will be set during matching by its
../inputs/grep1.dat:99834:                        attendant `set_number_at' (inserted next),
../inputs/grep1.dat:99901:                        because `re_compile_fastmap' needs to know.
../inputs/grep1.dat:99969:                        Jump to the `jump_n' we might insert below.  */
../inputs/grep1.dat:100041:                     INSERT_JUMP2 (succeed_n, laststart,
../inputs/grep1.dat:100098:                                   b + 5 + (upper_bound > 1) * 5,
../inputs/grep1.dat:100164:                                   lower_bound);
../inputs/grep1.dat:100213:                     b += 5;
../inputs/grep1.dat:100242:
../inputs/grep1.dat:100243:                     /* Code to initialize the lower bound.  Insert 
../inputs/grep1.dat:100312:                        before the `succeed_n'.  The `5' is the last two
../inputs/grep1.dat:100385:                        bytes of this `set_number_at', plus 3 bytes of
../inputs/grep1.dat:100456:                        the following `succeed_n'.  */
../inputs/grep1.dat:100511:                     insert_op2 (set_number_at, laststart, 5, lower_bound, b);
../inputs/grep1.dat:100590:                     b += 5;
../inputs/grep1.dat:100619:
../inputs/grep1.dat:100620:                     if (upper_bound > 1)
../inputs/grep1.dat:100662:                       { /* More than one repetition is allowed, so
../inputs/grep1.dat:100730:                            append a backward jump to the `succeed_n'
../inputs/grep1.dat:100800:                            that starts this interval.
../inputs/grep1.dat:100855:                            
../inputs/grep1.dat:100884:                            When we've reached this during matching,
../inputs/grep1.dat:100953:                            we'll have matched the interval once, so
../inputs/grep1.dat:101022:                            jump back only `upper_bound - 1' times.  */
../inputs/grep1.dat:101094:                         STORE_JUMP2 (jump_n, b, laststart + 5,
../inputs/grep1.dat:101158:                                      upper_bound - 1);
../inputs/grep1.dat:101214:                         b += 5;
../inputs/grep1.dat:101247:
../inputs/grep1.dat:101248:                         /* The location we want to set is the second
../inputs/grep1.dat:101318:                            parameter of the `jump_n'; that is `b-2' as
../inputs/grep1.dat:101390:                            an absolute address.  `laststart' will be
../inputs/grep1.dat:101460:                            the `set_number_at' we're about to insert;
../inputs/grep1.dat:101531:                            `laststart+3' the number to set, the source
../inputs/grep1.dat:101603:                            for the relative address.  But we are
../inputs/grep1.dat:101669:                            inserting into the middle of the pattern --
../inputs/grep1.dat:101741:                            so everything is getting moved up by 5.
../inputs/grep1.dat:101809:                            Conclusion: (b - 2) - (laststart + 3) + 5,
../inputs/grep1.dat:101880:                            i.e., b - laststart.
../inputs/grep1.dat:101929:                            
../inputs/grep1.dat:101958:                            We insert this at the beginning of the loop
../inputs/grep1.dat:102030:                            so that if we fail during matching, we'll
../inputs/grep1.dat:102100:                            reinitialize the bounds.  */
../inputs/grep1.dat:102157:                         insert_op2 (set_number_at, laststart, b - laststart,
../inputs/grep1.dat:102235:                                     upper_bound - 1, b);
../inputs/grep1.dat:102293:                         b += 5;
../inputs/grep1.dat:102326:                       }
../inputs/grep1.dat:102351:                   }
../inputs/grep1.dat:102372:                pending_exact = 0;
../inputs/grep1.dat:102407:                beg_interval = NULL;
../inputs/grep1.dat:102444:              }
../inputs/grep1.dat:102460:              break;
../inputs/grep1.dat:102481:
../inputs/grep1.dat:102482:            unfetch_interval:
../inputs/grep1.dat:102512:              /* If an invalid interval, match the characters as literals.  */
../inputs/grep1.dat:102591:               assert (beg_interval);
../inputs/grep1.dat:102629:               p = beg_interval;
../inputs/grep1.dat:102662:               beg_interval = NULL;
../inputs/grep1.dat:102698:
../inputs/grep1.dat:102699:               /* normal_char and normal_backslash need `c'.  */
../inputs/grep1.dat:102764:               PATFETCH (c);	
../inputs/grep1.dat:102794:
../inputs/grep1.dat:102795:               if (!(syntax & RE_NO_BK_BRACES))
../inputs/grep1.dat:102843:                 {
../inputs/grep1.dat:102862:                   if (p > pattern  &&  p[-1] == '\\')
../inputs/grep1.dat:102917:                     goto normal_backslash;
../inputs/grep1.dat:102961:                 }
../inputs/grep1.dat:102980:               goto normal_char;
../inputs/grep1.dat:103013:
../inputs/grep1.dat:103014:#ifdef emacs
../inputs/grep1.dat:103027:            /* There is no way to specify the before_dot and after_dot
../inputs/grep1.dat:103098:               operators.  rms says this is ok.  --karl  */
../inputs/grep1.dat:103158:            case '=':
../inputs/grep1.dat:103180:              BUF_PUSH (at_dot);
../inputs/grep1.dat:103213:              break;
../inputs/grep1.dat:103234:
../inputs/grep1.dat:103235:            case 's':	
../inputs/grep1.dat:103258:              laststart = b;
../inputs/grep1.dat:103287:              PATFETCH (c);
../inputs/grep1.dat:103315:              BUF_PUSH_2 (syntaxspec, syntax_spec_code[c]);
../inputs/grep1.dat:103375:              break;
../inputs/grep1.dat:103396:
../inputs/grep1.dat:103397:            case 'S':
../inputs/grep1.dat:103419:              laststart = b;
../inputs/grep1.dat:103448:              PATFETCH (c);
../inputs/grep1.dat:103476:              BUF_PUSH_2 (notsyntaxspec, syntax_spec_code[c]);
../inputs/grep1.dat:103539:              break;
../inputs/grep1.dat:103560:#endif /* emacs */
../inputs/grep1.dat:103579:
../inputs/grep1.dat:103580:
../inputs/grep1.dat:103581:            case 'w':
../inputs/grep1.dat:103603:              laststart = b;
../inputs/grep1.dat:103632:              BUF_PUSH (wordchar);
../inputs/grep1.dat:103667:              break;
../inputs/grep1.dat:103688:
../inputs/grep1.dat:103689:
../inputs/grep1.dat:103690:            case 'W':
../inputs/grep1.dat:103712:              laststart = b;
../inputs/grep1.dat:103741:              BUF_PUSH (notwordchar);
../inputs/grep1.dat:103779:              break;
../inputs/grep1.dat:103800:
../inputs/grep1.dat:103801:
../inputs/grep1.dat:103802:            case '<':
../inputs/grep1.dat:103824:              BUF_PUSH (wordbeg);
../inputs/grep1.dat:103858:              break;
../inputs/grep1.dat:103879:
../inputs/grep1.dat:103880:            case '>':
../inputs/grep1.dat:103902:              BUF_PUSH (wordend);
../inputs/grep1.dat:103936:              break;
../inputs/grep1.dat:103957:
../inputs/grep1.dat:103958:            case 'b':
../inputs/grep1.dat:103980:              BUF_PUSH (wordbound);
../inputs/grep1.dat:104016:              break;
../inputs/grep1.dat:104037:
../inputs/grep1.dat:104038:            case 'B':
../inputs/grep1.dat:104060:              BUF_PUSH (notwordbound);
../inputs/grep1.dat:104099:              break;
../inputs/grep1.dat:104120:
../inputs/grep1.dat:104121:            case '`':
../inputs/grep1.dat:104143:              BUF_PUSH (begbuf);
../inputs/grep1.dat:104176:              break;
../inputs/grep1.dat:104197:
../inputs/grep1.dat:104198:            case '\'':
../inputs/grep1.dat:104221:              BUF_PUSH (endbuf);
../inputs/grep1.dat:104254:              break;
../inputs/grep1.dat:104275:
../inputs/grep1.dat:104276:            case '1': case '2': case '3': case '4': case '5':
../inputs/grep1.dat:104338:            case '6': case '7': case '8': case '9':
../inputs/grep1.dat:104390:              if (syntax & RE_NO_BK_REFS)
../inputs/grep1.dat:104432:                goto normal_char;
../inputs/grep1.dat:104466:
../inputs/grep1.dat:104467:              c1 = c - '0';
../inputs/grep1.dat:104495:
../inputs/grep1.dat:104496:              if (c1 > regnum)
../inputs/grep1.dat:104527:                return REG_ESUBREG;
../inputs/grep1.dat:104563:
../inputs/grep1.dat:104564:              /* Can't back reference to a subexpression if inside of it.  */
../inputs/grep1.dat:104642:              if (group_in_compile_stack (compile_stack, c1))
../inputs/grep1.dat:104704:                goto normal_char;
../inputs/grep1.dat:104738:
../inputs/grep1.dat:104739:              laststart = b;
../inputs/grep1.dat:104768:              BUF_PUSH_2 (duplicate, c1);
../inputs/grep1.dat:104810:              break;
../inputs/grep1.dat:104831:
../inputs/grep1.dat:104832:
../inputs/grep1.dat:104833:            case '+':
../inputs/grep1.dat:104855:            case '?':
../inputs/grep1.dat:104877:              if (syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:104919:                goto handle_plus;
../inputs/grep1.dat:104953:              else
../inputs/grep1.dat:104972:                goto normal_backslash;
../inputs/grep1.dat:105011:
../inputs/grep1.dat:105012:            default:
../inputs/grep1.dat:105033:            normal_backslash:
../inputs/grep1.dat:105063:              /* You might think it would be useful for \ to mean
../inputs/grep1.dat:105129:                 not to translate; but if we don't translate it
../inputs/grep1.dat:105193:                 it will never match anything.  */
../inputs/grep1.dat:105244:              c = TRANSLATE (c);
../inputs/grep1.dat:105277:              goto normal_char;
../inputs/grep1.dat:105309:            }
../inputs/grep1.dat:105323:          break;
../inputs/grep1.dat:105340:
../inputs/grep1.dat:105341:
../inputs/grep1.dat:105342:	default:
../inputs/grep1.dat:105352:        /* Expects the character in `c'.  */
../inputs/grep1.dat:105397:	normal_char:
../inputs/grep1.dat:105411:	      /* If no exactn currently being built.  */
../inputs/grep1.dat:105461:          if (!pending_exact 
../inputs/grep1.dat:105491:
../inputs/grep1.dat:105492:              /* If last exactn not at current position.  */
../inputs/grep1.dat:105553:              || pending_exact + *pending_exact + 1 != b
../inputs/grep1.dat:105610:              
../inputs/grep1.dat:105625:              /* We have only one byte following the exactn for the count.  */
../inputs/grep1.dat:105704:	      || *pending_exact == (1 << BYTEWIDTH) - 1
../inputs/grep1.dat:105753:
../inputs/grep1.dat:105754:              /* If followed by a repetition operator.  */
../inputs/grep1.dat:105813:              || *p == '*' || *p == '^'
../inputs/grep1.dat:105853:	      || ((syntax & RE_BK_PLUS_QM)
../inputs/grep1.dat:105889:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
../inputs/grep1.dat:105938:		  : (*p == '+' || *p == '?'))
../inputs/grep1.dat:105970:	      || ((syntax & RE_INTERVALS)
../inputs/grep1.dat:106005:                  && ((syntax & RE_NO_BK_BRACES)
../inputs/grep1.dat:106054:		      ? *p == '{'
../inputs/grep1.dat:106074:                      : (p[0] == '\\' && p[1] == '{'))))
../inputs/grep1.dat:106131:	    {
../inputs/grep1.dat:106138:	      /* Start building a new exactn.  */
../inputs/grep1.dat:106181:              
../inputs/grep1.dat:106196:              laststart = b;
../inputs/grep1.dat:106225:
../inputs/grep1.dat:106226:	      BUF_PUSH_2 (exactn, 0);
../inputs/grep1.dat:106257:	      pending_exact = b - 1;
../inputs/grep1.dat:106287:            }
../inputs/grep1.dat:106301:            
../inputs/grep1.dat:106314:	  BUF_PUSH (c);
../inputs/grep1.dat:106331:          (*pending_exact)++;
../inputs/grep1.dat:106361:	  break;
../inputs/grep1.dat:106371:        } /* switch (c) */
../inputs/grep1.dat:106398:    } /* while p != pend */
../inputs/grep1.dat:106426:
../inputs/grep1.dat:106427:  
../inputs/grep1.dat:106430:  /* Through the pattern now.  */
../inputs/grep1.dat:106464:  
../inputs/grep1.dat:106467:  if (fixup_alt_jump)
../inputs/grep1.dat:106489:    STORE_JUMP (jump_past_alt, fixup_alt_jump, b);
../inputs/grep1.dat:106540:
../inputs/grep1.dat:106541:  if (!COMPILE_STACK_EMPTY) 
../inputs/grep1.dat:106570:    return REG_EPAREN;
../inputs/grep1.dat:106593:
../inputs/grep1.dat:106594:  free (compile_stack.stack);
../inputs/grep1.dat:106624:
../inputs/grep1.dat:106625:  /* We have succeeded; set the length of the buffer.  */
../inputs/grep1.dat:106683:  bufp->used = b - bufp->buffer;
../inputs/grep1.dat:106716:
../inputs/grep1.dat:106717:#ifdef DEBUG
../inputs/grep1.dat:106730:  if (debug)
../inputs/grep1.dat:106743:    {
../inputs/grep1.dat:106749:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
../inputs/grep1.dat:106796:      print_compiled_pattern (bufp);
../inputs/grep1.dat:106833:    }
../inputs/grep1.dat:106839:#endif /* DEBUG */
../inputs/grep1.dat:106858:
../inputs/grep1.dat:106859:  return REG_NOERROR;
../inputs/grep1.dat:106881:} /* regex_compile */
../inputs/grep1.dat:106903:
../inputs/grep1.dat:106905:/* Subroutines for `regex_compile'.  */
../inputs/grep1.dat:106945:
../inputs/grep1.dat:106946:/* Store OP at LOC followed by two-byte integer parameter ARG.  */
../inputs/grep1.dat:107013:
../inputs/grep1.dat:107014:static void
../inputs/grep1.dat:107026:store_op1 (op, loc, arg)
../inputs/grep1.dat:107051:    re_opcode_t op;
../inputs/grep1.dat:107071:    unsigned char *loc;
../inputs/grep1.dat:107095:    int arg;
../inputs/grep1.dat:107108:{
../inputs/grep1.dat:107110:  *loc = (unsigned char) op;
../inputs/grep1.dat:107139:  STORE_NUMBER (loc + 1, arg);
../inputs/grep1.dat:107170:}
../inputs/grep1.dat:107172:
../inputs/grep1.dat:107173:
../inputs/grep1.dat:107174:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
../inputs/grep1.dat:107248:
../inputs/grep1.dat:107249:static void
../inputs/grep1.dat:107261:store_op2 (op, loc, arg1, arg2)
../inputs/grep1.dat:107293:    re_opcode_t op;
../inputs/grep1.dat:107313:    unsigned char *loc;
../inputs/grep1.dat:107337:    int arg1, arg2;
../inputs/grep1.dat:107357:{
../inputs/grep1.dat:107359:  *loc = (unsigned char) op;
../inputs/grep1.dat:107388:  STORE_NUMBER (loc + 1, arg1);
../inputs/grep1.dat:107420:  STORE_NUMBER (loc + 3, arg2);
../inputs/grep1.dat:107452:}
../inputs/grep1.dat:107454:
../inputs/grep1.dat:107455:
../inputs/grep1.dat:107456:/* Copy the bytes from LOC to END to open up three bytes of space at LOC
../inputs/grep1.dat:107529:   for OP followed by two-byte integer parameter ARG.  */
../inputs/grep1.dat:107587:
../inputs/grep1.dat:107588:static void
../inputs/grep1.dat:107600:insert_op1 (op, loc, arg, end)
../inputs/grep1.dat:107631:    re_opcode_t op;
../inputs/grep1.dat:107651:    unsigned char *loc;
../inputs/grep1.dat:107675:    int arg;
../inputs/grep1.dat:107688:    unsigned char *end;    
../inputs/grep1.dat:107716:{
../inputs/grep1.dat:107718:  register unsigned char *pfrom = end;
../inputs/grep1.dat:107757:  register unsigned char *pto = end + 3;
../inputs/grep1.dat:107798:
../inputs/grep1.dat:107799:  while (pfrom != loc)
../inputs/grep1.dat:107822:    *--pto = *--pfrom;
../inputs/grep1.dat:107845:    
../inputs/grep1.dat:107850:  store_op1 (op, loc, arg);
../inputs/grep1.dat:107878:}
../inputs/grep1.dat:107880:
../inputs/grep1.dat:107881:
../inputs/grep1.dat:107882:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
../inputs/grep1.dat:107955:
../inputs/grep1.dat:107956:static void
../inputs/grep1.dat:107968:insert_op2 (op, loc, arg1, arg2, end)
../inputs/grep1.dat:108006:    re_opcode_t op;
../inputs/grep1.dat:108026:    unsigned char *loc;
../inputs/grep1.dat:108050:    int arg1, arg2;
../inputs/grep1.dat:108070:    unsigned char *end;    
../inputs/grep1.dat:108098:{
../inputs/grep1.dat:108100:  register unsigned char *pfrom = end;
../inputs/grep1.dat:108139:  register unsigned char *pto = end + 5;
../inputs/grep1.dat:108180:
../inputs/grep1.dat:108181:  while (pfrom != loc)
../inputs/grep1.dat:108204:    *--pto = *--pfrom;
../inputs/grep1.dat:108227:    
../inputs/grep1.dat:108232:  store_op2 (op, loc, arg1, arg2);
../inputs/grep1.dat:108267:}
../inputs/grep1.dat:108269:
../inputs/grep1.dat:108270:
../inputs/grep1.dat:108271:/* P points to just after a ^ in PATTERN.  Return true if that ^ comes
../inputs/grep1.dat:108342:   after an alternative or a begin-subexpression.  We assume there is at
../inputs/grep1.dat:108415:   least one character before the ^.  */
../inputs/grep1.dat:108456:
../inputs/grep1.dat:108457:static boolean
../inputs/grep1.dat:108472:at_begline_loc_p (pattern, p, syntax)
../inputs/grep1.dat:108510:    const char *pattern, *p;
../inputs/grep1.dat:108539:    reg_syntax_t syntax;
../inputs/grep1.dat:108564:{
../inputs/grep1.dat:108566:  const char *prev = p - 2;
../inputs/grep1.dat:108594:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
../inputs/grep1.dat:108662:  
../inputs/grep1.dat:108665:  return
../inputs/grep1.dat:108674:       /* After a subexpression?  */
../inputs/grep1.dat:108711:       (*prev == '(' && (syntax & RE_NO_BK_PARENS || prev_prev_backslash))
../inputs/grep1.dat:108786:       /* After an alternative?  */
../inputs/grep1.dat:108822:    || (*prev == '|' && (syntax & RE_NO_BK_VBAR || prev_prev_backslash));
../inputs/grep1.dat:108896:}
../inputs/grep1.dat:108898:
../inputs/grep1.dat:108899:
../inputs/grep1.dat:108900:/* The dual of at_begline_loc_p.  This one is for $.  We assume there is
../inputs/grep1.dat:108973:   at least one character after the $, i.e., `P < PEND'.  */
../inputs/grep1.dat:109034:
../inputs/grep1.dat:109035:static boolean
../inputs/grep1.dat:109050:at_endline_loc_p (p, pend, syntax)
../inputs/grep1.dat:109085:    const char *p, *pend;
../inputs/grep1.dat:109111:    int syntax;
../inputs/grep1.dat:109127:{
../inputs/grep1.dat:109129:  const char *next = p;
../inputs/grep1.dat:109153:  boolean next_backslash = *next == '\\';
../inputs/grep1.dat:109195:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
../inputs/grep1.dat:109250:  
../inputs/grep1.dat:109253:  return
../inputs/grep1.dat:109262:       /* Before a subexpression?  */
../inputs/grep1.dat:109300:       (syntax & RE_NO_BK_PARENS ? *next == ')'
../inputs/grep1.dat:109348:        : next_backslash && next_next && *next_next == ')')
../inputs/grep1.dat:109408:       /* Before an alternative?  */
../inputs/grep1.dat:109445:    || (syntax & RE_NO_BK_VBAR ? *next == '|'
../inputs/grep1.dat:109491:        : next_backslash && next_next && *next_next == '|');
../inputs/grep1.dat:109552:}
../inputs/grep1.dat:109554:
../inputs/grep1.dat:109555:
../inputs/grep1.dat:109556:/* Returns true if REGNUM is in one of COMPILE_STACK's elements and 
../inputs/grep1.dat:109625:   false if it's not.  */
../inputs/grep1.dat:109651:
../inputs/grep1.dat:109652:static boolean
../inputs/grep1.dat:109667:group_in_compile_stack (compile_stack, regnum)
../inputs/grep1.dat:109714:    compile_stack_type compile_stack;
../inputs/grep1.dat:109752:    regnum_t regnum;
../inputs/grep1.dat:109773:{
../inputs/grep1.dat:109775:  int this_element;
../inputs/grep1.dat:109795:
../inputs/grep1.dat:109796:  for (this_element = compile_stack.avail - 1;  
../inputs/grep1.dat:109845:       this_element >= 0; 
../inputs/grep1.dat:109872:       this_element--)
../inputs/grep1.dat:109895:    if (compile_stack.stack[this_element].regnum == regnum)
../inputs/grep1.dat:109955:      return true;
../inputs/grep1.dat:109974:
../inputs/grep1.dat:109975:  return false;
../inputs/grep1.dat:109991:}
../inputs/grep1.dat:109993:
../inputs/grep1.dat:109994:
../inputs/grep1.dat:109995:/* Read the ending character of a range (in a bracket expression) from the
../inputs/grep1.dat:110070:   uncompiled pattern *P_PTR (which ends at PEND).  We assume the
../inputs/grep1.dat:110136:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
../inputs/grep1.dat:110206:   Then we set the translation of all bits between the starting and
../inputs/grep1.dat:110274:   ending characters (inclusive) in the compiled pattern B.
../inputs/grep1.dat:110334:   
../inputs/grep1.dat:110338:   Return an error code.
../inputs/grep1.dat:110363:   
../inputs/grep1.dat:110367:   We use these short variable names so we can use the same macros as
../inputs/grep1.dat:110437:   `regex_compile' itself.  */
../inputs/grep1.dat:110468:
../inputs/grep1.dat:110469:static reg_errcode_t
../inputs/grep1.dat:110490:compile_range (p_ptr, pend, translate, syntax, b)
../inputs/grep1.dat:110540:    const char **p_ptr, *pend;
../inputs/grep1.dat:110571:    char *translate;
../inputs/grep1.dat:110592:    reg_syntax_t syntax;
../inputs/grep1.dat:110617:    unsigned char *b;
../inputs/grep1.dat:110639:{
../inputs/grep1.dat:110641:  unsigned this_char;
../inputs/grep1.dat:110663:
../inputs/grep1.dat:110664:  const char *p = *p_ptr;
../inputs/grep1.dat:110690:  int range_start, range_end;
../inputs/grep1.dat:110720:  
../inputs/grep1.dat:110723:  if (p == pend)
../inputs/grep1.dat:110740:    return REG_ERANGE;
../inputs/grep1.dat:110763:
../inputs/grep1.dat:110764:  /* Even though the pattern is a signed `char *', we need to fetch
../inputs/grep1.dat:110832:     with unsigned char *'s; if the high bit of the pattern character
../inputs/grep1.dat:110902:     is set, the range endpoints will be negative if we fetch using a
../inputs/grep1.dat:110972:     signed char *.
../inputs/grep1.dat:110992:
../inputs/grep1.dat:110993:     We also want to fetch the endpoints without translating them; the 
../inputs/grep1.dat:111065:     appropriate translation is done in the bit-setting loop below.  */
../inputs/grep1.dat:111137:  range_start = ((unsigned char *) p)[-2];
../inputs/grep1.dat:111180:  range_end   = ((unsigned char *) p)[0];
../inputs/grep1.dat:111222:
../inputs/grep1.dat:111223:  /* Have to increment the pointer into the pattern string, so the
../inputs/grep1.dat:111290:     caller isn't still at the ending character.  */
../inputs/grep1.dat:111343:  (*p_ptr)++;
../inputs/grep1.dat:111357:
../inputs/grep1.dat:111358:  /* If the start is after the end, the range is empty.  */
../inputs/grep1.dat:111418:  if (range_start > range_end)
../inputs/grep1.dat:111449:    return syntax & RE_NO_EMPTY_RANGES ? REG_ERANGE : REG_NOERROR;
../inputs/grep1.dat:111516:
../inputs/grep1.dat:111517:  /* Here we see why `this_char' has to be larger than an `unsigned
../inputs/grep1.dat:111585:     char' -- the range is inclusive, so if `range_end' == 0xff
../inputs/grep1.dat:111649:     (assuming 8-bit characters), we would otherwise go into an infinite
../inputs/grep1.dat:111722:     loop, since all characters <= 0xff.  */
../inputs/grep1.dat:111767:  for (this_char = range_start; this_char <= range_end; this_char++)
../inputs/grep1.dat:111836:    {
../inputs/grep1.dat:111842:      SET_LIST_BIT (TRANSLATE (this_char));
../inputs/grep1.dat:111886:    }
../inputs/grep1.dat:111892:  
../inputs/grep1.dat:111895:  return REG_NOERROR;
../inputs/grep1.dat:111917:}
../inputs/grep1.dat:111919:
../inputs/grep1.dat:111921:/* Failure stack declarations and macros; both re_compile_fastmap and
../inputs/grep1.dat:111991:   re_match_2 use a failure stack.  These have to be macros because of
../inputs/grep1.dat:112062:   REGEX_ALLOCATE.  */
../inputs/grep1.dat:112085:   
../inputs/grep1.dat:112089:
../inputs/grep1.dat:112090:/* Number of failure points for which to initially allocate space
../inputs/grep1.dat:112156:   when matching.  If this number is exceeded, we allocate more
../inputs/grep1.dat:112220:   space, so it is not a hard limit.  */
../inputs/grep1.dat:112261:#ifndef INIT_FAILURE_ALLOC
../inputs/grep1.dat:112288:#define INIT_FAILURE_ALLOC 5
../inputs/grep1.dat:112317:#endif
../inputs/grep1.dat:112324:
../inputs/grep1.dat:112325:/* Roughly the maximum number of failure points on the stack.  Would be
../inputs/grep1.dat:112397:   exactly that if always used MAX_FAILURE_SPACE each time we failed.
../inputs/grep1.dat:112467:   This is a variable only so users of regex can assign to it; we never
../inputs/grep1.dat:112539:   change it ourselves.  */
../inputs/grep1.dat:112567:int re_max_failures = 2000;
../inputs/grep1.dat:112595:
../inputs/grep1.dat:112596:typedef const unsigned char *fail_stack_elt_t;
../inputs/grep1.dat:112643:
../inputs/grep1.dat:112644:typedef struct
../inputs/grep1.dat:112659:{
../inputs/grep1.dat:112661:  fail_stack_elt_t *stack;
../inputs/grep1.dat:112688:  unsigned size;
../inputs/grep1.dat:112705:  unsigned avail;			/* Offset of next open position.  */
../inputs/grep1.dat:112762:} fail_stack_type;
../inputs/grep1.dat:112781:
../inputs/grep1.dat:112782:#define FAIL_STACK_EMPTY()     (fail_stack.avail == 0)
../inputs/grep1.dat:112837:#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
../inputs/grep1.dat:112897:#define FAIL_STACK_FULL()      (fail_stack.avail == fail_stack.size)
../inputs/grep1.dat:112966:#define FAIL_STACK_TOP()       (fail_stack.stack[fail_stack.avail])
../inputs/grep1.dat:113034:
../inputs/grep1.dat:113035:
../inputs/grep1.dat:113036:/* Initialize `fail_stack'.  Do `return -2' if the alloc fails.  */
../inputs/grep1.dat:113104:
../inputs/grep1.dat:113105:#define INIT_FAIL_STACK()						\
../inputs/grep1.dat:113138:  do {									\
../inputs/grep1.dat:113155:    fail_stack.stack = (fail_stack_elt_t *)				\
../inputs/grep1.dat:113204:      REGEX_ALLOCATE (INIT_FAILURE_ALLOC * sizeof (fail_stack_elt_t));	\
../inputs/grep1.dat:113277:									\
../inputs/grep1.dat:113288:    if (fail_stack.stack == NULL)					\
../inputs/grep1.dat:113328:      return -2;							\
../inputs/grep1.dat:113353:									\
../inputs/grep1.dat:113364:    fail_stack.size = INIT_FAILURE_ALLOC;				\
../inputs/grep1.dat:113411:    fail_stack.avail = 0;						\
../inputs/grep1.dat:113444:  } while (0)
../inputs/grep1.dat:113458:
../inputs/grep1.dat:113459:
../inputs/grep1.dat:113460:/* Double the size of FAIL_STACK, up to approximately `re_max_failures' items.
../inputs/grep1.dat:113539:
../inputs/grep1.dat:113540:   Return 1 if succeeds, and 0 if either ran out of memory
../inputs/grep1.dat:113599:   allocating space for it or it was already too large.  
../inputs/grep1.dat:113657:   
../inputs/grep1.dat:113661:   REGEX_REALLOCATE requires `destination' be declared.   */
../inputs/grep1.dat:113722:
../inputs/grep1.dat:113723:#define DOUBLE_FAIL_STACK(fail_stack)					\
../inputs/grep1.dat:113767:  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
../inputs/grep1.dat:113829:   ? 0									\
../inputs/grep1.dat:113846:   : ((fail_stack).stack = (fail_stack_elt_t *)				\
../inputs/grep1.dat:113899:        REGEX_REALLOCATE ((fail_stack).stack, 				\
../inputs/grep1.dat:113951:          (fail_stack).size * sizeof (fail_stack_elt_t),		\
../inputs/grep1.dat:114011:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
../inputs/grep1.dat:114078:									\
../inputs/grep1.dat:114089:      (fail_stack).stack == NULL					\
../inputs/grep1.dat:114128:      ? 0								\
../inputs/grep1.dat:114147:      : ((fail_stack).size <<= 1, 					\
../inputs/grep1.dat:114188:         1)))
../inputs/grep1.dat:114202:
../inputs/grep1.dat:114203:
../inputs/grep1.dat:114204:/* Push PATTERN_OP on FAIL_STACK. 
../inputs/grep1.dat:114239:
../inputs/grep1.dat:114240:   Return 1 if was able to do so and 0 if ran out of memory allocating
../inputs/grep1.dat:114311:   space to do so.  */
../inputs/grep1.dat:114334:#define PUSH_PATTERN_OP(pattern_op, fail_stack)				\
../inputs/grep1.dat:114387:  ((FAIL_STACK_FULL ()							\
../inputs/grep1.dat:114418:    && !DOUBLE_FAIL_STACK (fail_stack))					\
../inputs/grep1.dat:114464:    ? 0									\
../inputs/grep1.dat:114482:    : ((fail_stack).stack[(fail_stack).avail++] = pattern_op,		\
../inputs/grep1.dat:114547:       1))
../inputs/grep1.dat:114558:
../inputs/grep1.dat:114559:/* This pushes an item onto the failure stack.  Must be a four-byte
../inputs/grep1.dat:114627:   value.  Assumes the variable `fail_stack'.  Probably should only
../inputs/grep1.dat:114695:   be called from within `PUSH_FAILURE_POINT'.  */
../inputs/grep1.dat:114746:#define PUSH_FAILURE_ITEM(item)						\
../inputs/grep1.dat:114785:  fail_stack.stack[fail_stack.avail++] = (fail_stack_elt_t) item
../inputs/grep1.dat:114850:
../inputs/grep1.dat:114851:/* The complement operation.  Assumes `fail_stack' is nonempty.  */
../inputs/grep1.dat:114919:#define POP_FAILURE_ITEM() fail_stack.stack[--fail_stack.avail]
../inputs/grep1.dat:114983:
../inputs/grep1.dat:114984:/* Used to omit pushing failure point id's when we're not debugging.  */
../inputs/grep1.dat:115057:#ifdef DEBUG
../inputs/grep1.dat:115070:#define DEBUG_PUSH PUSH_FAILURE_ITEM
../inputs/grep1.dat:115107:#define DEBUG_POP(item_addr) *(item_addr) = POP_FAILURE_ITEM ()
../inputs/grep1.dat:115171:#else
../inputs/grep1.dat:115177:#define DEBUG_PUSH(item)
../inputs/grep1.dat:115202:#define DEBUG_POP(item_addr)
../inputs/grep1.dat:115231:#endif
../inputs/grep1.dat:115238:
../inputs/grep1.dat:115239:
../inputs/grep1.dat:115240:/* Push the information about the state we will need
../inputs/grep1.dat:115293:   if we ever fail back to it.  
../inputs/grep1.dat:115326:   
../inputs/grep1.dat:115330:   Requires variables fail_stack, regstart, regend, reg_info, and
../inputs/grep1.dat:115396:   num_regs be declared.  DOUBLE_FAIL_STACK requires `destination' be
../inputs/grep1.dat:115466:   declared.
../inputs/grep1.dat:115479:   
../inputs/grep1.dat:115483:   Does `return FAILURE_CODE' if runs out of memory.  */
../inputs/grep1.dat:115540:
../inputs/grep1.dat:115541:#define PUSH_FAILURE_POINT(pattern_place, string_place, failure_code)	\
../inputs/grep1.dat:115613:  do {									\
../inputs/grep1.dat:115630:    char *destination;							\
../inputs/grep1.dat:115661:    /* Must be int, so when we don't save any registers, the arithmetic	\
../inputs/grep1.dat:115735:       of 0 + -1 isn't done as unsigned.  */				\
../inputs/grep1.dat:115785:    int this_reg;							\
../inputs/grep1.dat:115811:    									\
../inputs/grep1.dat:115826:    DEBUG_STATEMENT (failure_id++);					\
../inputs/grep1.dat:115868:    DEBUG_STATEMENT (nfailure_points_pushed++);				\
../inputs/grep1.dat:115921:    DEBUG_PRINT2 ("\nPUSH_FAILURE_POINT #%u:\n", failure_id);		\
../inputs/grep1.dat:115986:    DEBUG_PRINT2 ("  Before push, next avail: %d\n", (fail_stack).avail);\
../inputs/grep1.dat:116061:    DEBUG_PRINT2 ("                     size: %d\n", (fail_stack).size);\
../inputs/grep1.dat:116135:									\
../inputs/grep1.dat:116146:    DEBUG_PRINT2 ("  slots needed: %d\n", NUM_FAILURE_ITEMS);		\
../inputs/grep1.dat:116211:    DEBUG_PRINT2 ("     available: %d\n", REMAINING_AVAIL_SLOTS);	\
../inputs/grep1.dat:116279:									\
../inputs/grep1.dat:116290:    /* Ensure we have enough space allocated for what we will push.  */	\
../inputs/grep1.dat:116364:    while (REMAINING_AVAIL_SLOTS < NUM_FAILURE_ITEMS)			\
../inputs/grep1.dat:116422:      {									\
../inputs/grep1.dat:116440:        if (!DOUBLE_FAIL_STACK (fail_stack))			\
../inputs/grep1.dat:116489:          return failure_code;						\
../inputs/grep1.dat:116527:									\
../inputs/grep1.dat:116538:        DEBUG_PRINT2 ("\n  Doubled stack; size now: %d\n",		\
../inputs/grep1.dat:116600:		       (fail_stack).size);				\
../inputs/grep1.dat:116634:        DEBUG_PRINT2 ("  slots available: %d\n", REMAINING_AVAIL_SLOTS);\
../inputs/grep1.dat:116708:      }									\
../inputs/grep1.dat:116726:									\
../inputs/grep1.dat:116737:    /* Push the info, starting with the registers.  */			\
../inputs/grep1.dat:116796:    DEBUG_PRINT1 ("\n");						\
../inputs/grep1.dat:116828:									\
../inputs/grep1.dat:116839:    for (this_reg = lowest_active_reg; this_reg <= highest_active_reg;	\
../inputs/grep1.dat:116912:         this_reg++)							\
../inputs/grep1.dat:116941:      {									\
../inputs/grep1.dat:116959:	DEBUG_PRINT2 ("  Pushing reg: %d\n", this_reg);			\
../inputs/grep1.dat:117012:        DEBUG_STATEMENT (num_regs_pushed++);				\
../inputs/grep1.dat:117062:									\
../inputs/grep1.dat:117073:	DEBUG_PRINT2 ("    start: 0x%x\n", regstart[this_reg]);		\
../inputs/grep1.dat:117133:        PUSH_FAILURE_ITEM (regstart[this_reg]);				\
../inputs/grep1.dat:117186:                                                                        \
../inputs/grep1.dat:117260:	DEBUG_PRINT2 ("    end: 0x%x\n", regend[this_reg]);		\
../inputs/grep1.dat:117316:        PUSH_FAILURE_ITEM (regend[this_reg]);				\
../inputs/grep1.dat:117367:									\
../inputs/grep1.dat:117378:	DEBUG_PRINT2 ("    info: 0x%x\n      ", reg_info[this_reg]);	\
../inputs/grep1.dat:117442:        DEBUG_PRINT2 (" match_null=%d",					\
../inputs/grep1.dat:117488:                      REG_MATCH_NULL_STRING_P (reg_info[this_reg]));	\
../inputs/grep1.dat:117559:        DEBUG_PRINT2 (" active=%d", IS_ACTIVE (reg_info[this_reg]));	\
../inputs/grep1.dat:117630:        DEBUG_PRINT2 (" matched_something=%d",				\
../inputs/grep1.dat:117682:                      MATCHED_SOMETHING (reg_info[this_reg]));		\
../inputs/grep1.dat:117748:        DEBUG_PRINT2 (" ever_matched=%d",				\
../inputs/grep1.dat:117795:                      EVER_MATCHED_SOMETHING (reg_info[this_reg]));	\
../inputs/grep1.dat:117865:	DEBUG_PRINT1 ("\n");						\
../inputs/grep1.dat:117894:        PUSH_FAILURE_ITEM (reg_info[this_reg].word);			\
../inputs/grep1.dat:117951:      }									\
../inputs/grep1.dat:117969:									\
../inputs/grep1.dat:117980:    DEBUG_PRINT2 ("  Pushing  low active reg: %d\n", lowest_active_reg);\
../inputs/grep1.dat:118054:    PUSH_FAILURE_ITEM (lowest_active_reg);				\
../inputs/grep1.dat:118102:									\
../inputs/grep1.dat:118113:    DEBUG_PRINT2 ("  Pushing high active reg: %d\n", highest_active_reg);\
../inputs/grep1.dat:118188:    PUSH_FAILURE_ITEM (highest_active_reg);				\
../inputs/grep1.dat:118237:									\
../inputs/grep1.dat:118248:    DEBUG_PRINT2 ("  Pushing pattern 0x%x: ", pattern_place);		\
../inputs/grep1.dat:118313:    DEBUG_PRINT_COMPILED_PATTERN (bufp, pattern_place, pend);		\
../inputs/grep1.dat:118378:    PUSH_FAILURE_ITEM (pattern_place);					\
../inputs/grep1.dat:118423:									\
../inputs/grep1.dat:118434:    DEBUG_PRINT2 ("  Pushing string 0x%x: `", string_place);		\
../inputs/grep1.dat:118498:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
../inputs/grep1.dat:118572:				 size2);				\
../inputs/grep1.dat:118590:    DEBUG_PRINT1 ("'\n");						\
../inputs/grep1.dat:118623:    PUSH_FAILURE_ITEM (string_place);					\
../inputs/grep1.dat:118667:									\
../inputs/grep1.dat:118678:    DEBUG_PRINT2 ("  Pushing failure id: %u\n", failure_id);		\
../inputs/grep1.dat:118742:    DEBUG_PUSH (failure_id);						\
../inputs/grep1.dat:118778:  } while (0)
../inputs/grep1.dat:118792:
../inputs/grep1.dat:118793:/* This is the number of items that are pushed and popped on the stack
../inputs/grep1.dat:118864:   for each register.  */
../inputs/grep1.dat:118890:#define NUM_REG_ITEMS  3
../inputs/grep1.dat:118915:
../inputs/grep1.dat:118916:/* Individual items aside from the registers.  */
../inputs/grep1.dat:118966:#ifdef DEBUG
../inputs/grep1.dat:119040:#else
../inputs/grep1.dat:119046:#define NUM_NONREG_ITEMS 4
../inputs/grep1.dat:119073:#endif
../inputs/grep1.dat:119080:
../inputs/grep1.dat:119081:/* We push at most this many items on the stack.  */
../inputs/grep1.dat:119134:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
../inputs/grep1.dat:119212:
../inputs/grep1.dat:119213:/* We actually push this many items.  */
../inputs/grep1.dat:119254:#define NUM_FAILURE_ITEMS						\
../inputs/grep1.dat:119287:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
../inputs/grep1.dat:119354:    + NUM_NONREG_ITEMS)
../inputs/grep1.dat:119378:
../inputs/grep1.dat:119379:/* How many items can still be added to the stack without overflowing it.  */
../inputs/grep1.dat:119457:#define REMAINING_AVAIL_SLOTS ((fail_stack).size - (fail_stack).avail)
../inputs/grep1.dat:119528:
../inputs/grep1.dat:119529:
../inputs/grep1.dat:119530:/* Pops what PUSH_FAIL_STACK pushes.
../inputs/grep1.dat:119567:
../inputs/grep1.dat:119568:   We restore into the parameters, all of which should be lvalues:
../inputs/grep1.dat:119635:     STR -- the saved data position.
../inputs/grep1.dat:119672:     PAT -- the saved pattern position.
../inputs/grep1.dat:119712:     LOW_REG, HIGH_REG -- the highest and lowest active registers.
../inputs/grep1.dat:119779:     REGSTART, REGEND -- arrays of string positions.
../inputs/grep1.dat:119832:     REG_INFO -- array of information about each subexpression.
../inputs/grep1.dat:119896:   
../inputs/grep1.dat:119900:   Also assumes the variables `fail_stack' and (if debugging), `bufp',
../inputs/grep1.dat:119971:   `pend', `string1', `size1', `string2', and `size2'.  */
../inputs/grep1.dat:120030:
../inputs/grep1.dat:120031:#define POP_FAILURE_POINT(str, pat, low_reg, high_reg, regstart, regend, reg_info)\
../inputs/grep1.dat:120115:{									\
../inputs/grep1.dat:120127:  DEBUG_STATEMENT (fail_stack_elt_t failure_id;)			\
../inputs/grep1.dat:120180:  int this_reg;								\
../inputs/grep1.dat:120205:  const unsigned char *string_temp;					\
../inputs/grep1.dat:120247:									\
../inputs/grep1.dat:120258:  assert (!FAIL_STACK_EMPTY ());					\
../inputs/grep1.dat:120297:									\
../inputs/grep1.dat:120308:  /* Remove failure points and point to how many regs pushed.  */	\
../inputs/grep1.dat:120376:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
../inputs/grep1.dat:120422:  DEBUG_PRINT2 ("  Before pop, next avail: %d\n", fail_stack.avail);	\
../inputs/grep1.dat:120493:  DEBUG_PRINT2 ("                    size: %d\n", fail_stack.size);	\
../inputs/grep1.dat:120563:									\
../inputs/grep1.dat:120574:  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
../inputs/grep1.dat:120627:									\
../inputs/grep1.dat:120638:  DEBUG_POP (&failure_id);						\
../inputs/grep1.dat:120672:  DEBUG_PRINT2 ("  Popping failure id: %u\n", failure_id);		\
../inputs/grep1.dat:120734:									\
../inputs/grep1.dat:120745:  /* If the saved string location is NULL, it came from an		\
../inputs/grep1.dat:120807:     on_failure_keep_string_jump opcode, and we want to throw away the	\
../inputs/grep1.dat:120880:     saved NULL, thus retaining our current position in the string.  */	\
../inputs/grep1.dat:120954:  string_temp = POP_FAILURE_ITEM ();					\
../inputs/grep1.dat:120997:  if (string_temp != NULL)						\
../inputs/grep1.dat:121031:    str = (const char *) string_temp;					\
../inputs/grep1.dat:121075:									\
../inputs/grep1.dat:121086:  DEBUG_PRINT2 ("  Popping string 0x%x: `", str);			\
../inputs/grep1.dat:121140:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
../inputs/grep1.dat:121209:  DEBUG_PRINT1 ("'\n");							\
../inputs/grep1.dat:121241:									\
../inputs/grep1.dat:121252:  pat = (unsigned char *) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:121304:  DEBUG_PRINT2 ("  Popping pattern 0x%x: ", pat);			\
../inputs/grep1.dat:121358:  DEBUG_PRINT_COMPILED_PATTERN (bufp, pat, pend);			\
../inputs/grep1.dat:121412:									\
../inputs/grep1.dat:121423:  /* Restore register info.  */						\
../inputs/grep1.dat:121462:  high_reg = (unsigned) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:121512:  DEBUG_PRINT2 ("  Popping high active reg: %d\n", high_reg);		\
../inputs/grep1.dat:121577:									\
../inputs/grep1.dat:121588:  low_reg = (unsigned) POP_FAILURE_ITEM ();				\
../inputs/grep1.dat:121637:  DEBUG_PRINT2 ("  Popping  low active reg: %d\n", low_reg);		\
../inputs/grep1.dat:121701:									\
../inputs/grep1.dat:121712:  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
../inputs/grep1.dat:121776:    {									\
../inputs/grep1.dat:121792:      DEBUG_PRINT2 ("    Popping reg: %d\n", this_reg);			\
../inputs/grep1.dat:121852:									\
../inputs/grep1.dat:121863:      reg_info[this_reg].word = POP_FAILURE_ITEM ();			\
../inputs/grep1.dat:121920:      DEBUG_PRINT2 ("      info: 0x%x\n", reg_info[this_reg]);		\
../inputs/grep1.dat:121986:									\
../inputs/grep1.dat:121997:      regend[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
../inputs/grep1.dat:122061:      DEBUG_PRINT2 ("      end: 0x%x\n", regend[this_reg]);		\
../inputs/grep1.dat:122124:									\
../inputs/grep1.dat:122135:      regstart[this_reg] = (const char *) POP_FAILURE_ITEM ();		\
../inputs/grep1.dat:122201:      DEBUG_PRINT2 ("      start: 0x%x\n", regstart[this_reg]);		\
../inputs/grep1.dat:122268:    }									\
../inputs/grep1.dat:122284:									\
../inputs/grep1.dat:122295:  DEBUG_STATEMENT (nfailure_points_popped++);				\
../inputs/grep1.dat:122346:} /* POP_FAILURE_POINT */
../inputs/grep1.dat:122372:
../inputs/grep1.dat:122374:/* re_compile_fastmap computes a ``fastmap'' for the compiled pattern in
../inputs/grep1.dat:122447:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
../inputs/grep1.dat:122514:   characters can start a string that matches the pattern.  This fastmap
../inputs/grep1.dat:122587:   is used by re_search to skip quickly over impossible starting points.
../inputs/grep1.dat:122660:
../inputs/grep1.dat:122661:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
../inputs/grep1.dat:122731:   area as BUFP->fastmap.
../inputs/grep1.dat:122757:   
../inputs/grep1.dat:122761:   We set the `fastmap', `fastmap_accurate', and `can_be_null' fields in
../inputs/grep1.dat:122834:   the pattern buffer.
../inputs/grep1.dat:122857:
../inputs/grep1.dat:122858:   Returns 0 if we succeed, -2 if an internal error.   */
../inputs/grep1.dat:122916:
../inputs/grep1.dat:122917:int
../inputs/grep1.dat:122921:re_compile_fastmap (bufp)
../inputs/grep1.dat:122947:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:122984:{
../inputs/grep1.dat:122986:  int j, k;
../inputs/grep1.dat:122998:  fail_stack_type fail_stack;
../inputs/grep1.dat:123028:#ifndef REGEX_MALLOC
../inputs/grep1.dat:123049:  char *destination;
../inputs/grep1.dat:123070:#endif
../inputs/grep1.dat:123077:  /* We don't push any register information onto the failure stack.  */
../inputs/grep1.dat:123149:  unsigned num_regs = 0;
../inputs/grep1.dat:123174:  
../inputs/grep1.dat:123177:  register char *fastmap = bufp->fastmap;
../inputs/grep1.dat:123219:  unsigned char *pattern = bufp->buffer;
../inputs/grep1.dat:123260:  unsigned long size = bufp->used;
../inputs/grep1.dat:123295:  const unsigned char *p = pattern;
../inputs/grep1.dat:123331:  register unsigned char *pend = pattern + size;
../inputs/grep1.dat:123380:
../inputs/grep1.dat:123381:  /* Assume that each path through the pattern can be null until
../inputs/grep1.dat:123446:     proven otherwise.  We set this false at the bottom of switch
../inputs/grep1.dat:123512:     statement, to which we get only if a particular path doesn't
../inputs/grep1.dat:123578:     match the empty string.  */
../inputs/grep1.dat:123611:  boolean path_can_be_null = true;
../inputs/grep1.dat:123646:
../inputs/grep1.dat:123647:  /* We aren't doing a `succeed_n' to begin with.  */
../inputs/grep1.dat:123701:  boolean succeed_n_p = false;
../inputs/grep1.dat:123732:
../inputs/grep1.dat:123733:  assert (fastmap != NULL && p != NULL);
../inputs/grep1.dat:123774:  
../inputs/grep1.dat:123777:  INIT_FAIL_STACK ();
../inputs/grep1.dat:123799:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
../inputs/grep1.dat:123866:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
../inputs/grep1.dat:123935:  bufp->can_be_null = 0;
../inputs/grep1.dat:123960:      
../inputs/grep1.dat:123967:  while (p != pend || !FAIL_STACK_EMPTY ())
../inputs/grep1.dat:124011:    {
../inputs/grep1.dat:124017:      if (p == pend)
../inputs/grep1.dat:124038:        {
../inputs/grep1.dat:124048:          bufp->can_be_null |= path_can_be_null;
../inputs/grep1.dat:124097:          
../inputs/grep1.dat:124108:          /* Reset for next path.  */
../inputs/grep1.dat:124146:          path_can_be_null = true;
../inputs/grep1.dat:124181:          
../inputs/grep1.dat:124192:          p = fail_stack.stack[--fail_stack.avail];
../inputs/grep1.dat:124244:	}
../inputs/grep1.dat:124247:
../inputs/grep1.dat:124248:      /* We should never be about to go beyond the end of the pattern.  */
../inputs/grep1.dat:124323:      assert (p < pend);
../inputs/grep1.dat:124348:      
../inputs/grep1.dat:124355:#ifdef SWITCH_ENUM_BUG
../inputs/grep1.dat:124378:      switch ((int) ((re_opcode_t) *p++))
../inputs/grep1.dat:124420:#else
../inputs/grep1.dat:124426:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:124460:#endif
../inputs/grep1.dat:124467:	{
../inputs/grep1.dat:124470:
../inputs/grep1.dat:124471:        /* I guess the idea here is to simply not bother with a fastmap
../inputs/grep1.dat:124543:           if a backreference is used, since it's too hard to figure out
../inputs/grep1.dat:124616:           the fastmap for the corresponding group.  Setting
../inputs/grep1.dat:124677:           `can_be_null' stops `re_search_2' from using the fastmap, so
../inputs/grep1.dat:124749:           that is all we do.  */
../inputs/grep1.dat:124783:	case duplicate:
../inputs/grep1.dat:124800:	  bufp->can_be_null = 1;
../inputs/grep1.dat:124826:          return 0;
../inputs/grep1.dat:124846:
../inputs/grep1.dat:124847:
../inputs/grep1.dat:124848:      /* Following are the cases which match a character.  These end
../inputs/grep1.dat:124917:         with `break'.  */
../inputs/grep1.dat:124944:
../inputs/grep1.dat:124945:	case exactn:
../inputs/grep1.dat:124959:          fastmap[p[1]] = 1;
../inputs/grep1.dat:124988:	  break;
../inputs/grep1.dat:124998:
../inputs/grep1.dat:124999:
../inputs/grep1.dat:125000:        case charset:
../inputs/grep1.dat:125022:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
../inputs/grep1.dat:125076:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
../inputs/grep1.dat:125128:              fastmap[j] = 1;
../inputs/grep1.dat:125158:	  break;
../inputs/grep1.dat:125168:
../inputs/grep1.dat:125169:
../inputs/grep1.dat:125170:	case charset_not:
../inputs/grep1.dat:125189:	  /* Chars beyond end of map must be allowed.  */
../inputs/grep1.dat:125240:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:125295:            fastmap[j] = 1;
../inputs/grep1.dat:125323:
../inputs/grep1.dat:125324:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
../inputs/grep1.dat:125371:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
../inputs/grep1.dat:125426:              fastmap[j] = 1;
../inputs/grep1.dat:125456:          break;
../inputs/grep1.dat:125473:
../inputs/grep1.dat:125474:
../inputs/grep1.dat:125475:	case wordchar:
../inputs/grep1.dat:125491:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:125533:	    if (SYNTAX (j) == Sword)
../inputs/grep1.dat:125563:	      fastmap[j] = 1;
../inputs/grep1.dat:125586:	  break;
../inputs/grep1.dat:125596:
../inputs/grep1.dat:125597:
../inputs/grep1.dat:125598:	case notwordchar:
../inputs/grep1.dat:125617:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:125659:	    if (SYNTAX (j) != Sword)
../inputs/grep1.dat:125689:	      fastmap[j] = 1;
../inputs/grep1.dat:125712:	  break;
../inputs/grep1.dat:125722:
../inputs/grep1.dat:125723:
../inputs/grep1.dat:125724:        case anychar:
../inputs/grep1.dat:125746:          /* `.' matches anything ...  */
../inputs/grep1.dat:125788:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:125830:            fastmap[j] = 1;
../inputs/grep1.dat:125858:
../inputs/grep1.dat:125859:          /* ... except perhaps newline.  */
../inputs/grep1.dat:125904:          if (!(bufp->syntax & RE_DOT_NEWLINE))
../inputs/grep1.dat:125952:            fastmap['\n'] = 0;
../inputs/grep1.dat:125983:
../inputs/grep1.dat:125984:          /* Return if we have already set `can_be_null'; if we have,
../inputs/grep1.dat:126054:             then the fastmap is irrelevant.  Something's wrong here.  */
../inputs/grep1.dat:126128:	  else if (bufp->can_be_null)
../inputs/grep1.dat:126159:	    return 0;
../inputs/grep1.dat:126174:
../inputs/grep1.dat:126175:          /* Otherwise, have to check alternative paths.  */
../inputs/grep1.dat:126236:	  break;
../inputs/grep1.dat:126246:
../inputs/grep1.dat:126247:
../inputs/grep1.dat:126248:#ifdef emacs
../inputs/grep1.dat:126261:        case syntaxspec:
../inputs/grep1.dat:126286:	  k = *p++;
../inputs/grep1.dat:126299:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:126341:	    if (SYNTAX (j) == (enum syntaxcode) k)
../inputs/grep1.dat:126385:	      fastmap[j] = 1;
../inputs/grep1.dat:126408:	  break;
../inputs/grep1.dat:126418:
../inputs/grep1.dat:126419:
../inputs/grep1.dat:126420:	case notsyntaxspec:
../inputs/grep1.dat:126441:	  k = *p++;
../inputs/grep1.dat:126454:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
../inputs/grep1.dat:126496:	    if (SYNTAX (j) != (enum syntaxcode) k)
../inputs/grep1.dat:126540:	      fastmap[j] = 1;
../inputs/grep1.dat:126563:	  break;
../inputs/grep1.dat:126573:
../inputs/grep1.dat:126574:
../inputs/grep1.dat:126575:      /* All cases after this match the empty string.  These end with
../inputs/grep1.dat:126645:         `continue'.  */
../inputs/grep1.dat:126670:
../inputs/grep1.dat:126671:
../inputs/grep1.dat:126672:	case before_dot:
../inputs/grep1.dat:126690:	case at_dot:
../inputs/grep1.dat:126704:	case after_dot:
../inputs/grep1.dat:126721:          continue;
../inputs/grep1.dat:126741:#endif /* not emacs */
../inputs/grep1.dat:126764:
../inputs/grep1.dat:126765:
../inputs/grep1.dat:126766:        case no_op:
../inputs/grep1.dat:126786:        case begline:
../inputs/grep1.dat:126808:        case endline:
../inputs/grep1.dat:126830:	case begbuf:
../inputs/grep1.dat:126844:	case endbuf:
../inputs/grep1.dat:126858:	case wordbound:
../inputs/grep1.dat:126875:	case notwordbound:
../inputs/grep1.dat:126895:	case wordbeg:
../inputs/grep1.dat:126910:	case wordend:
../inputs/grep1.dat:126925:        case push_dummy_failure:
../inputs/grep1.dat:126958:          continue;
../inputs/grep1.dat:126978:
../inputs/grep1.dat:126979:
../inputs/grep1.dat:126980:	case jump_n:
../inputs/grep1.dat:126994:        case pop_failure_jump:
../inputs/grep1.dat:127025:	case maybe_pop_jump:
../inputs/grep1.dat:127047:	case jump:
../inputs/grep1.dat:127059:        case jump_past_alt:
../inputs/grep1.dat:127087:	case dummy_failure_jump:
../inputs/grep1.dat:127113:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:127155:	  p += j;	
../inputs/grep1.dat:127167:	  if (j > 0)
../inputs/grep1.dat:127181:	    continue;
../inputs/grep1.dat:127196:            
../inputs/grep1.dat:127209:          /* Jump backward implies we just went through the body of a
../inputs/grep1.dat:127279:             loop and matched nothing.  Opcode jumped to should be
../inputs/grep1.dat:127346:             `on_failure_jump' or `succeed_n'.  Just treat it like an
../inputs/grep1.dat:127416:             ordinary jump.  For a * loop, it has pushed its failure
../inputs/grep1.dat:127485:             point already; if so, discard that as redundant.  */
../inputs/grep1.dat:127551:          if ((re_opcode_t) *p != on_failure_jump
../inputs/grep1.dat:127601:	      && (re_opcode_t) *p != succeed_n)
../inputs/grep1.dat:127642:	    continue;
../inputs/grep1.dat:127657:
../inputs/grep1.dat:127658:          p++;
../inputs/grep1.dat:127673:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:127715:          p += j;		
../inputs/grep1.dat:127735:	  
../inputs/grep1.dat:127739:          /* If what's on the stack is where we are now, pop it.  */
../inputs/grep1.dat:127808:          if (!FAIL_STACK_EMPTY () 
../inputs/grep1.dat:127844:	      && fail_stack.stack[fail_stack.avail - 1] == p)
../inputs/grep1.dat:127899:            fail_stack.avail--;
../inputs/grep1.dat:127931:
../inputs/grep1.dat:127932:          continue;
../inputs/grep1.dat:127952:
../inputs/grep1.dat:127953:
../inputs/grep1.dat:127954:        case on_failure_jump:
../inputs/grep1.dat:127984:        case on_failure_keep_string_jump:
../inputs/grep1.dat:128026:	handle_on_failure_jump:
../inputs/grep1.dat:128051:          EXTRACT_NUMBER_AND_INCR (j, p);
../inputs/grep1.dat:128093:
../inputs/grep1.dat:128094:          /* For some patterns, e.g., `(a?)?', `p+j' here points to the
../inputs/grep1.dat:128166:             end of the pattern.  We don't want to push such a point,
../inputs/grep1.dat:128236:             since when we restore it above, entering the switch will
../inputs/grep1.dat:128306:             increment `p' past the end of the pattern.  We don't need
../inputs/grep1.dat:128377:             to push such a point since we obviously won't find any more
../inputs/grep1.dat:128450:             fastmap entries beyond `pend'.  Such a pattern can match
../inputs/grep1.dat:128520:             the null string, though.  */
../inputs/grep1.dat:128562:          if (p + j < pend)
../inputs/grep1.dat:128590:            {
../inputs/grep1.dat:128604:              if (!PUSH_PATTERN_OP (p + j, fail_stack))
../inputs/grep1.dat:128660:                return -2;
../inputs/grep1.dat:128687:            }
../inputs/grep1.dat:128701:          else
../inputs/grep1.dat:128716:            bufp->can_be_null = 1;
../inputs/grep1.dat:128751:
../inputs/grep1.dat:128752:          if (succeed_n_p)
../inputs/grep1.dat:128779:            {
../inputs/grep1.dat:128793:              EXTRACT_NUMBER_AND_INCR (k, p);	/* Skip the n.  */
../inputs/grep1.dat:128858:              succeed_n_p = false;
../inputs/grep1.dat:128893:	    }
../inputs/grep1.dat:128900:
../inputs/grep1.dat:128901:          continue;
../inputs/grep1.dat:128921:
../inputs/grep1.dat:128922:
../inputs/grep1.dat:128923:	case succeed_n:
../inputs/grep1.dat:128940:          /* Get to the number of times to succeed.  */
../inputs/grep1.dat:128996:          p += 2;		
../inputs/grep1.dat:129016:
../inputs/grep1.dat:129017:          /* Increment p past the n for when k != 0.  */
../inputs/grep1.dat:129074:          EXTRACT_NUMBER_AND_INCR (k, p);
../inputs/grep1.dat:129116:          if (k == 0)
../inputs/grep1.dat:129138:	    {
../inputs/grep1.dat:129145:              p -= 4;
../inputs/grep1.dat:129167:  	      succeed_n_p = true;  /* Spaghetti code alert.  */
../inputs/grep1.dat:129226:              goto handle_on_failure_jump;
../inputs/grep1.dat:129269:            }
../inputs/grep1.dat:129283:          continue;
../inputs/grep1.dat:129303:
../inputs/grep1.dat:129304:
../inputs/grep1.dat:129305:	case set_number_at:
../inputs/grep1.dat:129326:          p += 4;
../inputs/grep1.dat:129344:          continue;
../inputs/grep1.dat:129364:
../inputs/grep1.dat:129365:
../inputs/grep1.dat:129366:	case start_memory:
../inputs/grep1.dat:129386:        case stop_memory:
../inputs/grep1.dat:129412:	  p += 2;
../inputs/grep1.dat:129423:	  continue;
../inputs/grep1.dat:129436:
../inputs/grep1.dat:129437:
../inputs/grep1.dat:129438:	default:
../inputs/grep1.dat:129448:          abort (); /* We have listed all the cases.  */
../inputs/grep1.dat:129505:        } /* switch *p++ */
../inputs/grep1.dat:129533:
../inputs/grep1.dat:129534:      /* Getting here means we have found the possible starting
../inputs/grep1.dat:129598:         characters for one path of the pattern -- and that the empty
../inputs/grep1.dat:129668:         string does not match.  We need not follow this path further.
../inputs/grep1.dat:129739:         Instead, look at the next alternative (remembered on the
../inputs/grep1.dat:129805:         stack), or quit if no more.  The test at the top of the loop
../inputs/grep1.dat:129875:         does these things.  */
../inputs/grep1.dat:129907:      path_can_be_null = false;
../inputs/grep1.dat:129939:      p = pend;
../inputs/grep1.dat:129955:    } /* while p */
../inputs/grep1.dat:129975:
../inputs/grep1.dat:129976:  /* Set `can_be_null' for the last path (also the first path, if the
../inputs/grep1.dat:130046:     pattern is empty).  */
../inputs/grep1.dat:130074:  bufp->can_be_null |= path_can_be_null;
../inputs/grep1.dat:130115:  return 0;
../inputs/grep1.dat:130127:} /* re_compile_fastmap */
../inputs/grep1.dat:130154:
../inputs/grep1.dat:130156:/* Set REGS to hold NUM_REGS registers, storing them in STARTS and
../inputs/grep1.dat:130223:   ENDS.  Subsequent matches using PATTERN_BUFFER and REGS will use
../inputs/grep1.dat:130291:   this memory for recording register information.  STARTS and ENDS
../inputs/grep1.dat:130359:   must be allocated using the malloc library routine, and must each
../inputs/grep1.dat:130428:   be at least NUM_REGS * sizeof (regoff_t) bytes long.
../inputs/grep1.dat:130484:
../inputs/grep1.dat:130485:   If NUM_REGS == 0, then subsequent matches should allocate their own
../inputs/grep1.dat:130556:   register data.
../inputs/grep1.dat:130574:
../inputs/grep1.dat:130575:   Unless this function is called, the first search or match using
../inputs/grep1.dat:130642:   PATTERN_BUFFER will allocate its own register data, without
../inputs/grep1.dat:130705:   freeing the old data.  */
../inputs/grep1.dat:130734:
../inputs/grep1.dat:130735:void
../inputs/grep1.dat:130740:re_set_registers (bufp, regs, num_regs, starts, ends)
../inputs/grep1.dat:130794:    struct re_pattern_buffer *bufp;
../inputs/grep1.dat:130830:    struct re_registers *regs;
../inputs/grep1.dat:130861:    unsigned num_regs;
../inputs/grep1.dat:130884:    regoff_t *starts, *ends;
../inputs/grep1.dat:130913:{
../inputs/grep1.dat:130915:  if (num_regs)
../inputs/grep1.dat:130931:    {
../inputs/grep1.dat:130937:      bufp->regs_allocated = REGS_REALLOCATE;
../inputs/grep1.dat:130983:      regs->num_regs = num_regs;
../inputs/grep1.dat:131016:      regs->start = starts;
../inputs/grep1.dat:131044:      regs->end = ends;
../inputs/grep1.dat:131068:    }
../inputs/grep1.dat:131074:  else
../inputs/grep1.dat:131081:    {
../inputs/grep1.dat:131087:      bufp->regs_allocated = REGS_UNALLOCATED;
../inputs/grep1.dat:131134:      regs->num_regs = 0;
../inputs/grep1.dat:131160:      regs->start = regs->end = (regoff_t) 0;
../inputs/grep1.dat:131206:    }
../inputs/grep1.dat:131212:}
../inputs/grep1.dat:131214:
../inputs/grep1.dat:131216:/* Searching routines.  */
../inputs/grep1.dat:131243:
../inputs/grep1.dat:131244:/* Like re_search_2, below, but only one string is specified, and
../inputs/grep1.dat:131310:   doesn't let you say where to stop matching. */
../inputs/grep1.dat:131360:
../inputs/grep1.dat:131361:int
../inputs/grep1.dat:131365:re_search (bufp, string, size, startpos, range, regs)
../inputs/grep1.dat:131419:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:131456:     const char *string;
../inputs/grep1.dat:131481:     int size, startpos, range;
../inputs/grep1.dat:131513:     struct re_registers *regs;
../inputs/grep1.dat:131545:{
../inputs/grep1.dat:131547:  return re_search_2 (bufp, NULL, 0, string, size, startpos, range, 
../inputs/grep1.dat:131616:		      regs, size);
../inputs/grep1.dat:131637:}
../inputs/grep1.dat:131639:
../inputs/grep1.dat:131640:
../inputs/grep1.dat:131641:/* Using the compiled pattern in BUFP->buffer, first tries to match the
../inputs/grep1.dat:131713:   virtual concatenation of STRING1 and STRING2, starting first at index
../inputs/grep1.dat:131786:   STARTPOS, then at STARTPOS + 1, and so on.
../inputs/grep1.dat:131832:   
../inputs/grep1.dat:131836:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
../inputs/grep1.dat:131902:   
../inputs/grep1.dat:131906:   RANGE is how far to scan while trying to match.  RANGE = 0 means try
../inputs/grep1.dat:131978:   only at STARTPOS; in general, the last start tried is STARTPOS +
../inputs/grep1.dat:132046:   RANGE.
../inputs/grep1.dat:132056:   
../inputs/grep1.dat:132060:   In REGS, return the indices of the virtual concatenation of STRING1
../inputs/grep1.dat:132131:   and STRING2 that matched the entire BUFP->buffer and its contained
../inputs/grep1.dat:132201:   subexpressions.
../inputs/grep1.dat:132220:   
../inputs/grep1.dat:132224:   Do not consider matching one past the index STOP in the virtual
../inputs/grep1.dat:132291:   concatenation of STRING1 and STRING2.
../inputs/grep1.dat:132332:
../inputs/grep1.dat:132333:   We return either the position in the strings at which the match was
../inputs/grep1.dat:132404:   found, -1 if no match, or -2 if error (such as failure
../inputs/grep1.dat:132462:   stack overflow).  */
../inputs/grep1.dat:132486:
../inputs/grep1.dat:132487:int
../inputs/grep1.dat:132491:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
../inputs/grep1.dat:132571:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:132608:     const char *string1, *string2;
../inputs/grep1.dat:132644:     int size1, size2;
../inputs/grep1.dat:132667:     int startpos;
../inputs/grep1.dat:132686:     int range;
../inputs/grep1.dat:132702:     struct re_registers *regs;
../inputs/grep1.dat:132734:     int stop;
../inputs/grep1.dat:132749:{
../inputs/grep1.dat:132751:  int val;
../inputs/grep1.dat:132762:  register char *fastmap = bufp->fastmap;
../inputs/grep1.dat:132804:  register char *translate = bufp->translate;
../inputs/grep1.dat:132850:  int total_size = size1 + size2;
../inputs/grep1.dat:132884:  int endpos = startpos + range;
../inputs/grep1.dat:132917:
../inputs/grep1.dat:132918:  /* Check for out-of-range STARTPOS.  */
../inputs/grep1.dat:132960:  if (startpos < 0 || startpos > total_size)
../inputs/grep1.dat:133005:    return -1;
../inputs/grep1.dat:133020:    
../inputs/grep1.dat:133025:  /* Fix up RANGE if it might eventually take us outside
../inputs/grep1.dat:133082:     the virtual concatenation of STRING1 and STRING2.  */
../inputs/grep1.dat:133141:  if (endpos < -1)
../inputs/grep1.dat:133160:    range = -1 - startpos;
../inputs/grep1.dat:133187:  else if (endpos > total_size)
../inputs/grep1.dat:133219:    range = total_size - startpos;
../inputs/grep1.dat:133254:
../inputs/grep1.dat:133255:  /* If the search isn't to be a backwards one, don't waste time in a
../inputs/grep1.dat:133325:     search for a pattern that must be anchored.  */
../inputs/grep1.dat:133378:  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
../inputs/grep1.dat:133456:    {
../inputs/grep1.dat:133462:      if (startpos > 0)
../inputs/grep1.dat:133486:	return -1;
../inputs/grep1.dat:133498:      else
../inputs/grep1.dat:133509:	range = 1;
../inputs/grep1.dat:133521:    }
../inputs/grep1.dat:133527:
../inputs/grep1.dat:133528:  /* Update the fastmap now if not correct already.  */
../inputs/grep1.dat:133584:  if (fastmap && !bufp->fastmap_accurate)
../inputs/grep1.dat:133626:    if (re_compile_fastmap (bufp) == -2)
../inputs/grep1.dat:133667:      return -2;
../inputs/grep1.dat:133684:  
../inputs/grep1.dat:133687:  /* Loop through the string, looking for a place to start matching.  */
../inputs/grep1.dat:133760:  for (;;)
../inputs/grep1.dat:133771:    { 
../inputs/grep1.dat:133778:      /* If a fastmap is supplied, skip quickly over characters that
../inputs/grep1.dat:133847:         cannot be the start of a match.  If the pattern can match the
../inputs/grep1.dat:133918:         null string, however, we don't need to skip characters; we want
../inputs/grep1.dat:133991:         the first null string.  */
../inputs/grep1.dat:134027:      if (fastmap && startpos < total_size && !bufp->can_be_null)
../inputs/grep1.dat:134093:	{
../inputs/grep1.dat:134096:	  if (range > 0)	/* Searching forwards.  */
../inputs/grep1.dat:134141:	    {
../inputs/grep1.dat:134148:	      register const char *d;
../inputs/grep1.dat:134179:	      register int lim = 0;
../inputs/grep1.dat:134208:	      int irange = range;
../inputs/grep1.dat:134235:
../inputs/grep1.dat:134236:              if (startpos < size1 && startpos + range >= size1)
../inputs/grep1.dat:134301:                lim = range - (size1 - startpos);
../inputs/grep1.dat:134351:
../inputs/grep1.dat:134352:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
../inputs/grep1.dat:134423:   
../inputs/grep1.dat:134427:              /* Written out as an if-else to avoid testing `translate'
../inputs/grep1.dat:134499:                 inside the loop.  */
../inputs/grep1.dat:134537:	      if (translate)
../inputs/grep1.dat:134559:                while (range > lim
../inputs/grep1.dat:134594:                       && !fastmap[(unsigned char)
../inputs/grep1.dat:134645:				   translate[(unsigned char) *d++]])
../inputs/grep1.dat:134686:                  range--;
../inputs/grep1.dat:134713:	      else
../inputs/grep1.dat:134725:                while (range > lim && !fastmap[(unsigned char) *d++])
../inputs/grep1.dat:134795:                  range--;
../inputs/grep1.dat:134822:
../inputs/grep1.dat:134823:	      startpos += irange - range;
../inputs/grep1.dat:134858:	    }
../inputs/grep1.dat:134865:	  else				/* Searching backwards.  */
../inputs/grep1.dat:134904:	    {
../inputs/grep1.dat:134911:	      register char c = (size1 == 0 || startpos >= size1
../inputs/grep1.dat:134969:                                 ? string2[startpos - size1] 
../inputs/grep1.dat:135031:                                 : string1[startpos]);
../inputs/grep1.dat:135086:
../inputs/grep1.dat:135087:	      if (!fastmap[(unsigned char) TRANSLATE (c)])
../inputs/grep1.dat:135139:		goto advance;
../inputs/grep1.dat:135155:	    }
../inputs/grep1.dat:135162:	}
../inputs/grep1.dat:135165:
../inputs/grep1.dat:135166:      /* If can't match the null string, and that's all we have left, fail.  */
../inputs/grep1.dat:135246:      if (range >= 0 && startpos == total_size && fastmap
../inputs/grep1.dat:135304:          && !bufp->can_be_null)
../inputs/grep1.dat:135337:	return -1;
../inputs/grep1.dat:135349:
../inputs/grep1.dat:135350:      val = re_match_2 (bufp, string1, size1, string2, size2,
../inputs/grep1.dat:135412:	                startpos, regs, stop);
../inputs/grep1.dat:135452:      if (val >= 0)
../inputs/grep1.dat:135472:	return startpos;
../inputs/grep1.dat:135490:        
../inputs/grep1.dat:135499:      if (val == -2)
../inputs/grep1.dat:135520:	return -2;
../inputs/grep1.dat:135532:
../inputs/grep1.dat:135533:    advance:
../inputs/grep1.dat:135546:      if (!range) 
../inputs/grep1.dat:135565:        break;
../inputs/grep1.dat:135580:      else if (range > 0) 
../inputs/grep1.dat:135607:        {
../inputs/grep1.dat:135617:          range--; 
../inputs/grep1.dat:135637:          startpos++;
../inputs/grep1.dat:135659:        }
../inputs/grep1.dat:135669:      else
../inputs/grep1.dat:135680:        {
../inputs/grep1.dat:135690:          range++; 
../inputs/grep1.dat:135710:          startpos--;
../inputs/grep1.dat:135732:        }
../inputs/grep1.dat:135742:    }
../inputs/grep1.dat:135748:  return -1;
../inputs/grep1.dat:135761:} /* re_search_2 */
../inputs/grep1.dat:135781:
../inputs/grep1.dat:135783:/* Declarations and macros for re_match_2.  */
../inputs/grep1.dat:135830:
../inputs/grep1.dat:135831:static int bcmp_translate ();
../inputs/grep1.dat:135861:static boolean alt_match_null_string_p (),
../inputs/grep1.dat:135904:               common_op_match_null_string_p (),
../inputs/grep1.dat:135953:               group_match_null_string_p ();
../inputs/grep1.dat:135998:
../inputs/grep1.dat:135999:/* Structure for per-register (a.k.a. per-group) information.
../inputs/grep1.dat:136061:   This must not be longer than one word, because we push this value
../inputs/grep1.dat:136130:   onto the failure stack.  Other register information, such as the
../inputs/grep1.dat:136198:   starting and ending positions (which are addresses), and the list of
../inputs/grep1.dat:136270:   inner groups (which is a bits list) are maintained in separate
../inputs/grep1.dat:136336:   variables.  
../inputs/grep1.dat:136352:   
../inputs/grep1.dat:136356:   We are making a (strictly speaking) nonportable assumption here: that
../inputs/grep1.dat:136429:   the compiler will pack our bit fields into something that fits into
../inputs/grep1.dat:136500:   the type of `word', i.e., is something that fits into one item on the
../inputs/grep1.dat:136573:   failure stack.  */
../inputs/grep1.dat:136595:typedef union
../inputs/grep1.dat:136609:{
../inputs/grep1.dat:136611:  fail_stack_elt_t word;
../inputs/grep1.dat:136636:  struct
../inputs/grep1.dat:136645:  {
../inputs/grep1.dat:136649:      /* This field is one if this group can match the empty string,
../inputs/grep1.dat:136718:         zero if not.  If not yet determined,  `MATCH_NULL_UNSET_VALUE'.  */
../inputs/grep1.dat:136795:#define MATCH_NULL_UNSET_VALUE 3
../inputs/grep1.dat:136828:    unsigned match_null_string_p : 2;
../inputs/grep1.dat:136866:    unsigned is_active : 1;
../inputs/grep1.dat:136894:    unsigned matched_something : 1;
../inputs/grep1.dat:136930:    unsigned ever_matched_something : 1;
../inputs/grep1.dat:136971:  } bits;
../inputs/grep1.dat:136981:} register_info_type;
../inputs/grep1.dat:137003:
../inputs/grep1.dat:137004:#define REG_MATCH_NULL_STRING_P(R)  ((R).bits.match_null_string_p)
../inputs/grep1.dat:137071:#define IS_ACTIVE(R)  ((R).bits.is_active)
../inputs/grep1.dat:137114:#define MATCHED_SOMETHING(R)  ((R).bits.matched_something)
../inputs/grep1.dat:137173:#define EVER_MATCHED_SOMETHING(R)  ((R).bits.ever_matched_something)
../inputs/grep1.dat:137242:
../inputs/grep1.dat:137243:
../inputs/grep1.dat:137244:/* Call this when have matched a real character; it sets `matched' flags
../inputs/grep1.dat:137317:   for the subexpressions which we are currently inside.  Also records
../inputs/grep1.dat:137388:   that those subexprs have matched.  */
../inputs/grep1.dat:137429:#define SET_REGS_MATCHED()						\
../inputs/grep1.dat:137463:  do									\
../inputs/grep1.dat:137478:    {									\
../inputs/grep1.dat:137494:      unsigned r;							\
../inputs/grep1.dat:137520:      for (r = lowest_active_reg; r <= highest_active_reg; r++)		\
../inputs/grep1.dat:137587:        {								\
../inputs/grep1.dat:137606:          MATCHED_SOMETHING (reg_info[r])				\
../inputs/grep1.dat:137653:            = EVER_MATCHED_SOMETHING (reg_info[r])			\
../inputs/grep1.dat:137708:            = 1;							\
../inputs/grep1.dat:137733:        }								\
../inputs/grep1.dat:137752:    }									\
../inputs/grep1.dat:137768:  while (0)
../inputs/grep1.dat:137780:
../inputs/grep1.dat:137781:
../inputs/grep1.dat:137782:/* This converts PTR, a pointer into one of the search strings `string1'
../inputs/grep1.dat:137855:   and `string2' into an offset from the beginning of that string.  */
../inputs/grep1.dat:137926:#define POINTER_TO_OFFSET(ptr)						\
../inputs/grep1.dat:137964:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
../inputs/grep1.dat:138033:
../inputs/grep1.dat:138034:/* Registers are set to a sentinel when they haven't yet matched.  */
../inputs/grep1.dat:138104:#define REG_UNSET_VALUE ((char *) -1)
../inputs/grep1.dat:138142:#define REG_UNSET(e) ((e) == REG_UNSET_VALUE)
../inputs/grep1.dat:138188:
../inputs/grep1.dat:138189:
../inputs/grep1.dat:138190:/* Macros for dealing with the split strings in re_match_2.  */
../inputs/grep1.dat:138254:
../inputs/grep1.dat:138255:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
../inputs/grep1.dat:138311:
../inputs/grep1.dat:138312:/* Call before fetching a character with *d.  This switches over to
../inputs/grep1.dat:138380:   string2 if necessary.  */
../inputs/grep1.dat:138409:#define PREFETCH()							\
../inputs/grep1.dat:138436:  while (d == dend)						    	\
../inputs/grep1.dat:138468:    {									\
../inputs/grep1.dat:138484:      /* End of string2 => fail.  */					\
../inputs/grep1.dat:138527:      if (dend == end_match_2) 						\
../inputs/grep1.dat:138566:        goto fail;							\
../inputs/grep1.dat:138593:      /* End of string1 => advance to string2.  */ 			\
../inputs/grep1.dat:138649:      d = string2;						        \
../inputs/grep1.dat:138683:      dend = end_match_2;						\
../inputs/grep1.dat:138716:    }
../inputs/grep1.dat:138722:
../inputs/grep1.dat:138723:
../inputs/grep1.dat:138724:/* Test if at very beginning or at very end of the virtual concatenation
../inputs/grep1.dat:138797:   of `string1' and `string2'.  If only one string, it's `string2'.  */
../inputs/grep1.dat:138869:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
../inputs/grep1.dat:138942:#define AT_STRINGS_END(d) ((d) == end2)	
../inputs/grep1.dat:138983:
../inputs/grep1.dat:138984:
../inputs/grep1.dat:138985:/* Test if D points to a character which is word-constituent.  We have
../inputs/grep1.dat:139056:   two special cases to check for: if past the end of string1, look at
../inputs/grep1.dat:139127:   the first character in string2; and if before the beginning of
../inputs/grep1.dat:139193:   string2, look at the last character in string1.  */
../inputs/grep1.dat:139248:#define WORDCHAR_P(d)							\
../inputs/grep1.dat:139278:  (SYNTAX ((d) == end1 ? *string2					\
../inputs/grep1.dat:139318:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
../inputs/grep1.dat:139376:   == Sword)
../inputs/grep1.dat:139389:
../inputs/grep1.dat:139390:/* Test if the character before D and the one at D differ with respect
../inputs/grep1.dat:139461:   to being word-constituent.  */
../inputs/grep1.dat:139495:#define AT_WORD_BOUNDARY(d)						\
../inputs/grep1.dat:139530:  (AT_STRINGS_BEG (d) || AT_STRINGS_END (d)				\
../inputs/grep1.dat:139579:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
../inputs/grep1.dat:139623:
../inputs/grep1.dat:139624:
../inputs/grep1.dat:139625:/* Free everything we malloc.  */
../inputs/grep1.dat:139659:#ifdef REGEX_MALLOC
../inputs/grep1.dat:139679:#define FREE_VAR(var) if (var) free (var); var = NULL
../inputs/grep1.dat:139733:#define FREE_VARIABLES()						\
../inputs/grep1.dat:139765:  do {									\
../inputs/grep1.dat:139782:    FREE_VAR (fail_stack.stack);					\
../inputs/grep1.dat:139821:    FREE_VAR (regstart);						\
../inputs/grep1.dat:139853:    FREE_VAR (regend);							\
../inputs/grep1.dat:139884:    FREE_VAR (old_regstart);						\
../inputs/grep1.dat:139920:    FREE_VAR (old_regend);						\
../inputs/grep1.dat:139954:    FREE_VAR (best_regstart);						\
../inputs/grep1.dat:139991:    FREE_VAR (best_regend);						\
../inputs/grep1.dat:140026:    FREE_VAR (reg_info);						\
../inputs/grep1.dat:140058:    FREE_VAR (reg_dummy);						\
../inputs/grep1.dat:140091:    FREE_VAR (reg_info_dummy);						\
../inputs/grep1.dat:140129:  } while (0)
../inputs/grep1.dat:140143:#else /* not REGEX_MALLOC */
../inputs/grep1.dat:140172:/* Some MIPS systems (at least) want this to free alloca'd storage.  */
../inputs/grep1.dat:140244:#define FREE_VARIABLES() alloca (0)
../inputs/grep1.dat:140280:#endif /* not REGEX_MALLOC */
../inputs/grep1.dat:140310:
../inputs/grep1.dat:140311:
../inputs/grep1.dat:140312:/* These values must meet several constraints.  They must not be valid
../inputs/grep1.dat:140383:   register values; since we have a limit of 255 registers (because
../inputs/grep1.dat:140451:   we use only one byte in the pattern for the register number), we can
../inputs/grep1.dat:140523:   use numbers larger than 255.  They must differ by 1, because of
../inputs/grep1.dat:140590:   NUM_FAILURE_ITEMS above.  And the value for the lowest register must
../inputs/grep1.dat:140662:   be larger than the value for the highest register, so we do not try
../inputs/grep1.dat:140733:   to actually save any registers when none are active.  */
../inputs/grep1.dat:140793:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
../inputs/grep1.dat:140840:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
../inputs/grep1.dat:140897:
../inputs/grep1.dat:140899:/* Matching routines.  */
../inputs/grep1.dat:140925:
../inputs/grep1.dat:140926:#ifndef emacs   /* Emacs never uses this.  */
../inputs/grep1.dat:140972:/* re_match is like re_match_2 except it takes only a single string.  */
../inputs/grep1.dat:141045:
../inputs/grep1.dat:141046:int
../inputs/grep1.dat:141050:re_match (bufp, string, size, pos, regs)
../inputs/grep1.dat:141091:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:141128:     const char *string;
../inputs/grep1.dat:141153:     int size, pos;
../inputs/grep1.dat:141173:     struct re_registers *regs;
../inputs/grep1.dat:141205: {
../inputs/grep1.dat:141208:  return re_match_2 (bufp, NULL, 0, string, size, pos, regs, size); 
../inputs/grep1.dat:141277:}
../inputs/grep1.dat:141279:#endif /* not emacs */
../inputs/grep1.dat:141302:
../inputs/grep1.dat:141303:
../inputs/grep1.dat:141304:/* re_match_2 matches the compiled pattern in BUFP against the
../inputs/grep1.dat:141367:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
../inputs/grep1.dat:141438:   and SIZE2, respectively).  We start matching at POS, and stop
../inputs/grep1.dat:141503:   matching at STOP.
../inputs/grep1.dat:141524:   
../inputs/grep1.dat:141528:   If REGS is non-null and the `no_sub' field of BUFP is nonzero, we
../inputs/grep1.dat:141597:   store offsets for the substring each group matched in REGS.  See the
../inputs/grep1.dat:141669:   documentation for exactly how many groups we fill.
../inputs/grep1.dat:141723:
../inputs/grep1.dat:141724:   We return -1 if no match, -2 if an internal error (such as the
../inputs/grep1.dat:141790:   failure stack overflowing).  Otherwise, we return the length of the
../inputs/grep1.dat:141861:   matched substring.  */
../inputs/grep1.dat:141887:
../inputs/grep1.dat:141888:int
../inputs/grep1.dat:141892:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
../inputs/grep1.dat:141959:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:141996:     const char *string1, *string2;
../inputs/grep1.dat:142032:     int size1, size2;
../inputs/grep1.dat:142055:     int pos;
../inputs/grep1.dat:142069:     struct re_registers *regs;
../inputs/grep1.dat:142101:     int stop;
../inputs/grep1.dat:142116:{
../inputs/grep1.dat:142118:  /* General temporaries.  */
../inputs/grep1.dat:142148:  int mcnt;
../inputs/grep1.dat:142160:  unsigned char *p1;
../inputs/grep1.dat:142181:
../inputs/grep1.dat:142182:  /* Just past the end of the corresponding string.  */
../inputs/grep1.dat:142238:  const char *end1, *end2;
../inputs/grep1.dat:142265:
../inputs/grep1.dat:142266:  /* Pointers into string1 and string2, just past the last characters in
../inputs/grep1.dat:142339:     each to consider matching.  */
../inputs/grep1.dat:142375:  const char *end_match_1, *end_match_2;
../inputs/grep1.dat:142416:
../inputs/grep1.dat:142417:  /* Where we are in the data, and the end of the current string.  */
../inputs/grep1.dat:142487:  const char *d, *dend;
../inputs/grep1.dat:142511:  
../inputs/grep1.dat:142514:  /* Where we are in the pattern, and the end of the pattern.  */
../inputs/grep1.dat:142580:  unsigned char *p = bufp->buffer;
../inputs/grep1.dat:142615:  register unsigned char *pend = p + bufp->used;
../inputs/grep1.dat:142664:
../inputs/grep1.dat:142665:  /* We use this to map every character in the string.  */
../inputs/grep1.dat:142724:  char *translate = bufp->translate;
../inputs/grep1.dat:142761:
../inputs/grep1.dat:142762:  /* Failure point stack.  Each place that can handle a failure further
../inputs/grep1.dat:142834:     down the line pushes a failure point on this stack.  It consists of
../inputs/grep1.dat:142907:     restart, regend, and reg_info for all registers corresponding to
../inputs/grep1.dat:142977:     the subexpressions we're currently inside, plus the number of such
../inputs/grep1.dat:143049:     registers, and, finally, two char *'s.  The first char * is where
../inputs/grep1.dat:143120:     to resume scanning the pattern; the second one is where to resume
../inputs/grep1.dat:143191:     scanning the strings.  If the latter is zero, the failure point is
../inputs/grep1.dat:143263:     a ``dummy''; if a failure happens and the failure point is a dummy,
../inputs/grep1.dat:143336:     it gets discarded and the next next one is tried.  */
../inputs/grep1.dat:143395:  fail_stack_type fail_stack;
../inputs/grep1.dat:143425:#ifdef DEBUG
../inputs/grep1.dat:143438:  static unsigned failure_id = 0;
../inputs/grep1.dat:143472:  unsigned nfailure_points_pushed = 0, nfailure_points_popped = 0;
../inputs/grep1.dat:143539:#endif
../inputs/grep1.dat:143546:
../inputs/grep1.dat:143547:  /* We fill all the registers internally, independent of what we
../inputs/grep1.dat:143679:     an element for register zero.  */
../inputs/grep1.dat:143718:  unsigned num_regs = bufp->re_nsub + 1;
../inputs/grep1.dat:143759:  
../inputs/grep1.dat:143762:  /* The currently active registers.  */
../inputs/grep1.dat:143803:  unsigned lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:143856:  unsigned highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:143911:
../inputs/grep1.dat:143912:  /* Information on the contents of registers. These are pointers into
../inputs/grep1.dat:143983:     the input strings; they record just what was matched (on this
../inputs/grep1.dat:144050:     attempt) by a subexpression part of the pattern, that is, the
../inputs/grep1.dat:144117:     regnum-th regstart pointer points to where in the pattern we began
../inputs/grep1.dat:144189:     matching and the regnum-th regend points to right after where we
../inputs/grep1.dat:144259:     stopped matching the regnum-th subexpression.  (The zeroth register
../inputs/grep1.dat:144332:     keeps track of what the whole pattern matches.)  */
../inputs/grep1.dat:144389:  const char **regstart, **regend;
../inputs/grep1.dat:144424:
../inputs/grep1.dat:144425:  /* If a group that's operated upon by a repetition operator fails to
../inputs/grep1.dat:144496:     match anything, then the register for its start will need to be
../inputs/grep1.dat:144565:     restored because it will have been set to wherever in the string we
../inputs/grep1.dat:144638:     are when we last see its open-group operator.  Similarly for a
../inputs/grep1.dat:144706:     register's end.  */
../inputs/grep1.dat:144731:  const char **old_regstart, **old_regend;
../inputs/grep1.dat:144774:
../inputs/grep1.dat:144775:  /* The is_active field of reg_info helps us keep track of which (possibly
../inputs/grep1.dat:144851:     nested) subexpressions we are currently in. The matched_something
../inputs/grep1.dat:144922:     field of reg_info[reg_num] helps us tell whether or not we have
../inputs/grep1.dat:144991:     matched any of the pattern so far this time through the reg_num-th
../inputs/grep1.dat:145063:     subexpression.  These two fields get reset each time through any
../inputs/grep1.dat:145133:     loop their register is in.  */
../inputs/grep1.dat:145169:  register_info_type *reg_info; 
../inputs/grep1.dat:145202:
../inputs/grep1.dat:145203:  /* The following record the register info as found in the above
../inputs/grep1.dat:145269:     variables when we find a match better than any we've seen before. 
../inputs/grep1.dat:145341:     This happens as we backtrack through the failure points, which in
../inputs/grep1.dat:145412:     turn happens only if we have not yet matched the entire string. */
../inputs/grep1.dat:145484:  unsigned best_regs_set = false;
../inputs/grep1.dat:145518:  const char **best_regstart, **best_regend;
../inputs/grep1.dat:145563:  
../inputs/grep1.dat:145566:  /* Logically, this is `best_regend[0]'.  But we don't want to have to
../inputs/grep1.dat:145638:     allocate space for that if we're not allocating space for anything
../inputs/grep1.dat:145710:     else (see below).  Also, we never need info about register 0 for
../inputs/grep1.dat:145780:     any of the other register vectors, and it seems rather a kludge to
../inputs/grep1.dat:145852:     treat `best_regend' differently than the rest.  So we keep track of
../inputs/grep1.dat:145925:     the end of the best match so far in a separate variable.  We
../inputs/grep1.dat:145991:     initialize this to NULL so that when we backtrack the first time
../inputs/grep1.dat:146061:     and need to test it, it's not garbage.  */
../inputs/grep1.dat:146109:  const char *match_end = NULL;
../inputs/grep1.dat:146141:
../inputs/grep1.dat:146142:  /* Used when we pop values we don't care about.  */
../inputs/grep1.dat:146196:  const char **reg_dummy;
../inputs/grep1.dat:146222:  register_info_type *reg_info_dummy;
../inputs/grep1.dat:146260:
../inputs/grep1.dat:146261:#ifdef DEBUG
../inputs/grep1.dat:146274:  /* Counts the total number of registers pushed.  */
../inputs/grep1.dat:146328:  unsigned num_regs_pushed = 0; 	
../inputs/grep1.dat:146362:#endif
../inputs/grep1.dat:146369:
../inputs/grep1.dat:146370:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
../inputs/grep1.dat:146417:  
../inputs/grep1.dat:146420:  INIT_FAIL_STACK ();
../inputs/grep1.dat:146442:  
../inputs/grep1.dat:146445:  /* Do not bother to initialize all the register variables if there are
../inputs/grep1.dat:146518:     no groups in the pattern, as it takes a fair amount of time.  If
../inputs/grep1.dat:146654:     pattern), even though we never use it, since it simplifies the
../inputs/grep1.dat:146722:     array indexing.  We should fix this.  */
../inputs/grep1.dat:146768:  if (bufp->re_nsub)
../inputs/grep1.dat:146789:    {
../inputs/grep1.dat:146795:      regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:146851:      regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:146905:      old_regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:146965:      old_regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:147023:      best_regstart = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:147084:      best_regend = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:147143:      reg_info = REGEX_TALLOC (num_regs, register_info_type);
../inputs/grep1.dat:147205:      reg_dummy = REGEX_TALLOC (num_regs, const char *);
../inputs/grep1.dat:147262:      reg_info_dummy = REGEX_TALLOC (num_regs, register_info_type);
../inputs/grep1.dat:147330:
../inputs/grep1.dat:147331:      if (!(regstart && regend && old_regstart && old_regend && reg_info 
../inputs/grep1.dat:147405:            && best_regstart && best_regend && reg_dummy && reg_info_dummy)) 
../inputs/grep1.dat:147483:        {
../inputs/grep1.dat:147493:          FREE_VARIABLES ();
../inputs/grep1.dat:147522:          return -2;
../inputs/grep1.dat:147543:        }
../inputs/grep1.dat:147553:    }
../inputs/grep1.dat:147559:#ifdef REGEX_MALLOC
../inputs/grep1.dat:147579:  else
../inputs/grep1.dat:147586:    {
../inputs/grep1.dat:147592:      /* We must initialize all our variables to NULL, so that
../inputs/grep1.dat:147655:         `FREE_VARIABLES' doesn't try to free them.  */
../inputs/grep1.dat:147711:      regstart = regend = old_regstart = old_regend = best_regstart
../inputs/grep1.dat:147779:        = best_regend = reg_dummy = NULL;
../inputs/grep1.dat:147821:      reg_info = reg_info_dummy = (register_info_type *) NULL;
../inputs/grep1.dat:147884:    }
../inputs/grep1.dat:147890:#endif /* REGEX_MALLOC */
../inputs/grep1.dat:147916:
../inputs/grep1.dat:147917:  /* The starting position is bogus.  */
../inputs/grep1.dat:147958:  if (pos < 0 || pos > size1 + size2)
../inputs/grep1.dat:147996:    {
../inputs/grep1.dat:148002:      FREE_VARIABLES ();
../inputs/grep1.dat:148027:      return -1;
../inputs/grep1.dat:148044:    }
../inputs/grep1.dat:148050:    
../inputs/grep1.dat:148055:  /* Initialize subexpression text positions to -1 to mark ones that no
../inputs/grep1.dat:148127:     start_memory/stop_memory has been seen for. Also initialize the
../inputs/grep1.dat:148196:     register information struct.  */
../inputs/grep1.dat:148234:  for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:148276:    {
../inputs/grep1.dat:148282:      regstart[mcnt] = regend[mcnt] 
../inputs/grep1.dat:148319:        = old_regstart[mcnt] = old_regend[mcnt] = REG_UNSET_VALUE;
../inputs/grep1.dat:148386:        
../inputs/grep1.dat:148395:      REG_MATCH_NULL_STRING_P (reg_info[mcnt]) = MATCH_NULL_UNSET_VALUE;
../inputs/grep1.dat:148468:      IS_ACTIVE (reg_info[mcnt]) = 0;
../inputs/grep1.dat:148506:      MATCHED_SOMETHING (reg_info[mcnt]) = 0;
../inputs/grep1.dat:148552:      EVER_MATCHED_SOMETHING (reg_info[mcnt]) = 0;
../inputs/grep1.dat:148603:    }
../inputs/grep1.dat:148609:  
../inputs/grep1.dat:148612:  /* We move `string1' into `string2' if the latter's empty -- but not if
../inputs/grep1.dat:148686:     `string1' is null.  */
../inputs/grep1.dat:148714:  if (size2 == 0 && string1 != NULL)
../inputs/grep1.dat:148751:    {
../inputs/grep1.dat:148757:      string2 = string1;
../inputs/grep1.dat:148782:      size2 = size1;
../inputs/grep1.dat:148803:      string1 = 0;
../inputs/grep1.dat:148822:      size1 = 0;
../inputs/grep1.dat:148839:    }
../inputs/grep1.dat:148845:  end1 = string1 + size1;
../inputs/grep1.dat:148871:  end2 = string2 + size2;
../inputs/grep1.dat:148897:
../inputs/grep1.dat:148898:  /* Compute where to stop matching, within the two strings.  */
../inputs/grep1.dat:148963:  if (stop <= size1)
../inputs/grep1.dat:148984:    {
../inputs/grep1.dat:148990:      end_match_1 = string1 + stop;
../inputs/grep1.dat:149026:      end_match_2 = string2;
../inputs/grep1.dat:149055:    }
../inputs/grep1.dat:149061:  else
../inputs/grep1.dat:149068:    {
../inputs/grep1.dat:149074:      end_match_1 = end1;
../inputs/grep1.dat:149100:      end_match_2 = string2 + stop - size1;
../inputs/grep1.dat:149144:    }
../inputs/grep1.dat:149150:
../inputs/grep1.dat:149151:  /* `p' scans through the pattern as `d' scans through the data. 
../inputs/grep1.dat:149218:     `dend' is the end of the input string that `d' points within.  `d'
../inputs/grep1.dat:149290:     is advanced into the following input string whenever necessary, but
../inputs/grep1.dat:149363:     this happens before fetching; therefore, at the beginning of the
../inputs/grep1.dat:149433:     loop, `d' can be pointing at the end of a string, but it cannot
../inputs/grep1.dat:149502:     equal `string2'.  */
../inputs/grep1.dat:149528:  if (size1 > 0 && pos <= size1)
../inputs/grep1.dat:149561:    {
../inputs/grep1.dat:149567:      d = string1 + pos;
../inputs/grep1.dat:149592:      dend = end_match_1;
../inputs/grep1.dat:149618:    }
../inputs/grep1.dat:149624:  else
../inputs/grep1.dat:149631:    {
../inputs/grep1.dat:149637:      d = string2 + pos - size1;
../inputs/grep1.dat:149670:      dend = end_match_2;
../inputs/grep1.dat:149696:    }
../inputs/grep1.dat:149702:
../inputs/grep1.dat:149703:  DEBUG_PRINT1 ("The compiled pattern is: ");
../inputs/grep1.dat:149749:  DEBUG_PRINT_COMPILED_PATTERN (bufp, p, pend);
../inputs/grep1.dat:149797:  DEBUG_PRINT1 ("The string to match is: `");
../inputs/grep1.dat:149843:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
../inputs/grep1.dat:149908:  DEBUG_PRINT1 ("'\n");
../inputs/grep1.dat:149932:  
../inputs/grep1.dat:149935:  /* This loops over pattern commands.  It exits by returning from the
../inputs/grep1.dat:150006:     function if the match is complete, or it drops through if the match
../inputs/grep1.dat:150079:     fails at this starting point in the input data.  */
../inputs/grep1.dat:150136:  for (;;)
../inputs/grep1.dat:150147:    {
../inputs/grep1.dat:150153:      DEBUG_PRINT2 ("\n0x%x: ", p);
../inputs/grep1.dat:150189:
../inputs/grep1.dat:150190:      if (p == pend)
../inputs/grep1.dat:150211:	{ /* End of pattern means we might have succeeded.  */
../inputs/grep1.dat:150267:          DEBUG_PRINT1 ("end of pattern ... ");
../inputs/grep1.dat:150315:          
../inputs/grep1.dat:150326:	  /* If we haven't matched the entire string, and we want the
../inputs/grep1.dat:150389:             longest match, try backtracking.  */
../inputs/grep1.dat:150439:          if (d != end_match_2)
../inputs/grep1.dat:150471:	    {
../inputs/grep1.dat:150478:              DEBUG_PRINT1 ("backtracking.\n");
../inputs/grep1.dat:150526:              
../inputs/grep1.dat:150541:              if (!FAIL_STACK_EMPTY ())
../inputs/grep1.dat:150581:                { /* More failure points to try.  */
../inputs/grep1.dat:150634:                  boolean same_str_p = (FIRST_STRING_P (match_end) 
../inputs/grep1.dat:150702:	        	                == MATCHING_IN_FIRST_STRING);
../inputs/grep1.dat:150758:
../inputs/grep1.dat:150759:                  /* If exceeds best match so far, save it.  */
../inputs/grep1.dat:150823:                  if (!best_regs_set
../inputs/grep1.dat:150860:                      || (same_str_p && d > match_end)
../inputs/grep1.dat:150915:                      || (!same_str_p && !MATCHING_IN_FIRST_STRING))
../inputs/grep1.dat:150984:                    {
../inputs/grep1.dat:151006:                      best_regs_set = true;
../inputs/grep1.dat:151050:                      match_end = d;
../inputs/grep1.dat:151087:                      
../inputs/grep1.dat:151110:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
../inputs/grep1.dat:151183:                      
../inputs/grep1.dat:151206:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:151268:                        {
../inputs/grep1.dat:151294:                          best_regstart[mcnt] = regstart[mcnt];
../inputs/grep1.dat:151358:                          best_regend[mcnt] = regend[mcnt];
../inputs/grep1.dat:151418:                        }
../inputs/grep1.dat:151444:                    }
../inputs/grep1.dat:151466:                  goto fail;	       
../inputs/grep1.dat:151503:                }
../inputs/grep1.dat:151521:
../inputs/grep1.dat:151522:              /* If no failure points, don't restore garbage.  */
../inputs/grep1.dat:151588:              else if (best_regs_set)   
../inputs/grep1.dat:151629:                {
../inputs/grep1.dat:151647:  	        restore_best_regs:
../inputs/grep1.dat:151677:                  /* Restore best match.  It may happen that `dend ==
../inputs/grep1.dat:151747:                     end_match_1' while the restored d is in string2.
../inputs/grep1.dat:151817:                     For example, the pattern `x.*y.*z' against the
../inputs/grep1.dat:151885:                     strings `x-' and `y-z-', if the two strings are
../inputs/grep1.dat:151954:                     not consecutive in memory.  */
../inputs/grep1.dat:152006:                  DEBUG_PRINT1 ("Restoring best registers.\n");
../inputs/grep1.dat:152070:                  
../inputs/grep1.dat:152089:                  d = match_end;
../inputs/grep1.dat:152122:                  dend = ((d >= string1 && d <= end1)
../inputs/grep1.dat:152176:		           ? end_match_1 : end_match_2);
../inputs/grep1.dat:152219:
../inputs/grep1.dat:152220:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
../inputs/grep1.dat:152264:		    {
../inputs/grep1.dat:152272:		      regstart[mcnt] = best_regstart[mcnt];
../inputs/grep1.dat:152318:		      regend[mcnt] = best_regend[mcnt];
../inputs/grep1.dat:152360:		    }
../inputs/grep1.dat:152368:                }
../inputs/grep1.dat:152386:            } /* d != end_match_2 */
../inputs/grep1.dat:152423:
../inputs/grep1.dat:152424:          DEBUG_PRINT1 ("Accepting match.\n");
../inputs/grep1.dat:152471:
../inputs/grep1.dat:152472:          /* If caller wants register contents data back, do it.  */
../inputs/grep1.dat:152541:          if (regs && !bufp->no_sub)
../inputs/grep1.dat:152578:	    {
../inputs/grep1.dat:152585:              /* Have the register data arrays been allocated?  */
../inputs/grep1.dat:152652:              if (bufp->regs_allocated == REGS_UNALLOCATED)
../inputs/grep1.dat:152712:                { /* No.  So allocate them with malloc.  We need one
../inputs/grep1.dat:152781:                     extra element beyond `num_regs' for the `-1' marker
../inputs/grep1.dat:152854:                     GNU code uses.  */
../inputs/grep1.dat:152894:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
../inputs/grep1.dat:152959:                  regs->start = TALLOC (regs->num_regs, regoff_t);
../inputs/grep1.dat:153026:                  regs->end = TALLOC (regs->num_regs, regoff_t);
../inputs/grep1.dat:153091:                  if (regs->start == NULL || regs->end == NULL)
../inputs/grep1.dat:153155:                    return -2;
../inputs/grep1.dat:153186:                  bufp->regs_allocated = REGS_REALLOCATE;
../inputs/grep1.dat:153244:                }
../inputs/grep1.dat:153262:              else if (bufp->regs_allocated == REGS_REALLOCATE)
../inputs/grep1.dat:153326:                { /* Yes.  If we need more elements than were already
../inputs/grep1.dat:153396:                     allocated, reallocate them.  If we need fewer, just
../inputs/grep1.dat:153469:                     leave it alone.  */
../inputs/grep1.dat:153510:                  if (regs->num_regs < num_regs + 1)
../inputs/grep1.dat:153563:                    {
../inputs/grep1.dat:153585:                      regs->num_regs = num_regs + 1;
../inputs/grep1.dat:153638:                      RETALLOC (regs->start, regs->num_regs, regoff_t);
../inputs/grep1.dat:153710:                      RETALLOC (regs->end, regs->num_regs, regoff_t);
../inputs/grep1.dat:153780:                      if (regs->start == NULL || regs->end == NULL)
../inputs/grep1.dat:153848:                        return -2;
../inputs/grep1.dat:153883:                    }
../inputs/grep1.dat:153905:                }
../inputs/grep1.dat:153923:              else
../inputs/grep1.dat:153942:		{
../inputs/grep1.dat:153946:		  /* These braces fend off a "empty body in an else-statement"
../inputs/grep1.dat:154011:		     warning under GCC when assert expands to nothing.  */
../inputs/grep1.dat:154072:		  assert (bufp->regs_allocated == REGS_FIXED);
../inputs/grep1.dat:154121:		}
../inputs/grep1.dat:154125:
../inputs/grep1.dat:154126:              /* Convert the pointer data in `regstart' and `regend' to
../inputs/grep1.dat:154198:                 indices.  Register zero has to be set differently,
../inputs/grep1.dat:154266:                 since we haven't kept track of any info for it.  */
../inputs/grep1.dat:154335:              if (regs->num_regs > 0)
../inputs/grep1.dat:154373:                {
../inputs/grep1.dat:154391:                  regs->start[0] = pos;
../inputs/grep1.dat:154431:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
../inputs/grep1.dat:154504:			          : d - string2 + size1);
../inputs/grep1.dat:154541:                }
../inputs/grep1.dat:154559:              
../inputs/grep1.dat:154574:              /* Go through the first `min (num_regs, regs->num_regs)'
../inputs/grep1.dat:154645:                 registers, since that is all we initialized.  */
../inputs/grep1.dat:154711:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
../inputs/grep1.dat:154780:		{
../inputs/grep1.dat:154784:                  if (REG_UNSET (regstart[mcnt]) || REG_UNSET (regend[mcnt]))
../inputs/grep1.dat:154862:                    regs->start[mcnt] = regs->end[mcnt] = -1;
../inputs/grep1.dat:154924:                  else
../inputs/grep1.dat:154947:                    {
../inputs/grep1.dat:154969:		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
../inputs/grep1.dat:155033:                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
../inputs/grep1.dat:155107:                    }
../inputs/grep1.dat:155129:		}
../inputs/grep1.dat:155133:              
../inputs/grep1.dat:155148:              /* If the regs structure we return has more elements than
../inputs/grep1.dat:155220:                 were in the pattern, set the extra elements to -1.  If
../inputs/grep1.dat:155292:                 we (re)allocated the registers, this is the case,
../inputs/grep1.dat:155359:                 because we always allocate enough to have at least one
../inputs/grep1.dat:155431:                 -1 at the end.  */
../inputs/grep1.dat:155467:              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
../inputs/grep1.dat:155534:                regs->start[mcnt] = regs->end[mcnt] = -1;
../inputs/grep1.dat:155592:	    } /* regs && !bufp->no_sub */
../inputs/grep1.dat:155627:
../inputs/grep1.dat:155628:          FREE_VARIABLES ();
../inputs/grep1.dat:155657:          DEBUG_PRINT4 ("%u failure points pushed, %u popped (%u remain).\n",
../inputs/grep1.dat:155735:                        nfailure_points_pushed, nfailure_points_popped,
../inputs/grep1.dat:155807:                        nfailure_points_pushed - nfailure_points_popped);
../inputs/grep1.dat:155881:          DEBUG_PRINT2 ("%u registers pushed.\n", num_regs_pushed);
../inputs/grep1.dat:155949:
../inputs/grep1.dat:155950:          mcnt = d - pos - (MATCHING_IN_FIRST_STRING 
../inputs/grep1.dat:156004:			    ? string1 
../inputs/grep1.dat:156022:			    : string2 - size1);
../inputs/grep1.dat:156049:
../inputs/grep1.dat:156050:          DEBUG_PRINT2 ("Returning %d from re_match_2.\n", mcnt);
../inputs/grep1.dat:156116:
../inputs/grep1.dat:156117:          return mcnt;
../inputs/grep1.dat:156140:        }
../inputs/grep1.dat:156150:
../inputs/grep1.dat:156151:      /* Otherwise match next pattern command.  */
../inputs/grep1.dat:156202:#ifdef SWITCH_ENUM_BUG
../inputs/grep1.dat:156225:      switch ((int) ((re_opcode_t) *p++))
../inputs/grep1.dat:156267:#else
../inputs/grep1.dat:156273:      switch ((re_opcode_t) *p++)
../inputs/grep1.dat:156307:#endif
../inputs/grep1.dat:156314:	{
../inputs/grep1.dat:156317:        /* Ignore these.  Used to ignore the n of succeed_n's which
../inputs/grep1.dat:156385:           currently have n == 0.  */
../inputs/grep1.dat:156423:        case no_op:
../inputs/grep1.dat:156443:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
../inputs/grep1.dat:156490:          break;
../inputs/grep1.dat:156507:
../inputs/grep1.dat:156508:
../inputs/grep1.dat:156509:        /* Match the next n pattern characters exactly.  The following
../inputs/grep1.dat:156580:           byte in the pattern defines n, and the n bytes after that
../inputs/grep1.dat:156649:           are the characters to match.  */
../inputs/grep1.dat:156693:	case exactn:
../inputs/grep1.dat:156707:	  mcnt = *p++;
../inputs/grep1.dat:156723:          DEBUG_PRINT2 ("EXECUTING exactn %d.\n", mcnt);
../inputs/grep1.dat:156780:
../inputs/grep1.dat:156781:          /* This is written out as an if-else so we don't waste time
../inputs/grep1.dat:156851:             testing `translate' inside the loop.  */
../inputs/grep1.dat:156905:          if (translate)
../inputs/grep1.dat:156930:	    {
../inputs/grep1.dat:156937:	      do
../inputs/grep1.dat:156947:		{
../inputs/grep1.dat:156951:		  PREFETCH ();
../inputs/grep1.dat:156968:		  if (translate[(unsigned char) *d++] != (char) *p++)
../inputs/grep1.dat:157024:                    goto fail;
../inputs/grep1.dat:157055:		}
../inputs/grep1.dat:157059:	      while (--mcnt);
../inputs/grep1.dat:157082:	    }
../inputs/grep1.dat:157089:	  else
../inputs/grep1.dat:157097:	    {
../inputs/grep1.dat:157104:	      do
../inputs/grep1.dat:157114:		{
../inputs/grep1.dat:157118:		  PREFETCH ();
../inputs/grep1.dat:157135:		  if (*d++ != (char) *p++) goto fail;
../inputs/grep1.dat:157175:		}
../inputs/grep1.dat:157179:	      while (--mcnt);
../inputs/grep1.dat:157202:	    }
../inputs/grep1.dat:157209:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:157233:          break;
../inputs/grep1.dat:157250:
../inputs/grep1.dat:157251:
../inputs/grep1.dat:157252:        /* Match any character except possibly a newline or a null.  */
../inputs/grep1.dat:157324:	case anychar:
../inputs/grep1.dat:157339:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
../inputs/grep1.dat:157388:
../inputs/grep1.dat:157389:          PREFETCH ();
../inputs/grep1.dat:157412:
../inputs/grep1.dat:157413:          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
../inputs/grep1.dat:157488:              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
../inputs/grep1.dat:157567:	    goto fail;
../inputs/grep1.dat:157583:
../inputs/grep1.dat:157584:          SET_REGS_MATCHED ();
../inputs/grep1.dat:157615:          DEBUG_PRINT2 ("  Matched `%d'.\n", *d);
../inputs/grep1.dat:157665:          d++;
../inputs/grep1.dat:157680:	  break;
../inputs/grep1.dat:157690:
../inputs/grep1.dat:157691:
../inputs/grep1.dat:157692:	case charset:
../inputs/grep1.dat:157707:	case charset_not:
../inputs/grep1.dat:157726:	  {
../inputs/grep1.dat:157731:	    register unsigned char c;
../inputs/grep1.dat:157762:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
../inputs/grep1.dat:157820:
../inputs/grep1.dat:157821:            DEBUG_PRINT2 ("EXECUTING charset%s.\n", not ? "_not" : "");
../inputs/grep1.dat:157893:
../inputs/grep1.dat:157894:	    PREFETCH ();
../inputs/grep1.dat:157912:	    c = TRANSLATE (*d); /* The character to match.  */
../inputs/grep1.dat:157968:
../inputs/grep1.dat:157969:            /* Cast to `unsigned' instead of `unsigned char' in case the
../inputs/grep1.dat:158042:               bit list is a full 32 bytes long.  */
../inputs/grep1.dat:158095:	    if (c < (unsigned) (*p * BYTEWIDTH)
../inputs/grep1.dat:158136:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
../inputs/grep1.dat:158188:	      not = !not;
../inputs/grep1.dat:158207:
../inputs/grep1.dat:158208:	    p += 1 + *p;
../inputs/grep1.dat:158226:
../inputs/grep1.dat:158227:	    if (!not) goto fail;
../inputs/grep1.dat:158253:            
../inputs/grep1.dat:158266:	    SET_REGS_MATCHED ();
../inputs/grep1.dat:158292:            d++;
../inputs/grep1.dat:158309:	    break;
../inputs/grep1.dat:158321:	  }
../inputs/grep1.dat:158326:
../inputs/grep1.dat:158327:
../inputs/grep1.dat:158328:        /* The beginning of a group is represented by start_memory.
../inputs/grep1.dat:158396:           The arguments are the register number in the next byte, and the
../inputs/grep1.dat:158471:           number of groups inner to this one in the next.  The text
../inputs/grep1.dat:158540:           matched within the group is recorded (in the internal
../inputs/grep1.dat:158605:           registers data structure) under the register number.  */
../inputs/grep1.dat:158673:        case start_memory:
../inputs/grep1.dat:158700:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
../inputs/grep1.dat:158765:
../inputs/grep1.dat:158766:          /* Find out if this group can match the empty string.  */
../inputs/grep1.dat:158834:	  p1 = p;		/* To send to group_match_null_string_p.  */
../inputs/grep1.dat:158891:          
../inputs/grep1.dat:158902:          if (REG_MATCH_NULL_STRING_P (reg_info[*p]) == MATCH_NULL_UNSET_VALUE)
../inputs/grep1.dat:158982:            REG_MATCH_NULL_STRING_P (reg_info[*p]) 
../inputs/grep1.dat:159034:              = group_match_null_string_p (&p1, pend, reg_info);
../inputs/grep1.dat:159099:
../inputs/grep1.dat:159100:          /* Save the position in the string where we were the last time
../inputs/grep1.dat:159173:             we were at this open-group operator in case the group is
../inputs/grep1.dat:159243:             operated upon by a repetition operator, e.g., with `(a*)*b'
../inputs/grep1.dat:159316:             against `ab'; then we want to ignore where we are now in
../inputs/grep1.dat:159386:             the string in case this attempt to match fails.  */
../inputs/grep1.dat:159451:          old_regstart[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
../inputs/grep1.dat:159519:                             ? REG_UNSET (regstart[*p]) ? d : regstart[*p]
../inputs/grep1.dat:159594:                             : regstart[*p];
../inputs/grep1.dat:159639:	  DEBUG_PRINT2 ("  old_regstart: %d\n", 
../inputs/grep1.dat:159681:			 POINTER_TO_OFFSET (old_regstart[*p]));
../inputs/grep1.dat:159724:
../inputs/grep1.dat:159725:          regstart[*p] = d;
../inputs/grep1.dat:159753:	  DEBUG_PRINT2 ("  regstart: %d\n", POINTER_TO_OFFSET (regstart[*p]));
../inputs/grep1.dat:159825:
../inputs/grep1.dat:159826:          IS_ACTIVE (reg_info[*p]) = 1;
../inputs/grep1.dat:159866:          MATCHED_SOMETHING (reg_info[*p]) = 0;
../inputs/grep1.dat:159914:          
../inputs/grep1.dat:159925:          /* This is the new highest active register.  */
../inputs/grep1.dat:159983:          highest_active_reg = *p;
../inputs/grep1.dat:160018:          
../inputs/grep1.dat:160029:          /* If nothing was active before, this is the new lowest active
../inputs/grep1.dat:160102:             register.  */
../inputs/grep1.dat:160129:          if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
../inputs/grep1.dat:160186:            lowest_active_reg = *p;
../inputs/grep1.dat:160222:
../inputs/grep1.dat:160223:          /* Move past the register number and inner group count.  */
../inputs/grep1.dat:160293:          p += 2;
../inputs/grep1.dat:160311:          break;
../inputs/grep1.dat:160328:
../inputs/grep1.dat:160329:
../inputs/grep1.dat:160330:        /* The stop_memory opcode represents the end of a group.  Its
../inputs/grep1.dat:160400:           arguments are the same as start_memory's: the register
../inputs/grep1.dat:160466:           number, and the number of inner groups.  */
../inputs/grep1.dat:160521:	case stop_memory:
../inputs/grep1.dat:160540:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
../inputs/grep1.dat:160604:             
../inputs/grep1.dat:160618:          /* We need to save the string position the last time we were at
../inputs/grep1.dat:160692:             this close-group operator in case the group is operated
../inputs/grep1.dat:160761:             upon by a repetition operator, e.g., with `((a*)*(b*)*)*'
../inputs/grep1.dat:160832:             against `aba'; then we want to ignore where we are now in
../inputs/grep1.dat:160903:             the string in case this attempt to match fails.  */
../inputs/grep1.dat:160968:          old_regend[*p] = REG_MATCH_NULL_STRING_P (reg_info[*p])
../inputs/grep1.dat:161034:                           ? REG_UNSET (regend[*p]) ? d : regend[*p]
../inputs/grep1.dat:161103:			   : regend[*p];
../inputs/grep1.dat:161123:	  DEBUG_PRINT2 ("      old_regend: %d\n", 
../inputs/grep1.dat:161167:			 POINTER_TO_OFFSET (old_regend[*p]));
../inputs/grep1.dat:161208:
../inputs/grep1.dat:161209:          regend[*p] = d;
../inputs/grep1.dat:161235:	  DEBUG_PRINT2 ("      regend: %d\n", POINTER_TO_OFFSET (regend[*p]));
../inputs/grep1.dat:161307:
../inputs/grep1.dat:161308:          /* This register isn't active anymore.  */
../inputs/grep1.dat:161361:          IS_ACTIVE (reg_info[*p]) = 0;
../inputs/grep1.dat:161401:          
../inputs/grep1.dat:161412:          /* If this was the only register active, nothing is active
../inputs/grep1.dat:161481:             anymore.  */
../inputs/grep1.dat:161507:          if (lowest_active_reg == highest_active_reg)
../inputs/grep1.dat:161562:            {
../inputs/grep1.dat:161576:              lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:161632:              highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:161690:            }
../inputs/grep1.dat:161704:          else
../inputs/grep1.dat:161719:            { /* We must scan for the new highest active register, since
../inputs/grep1.dat:161792:                 it isn't necessarily one less than now: consider
../inputs/grep1.dat:161858:                 (a(b)c(d(e)f)g).  When group 3 ends, after the f), the
../inputs/grep1.dat:161930:                 new highest active register is 1.  */
../inputs/grep1.dat:161985:              unsigned char r = *p - 1;
../inputs/grep1.dat:162025:              while (r > 0 && !IS_ACTIVE (reg_info[r]))
../inputs/grep1.dat:162081:                r--;
../inputs/grep1.dat:162102:              
../inputs/grep1.dat:162117:              /* If we end up at register zero, that means that we saved
../inputs/grep1.dat:162190:                 the registers as the result of an `on_failure_jump', not
../inputs/grep1.dat:162264:                 a `start_memory', and we jumped to past the innermost
../inputs/grep1.dat:162335:                 `stop_memory'.  For example, in ((.)*) we save
../inputs/grep1.dat:162399:                 registers 1 and 2 as a result of the *, but when we pop
../inputs/grep1.dat:162472:                 back to the second ), we are at the stop_memory 1.
../inputs/grep1.dat:162540:                 Thus, nothing is active.  */
../inputs/grep1.dat:162586:	      if (r == 0)
../inputs/grep1.dat:162605:                {
../inputs/grep1.dat:162623:                  lowest_active_reg = NO_LOWEST_ACTIVE_REG;
../inputs/grep1.dat:162683:                  highest_active_reg = NO_HIGHEST_ACTIVE_REG;
../inputs/grep1.dat:162745:                }
../inputs/grep1.dat:162763:              else
../inputs/grep1.dat:162782:                highest_active_reg = r;
../inputs/grep1.dat:162822:            }
../inputs/grep1.dat:162836:          
../inputs/grep1.dat:162847:          /* If just failed to match something this time around with a
../inputs/grep1.dat:162918:             group that's operated on by a repetition operator, try to
../inputs/grep1.dat:162989:             force exit from the ``loop'', and restore the register
../inputs/grep1.dat:163057:             information for this group that we had before trying this
../inputs/grep1.dat:163128:             last match.  */
../inputs/grep1.dat:163157:          if ((!MATCHED_SOMETHING (reg_info[*p])
../inputs/grep1.dat:163206:               || (re_opcode_t) p[-3] == start_memory)
../inputs/grep1.dat:163261:	      && (p + 2) < pend)              
../inputs/grep1.dat:163301:            {
../inputs/grep1.dat:163315:              boolean is_a_jump_n = false;
../inputs/grep1.dat:163358:              
../inputs/grep1.dat:163373:              p1 = p + 2;
../inputs/grep1.dat:163399:              mcnt = 0;
../inputs/grep1.dat:163423:              switch ((re_opcode_t) *p1++)
../inputs/grep1.dat:163466:                {
../inputs/grep1.dat:163484:                  case jump_n:
../inputs/grep1.dat:163515:		    is_a_jump_n = true;
../inputs/grep1.dat:163541:                  case pop_failure_jump:
../inputs/grep1.dat:163582:		  case maybe_pop_jump:
../inputs/grep1.dat:163607:		  case jump:
../inputs/grep1.dat:163622:		  case dummy_failure_jump:
../inputs/grep1.dat:163651:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:163707:		    if (is_a_jump_n)
../inputs/grep1.dat:163730:		      p1 += 2;
../inputs/grep1.dat:163747:                    break;
../inputs/grep1.dat:163774:                  
../inputs/grep1.dat:163793:                  default:
../inputs/grep1.dat:163820:                    /* do nothing */ ;
../inputs/grep1.dat:163859:                }
../inputs/grep1.dat:163877:	      p1 += mcnt;
../inputs/grep1.dat:163896:        
../inputs/grep1.dat:163905:              /* If the next operation is a jump backwards in the pattern
../inputs/grep1.dat:163979:	         to an on_failure_jump right before the start_memory
../inputs/grep1.dat:164041:                 corresponding to this stop_memory, exit from the loop
../inputs/grep1.dat:164112:                 by forcing a failure after pushing on the stack the
../inputs/grep1.dat:164181:                 on_failure_jump's jump in the pattern, and d.  */
../inputs/grep1.dat:164248:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
../inputs/grep1.dat:164315:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
../inputs/grep1.dat:164388:		{
../inputs/grep1.dat:164392:                  /* If this group ever matched anything, then restore
../inputs/grep1.dat:164463:                     what its registers were before trying this last
../inputs/grep1.dat:164532:                     failed match, e.g., with `(a*)*b' against `ab' for
../inputs/grep1.dat:164604:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
../inputs/grep1.dat:164670:                     against `aba' for regend[3].
../inputs/grep1.dat:164720:                     
../inputs/grep1.dat:164742:                     Also restore the registers for inner groups for,
../inputs/grep1.dat:164812:                     e.g., `((a*)(b*))*' against `aba' (register 3 would
../inputs/grep1.dat:164885:                     otherwise get trashed).  */
../inputs/grep1.dat:164934:                     
../inputs/grep1.dat:164956:                  if (EVER_MATCHED_SOMETHING (reg_info[*p]))
../inputs/grep1.dat:165017:		    {
../inputs/grep1.dat:165025:		      unsigned r; 
../inputs/grep1.dat:165046:        
../inputs/grep1.dat:165055:                      EVER_MATCHED_SOMETHING (reg_info[*p]) = 0;
../inputs/grep1.dat:165120:                      
../inputs/grep1.dat:165143:		      /* Restore this and inner groups' (if any) registers.  */
../inputs/grep1.dat:165209:                      for (r = *p; r < *p + *(p + 1); r++)
../inputs/grep1.dat:165268:                        {
../inputs/grep1.dat:165294:                          regstart[r] = old_regstart[r];
../inputs/grep1.dat:165351:
../inputs/grep1.dat:165352:                          /* xx why this test?  */
../inputs/grep1.dat:165403:                          if ((int) old_regend[r] >= (int) regstart[r])
../inputs/grep1.dat:165475:                            regend[r] = old_regend[r];
../inputs/grep1.dat:165530:                        }     
../inputs/grep1.dat:165561:                    }
../inputs/grep1.dat:165583:		  p1++;
../inputs/grep1.dat:165593:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:165647:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
../inputs/grep1.dat:165704:
../inputs/grep1.dat:165705:                  goto fail;
../inputs/grep1.dat:165734:                }
../inputs/grep1.dat:165752:            }
../inputs/grep1.dat:165766:          
../inputs/grep1.dat:165777:          /* Move past the register number and the inner group count.  */
../inputs/grep1.dat:165851:          p += 2;
../inputs/grep1.dat:165869:          break;
../inputs/grep1.dat:165886:
../inputs/grep1.dat:165887:
../inputs/grep1.dat:165888:	/* \<digit> has been turned into a `duplicate' command which is
../inputs/grep1.dat:165953:           followed by the numeric value of <digit> as the register number.  */
../inputs/grep1.dat:166033:        case duplicate:
../inputs/grep1.dat:166057:	  {
../inputs/grep1.dat:166062:	    register const char *d2, *dend2;
../inputs/grep1.dat:166100:	    int regno = *p++;   /* Get which register to match against.  */
../inputs/grep1.dat:166169:	    DEBUG_PRINT2 ("EXECUTING duplicate %d.\n", regno);
../inputs/grep1.dat:166225:
../inputs/grep1.dat:166226:	    /* Can't back reference a group which we've never matched.  */
../inputs/grep1.dat:166294:            if (REG_UNSET (regstart[regno]) || REG_UNSET (regend[regno]))
../inputs/grep1.dat:166368:              goto fail;
../inputs/grep1.dat:166393:              
../inputs/grep1.dat:166408:            /* Where in input to try to start matching.  */
../inputs/grep1.dat:166468:            d2 = regstart[regno];
../inputs/grep1.dat:166502:            
../inputs/grep1.dat:166515:            /* Where to stop matching; if both the place to start and
../inputs/grep1.dat:166585:               the place to stop matching are in the same string, then
../inputs/grep1.dat:166656:               set to the place to stop, otherwise, for now have to use
../inputs/grep1.dat:166728:               the end of the first string.  */
../inputs/grep1.dat:166776:
../inputs/grep1.dat:166777:            dend2 = ((FIRST_STRING_P (regstart[regno]) 
../inputs/grep1.dat:166833:		      == FIRST_STRING_P (regend[regno]))
../inputs/grep1.dat:166876:		     ? regend[regno] : end_match_1);
../inputs/grep1.dat:166915:	    for (;;)
../inputs/grep1.dat:166929:	      {
../inputs/grep1.dat:166938:		/* If necessary, advance to next segment in register
../inputs/grep1.dat:166993:                   contents.  */
../inputs/grep1.dat:167026:		while (d2 == dend2)
../inputs/grep1.dat:167048:		  {
../inputs/grep1.dat:167054:		    if (dend2 == end_match_2) break;
../inputs/grep1.dat:167093:		    if (dend2 == regend[regno]) break;
../inputs/grep1.dat:167134:
../inputs/grep1.dat:167135:                    /* End of string1 => advance to string2. */
../inputs/grep1.dat:167199:                    d2 = string2;
../inputs/grep1.dat:167233:                    dend2 = regend[regno];
../inputs/grep1.dat:167276:		  }
../inputs/grep1.dat:167282:		/* At end of register contents => success */
../inputs/grep1.dat:167329:		if (d2 == dend2) break;
../inputs/grep1.dat:167355:
../inputs/grep1.dat:167356:		/* If necessary, advance to next segment in data.  */
../inputs/grep1.dat:167412:		PREFETCH ();
../inputs/grep1.dat:167427:
../inputs/grep1.dat:167428:		/* How many characters left in this segment to match.  */
../inputs/grep1.dat:167488:		mcnt = dend - d;
../inputs/grep1.dat:167507:                
../inputs/grep1.dat:167524:		/* Want how many consecutive characters we can match in
../inputs/grep1.dat:167582:                   one shot, so, if necessary, adjust the count.  */
../inputs/grep1.dat:167651:                if (mcnt > dend2 - d2)
../inputs/grep1.dat:167690:		  mcnt = dend2 - d2;
../inputs/grep1.dat:167713:                  
../inputs/grep1.dat:167732:		/* Compare that many; failure if mismatch, else move
../inputs/grep1.dat:167787:                   past them.  */
../inputs/grep1.dat:167821:		if (translate 
../inputs/grep1.dat:167838:                    ? bcmp_translate (d, d2, mcnt, translate) 
../inputs/grep1.dat:167901:                    : bcmp (d, d2, mcnt))
../inputs/grep1.dat:167943:		  goto fail;
../inputs/grep1.dat:167958:		d += mcnt, d2 += mcnt;
../inputs/grep1.dat:167983:	      }
../inputs/grep1.dat:167992:	  }
../inputs/grep1.dat:167997:	  break;
../inputs/grep1.dat:168007:
../inputs/grep1.dat:168008:
../inputs/grep1.dat:168009:        /* begline matches the empty string at the beginning of the string
../inputs/grep1.dat:168084:           (unless `not_bol' is set in `bufp'), and, if
../inputs/grep1.dat:168140:           `newline_anchor' is set, after newlines.  */
../inputs/grep1.dat:168196:	case begline:
../inputs/grep1.dat:168211:          DEBUG_PRINT1 ("EXECUTING begline.\n");
../inputs/grep1.dat:168260:          
../inputs/grep1.dat:168271:          if (AT_STRINGS_BEG (d))
../inputs/grep1.dat:168305:            {
../inputs/grep1.dat:168319:              if (!bufp->not_bol) break;
../inputs/grep1.dat:168360:            }
../inputs/grep1.dat:168374:          else if (d[-1] == '\n' && bufp->newline_anchor)
../inputs/grep1.dat:168432:            {
../inputs/grep1.dat:168446:              break;
../inputs/grep1.dat:168467:            }
../inputs/grep1.dat:168481:          /* In all other cases, we fail.  */
../inputs/grep1.dat:168527:          goto fail;
../inputs/grep1.dat:168548:
../inputs/grep1.dat:168549:
../inputs/grep1.dat:168550:        /* endline is the dual of begline.  */
../inputs/grep1.dat:168597:	case endline:
../inputs/grep1.dat:168612:          DEBUG_PRINT1 ("EXECUTING endline.\n");
../inputs/grep1.dat:168661:
../inputs/grep1.dat:168662:          if (AT_STRINGS_END (d))
../inputs/grep1.dat:168696:            {
../inputs/grep1.dat:168710:              if (!bufp->not_eol) break;
../inputs/grep1.dat:168751:            }
../inputs/grep1.dat:168765:          
../inputs/grep1.dat:168776:          /* We have to ``prefetch'' the next character.  */
../inputs/grep1.dat:168837:          else if ((d == end1 ? *string2 : *d) == '\n'
../inputs/grep1.dat:168892:                   && bufp->newline_anchor)
../inputs/grep1.dat:168936:            {
../inputs/grep1.dat:168950:              break;
../inputs/grep1.dat:168971:            }
../inputs/grep1.dat:168985:          goto fail;
../inputs/grep1.dat:169006:
../inputs/grep1.dat:169007:
../inputs/grep1.dat:169008:	/* Match at the very beginning of the data.  */
../inputs/grep1.dat:169057:        case begbuf:
../inputs/grep1.dat:169078:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
../inputs/grep1.dat:169126:          if (AT_STRINGS_BEG (d))
../inputs/grep1.dat:169160:            break;
../inputs/grep1.dat:169179:          goto fail;
../inputs/grep1.dat:169200:
../inputs/grep1.dat:169201:
../inputs/grep1.dat:169202:	/* Match at the very end of the data.  */
../inputs/grep1.dat:169245:        case endbuf:
../inputs/grep1.dat:169266:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
../inputs/grep1.dat:169314:	  if (AT_STRINGS_END (d))
../inputs/grep1.dat:169341:	    break;
../inputs/grep1.dat:169353:          goto fail;
../inputs/grep1.dat:169374:
../inputs/grep1.dat:169375:
../inputs/grep1.dat:169376:        /* on_failure_keep_string_jump is used to optimize `.*\n'.  It
../inputs/grep1.dat:169447:           pushes NULL as the value for the string on the stack.  Then
../inputs/grep1.dat:169518:           `pop_failure_point' will keep the current value for the
../inputs/grep1.dat:169585:           string, instead of restoring it.  To see why, consider
../inputs/grep1.dat:169651:           matching `foo\nbar' against `.*\n'.  The .* matches the foo;
../inputs/grep1.dat:169723:           then the . fails against the \n.  But the next thing we want
../inputs/grep1.dat:169795:           to do is match the \n against the \n; if we restored the
../inputs/grep1.dat:169863:           string value, we would be back at the foo.
../inputs/grep1.dat:169917:           
../inputs/grep1.dat:169929:           Because this is used only in specific cases, we don't need to
../inputs/grep1.dat:170002:           check all the things that `on_failure_jump' does, to make
../inputs/grep1.dat:170071:           sure the right things get saved on the stack.  Hence we don't
../inputs/grep1.dat:170144:           share its code.  The only reason to push anything on the
../inputs/grep1.dat:170212:           stack at all is that otherwise we would have to change
../inputs/grep1.dat:170278:           `anychar's code to do something besides goto fail in this
../inputs/grep1.dat:170347:           case; that seems worse than this.  */
../inputs/grep1.dat:170396:        case on_failure_keep_string_jump:
../inputs/grep1.dat:170438:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
../inputs/grep1.dat:170504:          
../inputs/grep1.dat:170515:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:170560:          DEBUG_PRINT3 (" %d (to 0x%x):\n", mcnt, p + mcnt);
../inputs/grep1.dat:170621:
../inputs/grep1.dat:170622:          PUSH_FAILURE_POINT (p + mcnt, NULL, -2);
../inputs/grep1.dat:170673:          break;
../inputs/grep1.dat:170690:
../inputs/grep1.dat:170691:
../inputs/grep1.dat:170692:	/* Uses of on_failure_jump:
../inputs/grep1.dat:170721:        
../inputs/grep1.dat:170730:           Each alternative starts with an on_failure_jump that points
../inputs/grep1.dat:170801:           to the beginning of the next alternative.  Each alternative
../inputs/grep1.dat:170872:           except the last ends with a jump that in effect jumps past
../inputs/grep1.dat:170942:           the rest of the alternatives.  (They really jump to the
../inputs/grep1.dat:171009:           ending jump of the following alternative, because tensioning
../inputs/grep1.dat:171081:           these jumps is a hassle.)
../inputs/grep1.dat:171118:
../inputs/grep1.dat:171119:           Repeats start with an on_failure_jump that points past both
../inputs/grep1.dat:171190:           the repetition text and either the following jump or
../inputs/grep1.dat:171254:           pop_failure_jump back to this on_failure_jump.  */
../inputs/grep1.dat:171316:	case on_failure_jump:
../inputs/grep1.dat:171339:        on_failure:
../inputs/grep1.dat:171359:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
../inputs/grep1.dat:171413:
../inputs/grep1.dat:171414:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:171459:          DEBUG_PRINT3 (" %d (to 0x%x)", mcnt, p + mcnt);
../inputs/grep1.dat:171517:
../inputs/grep1.dat:171518:          /* If this on_failure_jump comes right before a group (i.e.,
../inputs/grep1.dat:171589:             the original * applied to a group), save the information
../inputs/grep1.dat:171659:             for that group and all inner ones, so that if we fail back
../inputs/grep1.dat:171731:             to this point, the group's information will be correct.
../inputs/grep1.dat:171800:             For example, in \(a*\)*\1, we need the preceding group,
../inputs/grep1.dat:171869:             and in \(\(a*\)b*\)\2, we need the inner group.  */
../inputs/grep1.dat:171934:
../inputs/grep1.dat:171935:          /* We can't use `p' to check ahead because we push
../inputs/grep1.dat:171996:             a failure point to `p + mcnt' after we do this.  */
../inputs/grep1.dat:172061:          p1 = p;
../inputs/grep1.dat:172079:
../inputs/grep1.dat:172080:          /* We need to skip no_op's before we look for the
../inputs/grep1.dat:172140:             start_memory in case this on_failure_jump is happening as
../inputs/grep1.dat:172211:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
../inputs/grep1.dat:172283:             against aba.  */
../inputs/grep1.dat:172313:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
../inputs/grep1.dat:172371:            p1++;
../inputs/grep1.dat:172389:
../inputs/grep1.dat:172390:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
../inputs/grep1.dat:172452:            {
../inputs/grep1.dat:172466:              /* We have a new highest active register now.  This will
../inputs/grep1.dat:172537:                 get reset at the start_memory we are about to get to,
../inputs/grep1.dat:172608:                 but we will have saved all the registers relevant to
../inputs/grep1.dat:172678:                 this repetition op, as described above.  */
../inputs/grep1.dat:172739:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
../inputs/grep1.dat:172797:              if (lowest_active_reg == NO_LOWEST_ACTIVE_REG)
../inputs/grep1.dat:172858:                lowest_active_reg = *(p1 + 1);
../inputs/grep1.dat:172905:            }
../inputs/grep1.dat:172919:
../inputs/grep1.dat:172920:          DEBUG_PRINT1 (":\n");
../inputs/grep1.dat:172952:          PUSH_FAILURE_POINT (p + mcnt, d, -2);
../inputs/grep1.dat:173000:          break;
../inputs/grep1.dat:173017:
../inputs/grep1.dat:173018:
../inputs/grep1.dat:173019:        /* A smart repeat ends with `maybe_pop_jump'.
../inputs/grep1.dat:173073:	   We change it to either `pop_failure_jump' or `jump'.  */
../inputs/grep1.dat:173134:        case maybe_pop_jump:
../inputs/grep1.dat:173163:          EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:173208:          DEBUG_PRINT2 ("EXECUTING maybe_pop_jump %d.\n", mcnt);
../inputs/grep1.dat:173273:          {
../inputs/grep1.dat:173285:	    register unsigned char *p2 = p;
../inputs/grep1.dat:173322:
../inputs/grep1.dat:173323:            /* Compare the beginning of the repeat with what in the
../inputs/grep1.dat:173391:               pattern follows its end. If we can establish that there
../inputs/grep1.dat:173462:               is nothing that they would both match, i.e., that we
../inputs/grep1.dat:173530:               would have to backtrack because of (as in, e.g., `a*a')
../inputs/grep1.dat:173601:               then we can change to pop_failure_jump, because we'll
../inputs/grep1.dat:173670:               never have to backtrack.
../inputs/grep1.dat:173710:               
../inputs/grep1.dat:173726:               This is not true in the case of alternatives: in
../inputs/grep1.dat:173790:               `(a|ab)*' we do need to backtrack to the `ab' alternative
../inputs/grep1.dat:173863:               (e.g., if the string was `ab').  But instead of trying to
../inputs/grep1.dat:173936:               detect that here, the alternative has put on a dummy
../inputs/grep1.dat:174004:               failure point which is what we will end up popping.  */
../inputs/grep1.dat:174075:
../inputs/grep1.dat:174076:	    /* Skip over open/close-group commands.  */
../inputs/grep1.dat:174125:	    while (p2 + 2 < pend
../inputs/grep1.dat:174151:		   && ((re_opcode_t) *p2 == stop_memory
../inputs/grep1.dat:174193:		       || (re_opcode_t) *p2 == start_memory))
../inputs/grep1.dat:174241:	      p2 += 3;			/* Skip over args, too.  */
../inputs/grep1.dat:174287:
../inputs/grep1.dat:174288:            /* If we're at the end of the pattern, we can change.  */
../inputs/grep1.dat:174358:            if (p2 == pend)
../inputs/grep1.dat:174386:	      {
../inputs/grep1.dat:174395:		/* Consider what happens when matching ":\(.*\)"
../inputs/grep1.dat:174446:		   against ":/".  I don't really understand this code
../inputs/grep1.dat:174502:		   yet.  */
../inputs/grep1.dat:174516:  	        p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:174569:                DEBUG_PRINT1
../inputs/grep1.dat:174598:                  ("  End of pattern: change to `pop_failure_jump'.\n");
../inputs/grep1.dat:174671:              }
../inputs/grep1.dat:174687:
../inputs/grep1.dat:174688:            else if ((re_opcode_t) *p2 == exactn
../inputs/grep1.dat:174737:		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
../inputs/grep1.dat:174803:	      {
../inputs/grep1.dat:174812:		register unsigned char c
../inputs/grep1.dat:174839:                  = *p2 == (unsigned char) endline ? '\n' : p2[2];
../inputs/grep1.dat:174906:		p1 = p + mcnt;
../inputs/grep1.dat:174923:
../inputs/grep1.dat:174924:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
../inputs/grep1.dat:174999:                   to the `maybe_finalize_jump' of this case.  Examine what 
../inputs/grep1.dat:175076:                   follows.  */
../inputs/grep1.dat:175108:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
../inputs/grep1.dat:175173:                  {
../inputs/grep1.dat:175193:  		    p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:175243:                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
../inputs/grep1.dat:175314:                                  c, p1[5]);
../inputs/grep1.dat:175359:                  }
../inputs/grep1.dat:175379:                  
../inputs/grep1.dat:175398:		else if ((re_opcode_t) p1[3] == charset
../inputs/grep1.dat:175440:			 || (re_opcode_t) p1[3] == charset_not)
../inputs/grep1.dat:175483:		  {
../inputs/grep1.dat:175489:		    int not = (re_opcode_t) p1[3] == charset_not;
../inputs/grep1.dat:175541:                    
../inputs/grep1.dat:175562:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
../inputs/grep1.dat:175612:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
../inputs/grep1.dat:175666:		      not = !not;
../inputs/grep1.dat:175686:
../inputs/grep1.dat:175687:                    /* `not' is equal to 1 if c would match, which means
../inputs/grep1.dat:175760:                        that we can't change to pop_failure_jump.  */
../inputs/grep1.dat:175830:		    if (!not)
../inputs/grep1.dat:175846:                      {
../inputs/grep1.dat:175870:  		        p[-3] = (unsigned char) pop_failure_jump;
../inputs/grep1.dat:175924:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
../inputs/grep1.dat:176000:                      }
../inputs/grep1.dat:176024:		  }
../inputs/grep1.dat:176030:	      }
../inputs/grep1.dat:176039:	  }
../inputs/grep1.dat:176044:	  p -= 2;		/* Point at relative address again.  */
../inputs/grep1.dat:176096:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
../inputs/grep1.dat:176144:	    {
../inputs/grep1.dat:176151:	      p[-1] = (unsigned char) jump;
../inputs/grep1.dat:176188:              DEBUG_PRINT1 ("  Match => jump.\n");
../inputs/grep1.dat:176239:	      goto unconditional_jump;
../inputs/grep1.dat:176271:	    }
../inputs/grep1.dat:176278:        /* Note fall through.  */
../inputs/grep1.dat:176312:
../inputs/grep1.dat:176313:
../inputs/grep1.dat:176314:	/* The end of a simple repeat has a pop_failure_jump back to
../inputs/grep1.dat:176376:           its matching on_failure_jump, where the latter will push a
../inputs/grep1.dat:176446:           failure point.  The pop_failure_jump takes off failure
../inputs/grep1.dat:176512:           points put on by this pop_failure_jump's matching
../inputs/grep1.dat:176573:           on_failure_jump; we got through the pattern to here from the
../inputs/grep1.dat:176645:           matching on_failure_jump, so didn't fail.  */
../inputs/grep1.dat:176702:        case pop_failure_jump:
../inputs/grep1.dat:176733:          {
../inputs/grep1.dat:176745:            /* We need to pass separate storage for the lowest and
../inputs/grep1.dat:176812:               highest registers, even though we don't care about the
../inputs/grep1.dat:176882:               actual values.  Otherwise, we will restore only one
../inputs/grep1.dat:176949:               register from the stack, since lowest will == highest in
../inputs/grep1.dat:177021:               `pop_failure_point'.  */
../inputs/grep1.dat:177061:            unsigned dummy_low_reg, dummy_high_reg;
../inputs/grep1.dat:177113:            unsigned char *pdummy;
../inputs/grep1.dat:177148:            const char *sdummy;
../inputs/grep1.dat:177180:
../inputs/grep1.dat:177181:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
../inputs/grep1.dat:177241:            POP_FAILURE_POINT (sdummy, pdummy,
../inputs/grep1.dat:177288:                               dummy_low_reg, dummy_high_reg,
../inputs/grep1.dat:177350:                               reg_dummy, reg_dummy, reg_info_dummy);
../inputs/grep1.dat:177420:          }
../inputs/grep1.dat:177432:          /* Note fall through.  */
../inputs/grep1.dat:177468:
../inputs/grep1.dat:177469:          
../inputs/grep1.dat:177480:        /* Unconditionally jump (without popping any failure points).  */
../inputs/grep1.dat:177554:        case jump:
../inputs/grep1.dat:177573:	unconditional_jump:
../inputs/grep1.dat:177594:	  EXTRACT_NUMBER_AND_INCR (mcnt, p);	/* Get the amount to jump.  */
../inputs/grep1.dat:177663:          DEBUG_PRINT2 ("EXECUTING jump %d ", mcnt);
../inputs/grep1.dat:177716:	  p += mcnt;				/* Do the jump.  */
../inputs/grep1.dat:177753:          DEBUG_PRINT2 ("(to 0x%x).\n", p);
../inputs/grep1.dat:177797:	  break;
../inputs/grep1.dat:177807:
../inputs/grep1.dat:177808:	
../inputs/grep1.dat:177810:        /* We need this opcode so we can detect where alternatives end
../inputs/grep1.dat:177881:           in `group_match_null_string_p' et al.  */
../inputs/grep1.dat:177934:        case jump_past_alt:
../inputs/grep1.dat:177962:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
../inputs/grep1.dat:178017:          goto unconditional_jump;
../inputs/grep1.dat:178052:
../inputs/grep1.dat:178053:
../inputs/grep1.dat:178054:        /* Normally, the on_failure_jump pushes a failure point, which
../inputs/grep1.dat:178125:           then gets popped at pop_failure_jump.  We will end up at
../inputs/grep1.dat:178193:           pop_failure_jump, also, and with a pattern of, say, `a+', we
../inputs/grep1.dat:178265:           are skipping over the on_failure_jump, so we have to push
../inputs/grep1.dat:178334:           something meaningless for pop_failure_jump to pop.  */
../inputs/grep1.dat:178400:        case dummy_failure_jump:
../inputs/grep1.dat:178433:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
../inputs/grep1.dat:178493:          /* It doesn't matter what we push for the string here.  What
../inputs/grep1.dat:178564:             the code at `fail' tests is the value for the pattern.  */
../inputs/grep1.dat:178636:          PUSH_FAILURE_POINT (0, 0, -2);
../inputs/grep1.dat:178677:          goto unconditional_jump;
../inputs/grep1.dat:178712:
../inputs/grep1.dat:178713:
../inputs/grep1.dat:178714:        /* At the end of an alternative, we need to push a dummy failure
../inputs/grep1.dat:178787:           point in case we are followed by a `pop_failure_jump', because
../inputs/grep1.dat:178861:           we don't want the failure point for the alternative to be
../inputs/grep1.dat:178930:           popped.  For example, matching `(a|ab)*' against `aab'
../inputs/grep1.dat:178996:           requires that we match the `ab' alternative.  */
../inputs/grep1.dat:179056:        case push_dummy_failure:
../inputs/grep1.dat:179089:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
../inputs/grep1.dat:179149:          /* See comments just above at `dummy_failure_jump' about the
../inputs/grep1.dat:179220:             two zeroes.  */
../inputs/grep1.dat:179249:          PUSH_FAILURE_POINT (0, 0, -2);
../inputs/grep1.dat:179290:          break;
../inputs/grep1.dat:179307:
../inputs/grep1.dat:179308:        /* Have to succeed matching what follows at least n times.
../inputs/grep1.dat:179375:           After that, handle like `on_failure_jump'.  */
../inputs/grep1.dat:179433:        case succeed_n: 
../inputs/grep1.dat:179458:          EXTRACT_NUMBER (mcnt, p + 2);
../inputs/grep1.dat:179498:          DEBUG_PRINT2 ("EXECUTING succeed_n %d.\n", mcnt);
../inputs/grep1.dat:179558:
../inputs/grep1.dat:179559:          assert (mcnt >= 0);
../inputs/grep1.dat:179589:          /* Originally, this is how many times we HAVE to succeed.  */
../inputs/grep1.dat:179661:          if (mcnt > 0)
../inputs/grep1.dat:179685:            {
../inputs/grep1.dat:179699:               mcnt--;
../inputs/grep1.dat:179722:	       p += 2;
../inputs/grep1.dat:179738:               STORE_NUMBER_AND_INCR (p, mcnt);
../inputs/grep1.dat:179786:               DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p, mcnt);
../inputs/grep1.dat:179852:            }
../inputs/grep1.dat:179866:	  else if (mcnt == 0)
../inputs/grep1.dat:179889:            {
../inputs/grep1.dat:179903:              DEBUG_PRINT2 ("  Setting two bytes from 0x%x to no_op.\n", p+2);
../inputs/grep1.dat:179982:	      p[2] = (unsigned char) no_op;
../inputs/grep1.dat:180019:              p[3] = (unsigned char) no_op;
../inputs/grep1.dat:180063:              goto on_failure;
../inputs/grep1.dat:180094:            }
../inputs/grep1.dat:180108:          break;
../inputs/grep1.dat:180125:        
../inputs/grep1.dat:180134:        case jump_n: 
../inputs/grep1.dat:180156:          EXTRACT_NUMBER (mcnt, p + 2);
../inputs/grep1.dat:180196:          DEBUG_PRINT2 ("EXECUTING jump_n %d.\n", mcnt);
../inputs/grep1.dat:180253:
../inputs/grep1.dat:180254:          /* Originally, this is how many times we CAN jump.  */
../inputs/grep1.dat:180319:          if (mcnt)
../inputs/grep1.dat:180339:            {
../inputs/grep1.dat:180353:               mcnt--;
../inputs/grep1.dat:180376:               STORE_NUMBER (p + 2, mcnt);
../inputs/grep1.dat:180419:	       goto unconditional_jump;	     
../inputs/grep1.dat:180458:            }
../inputs/grep1.dat:180472:          /* If don't have to jump any more, skip over the rest of command.  */
../inputs/grep1.dat:180552:	  else      
../inputs/grep1.dat:180566:	    p += 4;		     
../inputs/grep1.dat:180586:          break;
../inputs/grep1.dat:180603:        
../inputs/grep1.dat:180612:	case set_number_at:
../inputs/grep1.dat:180633:	  {
../inputs/grep1.dat:180638:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
../inputs/grep1.dat:180695:
../inputs/grep1.dat:180696:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:180743:            p1 = p + mcnt;
../inputs/grep1.dat:180770:            EXTRACT_NUMBER_AND_INCR (mcnt, p);
../inputs/grep1.dat:180817:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
../inputs/grep1.dat:180881:	    STORE_NUMBER (p1, mcnt);
../inputs/grep1.dat:180911:            break;
../inputs/grep1.dat:180930:          }
../inputs/grep1.dat:180942:
../inputs/grep1.dat:180943:        case wordbound:
../inputs/grep1.dat:180967:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
../inputs/grep1.dat:181018:          if (AT_WORD_BOUNDARY (d))
../inputs/grep1.dat:181054:	    break;
../inputs/grep1.dat:181066:          goto fail;
../inputs/grep1.dat:181087:
../inputs/grep1.dat:181088:	case notwordbound:
../inputs/grep1.dat:181108:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
../inputs/grep1.dat:181162:	  if (AT_WORD_BOUNDARY (d))
../inputs/grep1.dat:181191:	    goto fail;
../inputs/grep1.dat:181207:          break;
../inputs/grep1.dat:181224:
../inputs/grep1.dat:181225:	case wordbeg:
../inputs/grep1.dat:181240:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
../inputs/grep1.dat:181289:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
../inputs/grep1.dat:181359:	    break;
../inputs/grep1.dat:181371:          goto fail;
../inputs/grep1.dat:181392:
../inputs/grep1.dat:181393:	case wordend:
../inputs/grep1.dat:181408:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
../inputs/grep1.dat:181457:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
../inputs/grep1.dat:181506:              && (!WORDCHAR_P (d) || AT_STRINGS_END (d)))
../inputs/grep1.dat:181564:	    break;
../inputs/grep1.dat:181576:          goto fail;
../inputs/grep1.dat:181597:
../inputs/grep1.dat:181598:#ifdef emacs
../inputs/grep1.dat:181611:#ifdef emacs19
../inputs/grep1.dat:181626:  	case before_dot:
../inputs/grep1.dat:181646:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
../inputs/grep1.dat:181698: 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
../inputs/grep1.dat:181751:  	    goto fail;
../inputs/grep1.dat:181769:  	  break;
../inputs/grep1.dat:181781:  
../inputs/grep1.dat:181784:  	case at_dot:
../inputs/grep1.dat:181800:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
../inputs/grep1.dat:181848: 	  if (PTR_CHAR_POS ((unsigned char *) d) != point)
../inputs/grep1.dat:181901:  	    goto fail;
../inputs/grep1.dat:181919:  	  break;
../inputs/grep1.dat:181931:  
../inputs/grep1.dat:181934:  	case after_dot:
../inputs/grep1.dat:181953:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
../inputs/grep1.dat:182004:          if (PTR_CHAR_POS ((unsigned char *) d) <= point)
../inputs/grep1.dat:182063:  	    goto fail;
../inputs/grep1.dat:182081:  	  break;
../inputs/grep1.dat:182093:#else /* not emacs19 */
../inputs/grep1.dat:182117:	case at_dot:
../inputs/grep1.dat:182131:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
../inputs/grep1.dat:182179:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
../inputs/grep1.dat:182235:	    goto fail;
../inputs/grep1.dat:182251:	  break;
../inputs/grep1.dat:182261:#endif /* not emacs19 */
../inputs/grep1.dat:182286:
../inputs/grep1.dat:182287:	case syntaxspec:
../inputs/grep1.dat:182305:          DEBUG_PRINT2 ("EXECUTING syntaxspec %d.\n", mcnt);
../inputs/grep1.dat:182366:	  mcnt = *p++;
../inputs/grep1.dat:182382:	  goto matchsyntax;
../inputs/grep1.dat:182403:
../inputs/grep1.dat:182404:        case wordchar:
../inputs/grep1.dat:182427:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
../inputs/grep1.dat:182483:	  mcnt = (int) Sword;
../inputs/grep1.dat:182506:        matchsyntax:
../inputs/grep1.dat:182527:	  PREFETCH ();
../inputs/grep1.dat:182543:	  if (SYNTAX (*d++) != (enum syntaxcode) mcnt)
../inputs/grep1.dat:182591:            goto fail;
../inputs/grep1.dat:182614:          SET_REGS_MATCHED ();
../inputs/grep1.dat:182645:	  break;
../inputs/grep1.dat:182655:
../inputs/grep1.dat:182656:	case notsyntaxspec:
../inputs/grep1.dat:182677:          DEBUG_PRINT2 ("EXECUTING notsyntaxspec %d.\n", mcnt);
../inputs/grep1.dat:182741:	  mcnt = *p++;
../inputs/grep1.dat:182757:	  goto matchnotsyntax;
../inputs/grep1.dat:182781:
../inputs/grep1.dat:182782:        case notwordchar:
../inputs/grep1.dat:182808:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
../inputs/grep1.dat:182867:	  mcnt = (int) Sword;
../inputs/grep1.dat:182890:        matchnotsyntax:
../inputs/grep1.dat:182914:	  PREFETCH ();
../inputs/grep1.dat:182930:	  if (SYNTAX (*d++) == (enum syntaxcode) mcnt)
../inputs/grep1.dat:182978:            goto fail;
../inputs/grep1.dat:183001:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:183025:          break;
../inputs/grep1.dat:183042:
../inputs/grep1.dat:183043:#else /* not emacs */
../inputs/grep1.dat:183065:	case wordchar:
../inputs/grep1.dat:183081:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
../inputs/grep1.dat:183141:	  PREFETCH ();
../inputs/grep1.dat:183157:          if (!WORDCHAR_P (d))
../inputs/grep1.dat:183188:            goto fail;
../inputs/grep1.dat:183211:	  SET_REGS_MATCHED ();
../inputs/grep1.dat:183235:          d++;
../inputs/grep1.dat:183250:	  break;
../inputs/grep1.dat:183260:	  
../inputs/grep1.dat:183264:	case notwordchar:
../inputs/grep1.dat:183283:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
../inputs/grep1.dat:183346:	  PREFETCH ();
../inputs/grep1.dat:183362:	  if (WORDCHAR_P (d))
../inputs/grep1.dat:183385:            goto fail;
../inputs/grep1.dat:183408:          SET_REGS_MATCHED ();
../inputs/grep1.dat:183439:          d++;
../inputs/grep1.dat:183454:	  break;
../inputs/grep1.dat:183464:#endif /* not emacs */
../inputs/grep1.dat:183487:          
../inputs/grep1.dat:183498:        default:
../inputs/grep1.dat:183515:          abort ();
../inputs/grep1.dat:183535:	}
../inputs/grep1.dat:183538:      continue;  /* Successfully executed one pattern command; keep going.  */
../inputs/grep1.dat:183617:
../inputs/grep1.dat:183618:
../inputs/grep1.dat:183619:    /* We goto here if a matching operation fails. */
../inputs/grep1.dat:183673:    fail:
../inputs/grep1.dat:183683:      if (!FAIL_STACK_EMPTY ())
../inputs/grep1.dat:183715:	{ /* A restart point is known.  Restore to that state.  */
../inputs/grep1.dat:183775:          DEBUG_PRINT1 ("\nFAIL:\n");
../inputs/grep1.dat:183813:          POP_FAILURE_POINT (d, p,
../inputs/grep1.dat:183848:                             lowest_active_reg, highest_active_reg,
../inputs/grep1.dat:183916:                             regstart, regend, reg_info);
../inputs/grep1.dat:183974:
../inputs/grep1.dat:183975:          /* If this failure point is a dummy, try the next one.  */
../inputs/grep1.dat:184044:          if (!p)
../inputs/grep1.dat:184062:	    goto fail;
../inputs/grep1.dat:184078:
../inputs/grep1.dat:184079:          /* If we failed to the end of the pattern, don't examine *p.  */
../inputs/grep1.dat:184154:	  assert (p <= pend);
../inputs/grep1.dat:184177:          if (p < pend)
../inputs/grep1.dat:184201:            {
../inputs/grep1.dat:184215:              boolean is_a_jump_n = false;
../inputs/grep1.dat:184258:              
../inputs/grep1.dat:184273:              /* If failed to a backwards jump that's part of a repetition
../inputs/grep1.dat:184348:                 loop, need to pop this failure point and use the next one.  */
../inputs/grep1.dat:184428:              switch ((re_opcode_t) *p)
../inputs/grep1.dat:184468:                {
../inputs/grep1.dat:184486:                case jump_n:
../inputs/grep1.dat:184515:                  is_a_jump_n = true;
../inputs/grep1.dat:184553:                case maybe_pop_jump:
../inputs/grep1.dat:184590:                case pop_failure_jump:
../inputs/grep1.dat:184629:                case jump:
../inputs/grep1.dat:184656:                  p1 = p + 1;
../inputs/grep1.dat:184686:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:184740:                  p1 += mcnt;	
../inputs/grep1.dat:184771:
../inputs/grep1.dat:184772:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
../inputs/grep1.dat:184842:                      || (!is_a_jump_n
../inputs/grep1.dat:184881:                          && (re_opcode_t) *p1 == on_failure_jump))
../inputs/grep1.dat:184949:                    goto fail;
../inputs/grep1.dat:184980:                  break;
../inputs/grep1.dat:185005:                default:
../inputs/grep1.dat:185030:                  /* do nothing */ ;
../inputs/grep1.dat:185067:                }
../inputs/grep1.dat:185085:            }
../inputs/grep1.dat:185099:
../inputs/grep1.dat:185100:          if (d >= string1 && d <= end1)
../inputs/grep1.dat:185141:	    dend = end_match_1;
../inputs/grep1.dat:185166:        }
../inputs/grep1.dat:185176:      else
../inputs/grep1.dat:185187:        break;   /* Matching at this starting point really fails.  */
../inputs/grep1.dat:185257:    } /* for (;;) */
../inputs/grep1.dat:185278:
../inputs/grep1.dat:185279:  if (best_regs_set)
../inputs/grep1.dat:185300:    goto restore_best_regs;
../inputs/grep1.dat:185328:
../inputs/grep1.dat:185329:  FREE_VARIABLES ();
../inputs/grep1.dat:185350:
../inputs/grep1.dat:185351:  return -1;         			/* Failure to match.  */
../inputs/grep1.dat:185400:} /* re_match_2 */
../inputs/grep1.dat:185419:
../inputs/grep1.dat:185421:/* Subroutine definitions for re_match_2.  */
../inputs/grep1.dat:185467:
../inputs/grep1.dat:185468:
../inputs/grep1.dat:185469:/* We are passed P pointing to a register number after a start_memory.
../inputs/grep1.dat:185540:   
../inputs/grep1.dat:185544:   Return true if the pattern up to the corresponding stop_memory can
../inputs/grep1.dat:185614:   match the empty string, and false otherwise.
../inputs/grep1.dat:185662:   
../inputs/grep1.dat:185666:   If we find the matching stop_memory, sets P to point to one past its number.
../inputs/grep1.dat:185746:   Otherwise, sets P to an undefined byte less than or equal to END.
../inputs/grep1.dat:185815:
../inputs/grep1.dat:185816:   We don't handle duplicates properly (yet).  */
../inputs/grep1.dat:185866:
../inputs/grep1.dat:185867:static boolean
../inputs/grep1.dat:185882:group_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:185927:    unsigned char **p, *end;
../inputs/grep1.dat:185956:    register_info_type *reg_info;
../inputs/grep1.dat:185990:{
../inputs/grep1.dat:185992:  int mcnt;
../inputs/grep1.dat:186004:  /* Point to after the args to the start_memory.  */
../inputs/grep1.dat:186058:  unsigned char *p1 = *p + 2;
../inputs/grep1.dat:186088:  
../inputs/grep1.dat:186091:  while (p1 < end)
../inputs/grep1.dat:186110:    {
../inputs/grep1.dat:186116:      /* Skip over opcodes that can match nothing, and return true or
../inputs/grep1.dat:186186:	 false, as appropriate, when we get to one that can't, or to the
../inputs/grep1.dat:186252:         matching stop_memory.  */
../inputs/grep1.dat:186287:      
../inputs/grep1.dat:186294:      switch ((re_opcode_t) *p1)
../inputs/grep1.dat:186327:        {
../inputs/grep1.dat:186337:        /* Could be either a loop or a series of alternatives.  */
../inputs/grep1.dat:186404:        case on_failure_jump:
../inputs/grep1.dat:186434:          p1++;
../inputs/grep1.dat:186450:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:186496:          
../inputs/grep1.dat:186507:          /* If the next operation is not a jump backwards in the
../inputs/grep1.dat:186573:	     pattern.  */
../inputs/grep1.dat:186592:
../inputs/grep1.dat:186593:	  if (mcnt >= 0)
../inputs/grep1.dat:186611:	    {
../inputs/grep1.dat:186618:              /* Go through the on_failure_jumps of the alternatives,
../inputs/grep1.dat:186688:                 seeing if any of the alternatives cannot match nothing.
../inputs/grep1.dat:186761:                 The last alternative starts with only a jump,
../inputs/grep1.dat:186824:                 whereas the rest start with on_failure_jump and end
../inputs/grep1.dat:186893:                 with a jump, e.g., here is the pattern for `a|b|c':
../inputs/grep1.dat:186962:
../inputs/grep1.dat:186963:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
../inputs/grep1.dat:187030:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
../inputs/grep1.dat:187097:                 /exactn/1/c						
../inputs/grep1.dat:187132:
../inputs/grep1.dat:187133:                 So, we have to first go through the first (n-1)
../inputs/grep1.dat:187198:                 alternatives and then deal with the last one separately.  */
../inputs/grep1.dat:187276:
../inputs/grep1.dat:187277:
../inputs/grep1.dat:187278:              /* Deal with the first (n-1) alternatives, which start
../inputs/grep1.dat:187347:                 with an on_failure_jump (see above) that jumps to right
../inputs/grep1.dat:187420:                 past a jump_past_alt.  */
../inputs/grep1.dat:187463:
../inputs/grep1.dat:187464:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
../inputs/grep1.dat:187528:                {
../inputs/grep1.dat:187546:                  /* `mcnt' holds how many bytes long the alternative
../inputs/grep1.dat:187616:                     is, including the ending `jump_past_alt' and
../inputs/grep1.dat:187682:                     its number.  */
../inputs/grep1.dat:187719:
../inputs/grep1.dat:187720:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
../inputs/grep1.dat:187788:				                      reg_info))
../inputs/grep1.dat:187825:                    return false;
../inputs/grep1.dat:187859:
../inputs/grep1.dat:187860:                  /* Move to right after this alternative, including the
../inputs/grep1.dat:187933:		     jump_past_alt.  */
../inputs/grep1.dat:187959:                  p1 += mcnt;	
../inputs/grep1.dat:187990:
../inputs/grep1.dat:187991:                  /* Break if it's the beginning of an n-th alternative
../inputs/grep1.dat:188063:                     that doesn't begin with an on_failure_jump.  */
../inputs/grep1.dat:188132:                  if ((re_opcode_t) *p1 != on_failure_jump)
../inputs/grep1.dat:188192:                    break;
../inputs/grep1.dat:188219:		
../inputs/grep1.dat:188222:		  /* Still have to check that it's not an n-th
../inputs/grep1.dat:188271:		     alternative that starts with an on_failure_jump.  */
../inputs/grep1.dat:188331:		  p1++;
../inputs/grep1.dat:188341:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:188395:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
../inputs/grep1.dat:188460:                    {
../inputs/grep1.dat:188482:		      /* Get to the beginning of the n-th alternative.  */
../inputs/grep1.dat:188543:                      p1 -= 3;
../inputs/grep1.dat:188574:                      break;
../inputs/grep1.dat:188603:                    }
../inputs/grep1.dat:188625:                }
../inputs/grep1.dat:188643:
../inputs/grep1.dat:188644:              /* Deal with the last alternative: go back and get number
../inputs/grep1.dat:188716:                 of the `jump_past_alt' just before it.  `mcnt' contains
../inputs/grep1.dat:188789:                 the length of the alternative.  */
../inputs/grep1.dat:188841:              EXTRACT_NUMBER (mcnt, p1 - 2);
../inputs/grep1.dat:188886:
../inputs/grep1.dat:188887:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
../inputs/grep1.dat:188957:                return false;
../inputs/grep1.dat:188987:
../inputs/grep1.dat:188988:              p1 += mcnt;	/* Get past the n-th alternative.  */
../inputs/grep1.dat:189052:            } /* if mcnt > 0 */
../inputs/grep1.dat:189084:          break;
../inputs/grep1.dat:189101:
../inputs/grep1.dat:189102:          
../inputs/grep1.dat:189113:        case stop_memory:
../inputs/grep1.dat:189139:	  assert (p1[1] == **p);
../inputs/grep1.dat:189165:          *p = p1 + 2;
../inputs/grep1.dat:189188:          return true;
../inputs/grep1.dat:189211:
../inputs/grep1.dat:189212:        
../inputs/grep1.dat:189221:        default: 
../inputs/grep1.dat:189239:          if (!common_op_match_null_string_p (&p1, end, reg_info))
../inputs/grep1.dat:189306:            return false;
../inputs/grep1.dat:189332:        }
../inputs/grep1.dat:189342:    } /* while p1 < end */
../inputs/grep1.dat:189369:
../inputs/grep1.dat:189370:  return false;
../inputs/grep1.dat:189386:} /* group_match_null_string_p */
../inputs/grep1.dat:189420:
../inputs/grep1.dat:189421:
../inputs/grep1.dat:189422:/* Similar to group_match_null_string_p, but doesn't deal with alternatives:
../inputs/grep1.dat:189499:   It expects P to be the first byte of a single alternative and END one
../inputs/grep1.dat:189572:   byte past the last. The alternative can contain groups.  */
../inputs/grep1.dat:189635:   
../inputs/grep1.dat:189639:static boolean
../inputs/grep1.dat:189654:alt_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:189697:    unsigned char *p, *end;
../inputs/grep1.dat:189725:    register_info_type *reg_info;
../inputs/grep1.dat:189759:{
../inputs/grep1.dat:189761:  int mcnt;
../inputs/grep1.dat:189773:  unsigned char *p1 = p;
../inputs/grep1.dat:189798:  
../inputs/grep1.dat:189801:  while (p1 < end)
../inputs/grep1.dat:189820:    {
../inputs/grep1.dat:189826:      /* Skip over opcodes that can match nothing, and break when we get 
../inputs/grep1.dat:189900:         to one that can't.  */
../inputs/grep1.dat:189932:      
../inputs/grep1.dat:189939:      switch ((re_opcode_t) *p1)
../inputs/grep1.dat:189972:        {
../inputs/grep1.dat:189982:	/* It's a loop.  */
../inputs/grep1.dat:190003:        case on_failure_jump:
../inputs/grep1.dat:190033:          p1++;
../inputs/grep1.dat:190049:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:190095:          p1 += mcnt;
../inputs/grep1.dat:190117:          break;
../inputs/grep1.dat:190134:          
../inputs/grep1.dat:190145:	default: 
../inputs/grep1.dat:190156:          if (!common_op_match_null_string_p (&p1, end, reg_info))
../inputs/grep1.dat:190223:            return false;
../inputs/grep1.dat:190249:        }
../inputs/grep1.dat:190259:    }  /* while p1 < end */
../inputs/grep1.dat:190287:
../inputs/grep1.dat:190288:  return true;
../inputs/grep1.dat:190303:} /* alt_match_null_string_p */
../inputs/grep1.dat:190335:
../inputs/grep1.dat:190336:
../inputs/grep1.dat:190337:/* Deals with the ops common to group_match_null_string_p and
../inputs/grep1.dat:190399:   alt_match_null_string_p.  
../inputs/grep1.dat:190429:   
../inputs/grep1.dat:190433:   Sets P to one after the op and its arguments, if any.  */
../inputs/grep1.dat:190494:
../inputs/grep1.dat:190495:static boolean
../inputs/grep1.dat:190510:common_op_match_null_string_p (p, end, reg_info)
../inputs/grep1.dat:190559:    unsigned char **p, *end;
../inputs/grep1.dat:190588:    register_info_type *reg_info;
../inputs/grep1.dat:190622:{
../inputs/grep1.dat:190624:  int mcnt;
../inputs/grep1.dat:190636:  boolean ret;
../inputs/grep1.dat:190651:  int reg_no;
../inputs/grep1.dat:190665:  unsigned char *p1 = *p;
../inputs/grep1.dat:190691:
../inputs/grep1.dat:190692:  switch ((re_opcode_t) *p1++)
../inputs/grep1.dat:190723:    {
../inputs/grep1.dat:190729:    case no_op:
../inputs/grep1.dat:190745:    case begline:
../inputs/grep1.dat:190763:    case endline:
../inputs/grep1.dat:190781:    case begbuf:
../inputs/grep1.dat:190798:    case endbuf:
../inputs/grep1.dat:190815:    case wordbeg:
../inputs/grep1.dat:190833:    case wordend:
../inputs/grep1.dat:190851:    case wordbound:
../inputs/grep1.dat:190871:    case notwordbound:
../inputs/grep1.dat:190894:#ifdef emacs
../inputs/grep1.dat:190907:    case before_dot:
../inputs/grep1.dat:190928:    case at_dot:
../inputs/grep1.dat:190945:    case after_dot:
../inputs/grep1.dat:190965:#endif
../inputs/grep1.dat:190972:      break;
../inputs/grep1.dat:190985:
../inputs/grep1.dat:190986:    case start_memory:
../inputs/grep1.dat:191009:      reg_no = *p1;
../inputs/grep1.dat:191029:      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
../inputs/grep1.dat:191080:      ret = group_match_null_string_p (&p1, end, reg_info);
../inputs/grep1.dat:191140:      
../inputs/grep1.dat:191147:      /* Have to set this here in case we're checking a group which
../inputs/grep1.dat:191215:         contains a group and a back reference to it.  */
../inputs/grep1.dat:191273:
../inputs/grep1.dat:191274:      if (REG_MATCH_NULL_STRING_P (reg_info[reg_no]) == MATCH_NULL_UNSET_VALUE)
../inputs/grep1.dat:191354:        REG_MATCH_NULL_STRING_P (reg_info[reg_no]) = ret;
../inputs/grep1.dat:191412:
../inputs/grep1.dat:191413:      if (!ret)
../inputs/grep1.dat:191429:        return false;
../inputs/grep1.dat:191451:      break;
../inputs/grep1.dat:191464:          
../inputs/grep1.dat:191475:    /* If this is an optimized succeed_n for zero times, make the jump.  */
../inputs/grep1.dat:191551:    case jump:
../inputs/grep1.dat:191566:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:191608:      if (mcnt >= 0)
../inputs/grep1.dat:191629:        p1 += mcnt;
../inputs/grep1.dat:191649:      else
../inputs/grep1.dat:191660:        return false;
../inputs/grep1.dat:191682:      break;
../inputs/grep1.dat:191695:
../inputs/grep1.dat:191696:    case succeed_n:
../inputs/grep1.dat:191716:      /* Get to the number of times to succeed.  */
../inputs/grep1.dat:191768:      p1 += 2;		
../inputs/grep1.dat:191785:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:191827:
../inputs/grep1.dat:191828:      if (mcnt == 0)
../inputs/grep1.dat:191849:        {
../inputs/grep1.dat:191859:          p1 -= 4;
../inputs/grep1.dat:191878:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
../inputs/grep1.dat:191924:          p1 += mcnt;
../inputs/grep1.dat:191946:        }
../inputs/grep1.dat:191956:      else
../inputs/grep1.dat:191967:        return false;
../inputs/grep1.dat:191989:      break;
../inputs/grep1.dat:192002:
../inputs/grep1.dat:192003:    case duplicate: 
../inputs/grep1.dat:192024:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
../inputs/grep1.dat:192076:        return false;
../inputs/grep1.dat:192098:      break;
../inputs/grep1.dat:192111:
../inputs/grep1.dat:192112:    case set_number_at:
../inputs/grep1.dat:192136:      p1 += 4;
../inputs/grep1.dat:192151:
../inputs/grep1.dat:192152:    default:
../inputs/grep1.dat:192165:      /* All other opcodes mean we cannot match the empty string.  */
../inputs/grep1.dat:192235:      return false;
../inputs/grep1.dat:192255:  }
../inputs/grep1.dat:192259:
../inputs/grep1.dat:192260:  *p = p1;
../inputs/grep1.dat:192271:  return true;
../inputs/grep1.dat:192286:} /* common_op_match_null_string_p */
../inputs/grep1.dat:192324:
../inputs/grep1.dat:192325:
../inputs/grep1.dat:192326:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
../inputs/grep1.dat:192398:   bytes; nonzero otherwise.  */
../inputs/grep1.dat:192431:   
../inputs/grep1.dat:192435:static int
../inputs/grep1.dat:192446:bcmp_translate (s1, s2, len, translate)
../inputs/grep1.dat:192486:     unsigned char *s1, *s2;
../inputs/grep1.dat:192515:     register int len;
../inputs/grep1.dat:192538:     char *translate;
../inputs/grep1.dat:192560:{
../inputs/grep1.dat:192562:  register unsigned char *p1 = s1, *p2 = s2;
../inputs/grep1.dat:192607:  while (len)
../inputs/grep1.dat:192621:    {
../inputs/grep1.dat:192627:      if (translate[*p1++] != translate[*p2++]) return 1;
../inputs/grep1.dat:192685:      len--;
../inputs/grep1.dat:192698:    }
../inputs/grep1.dat:192704:  return 0;
../inputs/grep1.dat:192716:}
../inputs/grep1.dat:192718:
../inputs/grep1.dat:192720:/* Entry points for GNU code.  */
../inputs/grep1.dat:192754:
../inputs/grep1.dat:192755:/* re_compile_pattern is the GNU regular expression compiler: it
../inputs/grep1.dat:192820:   compiles PATTERN (of length SIZE) and puts the result in BUFP.
../inputs/grep1.dat:192886:   Returns 0 if the pattern was valid, otherwise an error string.
../inputs/grep1.dat:192952:   
../inputs/grep1.dat:192956:   Assumes the `allocated' (and perhaps `buffer') and `translate' fields
../inputs/grep1.dat:193029:   are set in BUFP on entry.
../inputs/grep1.dat:193058:   
../inputs/grep1.dat:193062:   We call regex_compile to do the actual compilation.  */
../inputs/grep1.dat:193121:
../inputs/grep1.dat:193122:const char *
../inputs/grep1.dat:193135:re_compile_pattern (pattern, length, bufp)
../inputs/grep1.dat:193178:     const char *pattern;
../inputs/grep1.dat:193204:     int length;
../inputs/grep1.dat:193221:     struct re_pattern_buffer *bufp;
../inputs/grep1.dat:193258:{
../inputs/grep1.dat:193260:  reg_errcode_t ret;
../inputs/grep1.dat:193281:  
../inputs/grep1.dat:193284:  /* GNU code is written to assume at least RE_NREGS registers will be set
../inputs/grep1.dat:193359:     (and at least one extra will be -1).  */
../inputs/grep1.dat:193405:  bufp->regs_allocated = REGS_UNALLOCATED;
../inputs/grep1.dat:193448:  
../inputs/grep1.dat:193451:  /* And GNU code determines whether or not to get register information
../inputs/grep1.dat:193523:     by passing null for the REGS argument to re_match, etc., not by
../inputs/grep1.dat:193592:     setting no_sub.  */
../inputs/grep1.dat:193617:  bufp->no_sub = 0;
../inputs/grep1.dat:193637:  
../inputs/grep1.dat:193640:  /* Match anchors at newline.  */
../inputs/grep1.dat:193675:  bufp->newline_anchor = 1;
../inputs/grep1.dat:193703:  
../inputs/grep1.dat:193706:  ret = regex_compile (pattern, length, re_syntax_options, bufp);
../inputs/grep1.dat:193772:
../inputs/grep1.dat:193773:  return re_error_msg[(int) ret];
../inputs/grep1.dat:193807:}     
../inputs/grep1.dat:193814:
../inputs/grep1.dat:193816:/* Entry points compatible with 4.2 BSD regex library.  We don't define
../inputs/grep1.dat:193888:   them if this is an Emacs or POSIX compilation.  */
../inputs/grep1.dat:193942:
../inputs/grep1.dat:193943:#if !defined (emacs) && !defined (_POSIX_SOURCE)
../inputs/grep1.dat:193992:
../inputs/grep1.dat:193993:/* BSD has one and only one pattern buffer.  */
../inputs/grep1.dat:194041:static struct re_pattern_buffer re_comp_buf;
../inputs/grep1.dat:194086:
../inputs/grep1.dat:194087:char *
../inputs/grep1.dat:194094:re_comp (s)
../inputs/grep1.dat:194106:    const char *s;
../inputs/grep1.dat:194125:{
../inputs/grep1.dat:194127:  reg_errcode_t ret;
../inputs/grep1.dat:194148:  
../inputs/grep1.dat:194151:  if (!s)
../inputs/grep1.dat:194161:    {
../inputs/grep1.dat:194167:      if (!re_comp_buf.buffer)
../inputs/grep1.dat:194198:	return "No previous regular expression";
../inputs/grep1.dat:194240:      return 0;
../inputs/grep1.dat:194256:    }
../inputs/grep1.dat:194262:
../inputs/grep1.dat:194263:  if (!re_comp_buf.buffer)
../inputs/grep1.dat:194290:    {
../inputs/grep1.dat:194296:      re_comp_buf.buffer = (unsigned char *) malloc (200);
../inputs/grep1.dat:194355:      if (re_comp_buf.buffer == NULL)
../inputs/grep1.dat:194393:        return "Memory exhausted";
../inputs/grep1.dat:194428:      re_comp_buf.allocated = 200;
../inputs/grep1.dat:194463:
../inputs/grep1.dat:194464:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
../inputs/grep1.dat:194526:      if (re_comp_buf.fastmap == NULL)
../inputs/grep1.dat:194565:	return "Memory exhausted";
../inputs/grep1.dat:194593:    }
../inputs/grep1.dat:194599:
../inputs/grep1.dat:194600:  /* Since `re_exec' always passes NULL for the `regs' argument, we
../inputs/grep1.dat:194668:     don't need to initialize the pattern buffer fields which affect it.  */
../inputs/grep1.dat:194745:
../inputs/grep1.dat:194746:  /* Match anchors at newlines.  */
../inputs/grep1.dat:194782:  re_comp_buf.newline_anchor = 1;
../inputs/grep1.dat:194816:
../inputs/grep1.dat:194817:  ret = regex_compile (s, strlen (s), re_syntax_options, &re_comp_buf);
../inputs/grep1.dat:194889:  
../inputs/grep1.dat:194892:  /* Yes, we're discarding `const' here.  */
../inputs/grep1.dat:194937:  return (char *) re_error_msg[(int) ret];
../inputs/grep1.dat:194980:}
../inputs/grep1.dat:194982:
../inputs/grep1.dat:194983:
../inputs/grep1.dat:194984:int
../inputs/grep1.dat:194988:re_exec (s)
../inputs/grep1.dat:195000:    const char *s;
../inputs/grep1.dat:195019:{
../inputs/grep1.dat:195021:  const int len = strlen (s);
../inputs/grep1.dat:195051:  return
../inputs/grep1.dat:195060:    0 <= re_search (&re_comp_buf, s, len, 0, len, (struct re_registers *) 0);
../inputs/grep1.dat:195138:}
../inputs/grep1.dat:195140:#endif /* not emacs and not _POSIX_SOURCE */
../inputs/grep1.dat:195185:
../inputs/grep1.dat:195187:/* POSIX.2 functions.  Don't define these for Emacs.  */
../inputs/grep1.dat:195244:
../inputs/grep1.dat:195245:#ifndef emacs
../inputs/grep1.dat:195259:
../inputs/grep1.dat:195260:/* regcomp takes a regular expression as a string and compiles it.
../inputs/grep1.dat:195327:
../inputs/grep1.dat:195328:   PREG is a regex_t *.  We do not expect any fields to be initialized,
../inputs/grep1.dat:195400:   since POSIX says we shouldn't.  Thus, we set
../inputs/grep1.dat:195448:
../inputs/grep1.dat:195449:     `buffer' to the compiled pattern;
../inputs/grep1.dat:195488:     `used' to the length of the compiled pattern;
../inputs/grep1.dat:195539:     `syntax' to RE_SYNTAX_POSIX_EXTENDED if the
../inputs/grep1.dat:195588:       REG_EXTENDED bit in CFLAGS is set; otherwise, to
../inputs/grep1.dat:195644:       RE_SYNTAX_POSIX_BASIC;
../inputs/grep1.dat:195674:     `newline_anchor' to REG_NEWLINE being set in CFLAGS;
../inputs/grep1.dat:195732:     `fastmap' and `fastmap_accurate' to zero;
../inputs/grep1.dat:195779:     `re_nsub' to the number of subexpressions in PATTERN.
../inputs/grep1.dat:195838:
../inputs/grep1.dat:195839:   PATTERN is the address of the pattern string.
../inputs/grep1.dat:195888:
../inputs/grep1.dat:195889:   CFLAGS is a series of bits which affect compilation.
../inputs/grep1.dat:195945:
../inputs/grep1.dat:195946:     If REG_EXTENDED is set, we use POSIX extended syntax; otherwise, we
../inputs/grep1.dat:196019:     use POSIX basic syntax.
../inputs/grep1.dat:196048:
../inputs/grep1.dat:196049:     If REG_NEWLINE is set, then . and [^...] don't match newline.
../inputs/grep1.dat:196116:     Also, regexec will try a match beginning after every newline.
../inputs/grep1.dat:196183:
../inputs/grep1.dat:196184:     If REG_ICASE is set, then we considers upper- and lowercase
../inputs/grep1.dat:196249:     versions of letters to be equivalent when matching.
../inputs/grep1.dat:196306:
../inputs/grep1.dat:196307:     If REG_NOSUB is set, then when PREG is passed to regexec, that
../inputs/grep1.dat:196375:     routine will report only success or failure, and nothing about the
../inputs/grep1.dat:196447:     registers.
../inputs/grep1.dat:196463:
../inputs/grep1.dat:196464:   It returns 0 if it succeeds, nonzero if it doesn't.  (See regex.h for
../inputs/grep1.dat:196537:   the return codes and their meanings.)  */
../inputs/grep1.dat:196582:
../inputs/grep1.dat:196583:int
../inputs/grep1.dat:196587:regcomp (preg, pattern, cflags)
../inputs/grep1.dat:196619:    regex_t *preg;
../inputs/grep1.dat:196638:    const char *pattern; 
../inputs/grep1.dat:196664:    int cflags;
../inputs/grep1.dat:196680:{
../inputs/grep1.dat:196682:  reg_errcode_t ret;
../inputs/grep1.dat:196703:  unsigned syntax
../inputs/grep1.dat:196721:    = (cflags & REG_EXTENDED) ?
../inputs/grep1.dat:196753:      RE_SYNTAX_POSIX_EXTENDED : RE_SYNTAX_POSIX_BASIC;
../inputs/grep1.dat:196809:
../inputs/grep1.dat:196810:  /* regex_compile will allocate the space for the compiled pattern.  */
../inputs/grep1.dat:196883:  preg->buffer = 0;
../inputs/grep1.dat:196903:  preg->allocated = 0;
../inputs/grep1.dat:196926:  preg->used = 0;
../inputs/grep1.dat:196944:  
../inputs/grep1.dat:196947:  /* Don't bother to use a fastmap when searching.  This simplifies the
../inputs/grep1.dat:197019:     REG_NEWLINE case: if we used a fastmap, we'd have to put all the
../inputs/grep1.dat:197089:     characters after newlines into the fastmap.  This way, we just try
../inputs/grep1.dat:197161:     every character.  */
../inputs/grep1.dat:197187:  preg->fastmap = 0;
../inputs/grep1.dat:197208:  
../inputs/grep1.dat:197211:  if (cflags & REG_ICASE)
../inputs/grep1.dat:197237:    {
../inputs/grep1.dat:197243:      unsigned i;
../inputs/grep1.dat:197261:      
../inputs/grep1.dat:197268:      preg->translate = (char *) malloc (CHAR_SET_SIZE);
../inputs/grep1.dat:197325:      if (preg->translate == NULL)
../inputs/grep1.dat:197360:        return (int) REG_ESPACE;
../inputs/grep1.dat:197393:
../inputs/grep1.dat:197394:      /* Map uppercase characters to corresponding lowercase ones.  */
../inputs/grep1.dat:197465:      for (i = 0; i < CHAR_SET_SIZE; i++)
../inputs/grep1.dat:197507:        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
../inputs/grep1.dat:197567:    }
../inputs/grep1.dat:197573:  else
../inputs/grep1.dat:197580:    preg->translate = NULL;
../inputs/grep1.dat:197608:
../inputs/grep1.dat:197609:  /* If REG_NEWLINE is set, newlines are treated differently.  */
../inputs/grep1.dat:197675:  if (cflags & REG_NEWLINE)
../inputs/grep1.dat:197703:    { /* REG_NEWLINE implies neither . nor [^...] match newline.  */
../inputs/grep1.dat:197772:      syntax &= ~RE_DOT_NEWLINE;
../inputs/grep1.dat:197805:      syntax |= RE_HAT_LISTS_NOT_NEWLINE;
../inputs/grep1.dat:197847:      /* It also changes the matching behavior.  */
../inputs/grep1.dat:197899:      preg->newline_anchor = 1;
../inputs/grep1.dat:197931:    }
../inputs/grep1.dat:197937:  else
../inputs/grep1.dat:197944:    preg->newline_anchor = 0;
../inputs/grep1.dat:197974:
../inputs/grep1.dat:197975:  preg->no_sub = !!(cflags & REG_NOSUB);
../inputs/grep1.dat:198016:
../inputs/grep1.dat:198017:  /* POSIX says a null character in the pattern terminates it, so we 
../inputs/grep1.dat:198087:     can use strlen here in compiling the pattern.  */
../inputs/grep1.dat:198142:  ret = regex_compile (pattern, strlen (pattern), syntax, preg);
../inputs/grep1.dat:198207:  
../inputs/grep1.dat:198210:  /* POSIX doesn't distinguish between an unmatched open-group and an
../inputs/grep1.dat:198280:     unmatched close-group: both are REG_EPAREN.  */
../inputs/grep1.dat:198333:  if (ret == REG_ERPAREN) ret = REG_EPAREN;
../inputs/grep1.dat:198377:  
../inputs/grep1.dat:198380:  return (int) ret;
../inputs/grep1.dat:198400:}
../inputs/grep1.dat:198402:
../inputs/grep1.dat:198403:
../inputs/grep1.dat:198404:/* regexec searches for a given pattern, specified by PREG, in the
../inputs/grep1.dat:198471:   string STRING.
../inputs/grep1.dat:198489:   
../inputs/grep1.dat:198493:   If NMATCH is zero or REG_NOSUB was set in the cflags argument to
../inputs/grep1.dat:198561:   `regcomp', we ignore PMATCH.  Otherwise, we assume PMATCH has at
../inputs/grep1.dat:198629:   least NMATCH elements, and we set them to the offsets of the
../inputs/grep1.dat:198693:   corresponding matched substrings.
../inputs/grep1.dat:198730:   
../inputs/grep1.dat:198734:   EFLAGS specifies `execution flags' which affect matching: if
../inputs/grep1.dat:198798:   REG_NOTBOL is set, then ^ does not match at the beginning of the
../inputs/grep1.dat:198866:   string; if REG_NOTEOL is set, then $ does not match at the end.
../inputs/grep1.dat:198933:   
../inputs/grep1.dat:198937:   We return 0 if we find a match and REG_NOMATCH if not.  */
../inputs/grep1.dat:198999:
../inputs/grep1.dat:199000:int
../inputs/grep1.dat:199004:regexec (preg, string, nmatch, pmatch, eflags)
../inputs/grep1.dat:199051:    const regex_t *preg;
../inputs/grep1.dat:199076:    const char *string; 
../inputs/grep1.dat:199101:    size_t nmatch; 
../inputs/grep1.dat:199121:    regmatch_t pmatch[]; 
../inputs/grep1.dat:199147:    int eflags;
../inputs/grep1.dat:199163:{
../inputs/grep1.dat:199165:  int ret;
../inputs/grep1.dat:199176:  struct re_registers regs;
../inputs/grep1.dat:199204:  regex_t private_preg;
../inputs/grep1.dat:199228:  int len = strlen (string);
../inputs/grep1.dat:199257:  boolean want_reg_info = !preg->no_sub && nmatch > 0;
../inputs/grep1.dat:199312:
../inputs/grep1.dat:199313:  private_preg = *preg;
../inputs/grep1.dat:199337:  
../inputs/grep1.dat:199340:  private_preg.not_bol = !!(eflags & REG_NOTBOL);
../inputs/grep1.dat:199390:  private_preg.not_eol = !!(eflags & REG_NOTEOL);
../inputs/grep1.dat:199440:  
../inputs/grep1.dat:199443:  /* The user has told us exactly how many registers to return
../inputs/grep1.dat:199506:     information about, via `nmatch'.  We have to pass that on to the
../inputs/grep1.dat:199576:     matching routines.  */
../inputs/grep1.dat:199604:  private_preg.regs_allocated = REGS_FIXED;
../inputs/grep1.dat:199648:  
../inputs/grep1.dat:199651:  if (want_reg_info)
../inputs/grep1.dat:199672:    {
../inputs/grep1.dat:199678:      regs.num_regs = nmatch;
../inputs/grep1.dat:199708:      regs.start = TALLOC (nmatch, regoff_t);
../inputs/grep1.dat:199754:      regs.end = TALLOC (nmatch, regoff_t);
../inputs/grep1.dat:199798:      if (regs.start == NULL || regs.end == NULL)
../inputs/grep1.dat:199848:        return (int) REG_NOMATCH;
../inputs/grep1.dat:199882:    }
../inputs/grep1.dat:199888:
../inputs/grep1.dat:199889:  /* Perform the searching operation.  */
../inputs/grep1.dat:199931:  ret = re_search (&private_preg, string, len,
../inputs/grep1.dat:199978:                   /* start: */ 0, /* range: */ len,
../inputs/grep1.dat:200031:                   want_reg_info ? &regs : (struct re_registers *) 0);
../inputs/grep1.dat:200102:  
../inputs/grep1.dat:200105:  /* Copy the register information to the POSIX structure.  */
../inputs/grep1.dat:200168:  if (want_reg_info)
../inputs/grep1.dat:200189:    {
../inputs/grep1.dat:200195:      if (ret >= 0)
../inputs/grep1.dat:200215:        {
../inputs/grep1.dat:200225:          unsigned r;
../inputs/grep1.dat:200247:
../inputs/grep1.dat:200248:          for (r = 0; r < nmatch; r++)
../inputs/grep1.dat:200287:            {
../inputs/grep1.dat:200301:              pmatch[r].rm_so = regs.start[r];
../inputs/grep1.dat:200348:              pmatch[r].rm_eo = regs.end[r];
../inputs/grep1.dat:200393:            }
../inputs/grep1.dat:200407:        }
../inputs/grep1.dat:200417:
../inputs/grep1.dat:200418:      /* If we needed the temporary register info, free the space now.  */
../inputs/grep1.dat:200493:      free (regs.start);
../inputs/grep1.dat:200518:      free (regs.end);
../inputs/grep1.dat:200541:    }
../inputs/grep1.dat:200547:
../inputs/grep1.dat:200548:  /* We want zero return to mean success, unlike `re_search'.  */
../inputs/grep1.dat:200614:  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
../inputs/grep1.dat:200673:}
../inputs/grep1.dat:200675:
../inputs/grep1.dat:200676:
../inputs/grep1.dat:200677:/* Returns a message corresponding to an error code, ERRCODE, returned
../inputs/grep1.dat:200748:   from either regcomp or regexec.   We don't use PREG here.  */
../inputs/grep1.dat:200813:
../inputs/grep1.dat:200814:size_t
../inputs/grep1.dat:200821:regerror (errcode, preg, errbuf, errbuf_size)
../inputs/grep1.dat:200867:    int errcode;
../inputs/grep1.dat:200884:    const regex_t *preg;
../inputs/grep1.dat:200909:    char *errbuf;
../inputs/grep1.dat:200927:    size_t errbuf_size;
../inputs/grep1.dat:200951:{
../inputs/grep1.dat:200953:  const char *msg;
../inputs/grep1.dat:200972:  size_t msg_size;
../inputs/grep1.dat:200991:
../inputs/grep1.dat:200992:  if (errcode < 0
../inputs/grep1.dat:201010:      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
../inputs/grep1.dat:201082:    /* Only error codes returned by the rest of the code should be passed 
../inputs/grep1.dat:201157:       to this routine.  If we are given anything else, or if other regex
../inputs/grep1.dat:201231:       code generates an invalid error code, then the program has a bug.
../inputs/grep1.dat:201304:       Dump core so we can fix it.  */
../inputs/grep1.dat:201343:    abort ();
../inputs/grep1.dat:201357:
../inputs/grep1.dat:201358:  msg = re_error_msg[errcode];
../inputs/grep1.dat:201389:
../inputs/grep1.dat:201390:  /* POSIX doesn't require that we do anything in this case, but why
../inputs/grep1.dat:201459:     not be nice.  */
../inputs/grep1.dat:201481:  if (! msg)
../inputs/grep1.dat:201494:    msg = "Success";
../inputs/grep1.dat:201515:
../inputs/grep1.dat:201573:  
../inputs/grep1.dat:201576:  if (errbuf_size != 0)
../inputs/grep1.dat:201600:    {
../inputs/grep1.dat:201606:      if (msg_size > errbuf_size)
../inputs/grep1.dat:201640:        {
../inputs/grep1.dat:201650:          strncpy (errbuf, msg, errbuf_size - 1);
../inputs/grep1.dat:201700:          errbuf[errbuf_size - 1] = 0;
../inputs/grep1.dat:201739:        }
../inputs/grep1.dat:201749:      else
../inputs/grep1.dat:201760:        strcpy (errbuf, msg);
../inputs/grep1.dat:201790:    }
../inputs/grep1.dat:201796:
../inputs/grep1.dat:201797:  return msg_size;
../inputs/grep1.dat:201816:}
../inputs/grep1.dat:201818:
../inputs/grep1.dat:201819:
../inputs/grep1.dat:201820:/* Free dynamically allocated space used by PREG.  */
../inputs/grep1.dat:201874:
../inputs/grep1.dat:201875:void
../inputs/grep1.dat:201880:regfree (preg)
../inputs/grep1.dat:201895:    regex_t *preg;
../inputs/grep1.dat:201914:{
../inputs/grep1.dat:201916:  if (preg->buffer != NULL)
../inputs/grep1.dat:201944:    free (preg->buffer);
../inputs/grep1.dat:201969:  preg->buffer = NULL;
../inputs/grep1.dat:201992:  
../inputs/grep1.dat:201995:  preg->allocated = 0;
../inputs/grep1.dat:202018:  preg->used = 0;
../inputs/grep1.dat:202036:
../inputs/grep1.dat:202037:  if (preg->fastmap != NULL)
../inputs/grep1.dat:202066:    free (preg->fastmap);
../inputs/grep1.dat:202092:  preg->fastmap = NULL;
../inputs/grep1.dat:202116:  preg->fastmap_accurate = 0;
../inputs/grep1.dat:202146:
../inputs/grep1.dat:202147:  if (preg->translate != NULL)
../inputs/grep1.dat:202178:    free (preg->translate);
../inputs/grep1.dat:202206:  preg->translate = NULL;
../inputs/grep1.dat:202232:}
../inputs/grep1.dat:202234:
../inputs/grep1.dat:202235:#endif /* not emacs  */
../inputs/grep1.dat:202259:
../inputs/grep1.dat:202261:/*
../inputs/grep1.dat:202264:Local variables:
../inputs/grep1.dat:202281:make-backup-files: t
../inputs/grep1.dat:202302:version-control: t
../inputs/grep1.dat:202321:trim-versions-without-asking: nil
../inputs/grep1.dat:202355:End:
../inputs/grep1.dat:202360:*/
../inputs/grep1.dat:202363:/* dfa.c - deterministic extended regexp routines for GNU
../inputs/grep1.dat:202421:   Copyright (C) 1988 Free Software Foundation, Inc.
../inputs/grep1.dat:202474:
../inputs/grep1.dat:202475:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:202547:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:202619:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:202690:   any later version.
../inputs/grep1.dat:202712:
../inputs/grep1.dat:202713:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:202780:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:202846:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:202911:   GNU General Public License for more details.
../inputs/grep1.dat:202959:
../inputs/grep1.dat:202960:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:203029:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:203092:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:203157:
../inputs/grep1.dat:203158:/* Written June, 1988 by Mike Haertel
../inputs/grep1.dat:203196:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
../inputs/grep1.dat:203268:
../inputs/grep1.dat:203342:
../inputs/grep1.dat:203343:#ifdef STDC_HEADERS
../inputs/grep1.dat:203363:#if flag_stdlib==0
../inputs/grep1.dat:203402:#define flag_stdlib 1
../inputs/grep1.dat:203424:#endif
../inputs/grep1.dat:203431:#else
../inputs/grep1.dat:203437:#if flag_systypes==0 
../inputs/grep1.dat:203482:#define flag_systypes 1
../inputs/grep1.dat:203506:#endif
../inputs/grep1.dat:203513:extern char *calloc(), *malloc(), *realloc();
../inputs/grep1.dat:203559:extern void free();
../inputs/grep1.dat:203579:#endif
../inputs/grep1.dat:203586:
../inputs/grep1.dat:203587:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
../inputs/grep1.dat:203639:#if flag_string==0
../inputs/grep1.dat:203678:#define flag_string 1
../inputs/grep1.dat:203700:#endif
../inputs/grep1.dat:203707:#undef index
../inputs/grep1.dat:203720:#define index strchr
../inputs/grep1.dat:203741:#else
../inputs/grep1.dat:203747:#if flag_strings==0
../inputs/grep1.dat:203788:#define flag_strings 1
../inputs/grep1.dat:203811:#endif
../inputs/grep1.dat:203818:#endif
../inputs/grep1.dat:203825:
../inputs/grep1.dat:203826:#ifndef isgraph
../inputs/grep1.dat:203842:#define isgraph(C) (isprint(C) && !isspace(C))
../inputs/grep1.dat:203889:#endif
../inputs/grep1.dat:203896:
../inputs/grep1.dat:203897:#undef ISALPHA
../inputs/grep1.dat:203912:#undef ISUPPER
../inputs/grep1.dat:203927:#undef ISLOWER
../inputs/grep1.dat:203942:#undef ISDIGIT
../inputs/grep1.dat:203957:#undef ISXDIGIT
../inputs/grep1.dat:203973:#undef ISSPACE
../inputs/grep1.dat:203988:#undef ISPUNCT
../inputs/grep1.dat:204003:#undef ISALNUM
../inputs/grep1.dat:204018:#undef ISPRINT
../inputs/grep1.dat:204033:#undef ISGRAPH
../inputs/grep1.dat:204048:#undef ISCNTRL
../inputs/grep1.dat:204063:
../inputs/grep1.dat:204064:
../inputs/grep1.dat:204065:#ifdef isascii
../inputs/grep1.dat:204080:#define ISALPHA(C) (isascii(C) && isalpha(C))
../inputs/grep1.dat:204126:#define ISUPPER(C) (isascii(C) && isupper(C))
../inputs/grep1.dat:204172:#define ISLOWER(C) (isascii(C) && islower(C))
../inputs/grep1.dat:204218:#define ISDIGIT(C) (isascii(C) && isdigit(C))
../inputs/grep1.dat:204264:#define ISXDIGIT(C) (isascii(C) && isxdigit(C))
../inputs/grep1.dat:204312:#define ISSPACE(C) (isascii(C) && isspace(C))
../inputs/grep1.dat:204358:#define ISPUNCT(C) (isascii(C) && ispunct(C))
../inputs/grep1.dat:204404:#define ISALNUM(C) (isascii(C) && isalnum(C))
../inputs/grep1.dat:204450:#define ISPRINT(C) (isascii(C) && isprint(C))
../inputs/grep1.dat:204496:#define ISGRAPH(C) (isascii(C) && isgraph(C))
../inputs/grep1.dat:204542:#define ISCNTRL(C) (isascii(C) && iscntrl(C))
../inputs/grep1.dat:204588:#else
../inputs/grep1.dat:204594:#define ISALPHA(C) isalpha(C)
../inputs/grep1.dat:204624:#define ISUPPER(C) isupper(C)
../inputs/grep1.dat:204654:#define ISLOWER(C) islower(C)
../inputs/grep1.dat:204684:#define ISDIGIT(C) isdigit(C)
../inputs/grep1.dat:204714:#define ISXDIGIT(C) isxdigit(C)
../inputs/grep1.dat:204746:#define ISSPACE(C) isspace(C)
../inputs/grep1.dat:204776:#define ISPUNCT(C) ispunct(C)
../inputs/grep1.dat:204806:#define ISALNUM(C) isalnum(C)
../inputs/grep1.dat:204836:#define ISPRINT(C) isprint(C)
../inputs/grep1.dat:204866:#define ISGRAPH(C) isgraph(C)
../inputs/grep1.dat:204896:#define ISCNTRL(C) iscntrl(C)
../inputs/grep1.dat:204926:#endif
../inputs/grep1.dat:204933:
../inputs/grep1.dat:204974:
../inputs/grep1.dat:204975:#if __STDC__
../inputs/grep1.dat:204988:typedef void *ptr_t;
../inputs/grep1.dat:205009:#else
../inputs/grep1.dat:205015:typedef char *ptr_t;
../inputs/grep1.dat:205036:#endif
../inputs/grep1.dat:205043:
../inputs/grep1.dat:205044:static void	dfamust();
../inputs/grep1.dat:205067:
../inputs/grep1.dat:205068:static ptr_t
../inputs/grep1.dat:205081:xcalloc(n, s)
../inputs/grep1.dat:205095:     int n;
../inputs/grep1.dat:205107:     size_t s;
../inputs/grep1.dat:205122:{
../inputs/grep1.dat:205124:  ptr_t r = calloc(n, s);
../inputs/grep1.dat:205150:
../inputs/grep1.dat:205151:  if (!r)
../inputs/grep1.dat:205161:    dfaerror("Memory exhausted");
../inputs/grep1.dat:205195:  return r;
../inputs/grep1.dat:205207:}
../inputs/grep1.dat:205209:
../inputs/grep1.dat:205210:static ptr_t
../inputs/grep1.dat:205223:xmalloc_1(n)
../inputs/grep1.dat:205236:     size_t n;
../inputs/grep1.dat:205251:{
../inputs/grep1.dat:205253:  ptr_t r = malloc(n);
../inputs/grep1.dat:205276:
../inputs/grep1.dat:205277:  assert(n != 0);
../inputs/grep1.dat:205295:  if (!r)
../inputs/grep1.dat:205305:    dfaerror("Memory exhausted");
../inputs/grep1.dat:205339:  return r;
../inputs/grep1.dat:205351:}
../inputs/grep1.dat:205353:
../inputs/grep1.dat:205354:static ptr_t
../inputs/grep1.dat:205367:xrealloc_1(p, n)
../inputs/grep1.dat:205384:     ptr_t p;
../inputs/grep1.dat:205398:     size_t n;
../inputs/grep1.dat:205413:{
../inputs/grep1.dat:205415:  ptr_t r = realloc(p, n);
../inputs/grep1.dat:205442:
../inputs/grep1.dat:205443:  assert(n != 0);
../inputs/grep1.dat:205461:  if (!r)
../inputs/grep1.dat:205471:    dfaerror("Memory exhausted");
../inputs/grep1.dat:205505:  return r;
../inputs/grep1.dat:205517:}
../inputs/grep1.dat:205519:
../inputs/grep1.dat:205520:#define CALLOC(p, t, n) ((p) = (t *) xcalloc((n), sizeof (t)))
../inputs/grep1.dat:205583:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
../inputs/grep1.dat:205649:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
../inputs/grep1.dat:205730:
../inputs/grep1.dat:205731:/* Reallocate an array of type t if nalloc is too small for index. */
../inputs/grep1.dat:205801:#define REALLOC_IF_NECESSARY(p, t, nalloc, index) \
../inputs/grep1.dat:205853:  if ((index) >= (nalloc))			  \
../inputs/grep1.dat:205886:    {						  \
../inputs/grep1.dat:205901:      while ((index) >= (nalloc))		  \
../inputs/grep1.dat:205940:	(nalloc) *= 2;				  \
../inputs/grep1.dat:205963:      REALLOC(p, t, nalloc);			  \
../inputs/grep1.dat:205998:    }
../inputs/grep1.dat:206004:
../inputs/grep1.dat:206005:#ifdef DEBUG
../inputs/grep1.dat:206018:
../inputs/grep1.dat:206019:static void
../inputs/grep1.dat:206031:prtok(t)
../inputs/grep1.dat:206040:     token t;
../inputs/grep1.dat:206054:{
../inputs/grep1.dat:206056:  char *s;
../inputs/grep1.dat:206067:
../inputs/grep1.dat:206068:  if (t < 0)
../inputs/grep1.dat:206081:    fprintf(stderr, "END");
../inputs/grep1.dat:206109:  else if (t < NOTCHAR)
../inputs/grep1.dat:206133:    fprintf(stderr, "%c", t);
../inputs/grep1.dat:206163:  else
../inputs/grep1.dat:206170:    {
../inputs/grep1.dat:206176:      switch (t)
../inputs/grep1.dat:206193:	{
../inputs/grep1.dat:206196:	case EMPTY: s = "EMPTY"; break;
../inputs/grep1.dat:206229:	case BACKREF: s = "BACKREF"; break;
../inputs/grep1.dat:206266:	case BEGLINE: s = "BEGLINE"; break;
../inputs/grep1.dat:206303:	case ENDLINE: s = "ENDLINE"; break;
../inputs/grep1.dat:206340:	case BEGWORD: s = "BEGWORD"; break;
../inputs/grep1.dat:206377:	case ENDWORD: s = "ENDWORD"; break;
../inputs/grep1.dat:206414:	case LIMWORD: s = "LIMWORD"; break;
../inputs/grep1.dat:206451:	case NOTLIMWORD: s = "NOTLIMWORD"; break;
../inputs/grep1.dat:206494:	case QMARK: s = "QMARK"; break;
../inputs/grep1.dat:206527:	case STAR: s = "STAR"; break;
../inputs/grep1.dat:206558:	case PLUS: s = "PLUS"; break;
../inputs/grep1.dat:206589:	case CAT: s = "CAT"; break;
../inputs/grep1.dat:206618:	case OR: s = "OR"; break;
../inputs/grep1.dat:206645:	case ORTOP: s = "ORTOP"; break;
../inputs/grep1.dat:206678:	case LPAREN: s = "LPAREN"; break;
../inputs/grep1.dat:206713:	case RPAREN: s = "RPAREN"; break;
../inputs/grep1.dat:206748:	default: s = "CSET"; break;
../inputs/grep1.dat:206777:	}
../inputs/grep1.dat:206780:      fprintf(stderr, "%s", s);
../inputs/grep1.dat:206812:    }
../inputs/grep1.dat:206818:}
../inputs/grep1.dat:206820:#endif /* DEBUG */
../inputs/grep1.dat:206839:
../inputs/grep1.dat:206840:/* Stuff pertaining to charclasses. */
../inputs/grep1.dat:206879:
../inputs/grep1.dat:206880:static int
../inputs/grep1.dat:206891:tstbit(b, c)
../inputs/grep1.dat:206904:     int b;
../inputs/grep1.dat:206916:     charclass c;
../inputs/grep1.dat:206934:{
../inputs/grep1.dat:206936:  return c[b / INTBITS] & 1 << b % INTBITS;
../inputs/grep1.dat:206980:}
../inputs/grep1.dat:206982:
../inputs/grep1.dat:206983:static void
../inputs/grep1.dat:206995:setbit(b, c)
../inputs/grep1.dat:207008:     int b;
../inputs/grep1.dat:207020:     charclass c;
../inputs/grep1.dat:207038:{
../inputs/grep1.dat:207040:  c[b / INTBITS] |= 1 << b % INTBITS;
../inputs/grep1.dat:207078:}
../inputs/grep1.dat:207080:
../inputs/grep1.dat:207081:static void
../inputs/grep1.dat:207093:clrbit(b, c)
../inputs/grep1.dat:207106:     int b;
../inputs/grep1.dat:207118:     charclass c;
../inputs/grep1.dat:207136:{
../inputs/grep1.dat:207138:  c[b / INTBITS] &= ~(1 << b % INTBITS);
../inputs/grep1.dat:207179:}
../inputs/grep1.dat:207181:
../inputs/grep1.dat:207182:static void
../inputs/grep1.dat:207194:copyset(src, dst)
../inputs/grep1.dat:207212:     charclass src;
../inputs/grep1.dat:207232:     charclass dst;
../inputs/grep1.dat:207252:{
../inputs/grep1.dat:207254:  int i;
../inputs/grep1.dat:207263:
../inputs/grep1.dat:207264:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:207303:    dst[i] = src[i];
../inputs/grep1.dat:207324:}
../inputs/grep1.dat:207326:
../inputs/grep1.dat:207327:static void
../inputs/grep1.dat:207339:zeroset(s)
../inputs/grep1.dat:207350:     charclass s;
../inputs/grep1.dat:207368:{
../inputs/grep1.dat:207370:  int i;
../inputs/grep1.dat:207379:
../inputs/grep1.dat:207380:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:207419:    s[i] = 0;
../inputs/grep1.dat:207433:}
../inputs/grep1.dat:207435:
../inputs/grep1.dat:207436:static void
../inputs/grep1.dat:207448:notset(s)
../inputs/grep1.dat:207458:     charclass s;
../inputs/grep1.dat:207476:{
../inputs/grep1.dat:207478:  int i;
../inputs/grep1.dat:207487:
../inputs/grep1.dat:207488:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:207527:    s[i] = ~s[i];
../inputs/grep1.dat:207545:}
../inputs/grep1.dat:207547:
../inputs/grep1.dat:207548:static int
../inputs/grep1.dat:207559:equal(s1, s2)
../inputs/grep1.dat:207573:     charclass s1;
../inputs/grep1.dat:207592:     charclass s2;
../inputs/grep1.dat:207611:{
../inputs/grep1.dat:207613:  int i;
../inputs/grep1.dat:207622:
../inputs/grep1.dat:207623:  for (i = 0; i < CHARCLASS_INTS; ++i)
../inputs/grep1.dat:207662:    if (s1[i] != s2[i])
../inputs/grep1.dat:207686:      return 0;
../inputs/grep1.dat:207702:  return 1;
../inputs/grep1.dat:207714:}
../inputs/grep1.dat:207716:
../inputs/grep1.dat:207717:/* A pointer to the current dfa is kept here during parsing. */
../inputs/grep1.dat:207781:static struct dfa *dfa;
../inputs/grep1.dat:207805:
../inputs/grep1.dat:207806:/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
../inputs/grep1.dat:207892:static int
../inputs/grep1.dat:207903:charclass_index(s)
../inputs/grep1.dat:207922:     charclass s;
../inputs/grep1.dat:207940:{
../inputs/grep1.dat:207942:  int i;
../inputs/grep1.dat:207951:
../inputs/grep1.dat:207952:  for (i = 0; i < dfa->cindex; ++i)
../inputs/grep1.dat:207988:    if (equal(s, dfa->charclasses[i]))
../inputs/grep1.dat:208027:      return i;
../inputs/grep1.dat:208043:  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
../inputs/grep1.dat:208122:  ++dfa->cindex;
../inputs/grep1.dat:208139:  copyset(s, dfa->charclasses[i]);
../inputs/grep1.dat:208174:  return i;
../inputs/grep1.dat:208186:}
../inputs/grep1.dat:208188:
../inputs/grep1.dat:208189:/* Syntax bits controlling the behavior of the lexical analyzer. */
../inputs/grep1.dat:208257:static int syntax_bits, syntax_bits_set;
../inputs/grep1.dat:208298:
../inputs/grep1.dat:208299:/* Flag for case-folding letters into sets. */
../inputs/grep1.dat:208346:static int case_fold;
../inputs/grep1.dat:208368:
../inputs/grep1.dat:208369:/* Entry point to set syntax options. */
../inputs/grep1.dat:208410:void
../inputs/grep1.dat:208415:dfasyntax(bits, fold)
../inputs/grep1.dat:208437:     int bits;
../inputs/grep1.dat:208452:     int fold;
../inputs/grep1.dat:208467:{
../inputs/grep1.dat:208469:  syntax_bits_set = 1;
../inputs/grep1.dat:208492:  syntax_bits = bits;
../inputs/grep1.dat:208514:  case_fold = fold;
../inputs/grep1.dat:208534:}
../inputs/grep1.dat:208536:
../inputs/grep1.dat:208537:/* Lexical analyzer.  All the dross that deals with the obnoxious
../inputs/grep1.dat:208603:   GNU Regex syntax bits is located here.  The poor, suffering
../inputs/grep1.dat:208666:   reader is referred to the GNU Regex documentation for the
../inputs/grep1.dat:208727:   meaning of the @#%!@#%^!@ syntax bits. */
../inputs/grep1.dat:208772:
../inputs/grep1.dat:208773:static char *lexstart;		/* Pointer to beginning of input string. */
../inputs/grep1.dat:208841:static char *lexptr;		/* Pointer to next input character. */
../inputs/grep1.dat:208902:static lexleft;			/* Number of characters remaining. */
../inputs/grep1.dat:208958:static token lasttok;		/* Previous token returned; initially END. */
../inputs/grep1.dat:209027:static int laststart;		/* True if we're separated from beginning or (, |
../inputs/grep1.dat:209100:				   only by zero-width characters. */
../inputs/grep1.dat:209141:static int parens;		/* Count of outstanding left parens. */
../inputs/grep1.dat:209201:static int minrep, maxrep;	/* Repeat counts for {m,n}. */
../inputs/grep1.dat:209259:
../inputs/grep1.dat:209260:/* Note that characters become unsigned here. */
../inputs/grep1.dat:209309:#define FETCH(c, eoferr)   	      \
../inputs/grep1.dat:209345:  {			   	      \
../inputs/grep1.dat:209363:    if (! lexleft)	   	      \
../inputs/grep1.dat:209394:      if (eoferr != 0)	   	      \
../inputs/grep1.dat:209429:	dfaerror(eoferr);  	      \
../inputs/grep1.dat:209458:      else		   	      \
../inputs/grep1.dat:209482:	return END;	   	      \
../inputs/grep1.dat:209507:    (c) = (unsigned char) *lexptr++;  \
../inputs/grep1.dat:209547:    --lexleft;		   	      \
../inputs/grep1.dat:209575:  }
../inputs/grep1.dat:209579:
../inputs/grep1.dat:209580:#define FUNC(F, P) static int F(c) int c; { return P(c); }
../inputs/grep1.dat:209639:
../inputs/grep1.dat:209640:FUNC(is_alpha, ISALPHA)
../inputs/grep1.dat:209664:FUNC(is_upper, ISUPPER)
../inputs/grep1.dat:209688:FUNC(is_lower, ISLOWER)
../inputs/grep1.dat:209712:FUNC(is_digit, ISDIGIT)
../inputs/grep1.dat:209736:FUNC(is_xdigit, ISXDIGIT)
../inputs/grep1.dat:209762:FUNC(is_space, ISSPACE)
../inputs/grep1.dat:209786:FUNC(is_punct, ISPUNCT)
../inputs/grep1.dat:209810:FUNC(is_alnum, ISALNUM)
../inputs/grep1.dat:209834:FUNC(is_print, ISPRINT)
../inputs/grep1.dat:209858:FUNC(is_graph, ISGRAPH)
../inputs/grep1.dat:209882:FUNC(is_cntrl, ISCNTRL)
../inputs/grep1.dat:209906:
../inputs/grep1.dat:209907:/* The following list maps the names of the Posix named character classes
../inputs/grep1.dat:209981:   to predicate functions that determine whether a given character is in
../inputs/grep1.dat:210054:   the class.  The leading [ has already been eaten by the lexical analyzer. */
../inputs/grep1.dat:210134:static struct {
../inputs/grep1.dat:210150:  char *name;
../inputs/grep1.dat:210164:  int (*pred)();
../inputs/grep1.dat:210181:} prednames[] = {
../inputs/grep1.dat:210199:  ":alpha:]", is_alpha,
../inputs/grep1.dat:210223:  ":upper:]", is_upper,
../inputs/grep1.dat:210247:  ":lower:]", is_lower,
../inputs/grep1.dat:210271:  ":digit:]", is_digit,
../inputs/grep1.dat:210295:  ":xdigit:]", is_xdigit,
../inputs/grep1.dat:210321:  ":space:]", is_space,
../inputs/grep1.dat:210345:  ":punct:]", is_punct,
../inputs/grep1.dat:210369:  ":alnum:]", is_alnum,
../inputs/grep1.dat:210393:  ":print:]", is_print,
../inputs/grep1.dat:210417:  ":graph:]", is_graph,
../inputs/grep1.dat:210441:  ":cntrl:]", is_cntrl,
../inputs/grep1.dat:210465:  0
../inputs/grep1.dat:210469:};
../inputs/grep1.dat:210472:
../inputs/grep1.dat:210473:static int
../inputs/grep1.dat:210484:looking_at(s)
../inputs/grep1.dat:210498:     char *s;
../inputs/grep1.dat:210512:{
../inputs/grep1.dat:210514:  int len;
../inputs/grep1.dat:210525:
../inputs/grep1.dat:210526:  len = strlen(s);
../inputs/grep1.dat:210545:  if (lexleft < len)
../inputs/grep1.dat:210566:    return 0;
../inputs/grep1.dat:210580:  return strncmp(s, lexptr, len) == 0;
../inputs/grep1.dat:210619:}
../inputs/grep1.dat:210621:
../inputs/grep1.dat:210622:static token
../inputs/grep1.dat:210635:lex()
../inputs/grep1.dat:210641:{
../inputs/grep1.dat:210643:  token c, c1, c2;
../inputs/grep1.dat:210662:  int backslash = 0, invert;
../inputs/grep1.dat:210691:  charclass ccl;
../inputs/grep1.dat:210708:  int i;
../inputs/grep1.dat:210717:
../inputs/grep1.dat:210718:  /* Basic plan: We fetch a character.  If it's a backslash,
../inputs/grep1.dat:210779:     we set the backslash flag and go through the loop again.
../inputs/grep1.dat:210841:     On the plus side, this avoids having a duplicate of the
../inputs/grep1.dat:210902:     main switch inside the backslash case.  On the minus side,
../inputs/grep1.dat:210966:     it means that just about every case begins with
../inputs/grep1.dat:211019:     "if (backslash) ...".  */
../inputs/grep1.dat:211050:  for (i = 0; i < 2; ++i)
../inputs/grep1.dat:211076:    {
../inputs/grep1.dat:211082:      FETCH(c, 0);
../inputs/grep1.dat:211101:      switch (c)
../inputs/grep1.dat:211118:	{
../inputs/grep1.dat:211121:	case '\\':
../inputs/grep1.dat:211133:	  if (backslash)
../inputs/grep1.dat:211151:	    goto normal_char;
../inputs/grep1.dat:211174:	  if (lexleft == 0)
../inputs/grep1.dat:211195:	    dfaerror("Unfinished \\ escape");
../inputs/grep1.dat:211234:	  backslash = 1;
../inputs/grep1.dat:211252:	  break;
../inputs/grep1.dat:211262:
../inputs/grep1.dat:211263:	case '^':
../inputs/grep1.dat:211274:	  if (backslash)
../inputs/grep1.dat:211292:	    goto normal_char;
../inputs/grep1.dat:211315:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:211361:	      || lasttok == END
../inputs/grep1.dat:211386:	      || lasttok == LPAREN
../inputs/grep1.dat:211414:	      || lasttok == OR)
../inputs/grep1.dat:211439:	    return lasttok = BEGLINE;
../inputs/grep1.dat:211470:	  goto normal_char;
../inputs/grep1.dat:211491:
../inputs/grep1.dat:211492:	case '$':
../inputs/grep1.dat:211503:	  if (backslash)
../inputs/grep1.dat:211521:	    goto normal_char;
../inputs/grep1.dat:211544:	  if (syntax_bits & RE_CONTEXT_INDEP_ANCHORS
../inputs/grep1.dat:211590:	      || lexleft == 0
../inputs/grep1.dat:211613:	      || (syntax_bits & RE_NO_BK_PARENS
../inputs/grep1.dat:211654:		  ? lexleft > 0 && *lexptr == ')'
../inputs/grep1.dat:211690:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
../inputs/grep1.dat:211750:	      || (syntax_bits & RE_NO_BK_VBAR
../inputs/grep1.dat:211789:		  ? lexleft > 0 && *lexptr == '|'
../inputs/grep1.dat:211825:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
../inputs/grep1.dat:211885:	      || ((syntax_bits & RE_NEWLINE_ALT)
../inputs/grep1.dat:211927:	          && lexleft > 0 && *lexptr == '\n'))
../inputs/grep1.dat:211974:	    return lasttok = ENDLINE;
../inputs/grep1.dat:212005:	  goto normal_char;
../inputs/grep1.dat:212026:
../inputs/grep1.dat:212027:	case '1':
../inputs/grep1.dat:212038:	case '2':
../inputs/grep1.dat:212049:	case '3':
../inputs/grep1.dat:212060:	case '4':
../inputs/grep1.dat:212071:	case '5':
../inputs/grep1.dat:212082:	case '6':
../inputs/grep1.dat:212093:	case '7':
../inputs/grep1.dat:212104:	case '8':
../inputs/grep1.dat:212115:	case '9':
../inputs/grep1.dat:212126:	  if (backslash && !(syntax_bits & RE_NO_BK_REFS))
../inputs/grep1.dat:212178:	    {
../inputs/grep1.dat:212185:	      laststart = 0;
../inputs/grep1.dat:212207:	      return lasttok = BACKREF;
../inputs/grep1.dat:212240:	    }
../inputs/grep1.dat:212247:	  goto normal_char;
../inputs/grep1.dat:212268:
../inputs/grep1.dat:212269:	case '<':
../inputs/grep1.dat:212280:	  if (backslash)
../inputs/grep1.dat:212298:	    return lasttok = BEGWORD;
../inputs/grep1.dat:212329:	  goto normal_char;
../inputs/grep1.dat:212350:
../inputs/grep1.dat:212351:	case '>':
../inputs/grep1.dat:212362:	  if (backslash)
../inputs/grep1.dat:212380:	    return lasttok = ENDWORD;
../inputs/grep1.dat:212411:	  goto normal_char;
../inputs/grep1.dat:212432:
../inputs/grep1.dat:212433:	case 'b':
../inputs/grep1.dat:212444:	  if (backslash)
../inputs/grep1.dat:212462:	    return lasttok = LIMWORD;
../inputs/grep1.dat:212493:	  goto normal_char;
../inputs/grep1.dat:212514:
../inputs/grep1.dat:212515:	case 'B':
../inputs/grep1.dat:212526:	  if (backslash)
../inputs/grep1.dat:212544:	    return lasttok = NOTLIMWORD;
../inputs/grep1.dat:212578:	  goto normal_char;
../inputs/grep1.dat:212599:
../inputs/grep1.dat:212600:	case '?':
../inputs/grep1.dat:212611:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:212648:	    goto normal_char;
../inputs/grep1.dat:212671:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
../inputs/grep1.dat:212729:	    goto normal_char;
../inputs/grep1.dat:212752:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:212811:	    goto normal_char;
../inputs/grep1.dat:212834:	  return lasttok = QMARK;
../inputs/grep1.dat:212861:
../inputs/grep1.dat:212862:	case '*':
../inputs/grep1.dat:212873:	  if (backslash)
../inputs/grep1.dat:212891:	    goto normal_char;
../inputs/grep1.dat:212914:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:212973:	    goto normal_char;
../inputs/grep1.dat:212996:	  return lasttok = STAR;
../inputs/grep1.dat:213022:
../inputs/grep1.dat:213023:	case '+':
../inputs/grep1.dat:213034:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:213071:	    goto normal_char;
../inputs/grep1.dat:213094:	  if (backslash != ((syntax_bits & RE_BK_PLUS_QM) != 0))
../inputs/grep1.dat:213152:	    goto normal_char;
../inputs/grep1.dat:213175:	  if (!(syntax_bits & RE_CONTEXT_INDEP_OPS) && laststart)
../inputs/grep1.dat:213234:	    goto normal_char;
../inputs/grep1.dat:213257:	  return lasttok = PLUS;
../inputs/grep1.dat:213283:
../inputs/grep1.dat:213284:	case '{':
../inputs/grep1.dat:213295:	  if (!(syntax_bits & RE_INTERVALS))
../inputs/grep1.dat:213333:	    goto normal_char;
../inputs/grep1.dat:213356:	  if (backslash != ((syntax_bits & RE_NO_BK_BRACES) == 0))
../inputs/grep1.dat:213416:	    goto normal_char;
../inputs/grep1.dat:213439:	  minrep = maxrep = 0;
../inputs/grep1.dat:213463:	  /* Cases:
../inputs/grep1.dat:213476:	     {M} - exact count
../inputs/grep1.dat:213500:	     {M,} - minimum count, maximum is infinity
../inputs/grep1.dat:213548:	     {,M} - 0 through M
../inputs/grep1.dat:213573:	     {M,N} - M through N */
../inputs/grep1.dat:213602:	  FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:213642:	  if (ISDIGIT(c))
../inputs/grep1.dat:213661:	    {
../inputs/grep1.dat:213668:	      minrep = c - '0';
../inputs/grep1.dat:213693:	      for (;;)
../inputs/grep1.dat:213709:		{
../inputs/grep1.dat:213713:		  FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:213754:		  if (!ISDIGIT(c))
../inputs/grep1.dat:213775:		    break;
../inputs/grep1.dat:213788:		  minrep = 10 * minrep + c - '0';
../inputs/grep1.dat:213824:		}
../inputs/grep1.dat:213828:	    }
../inputs/grep1.dat:213835:	  else if (c != ',')
../inputs/grep1.dat:213857:	    dfaerror("malformed repeat count");
../inputs/grep1.dat:213898:	  if (c == ',')
../inputs/grep1.dat:213915:	    for (;;)
../inputs/grep1.dat:213929:	      {
../inputs/grep1.dat:213938:		FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:213977:		if (!ISDIGIT(c))
../inputs/grep1.dat:213996:		  break;
../inputs/grep1.dat:214007:		maxrep = 10 * maxrep + c - '0';
../inputs/grep1.dat:214041:	      }
../inputs/grep1.dat:214050:	  else
../inputs/grep1.dat:214058:	    maxrep = minrep;
../inputs/grep1.dat:214080:	  if (!(syntax_bits & RE_NO_BK_BRACES))
../inputs/grep1.dat:214121:	    {
../inputs/grep1.dat:214128:	      if (c != '\\')
../inputs/grep1.dat:214150:		dfaerror("malformed repeat count");
../inputs/grep1.dat:214188:	      FETCH(c, "unfinished repeat count");
../inputs/grep1.dat:214232:	    }
../inputs/grep1.dat:214239:	  if (c != '}')
../inputs/grep1.dat:214256:	    dfaerror("malformed repeat count");
../inputs/grep1.dat:214297:	  laststart = 0;
../inputs/grep1.dat:214315:	  return lasttok = REPMN;
../inputs/grep1.dat:214342:
../inputs/grep1.dat:214343:	case '|':
../inputs/grep1.dat:214354:	  if (syntax_bits & RE_LIMITED_OPS)
../inputs/grep1.dat:214391:	    goto normal_char;
../inputs/grep1.dat:214414:	  if (backslash != ((syntax_bits & RE_NO_BK_VBAR) == 0))
../inputs/grep1.dat:214472:	    goto normal_char;
../inputs/grep1.dat:214495:	  laststart = 1;
../inputs/grep1.dat:214513:	  return lasttok = OR;
../inputs/grep1.dat:214537:
../inputs/grep1.dat:214538:	case '\n':
../inputs/grep1.dat:214550:	  if (syntax_bits & RE_LIMITED_OPS
../inputs/grep1.dat:214586:	      || backslash
../inputs/grep1.dat:214606:	      || !(syntax_bits & RE_NEWLINE_ALT))
../inputs/grep1.dat:214649:	    goto normal_char;
../inputs/grep1.dat:214672:	  laststart = 1;
../inputs/grep1.dat:214690:	  return lasttok = OR;
../inputs/grep1.dat:214714:
../inputs/grep1.dat:214715:	case '(':
../inputs/grep1.dat:214726:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
../inputs/grep1.dat:214786:	    goto normal_char;
../inputs/grep1.dat:214809:	  ++parens;
../inputs/grep1.dat:214822:	  laststart = 1;
../inputs/grep1.dat:214840:	  return lasttok = LPAREN;
../inputs/grep1.dat:214868:
../inputs/grep1.dat:214869:	case ')':
../inputs/grep1.dat:214880:	  if (backslash != ((syntax_bits & RE_NO_BK_PARENS) == 0))
../inputs/grep1.dat:214940:	    goto normal_char;
../inputs/grep1.dat:214963:	  if (parens == 0 && syntax_bits & RE_UNMATCHED_RIGHT_PAREN_ORD)
../inputs/grep1.dat:215029:	    goto normal_char;
../inputs/grep1.dat:215052:	  --parens;
../inputs/grep1.dat:215065:	  laststart = 0;
../inputs/grep1.dat:215083:	  return lasttok = RPAREN;
../inputs/grep1.dat:215111:
../inputs/grep1.dat:215112:	case '.':
../inputs/grep1.dat:215123:	  if (backslash)
../inputs/grep1.dat:215141:	    goto normal_char;
../inputs/grep1.dat:215164:	  zeroset(ccl);
../inputs/grep1.dat:215181:	  notset(ccl);
../inputs/grep1.dat:215197:	  if (!(syntax_bits & RE_DOT_NEWLINE))
../inputs/grep1.dat:215237:	    clrbit('\n', ccl);
../inputs/grep1.dat:215261:	  if (syntax_bits & RE_DOT_NOT_NULL)
../inputs/grep1.dat:215299:	    clrbit('\0', ccl);
../inputs/grep1.dat:215323:	  laststart = 0;
../inputs/grep1.dat:215341:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:215390:
../inputs/grep1.dat:215391:	case 'w':
../inputs/grep1.dat:215402:	case 'W':
../inputs/grep1.dat:215413:	  if (!backslash)
../inputs/grep1.dat:215432:	    goto normal_char;
../inputs/grep1.dat:215455:	  zeroset(ccl);
../inputs/grep1.dat:215472:	  for (c2 = 0; c2 < NOTCHAR; ++c2)
../inputs/grep1.dat:215508:	    if (ISALNUM(c2))
../inputs/grep1.dat:215530:	      setbit(c2, ccl);
../inputs/grep1.dat:215554:	  if (c == 'W')
../inputs/grep1.dat:215571:	    notset(ccl);
../inputs/grep1.dat:215589:	  laststart = 0;
../inputs/grep1.dat:215607:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:215656:	
../inputs/grep1.dat:215658:	case '[':
../inputs/grep1.dat:215669:	  if (backslash)
../inputs/grep1.dat:215687:	    goto normal_char;
../inputs/grep1.dat:215710:	  zeroset(ccl);
../inputs/grep1.dat:215727:	  FETCH(c, "Unbalanced [");
../inputs/grep1.dat:215756:	  if (c == '^')
../inputs/grep1.dat:215773:	    {
../inputs/grep1.dat:215780:	      FETCH(c, "Unbalanced [");
../inputs/grep1.dat:215813:	      invert = 1;
../inputs/grep1.dat:215832:	    }
../inputs/grep1.dat:215839:	  else
../inputs/grep1.dat:215847:	    invert = 0;
../inputs/grep1.dat:215864:	  do
../inputs/grep1.dat:215870:	    {
../inputs/grep1.dat:215877:	      /* Nobody ever said this had to be fast. :-)
../inputs/grep1.dat:215929:		 Note that if we're looking at some other [:...:]
../inputs/grep1.dat:215981:		 construct, we just treat it as a bunch of ordinary
../inputs/grep1.dat:216035:		 characters.  We can do this because we assume
../inputs/grep1.dat:216084:		 regex has checked for syntax errors before
../inputs/grep1.dat:216130:		 dfa is ever called. */
../inputs/grep1.dat:216156:	      if (c == '[' && (syntax_bits & RE_CHAR_CLASSES))
../inputs/grep1.dat:216212:		for (c1 = 0; prednames[c1].name; ++c1)
../inputs/grep1.dat:216253:		  if (looking_at(prednames[c1].name))
../inputs/grep1.dat:216293:		    {
../inputs/grep1.dat:216301:		      for (c2 = 0; c2 < NOTCHAR; ++c2)
../inputs/grep1.dat:216342:			if ((*prednames[c1].pred)(c2))
../inputs/grep1.dat:216376:			  setbit(c2, ccl);
../inputs/grep1.dat:216398:		      lexptr += strlen(prednames[c1].name);
../inputs/grep1.dat:216444:		      lexleft -= strlen(prednames[c1].name);
../inputs/grep1.dat:216491:		      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:216526:		      goto skip;
../inputs/grep1.dat:216545:		    }
../inputs/grep1.dat:216553:	      if (c == '\\' && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
../inputs/grep1.dat:216623:		FETCH(c, "Unbalanced [");
../inputs/grep1.dat:216651:	      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:216685:	      if (c1 == '-')
../inputs/grep1.dat:216707:		{
../inputs/grep1.dat:216711:		  FETCH(c2, "Unbalanced [");
../inputs/grep1.dat:216742:		  if (c2 == ']')
../inputs/grep1.dat:216761:		    {
../inputs/grep1.dat:216769:		      /* In the case [x-], the - is an ordinary hyphen,
../inputs/grep1.dat:216827:			 which is left in c1, the lookahead character. */
../inputs/grep1.dat:216880:		      --lexptr;
../inputs/grep1.dat:216898:		      ++lexleft;
../inputs/grep1.dat:216917:		      c2 = c;
../inputs/grep1.dat:216933:		    }
../inputs/grep1.dat:216941:		  else
../inputs/grep1.dat:216950:		    {
../inputs/grep1.dat:216958:		      if (c2 == '\\'
../inputs/grep1.dat:216981:			  && (syntax_bits & RE_BACKSLASH_ESCAPE_IN_LISTS))
../inputs/grep1.dat:217035:			FETCH(c2, "Unbalanced [");
../inputs/grep1.dat:217065:		      FETCH(c1, "Unbalanced [");
../inputs/grep1.dat:217100:		    }
../inputs/grep1.dat:217108:		}
../inputs/grep1.dat:217112:	      else
../inputs/grep1.dat:217124:		c2 = c;
../inputs/grep1.dat:217134:	      while (c <= c2)
../inputs/grep1.dat:217157:		{
../inputs/grep1.dat:217161:		  setbit(c, ccl);
../inputs/grep1.dat:217181:		  if (case_fold)
../inputs/grep1.dat:217200:		    if (ISUPPER(c))
../inputs/grep1.dat:217222:		      setbit(tolower(c), ccl);
../inputs/grep1.dat:217255:		    else if (ISLOWER(c))
../inputs/grep1.dat:217282:		      setbit(toupper(c), ccl);
../inputs/grep1.dat:217315:		  ++c;
../inputs/grep1.dat:217324:		}
../inputs/grep1.dat:217328:	    skip:
../inputs/grep1.dat:217339:	      ;
../inputs/grep1.dat:217348:	    }
../inputs/grep1.dat:217355:	  while ((c = c1) != ']');
../inputs/grep1.dat:217383:	  if (invert)
../inputs/grep1.dat:217398:	    {
../inputs/grep1.dat:217405:	      notset(ccl);
../inputs/grep1.dat:217425:	      if (syntax_bits & RE_HAT_LISTS_NOT_NEWLINE)
../inputs/grep1.dat:217476:		clrbit('\n', ccl);
../inputs/grep1.dat:217497:	    }
../inputs/grep1.dat:217504:	  laststart = 0;
../inputs/grep1.dat:217522:	  return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:217571:
../inputs/grep1.dat:217572:	default:
../inputs/grep1.dat:217582:	normal_char:
../inputs/grep1.dat:217596:	  laststart = 0;
../inputs/grep1.dat:217614:	  if (case_fold && ISALPHA(c))
../inputs/grep1.dat:217646:	    {
../inputs/grep1.dat:217653:	      zeroset(ccl);
../inputs/grep1.dat:217674:	      setbit(c, ccl);
../inputs/grep1.dat:217697:	      if (isupper(c))
../inputs/grep1.dat:217720:		setbit(tolower(c), ccl);
../inputs/grep1.dat:217747:	      else
../inputs/grep1.dat:217759:		setbit(toupper(c), ccl);
../inputs/grep1.dat:217786:	      return lasttok = CSET + charclass_index(ccl);
../inputs/grep1.dat:217839:	    }
../inputs/grep1.dat:217846:	  return c;
../inputs/grep1.dat:217859:	}
../inputs/grep1.dat:217862:    }
../inputs/grep1.dat:217868:
../inputs/grep1.dat:217869:  /* The above loop should consume at most a backslash
../inputs/grep1.dat:217924:     and some other character. */
../inputs/grep1.dat:217958:  abort();
../inputs/grep1.dat:217969:}
../inputs/grep1.dat:217971:
../inputs/grep1.dat:217972:/* Recursive descent parser for regular expressions. */
../inputs/grep1.dat:218028:
../inputs/grep1.dat:218029:static token tok;		/* Lookahead token. */
../inputs/grep1.dat:218071:static depth;			/* Current depth of a hypothetical stack
../inputs/grep1.dat:218128:				   holding deferred productions.  This is
../inputs/grep1.dat:218174:				   used to determine the depth that will be
../inputs/grep1.dat:218222:				   required of the real stack later on in
../inputs/grep1.dat:218268:				   dfaanalyze(). */
../inputs/grep1.dat:218292:
../inputs/grep1.dat:218293:/* Add the given token to the parse tree, maintaining the depth count and
../inputs/grep1.dat:218367:   updating the maximum depth if necessary. */
../inputs/grep1.dat:218414:static void
../inputs/grep1.dat:218426:addtok(t)
../inputs/grep1.dat:218436:     token t;
../inputs/grep1.dat:218450:{
../inputs/grep1.dat:218452:  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
../inputs/grep1.dat:218522:  dfa->tokens[dfa->tindex++] = t;
../inputs/grep1.dat:218556:
../inputs/grep1.dat:218557:  switch (t)
../inputs/grep1.dat:218570:    {
../inputs/grep1.dat:218576:    case QMARK:
../inputs/grep1.dat:218592:    case STAR:
../inputs/grep1.dat:218607:    case PLUS:
../inputs/grep1.dat:218622:      break;
../inputs/grep1.dat:218635:
../inputs/grep1.dat:218636:    case CAT:
../inputs/grep1.dat:218650:    case OR:
../inputs/grep1.dat:218663:    case ORTOP:
../inputs/grep1.dat:218679:      --depth;
../inputs/grep1.dat:218694:      break;
../inputs/grep1.dat:218707:
../inputs/grep1.dat:218708:    default:
../inputs/grep1.dat:218721:      ++dfa->nleaves;
../inputs/grep1.dat:218743:    case EMPTY:
../inputs/grep1.dat:218759:      ++depth;
../inputs/grep1.dat:218774:      break;
../inputs/grep1.dat:218787:    }
../inputs/grep1.dat:218793:  if (depth > dfa->depth)
../inputs/grep1.dat:218819:    dfa->depth = depth;
../inputs/grep1.dat:218843:}
../inputs/grep1.dat:218845:
../inputs/grep1.dat:218846:/* The grammar understood by the parser is as follows.
../inputs/grep1.dat:218901:
../inputs/grep1.dat:218902:   regexp:
../inputs/grep1.dat:218913:     regexp OR branch
../inputs/grep1.dat:218935:     branch
../inputs/grep1.dat:218947:
../inputs/grep1.dat:218948:   branch:
../inputs/grep1.dat:218959:     branch closure
../inputs/grep1.dat:218979:     closure
../inputs/grep1.dat:218992:
../inputs/grep1.dat:218993:   closure:
../inputs/grep1.dat:219005:     closure QMARK
../inputs/grep1.dat:219024:     closure STAR
../inputs/grep1.dat:219042:     closure PLUS
../inputs/grep1.dat:219060:     atom
../inputs/grep1.dat:219070:
../inputs/grep1.dat:219071:   atom:
../inputs/grep1.dat:219080:     <normal character>
../inputs/grep1.dat:219104:     CSET
../inputs/grep1.dat:219114:     BACKREF
../inputs/grep1.dat:219127:     BEGLINE
../inputs/grep1.dat:219140:     ENDLINE
../inputs/grep1.dat:219153:     BEGWORD
../inputs/grep1.dat:219166:     ENDWORD
../inputs/grep1.dat:219179:     LIMWORD
../inputs/grep1.dat:219192:     NOTLIMWORD
../inputs/grep1.dat:219208:     <empty>
../inputs/grep1.dat:219221:
../inputs/grep1.dat:219222:   The parser builds a parse tree in postfix form in an array of tokens. */
../inputs/grep1.dat:219298:
../inputs/grep1.dat:219299:#if __STDC__
../inputs/grep1.dat:219312:static void regexp(int);
../inputs/grep1.dat:219337:#else
../inputs/grep1.dat:219343:static void regexp();
../inputs/grep1.dat:219365:#endif
../inputs/grep1.dat:219372:
../inputs/grep1.dat:219373:static void
../inputs/grep1.dat:219385:atom()
../inputs/grep1.dat:219392:{
../inputs/grep1.dat:219394:  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
../inputs/grep1.dat:219461:      || tok == BEGLINE || tok == ENDLINE || tok == BEGWORD
../inputs/grep1.dat:219521:      || tok == ENDWORD || tok == LIMWORD || tok == NOTLIMWORD)
../inputs/grep1.dat:219585:    {
../inputs/grep1.dat:219591:      addtok(tok);
../inputs/grep1.dat:219610:      tok = lex();
../inputs/grep1.dat:219629:    }
../inputs/grep1.dat:219635:  else if (tok == LPAREN)
../inputs/grep1.dat:219661:    {
../inputs/grep1.dat:219667:      tok = lex();
../inputs/grep1.dat:219686:      regexp(0);
../inputs/grep1.dat:219703:      if (tok != RPAREN)
../inputs/grep1.dat:219728:	dfaerror("Unbalanced (");
../inputs/grep1.dat:219755:      tok = lex();
../inputs/grep1.dat:219774:    }
../inputs/grep1.dat:219780:  else
../inputs/grep1.dat:219787:    addtok(EMPTY);
../inputs/grep1.dat:219806:}
../inputs/grep1.dat:219808:
../inputs/grep1.dat:219809:/* Return the number of tokens in the given subexpression. */
../inputs/grep1.dat:219871:static int
../inputs/grep1.dat:219882:nsubtoks(tindex)
../inputs/grep1.dat:219899:{
../inputs/grep1.dat:219901:  int ntoks1;
../inputs/grep1.dat:219915:
../inputs/grep1.dat:219916:  switch (dfa->tokens[tindex - 1])
../inputs/grep1.dat:219951:    {
../inputs/grep1.dat:219957:    default:
../inputs/grep1.dat:219970:      return 1;
../inputs/grep1.dat:219986:    case QMARK:
../inputs/grep1.dat:220002:    case STAR:
../inputs/grep1.dat:220017:    case PLUS:
../inputs/grep1.dat:220032:      return 1 + nsubtoks(tindex - 1);
../inputs/grep1.dat:220071:    case CAT:
../inputs/grep1.dat:220085:    case OR:
../inputs/grep1.dat:220098:    case ORTOP:
../inputs/grep1.dat:220114:      ntoks1 = nsubtoks(tindex - 1);
../inputs/grep1.dat:220151:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
../inputs/grep1.dat:220208:    }
../inputs/grep1.dat:220214:}
../inputs/grep1.dat:220216:
../inputs/grep1.dat:220217:/* Copy the given subexpression to the top of the tree. */
../inputs/grep1.dat:220276:static void
../inputs/grep1.dat:220288:copytoks(tindex, ntokens)
../inputs/grep1.dat:220314:     int tindex, ntokens;
../inputs/grep1.dat:220340:{
../inputs/grep1.dat:220342:  int i;
../inputs/grep1.dat:220351:
../inputs/grep1.dat:220352:  for (i = 0; i < ntokens; ++i)
../inputs/grep1.dat:220384:    addtok(dfa->tokens[tindex + i]);
../inputs/grep1.dat:220421:}
../inputs/grep1.dat:220423:
../inputs/grep1.dat:220424:static void
../inputs/grep1.dat:220436:closure()
../inputs/grep1.dat:220446:{
../inputs/grep1.dat:220448:  int tindex, ntokens, i;
../inputs/grep1.dat:220474:
../inputs/grep1.dat:220475:  atom();
../inputs/grep1.dat:220485:  while (tok == QMARK || tok == STAR || tok == PLUS || tok == REPMN)
../inputs/grep1.dat:220554:    if (tok == REPMN)
../inputs/grep1.dat:220576:      {
../inputs/grep1.dat:220584:	ntokens = nsubtoks(dfa->tindex);
../inputs/grep1.dat:220618:	tindex = dfa->tindex - ntokens;
../inputs/grep1.dat:220651:	if (maxrep == 0)
../inputs/grep1.dat:220669:	  addtok(PLUS);
../inputs/grep1.dat:220686:	if (minrep == 0)
../inputs/grep1.dat:220704:	  addtok(QMARK);
../inputs/grep1.dat:220722:	for (i = 1; i < minrep; ++i)
../inputs/grep1.dat:220752:	  {
../inputs/grep1.dat:220757:	    copytoks(tindex, ntokens);
../inputs/grep1.dat:220789:	    addtok(CAT);
../inputs/grep1.dat:220807:	  }
../inputs/grep1.dat:220812:	for (; i < maxrep; ++i)
../inputs/grep1.dat:220837:	  {
../inputs/grep1.dat:220842:	    copytoks(tindex, ntokens);
../inputs/grep1.dat:220874:	    addtok(QMARK);
../inputs/grep1.dat:220894:	    addtok(CAT);
../inputs/grep1.dat:220912:	  }
../inputs/grep1.dat:220917:	tok = lex();
../inputs/grep1.dat:220931:      }
../inputs/grep1.dat:220939:    else
../inputs/grep1.dat:220948:      {
../inputs/grep1.dat:220956:	addtok(tok);
../inputs/grep1.dat:220970:	tok = lex();
../inputs/grep1.dat:220984:      }
../inputs/grep1.dat:220992:}
../inputs/grep1.dat:220994:
../inputs/grep1.dat:220995:static void
../inputs/grep1.dat:221007:branch()
../inputs/grep1.dat:221016:{
../inputs/grep1.dat:221018:  closure();
../inputs/grep1.dat:221031:  while (tok != RPAREN && tok != OR && tok >= 0)
../inputs/grep1.dat:221080:    {
../inputs/grep1.dat:221086:      closure();
../inputs/grep1.dat:221103:      addtok(CAT);
../inputs/grep1.dat:221122:    }
../inputs/grep1.dat:221128:}
../inputs/grep1.dat:221130:
../inputs/grep1.dat:221131:static void
../inputs/grep1.dat:221143:regexp(toplevel)
../inputs/grep1.dat:221160:     int toplevel;
../inputs/grep1.dat:221179:{
../inputs/grep1.dat:221181:  branch();
../inputs/grep1.dat:221193:  while (tok == OR)
../inputs/grep1.dat:221213:    {
../inputs/grep1.dat:221219:      tok = lex();
../inputs/grep1.dat:221238:      branch();
../inputs/grep1.dat:221254:      if (toplevel)
../inputs/grep1.dat:221274:	addtok(ORTOP);
../inputs/grep1.dat:221290:      else
../inputs/grep1.dat:221301:	addtok(OR);
../inputs/grep1.dat:221314:    }
../inputs/grep1.dat:221320:}
../inputs/grep1.dat:221322:
../inputs/grep1.dat:221323:/* Main entry point for the parser.  S is a string to be parsed, len is the
../inputs/grep1.dat:221476:   the struct dfa to parse into. */
../inputs/grep1.dat:221512:void
../inputs/grep1.dat:221517:dfaparse(s, len, d)
../inputs/grep1.dat:221537:     char *s;
../inputs/grep1.dat:221551:     size_t len;
../inputs/grep1.dat:221568:     struct dfa *d;
../inputs/grep1.dat:221588:
../inputs/grep1.dat:221589:{
../inputs/grep1.dat:221591:  dfa = d;
../inputs/grep1.dat:221602:  lexstart = lexptr = s;
../inputs/grep1.dat:221627:  lexleft = len;
../inputs/grep1.dat:221644:  lasttok = END;
../inputs/grep1.dat:221661:  laststart = 1;
../inputs/grep1.dat:221678:  parens = 0;
../inputs/grep1.dat:221692:
../inputs/grep1.dat:221693:  if (! syntax_bits_set)
../inputs/grep1.dat:221718:    dfaerror("No syntax specified");
../inputs/grep1.dat:221755:
../inputs/grep1.dat:221756:  tok = lex();
../inputs/grep1.dat:221771:  depth = d->depth;
../inputs/grep1.dat:221791:
../inputs/grep1.dat:221792:  regexp(1);
../inputs/grep1.dat:221805:
../inputs/grep1.dat:221806:  if (tok != END)
../inputs/grep1.dat:221824:    dfaerror("Unbalanced )");
../inputs/grep1.dat:221854:
../inputs/grep1.dat:221855:  addtok(END - d->nregexps);
../inputs/grep1.dat:221884:  addtok(CAT);
../inputs/grep1.dat:221899:
../inputs/grep1.dat:221900:  if (d->nregexps)
../inputs/grep1.dat:221919:    addtok(ORTOP);
../inputs/grep1.dat:221938:
../inputs/grep1.dat:221939:  ++d->nregexps;
../inputs/grep1.dat:221956:}
../inputs/grep1.dat:221958:
../inputs/grep1.dat:221959:/* Some primitives for operating on sets of positions. */
../inputs/grep1.dat:222017:
../inputs/grep1.dat:222018:/* Copy one set to another; the destination must be large enough. */
../inputs/grep1.dat:222087:static void
../inputs/grep1.dat:222099:copy(src, dst)
../inputs/grep1.dat:222114:     position_set *src;
../inputs/grep1.dat:222138:     position_set *dst;
../inputs/grep1.dat:222162:{
../inputs/grep1.dat:222164:  int i;
../inputs/grep1.dat:222173:
../inputs/grep1.dat:222174:  for (i = 0; i < src->nelem; ++i)
../inputs/grep1.dat:222209:    dst->elems[i] = src->elems[i];
../inputs/grep1.dat:222244:  dst->nelem = src->nelem;
../inputs/grep1.dat:222271:}
../inputs/grep1.dat:222273:
../inputs/grep1.dat:222274:/* Insert a position in a set.  Position sets are maintained in sorted
../inputs/grep1.dat:222345:   order according to index.  If position already exists in the set with
../inputs/grep1.dat:222418:   the same index then their constraints are logically or'd together.
../inputs/grep1.dat:222488:   S->elems must point to an array large enough to hold the resulting set. */
../inputs/grep1.dat:222566:static void
../inputs/grep1.dat:222578:insert(p, s)
../inputs/grep1.dat:222591:     position p;
../inputs/grep1.dat:222608:     position_set *s;
../inputs/grep1.dat:222630:{
../inputs/grep1.dat:222632:  int i;
../inputs/grep1.dat:222641:  position t1, t2;
../inputs/grep1.dat:222660:
../inputs/grep1.dat:222661:  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
../inputs/grep1.dat:222725:    ;
../inputs/grep1.dat:222731:  if (i < s->nelem && p.index == s->elems[i].index)
../inputs/grep1.dat:222783:    s->elems[i].constraint |= p.constraint;
../inputs/grep1.dat:222827:  else
../inputs/grep1.dat:222834:    {
../inputs/grep1.dat:222840:      t1 = p;
../inputs/grep1.dat:222854:      ++s->nelem;
../inputs/grep1.dat:222872:      while (i < s->nelem)
../inputs/grep1.dat:222899:	{
../inputs/grep1.dat:222902:	  t2 = s->elems[i];
../inputs/grep1.dat:222923:	  s->elems[i++] = t1;
../inputs/grep1.dat:222946:	  t1 = t2;
../inputs/grep1.dat:222958:	}
../inputs/grep1.dat:222961:    }
../inputs/grep1.dat:222967:}
../inputs/grep1.dat:222969:
../inputs/grep1.dat:222970:/* Merge two sets of positions into a third.  The result is exactly as if
../inputs/grep1.dat:223044:   the positions of both sets were inserted into an initially empty set. */
../inputs/grep1.dat:223120:static void
../inputs/grep1.dat:223132:merge(s1, s2, m)
../inputs/grep1.dat:223149:     position_set *s1;
../inputs/grep1.dat:223172:     position_set *s2;
../inputs/grep1.dat:223195:     position_set *m;
../inputs/grep1.dat:223217:{
../inputs/grep1.dat:223219:  int i = 0, j = 0;
../inputs/grep1.dat:223239:
../inputs/grep1.dat:223240:  m->nelem = 0;
../inputs/grep1.dat:223256:  while (i < s1->nelem && j < s2->nelem)
../inputs/grep1.dat:223297:    if (s1->elems[i].index > s2->elems[j].index)
../inputs/grep1.dat:223346:      m->elems[m->nelem++] = s1->elems[i++];
../inputs/grep1.dat:223391:    else if (s1->elems[i].index < s2->elems[j].index)
../inputs/grep1.dat:223445:      m->elems[m->nelem++] = s2->elems[j++];
../inputs/grep1.dat:223490:    else
../inputs/grep1.dat:223499:      {
../inputs/grep1.dat:223507:	m->elems[m->nelem] = s1->elems[i++];
../inputs/grep1.dat:223545:	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
../inputs/grep1.dat:223608:      }
../inputs/grep1.dat:223616:  while (i < s1->nelem)
../inputs/grep1.dat:223640:    m->elems[m->nelem++] = s1->elems[i++];
../inputs/grep1.dat:223683:  while (j < s2->nelem)
../inputs/grep1.dat:223707:    m->elems[m->nelem++] = s2->elems[j++];
../inputs/grep1.dat:223750:}
../inputs/grep1.dat:223752:
../inputs/grep1.dat:223753:/* Delete a position from a set. */
../inputs/grep1.dat:223789:static void
../inputs/grep1.dat:223801:delete(p, s)
../inputs/grep1.dat:223814:     position p;
../inputs/grep1.dat:223831:     position_set *s;
../inputs/grep1.dat:223853:{
../inputs/grep1.dat:223855:  int i;
../inputs/grep1.dat:223864:
../inputs/grep1.dat:223865:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:223898:    if (p.index == s->elems[i].index)
../inputs/grep1.dat:223936:      break;
../inputs/grep1.dat:223949:  if (i < s->nelem)
../inputs/grep1.dat:223969:    for (--s->nelem; i < s->nelem; ++i)
../inputs/grep1.dat:224009:      s->elems[i] = s->elems[i + 1];
../inputs/grep1.dat:224046:}
../inputs/grep1.dat:224048:
../inputs/grep1.dat:224049:/* Find the index of the state corresponding to the given position set with
../inputs/grep1.dat:224125:   the given preceding context, or create a new state if there is no such
../inputs/grep1.dat:224199:   state.  Newline and letter tell whether we got here on a newline or
../inputs/grep1.dat:224270:   letter, respectively. */
../inputs/grep1.dat:224298:static int
../inputs/grep1.dat:224309:state_index(d, s, newline, letter)
../inputs/grep1.dat:224344:     struct dfa *d;
../inputs/grep1.dat:224364:     position_set *s;
../inputs/grep1.dat:224386:     int newline;
../inputs/grep1.dat:224404:     int letter;
../inputs/grep1.dat:224421:{
../inputs/grep1.dat:224423:  int hash = 0;
../inputs/grep1.dat:224439:  int constraint;
../inputs/grep1.dat:224457:  int i, j;
../inputs/grep1.dat:224469:
../inputs/grep1.dat:224470:  newline = newline ? 1 : 0;
../inputs/grep1.dat:224499:  letter = letter ? 1 : 0;
../inputs/grep1.dat:224526:
../inputs/grep1.dat:224527:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:224560:    hash ^= s->elems[i].index + s->elems[i].constraint;
../inputs/grep1.dat:224616:
../inputs/grep1.dat:224617:  /* Try to find a state that exactly matches the proposed one. */
../inputs/grep1.dat:224684:  for (i = 0; i < d->sindex; ++i)
../inputs/grep1.dat:224718:    {
../inputs/grep1.dat:224724:      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
../inputs/grep1.dat:224800:	  || newline != d->states[i].newline || letter != d->states[i].letter)
../inputs/grep1.dat:224872:	continue;
../inputs/grep1.dat:224883:      for (j = 0; j < s->nelem; ++j)
../inputs/grep1.dat:224920:	if (s->elems[j].constraint
../inputs/grep1.dat:224948:	    != d->states[i].elems.elems[j].constraint
../inputs/grep1.dat:224995:	    || s->elems[j].index != d->states[i].elems.elems[j].index)
../inputs/grep1.dat:225059:	  break;
../inputs/grep1.dat:225069:      if (j == s->nelem)
../inputs/grep1.dat:225094:	return i;
../inputs/grep1.dat:225105:    }
../inputs/grep1.dat:225111:
../inputs/grep1.dat:225112:  /* We'll have to create a new state. */
../inputs/grep1.dat:225154:  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
../inputs/grep1.dat:225222:  d->states[i].hash = hash;
../inputs/grep1.dat:225250:  MALLOC(d->states[i].elems.elems, position, s->nelem);
../inputs/grep1.dat:225306:  copy(s, &d->states[i].elems);
../inputs/grep1.dat:225338:  d->states[i].newline = newline;
../inputs/grep1.dat:225372:  d->states[i].letter = letter;
../inputs/grep1.dat:225404:  d->states[i].backref = 0;
../inputs/grep1.dat:225432:  d->states[i].constraint = 0;
../inputs/grep1.dat:225463:  d->states[i].first_end = 0;
../inputs/grep1.dat:225493:  for (j = 0; j < s->nelem; ++j)
../inputs/grep1.dat:225526:    if (d->tokens[s->elems[j].index] < 0)
../inputs/grep1.dat:225568:      {
../inputs/grep1.dat:225576:	constraint = s->elems[j].constraint;
../inputs/grep1.dat:225614:	if (SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 0)
../inputs/grep1.dat:225674:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
../inputs/grep1.dat:225737:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
../inputs/grep1.dat:225800:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
../inputs/grep1.dat:225864:	  d->states[i].constraint |= constraint;
../inputs/grep1.dat:225906:	if (! d->states[i].first_end)
../inputs/grep1.dat:225937:	  d->states[i].first_end = d->tokens[s->elems[j].index];
../inputs/grep1.dat:225995:      }
../inputs/grep1.dat:226003:    else if (d->tokens[s->elems[j].index] == BACKREF)
../inputs/grep1.dat:226057:      {
../inputs/grep1.dat:226065:	d->states[i].constraint = NO_CONSTRAINT;
../inputs/grep1.dat:226107:	d->states[i].backref = 1;
../inputs/grep1.dat:226134:      }
../inputs/grep1.dat:226142:
../inputs/grep1.dat:226143:  ++d->sindex;
../inputs/grep1.dat:226158:
../inputs/grep1.dat:226159:  return i;
../inputs/grep1.dat:226171:}
../inputs/grep1.dat:226173:
../inputs/grep1.dat:226174:/* Find the epsilon closure of a set of positions.  If any position of the set
../inputs/grep1.dat:226253:   contains a symbol that matches the empty string in some context, replace
../inputs/grep1.dat:226329:   that position with the elements of its follow labeled with an appropriate
../inputs/grep1.dat:226406:   constraint.  Repeat exhaustively until no funny positions are left.
../inputs/grep1.dat:226477:   S->elems must be large enough to hold the result. */
../inputs/grep1.dat:226533:void
../inputs/grep1.dat:226538:epsclosure(s, d)
../inputs/grep1.dat:226555:     position_set *s;
../inputs/grep1.dat:226577:     struct dfa *d;
../inputs/grep1.dat:226597:{
../inputs/grep1.dat:226599:  int i, j;
../inputs/grep1.dat:226611:  int *visited;
../inputs/grep1.dat:226627:  position p, old;
../inputs/grep1.dat:226646:
../inputs/grep1.dat:226647:  MALLOC(visited, int, d->tindex);
../inputs/grep1.dat:226682:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:226716:    visited[i] = 0;
../inputs/grep1.dat:226736:
../inputs/grep1.dat:226737:  for (i = 0; i < s->nelem; ++i)
../inputs/grep1.dat:226770:    if (d->tokens[s->elems[i].index] >= NOTCHAR
../inputs/grep1.dat:226818:	&& d->tokens[s->elems[i].index] != BACKREF
../inputs/grep1.dat:226862:	&& d->tokens[s->elems[i].index] < CSET)
../inputs/grep1.dat:226903:      {
../inputs/grep1.dat:226911:	old = s->elems[i];
../inputs/grep1.dat:226931:	p.constraint = old.constraint;
../inputs/grep1.dat:226963:	delete(s->elems[i], s);
../inputs/grep1.dat:226988:	if (visited[old.index])
../inputs/grep1.dat:227013:	  {
../inputs/grep1.dat:227018:	    --i;
../inputs/grep1.dat:227028:	    continue;
../inputs/grep1.dat:227043:	  }
../inputs/grep1.dat:227048:	visited[old.index] = 1;
../inputs/grep1.dat:227073:	switch (d->tokens[old.index])
../inputs/grep1.dat:227104:	  {
../inputs/grep1.dat:227109:	  case BEGLINE:
../inputs/grep1.dat:227126:	    p.constraint &= BEGLINE_CONSTRAINT;
../inputs/grep1.dat:227167:	    break;
../inputs/grep1.dat:227179:	  case ENDLINE:
../inputs/grep1.dat:227196:	    p.constraint &= ENDLINE_CONSTRAINT;
../inputs/grep1.dat:227237:	    break;
../inputs/grep1.dat:227249:	  case BEGWORD:
../inputs/grep1.dat:227266:	    p.constraint &= BEGWORD_CONSTRAINT;
../inputs/grep1.dat:227307:	    break;
../inputs/grep1.dat:227319:	  case ENDWORD:
../inputs/grep1.dat:227336:	    p.constraint &= ENDWORD_CONSTRAINT;
../inputs/grep1.dat:227377:	    break;
../inputs/grep1.dat:227389:	  case LIMWORD:
../inputs/grep1.dat:227406:	    p.constraint &= LIMWORD_CONSTRAINT;
../inputs/grep1.dat:227447:	    break;
../inputs/grep1.dat:227459:	  case NOTLIMWORD:
../inputs/grep1.dat:227479:	    p.constraint &= NOTLIMWORD_CONSTRAINT;
../inputs/grep1.dat:227523:	    break;
../inputs/grep1.dat:227535:	  default:
../inputs/grep1.dat:227547:	    break;
../inputs/grep1.dat:227559:	  }
../inputs/grep1.dat:227564:	for (j = 0; j < d->follows[old.index].nelem; ++j)
../inputs/grep1.dat:227615:	  {
../inputs/grep1.dat:227620:	    p.index = d->follows[old.index].elems[j].index;
../inputs/grep1.dat:227673:	    insert(p, s);
../inputs/grep1.dat:227692:	  }
../inputs/grep1.dat:227697:	/* Force rescan to start at the beginning. */
../inputs/grep1.dat:227744:	i = -1;
../inputs/grep1.dat:227753:      }
../inputs/grep1.dat:227761:
../inputs/grep1.dat:227762:  free(visited);
../inputs/grep1.dat:227779:}
../inputs/grep1.dat:227781:
../inputs/grep1.dat:227782:/* Perform bottom-up analysis on the parse tree, computing various functions.
../inputs/grep1.dat:227860:   Note that at this point, we're pretending constructs like \< are real
../inputs/grep1.dat:227933:   characters rather than constraints on what can follow them.
../inputs/grep1.dat:227996:
../inputs/grep1.dat:227997:   Nullable:  A node is nullable if it is at the root of a regexp that can
../inputs/grep1.dat:228072:   match the empty string.
../inputs/grep1.dat:228099:   *  EMPTY leaves are nullable.
../inputs/grep1.dat:228132:   * No other leaf is nullable.
../inputs/grep1.dat:228164:   * A QMARK or STAR node is nullable.
../inputs/grep1.dat:228203:   * A PLUS node is nullable if its argument is nullable.
../inputs/grep1.dat:228261:   * A CAT node is nullable if both its arguments are nullable.
../inputs/grep1.dat:228325:   * An OR node is nullable if either argument is nullable.
../inputs/grep1.dat:228385:
../inputs/grep1.dat:228386:   Firstpos:  The firstpos of a node is the set of positions (nonempty leaves)
../inputs/grep1.dat:228465:   that could correspond to the first character of a string matching the
../inputs/grep1.dat:228538:   regexp rooted at the given node.
../inputs/grep1.dat:228574:   * EMPTY leaves have empty firstpos.
../inputs/grep1.dat:228613:   * The firstpos of a nonempty leaf is that leaf itself.
../inputs/grep1.dat:228671:   * The firstpos of a QMARK, STAR, or PLUS node is the firstpos of its
../inputs/grep1.dat:228743:     argument.
../inputs/grep1.dat:228758:   * The firstpos of a CAT node is the firstpos of the left argument, union
../inputs/grep1.dat:228834:     the firstpos of the right if the left argument is nullable.
../inputs/grep1.dat:228899:   * The firstpos of an OR node is the union of firstpos of each argument.
../inputs/grep1.dat:228974:
../inputs/grep1.dat:228975:   Lastpos:  The lastpos of a node is the set of positions that could
../inputs/grep1.dat:229045:   correspond to the last character of a string matching the regexp at
../inputs/grep1.dat:229116:   the given node.
../inputs/grep1.dat:229135:   * EMPTY leaves have empty lastpos.
../inputs/grep1.dat:229173:   * The lastpos of a nonempty leaf is that leaf itself.
../inputs/grep1.dat:229230:   * The lastpos of a QMARK, STAR, or PLUS node is the lastpos of its
../inputs/grep1.dat:229300:     argument.
../inputs/grep1.dat:229315:   * The lastpos of a CAT node is the lastpos of its right argument, union
../inputs/grep1.dat:229390:     the lastpos of the left if the right argument is nullable.
../inputs/grep1.dat:229454:   * The lastpos of an OR node is the union of the lastpos of each argument.
../inputs/grep1.dat:229531:
../inputs/grep1.dat:229532:   Follow:  The follow of a position is the set of positions that could
../inputs/grep1.dat:229604:   correspond to the character following a character matching the node in
../inputs/grep1.dat:229678:   a string matching the regexp.  At this point we consider special symbols
../inputs/grep1.dat:229754:   that match the empty string in some context to be just normal characters.
../inputs/grep1.dat:229831:   Later, if we find that a special symbol is in a follow set, we will
../inputs/grep1.dat:229902:   replace it with the elements of its follow, labeled with an appropriate
../inputs/grep1.dat:229977:   constraint.
../inputs/grep1.dat:229992:   * Every node in the firstpos of the argument of a STAR or PLUS node is in
../inputs/grep1.dat:230069:     the follow of every node in the lastpos.
../inputs/grep1.dat:230115:   * Every node in the firstpos of the second argument of a CAT node is in
../inputs/grep1.dat:230190:     the follow of every node in the lastpos of the first argument.
../inputs/grep1.dat:230258:
../inputs/grep1.dat:230259:   Because of the postfix representation of the parse tree, the depth-first
../inputs/grep1.dat:230335:   analysis is conveniently done by a linear scan with the aid of a stack.
../inputs/grep1.dat:230410:   Sets are stored as arrays of the elements, obeying a stack-like allocation
../inputs/grep1.dat:230488:   scheme; the number of elements in each set deeper in the stack can be
../inputs/grep1.dat:230561:   used to determine the address of a particular set's array. */
../inputs/grep1.dat:230626:void
../inputs/grep1.dat:230631:dfaanalyze(d, searchflag)
../inputs/grep1.dat:230657:     struct dfa *d;
../inputs/grep1.dat:230677:     int searchflag;
../inputs/grep1.dat:230698:{
../inputs/grep1.dat:230700:  int *nullable;		/* Nullable stack. */
../inputs/grep1.dat:230740:  int *nfirstpos;		/* Element count stack for firstpos sets. */
../inputs/grep1.dat:230804:  position *firstpos;		/* Array where firstpos elements are stored. */
../inputs/grep1.dat:230875:  int *nlastpos;		/* Element count stack for lastpos sets. */
../inputs/grep1.dat:230937:  position *lastpos;		/* Array where lastpos elements are stored. */
../inputs/grep1.dat:231006:  int *nalloc;			/* Sizes of arrays allocated to follow sets. */
../inputs/grep1.dat:231071:  position_set tmp;		/* Temporary set for merging sets. */
../inputs/grep1.dat:231130:  position_set merged;		/* Result of merging sets. */
../inputs/grep1.dat:231184:  int wants_newline;		/* True if some position wants newline info. */
../inputs/grep1.dat:231254:  int *o_nullable;
../inputs/grep1.dat:231273:  int *o_nfirst, *o_nlast;
../inputs/grep1.dat:231300:  position *o_firstpos, *o_lastpos;
../inputs/grep1.dat:231336:  int i, j;
../inputs/grep1.dat:231348:  position *pos;
../inputs/grep1.dat:231365:
../inputs/grep1.dat:231366:#ifdef DEBUG
../inputs/grep1.dat:231379:  fprintf(stderr, "dfaanalyze:\n");
../inputs/grep1.dat:231415:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:231449:    {
../inputs/grep1.dat:231455:      fprintf(stderr, " %d:", i);
../inputs/grep1.dat:231489:      prtok(d->tokens[i]);
../inputs/grep1.dat:231516:    }
../inputs/grep1.dat:231522:  putc('\n', stderr);
../inputs/grep1.dat:231544:#endif
../inputs/grep1.dat:231551:
../inputs/grep1.dat:231552:  d->searchflag = searchflag;
../inputs/grep1.dat:231582:
../inputs/grep1.dat:231583:  MALLOC(nullable, int, d->depth);
../inputs/grep1.dat:231618:  o_nullable = nullable;
../inputs/grep1.dat:231643:  MALLOC(nfirstpos, int, d->depth);
../inputs/grep1.dat:231679:  o_nfirst = nfirstpos;
../inputs/grep1.dat:231703:  MALLOC(firstpos, position, d->nleaves);
../inputs/grep1.dat:231745:  o_firstpos = firstpos, firstpos += d->nleaves;
../inputs/grep1.dat:231794:  MALLOC(nlastpos, int, d->depth);
../inputs/grep1.dat:231829:  o_nlast = nlastpos;
../inputs/grep1.dat:231851:  MALLOC(lastpos, position, d->nleaves);
../inputs/grep1.dat:231892:  o_lastpos = lastpos, lastpos += d->nleaves;
../inputs/grep1.dat:231938:  MALLOC(nalloc, int, d->tindex);
../inputs/grep1.dat:231972:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:232006:    nalloc[i] = 0;
../inputs/grep1.dat:232025:  MALLOC(merged.elems, position, d->nleaves);
../inputs/grep1.dat:232071:
../inputs/grep1.dat:232072:  CALLOC(d->follows, position_set, d->tindex);
../inputs/grep1.dat:232119:
../inputs/grep1.dat:232120:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:232154:#ifdef DEBUG
../inputs/grep1.dat:232167:    {				/* Nonsyntactic #ifdef goo... */
../inputs/grep1.dat:232209:#endif
../inputs/grep1.dat:232216:    switch (d->tokens[i])
../inputs/grep1.dat:232242:      {
../inputs/grep1.dat:232250:      case EMPTY:
../inputs/grep1.dat:232268:	/* The empty set is nullable. */
../inputs/grep1.dat:232302:	*nullable++ = 1;
../inputs/grep1.dat:232320:
../inputs/grep1.dat:232321:	/* The firstpos and lastpos of the empty leaf are both empty. */
../inputs/grep1.dat:232387:	*nfirstpos++ = *nlastpos++ = 0;
../inputs/grep1.dat:232420:	break;
../inputs/grep1.dat:232428:
../inputs/grep1.dat:232429:      case STAR:
../inputs/grep1.dat:232446:      case PLUS:
../inputs/grep1.dat:232463:	/* Every element in the firstpos of the argument is in the follow
../inputs/grep1.dat:232530:	   of every element in the lastpos. */
../inputs/grep1.dat:232570:	tmp.nelem = nfirstpos[-1];
../inputs/grep1.dat:232598:	tmp.elems = firstpos;
../inputs/grep1.dat:232621:	pos = lastpos;
../inputs/grep1.dat:232637:	for (j = 0; j < nlastpos[-1]; ++j)
../inputs/grep1.dat:232673:	  {
../inputs/grep1.dat:232678:	    merge(&tmp, &d->follows[pos[j].index], &merged);
../inputs/grep1.dat:232732:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
../inputs/grep1.dat:232800:				 nalloc[pos[j].index], merged.nelem - 1);
../inputs/grep1.dat:232846:	    copy(&merged, &d->follows[pos[j].index]);
../inputs/grep1.dat:232893:	  }
../inputs/grep1.dat:232898:
../inputs/grep1.dat:232899:      case QMARK:
../inputs/grep1.dat:232917:	/* A QMARK or STAR node is automatically nullable. */
../inputs/grep1.dat:232972:	if (d->tokens[i] != PLUS)
../inputs/grep1.dat:232999:	  nullable[-1] = 1;
../inputs/grep1.dat:233020:	break;
../inputs/grep1.dat:233028:
../inputs/grep1.dat:233029:      case CAT:
../inputs/grep1.dat:233045:	/* Every element in the firstpos of the second argument is in the
../inputs/grep1.dat:233112:	   follow of every element in the lastpos of the first argument. */
../inputs/grep1.dat:233181:	tmp.nelem = nfirstpos[-1];
../inputs/grep1.dat:233209:	tmp.elems = firstpos;
../inputs/grep1.dat:233232:	pos = lastpos + nlastpos[-1];
../inputs/grep1.dat:233263:	for (j = 0; j < nlastpos[-2]; ++j)
../inputs/grep1.dat:233299:	  {
../inputs/grep1.dat:233304:	    merge(&tmp, &d->follows[pos[j].index], &merged);
../inputs/grep1.dat:233358:	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
../inputs/grep1.dat:233426:				 nalloc[pos[j].index], merged.nelem - 1);
../inputs/grep1.dat:233472:	    copy(&merged, &d->follows[pos[j].index]);
../inputs/grep1.dat:233519:	  }
../inputs/grep1.dat:233524:
../inputs/grep1.dat:233525:	/* The firstpos of a CAT node is the firstpos of the first argument,
../inputs/grep1.dat:233595:	   union that of the second argument if the first is nullable. */
../inputs/grep1.dat:233662:	if (nullable[-2])
../inputs/grep1.dat:233681:	  nfirstpos[-2] += nfirstpos[-1];
../inputs/grep1.dat:233716:	else
../inputs/grep1.dat:233722:	  firstpos += nfirstpos[-1];
../inputs/grep1.dat:233752:	--nfirstpos;
../inputs/grep1.dat:233766:
../inputs/grep1.dat:233767:	/* The lastpos of a CAT node is the lastpos of the second argument,
../inputs/grep1.dat:233836:	   union that of the first argument if the second is nullable. */
../inputs/grep1.dat:233903:	if (nullable[-1])
../inputs/grep1.dat:233922:	  nlastpos[-2] += nlastpos[-1];
../inputs/grep1.dat:233955:	else
../inputs/grep1.dat:233961:	  {
../inputs/grep1.dat:233966:	    pos = lastpos + nlastpos[-2];
../inputs/grep1.dat:234001:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:234046:	      pos[j] = lastpos[j];
../inputs/grep1.dat:234074:	    lastpos += nlastpos[-2];
../inputs/grep1.dat:234104:	    nlastpos[-2] = nlastpos[-1];
../inputs/grep1.dat:234138:	  }
../inputs/grep1.dat:234143:	--nlastpos;
../inputs/grep1.dat:234156:
../inputs/grep1.dat:234157:	/* A CAT node is nullable if both arguments are nullable. */
../inputs/grep1.dat:234219:	nullable[-2] = nullable[-1] && nullable[-2];
../inputs/grep1.dat:234265:	--nullable;
../inputs/grep1.dat:234278:	break;
../inputs/grep1.dat:234286:
../inputs/grep1.dat:234287:      case OR:
../inputs/grep1.dat:234302:      case ORTOP:
../inputs/grep1.dat:234320:	/* The firstpos is the union of the firstpos of each argument. */
../inputs/grep1.dat:234387:	nfirstpos[-2] += nfirstpos[-1];
../inputs/grep1.dat:234420:	--nfirstpos;
../inputs/grep1.dat:234434:
../inputs/grep1.dat:234435:	/* The lastpos is the union of the lastpos of each argument. */
../inputs/grep1.dat:234500:	nlastpos[-2] += nlastpos[-1];
../inputs/grep1.dat:234531:	--nlastpos;
../inputs/grep1.dat:234544:
../inputs/grep1.dat:234545:	/* An OR node is nullable if either argument is nullable. */
../inputs/grep1.dat:234607:	nullable[-2] = nullable[-1] || nullable[-2];
../inputs/grep1.dat:234653:	--nullable;
../inputs/grep1.dat:234666:	break;
../inputs/grep1.dat:234674:
../inputs/grep1.dat:234675:      default:
../inputs/grep1.dat:234690:	/* Anything else is a nonempty position.  (Note that special
../inputs/grep1.dat:234752:	   constructs like \< are treated as nonempty strings here;
../inputs/grep1.dat:234813:	   an "epsilon closure" effectively makes them nullable later.
../inputs/grep1.dat:234877:	   Backreferences have to get a real position so we can detect
../inputs/grep1.dat:234941:	   transitions on them later.  But they are nullable. */
../inputs/grep1.dat:234999:	*nullable++ = d->tokens[i] == BACKREF;
../inputs/grep1.dat:235039:
../inputs/grep1.dat:235040:	/* This position is in its own firstpos and lastpos. */
../inputs/grep1.dat:235097:	*nfirstpos++ = *nlastpos++ = 1;
../inputs/grep1.dat:235130:	--firstpos, --lastpos;
../inputs/grep1.dat:235154:	firstpos->index = lastpos->index = i;
../inputs/grep1.dat:235193:	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
../inputs/grep1.dat:235254:
../inputs/grep1.dat:235255:	/* Allocate the follow set for this position. */
../inputs/grep1.dat:235305:	nalloc[i] = 1;
../inputs/grep1.dat:235321:	MALLOC(d->follows[i].elems, position, nalloc[i]);
../inputs/grep1.dat:235372:	break;
../inputs/grep1.dat:235380:      }
../inputs/grep1.dat:235388:#ifdef DEBUG
../inputs/grep1.dat:235401:    /* ... balance the above nonsyntactic #ifdef goo... */
../inputs/grep1.dat:235460:      fprintf(stderr, "node %d:", i);
../inputs/grep1.dat:235498:      prtok(d->tokens[i]);
../inputs/grep1.dat:235525:      putc('\n', stderr);
../inputs/grep1.dat:235551:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
../inputs/grep1.dat:235629:      fprintf(stderr, " firstpos:");
../inputs/grep1.dat:235666:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:235713:	{
../inputs/grep1.dat:235716:	  fprintf(stderr, " %d:", firstpos[j].index);
../inputs/grep1.dat:235763:	  prtok(d->tokens[firstpos[j].index]);
../inputs/grep1.dat:235803:	}
../inputs/grep1.dat:235806:      fprintf(stderr, "\n lastpos:");
../inputs/grep1.dat:235844:      for (j = nlastpos[-1] - 1; j >= 0; --j)
../inputs/grep1.dat:235890:	{
../inputs/grep1.dat:235893:	  fprintf(stderr, " %d:", lastpos[j].index);
../inputs/grep1.dat:235939:	  prtok(d->tokens[lastpos[j].index]);
../inputs/grep1.dat:235978:	}
../inputs/grep1.dat:235981:      putc('\n', stderr);
../inputs/grep1.dat:236007:    }
../inputs/grep1.dat:236013:#endif
../inputs/grep1.dat:236020:
../inputs/grep1.dat:236021:  /* For each follow set that is the follow set of a real position, replace
../inputs/grep1.dat:236097:     it with its epsilon closure. */
../inputs/grep1.dat:236134:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:236168:    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
../inputs/grep1.dat:236226:	|| d->tokens[i] >= CSET)
../inputs/grep1.dat:236252:      {
../inputs/grep1.dat:236260:#ifdef DEBUG
../inputs/grep1.dat:236273:	fprintf(stderr, "follows(%d:", i);
../inputs/grep1.dat:236309:	prtok(d->tokens[i]);
../inputs/grep1.dat:236331:	fprintf(stderr, "):");
../inputs/grep1.dat:236355:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
../inputs/grep1.dat:236403:	  {
../inputs/grep1.dat:236408:	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
../inputs/grep1.dat:236468:	    prtok(d->tokens[d->follows[i].elems[j].index]);
../inputs/grep1.dat:236521:	  }
../inputs/grep1.dat:236526:	putc('\n', stderr);
../inputs/grep1.dat:236547:#endif
../inputs/grep1.dat:236554:	copy(&d->follows[i], &merged);
../inputs/grep1.dat:236586:	epsclosure(&merged, d);
../inputs/grep1.dat:236611:	if (d->follows[i].nelem < merged.nelem)
../inputs/grep1.dat:236652:	  REALLOC(d->follows[i].elems, position, merged.nelem);
../inputs/grep1.dat:236709:	copy(&merged, &d->follows[i]);
../inputs/grep1.dat:236741:      }
../inputs/grep1.dat:236749:
../inputs/grep1.dat:236750:  /* Get the epsilon closure of the firstpos of the regexp.  The result will
../inputs/grep1.dat:236827:     be the set of positions of state 0. */
../inputs/grep1.dat:236871:  merged.nelem = 0;
../inputs/grep1.dat:236891:  for (i = 0; i < nfirstpos[-1]; ++i)
../inputs/grep1.dat:236929:    insert(firstpos[i], &merged);
../inputs/grep1.dat:236963:  epsclosure(&merged, d);
../inputs/grep1.dat:236989:
../inputs/grep1.dat:236990:  /* Check if any of the positions of state 0 will want newline context. */
../inputs/grep1.dat:237066:  wants_newline = 0;
../inputs/grep1.dat:237087:  for (i = 0; i < merged.nelem; ++i)
../inputs/grep1.dat:237124:    if (PREV_NEWLINE_DEPENDENT(merged.elems[i].constraint))
../inputs/grep1.dat:237184:      wants_newline = 1;
../inputs/grep1.dat:237209:
../inputs/grep1.dat:237210:  /* Build the initial state. */
../inputs/grep1.dat:237243:  d->salloc = 1;
../inputs/grep1.dat:237260:  d->sindex = 0;
../inputs/grep1.dat:237277:  MALLOC(d->states, dfa_state, d->salloc);
../inputs/grep1.dat:237320:  state_index(d, &merged, wants_newline, 0);
../inputs/grep1.dat:237365:
../inputs/grep1.dat:237366:  free(o_nullable);
../inputs/grep1.dat:237386:  free(o_nfirst);
../inputs/grep1.dat:237404:  free(o_firstpos);
../inputs/grep1.dat:237424:  free(o_nlast);
../inputs/grep1.dat:237441:  free(o_lastpos);
../inputs/grep1.dat:237460:  free(nalloc);
../inputs/grep1.dat:237476:  free(merged.elems);
../inputs/grep1.dat:237498:}
../inputs/grep1.dat:237500:
../inputs/grep1.dat:237501:/* Find, for each character, the transition out of state s of d, and store
../inputs/grep1.dat:237576:   it in the appropriate slot of trans.
../inputs/grep1.dat:237616:
../inputs/grep1.dat:237617:   We divide the positions of s into groups (positions can appear in more
../inputs/grep1.dat:237691:   than one group).  Each group is labeled with a set of characters that
../inputs/grep1.dat:237764:   every position in the group matches (taking into account, if necessary,
../inputs/grep1.dat:237839:   preceding context information of s).  For each group, find the union
../inputs/grep1.dat:237911:   of the its elements' follows.  This set is the set of positions of the
../inputs/grep1.dat:237985:   new state.  For each character in the group's label, set the transition
../inputs/grep1.dat:238060:   on this character to be to a state corresponding to the set's positions,
../inputs/grep1.dat:238136:   and its associated backward context information, if necessary.
../inputs/grep1.dat:238202:
../inputs/grep1.dat:238280:   0 in every state.
../inputs/grep1.dat:238301:
../inputs/grep1.dat:238302:   The collection of groups is constructed by building an equivalence-class
../inputs/grep1.dat:238378:   partition of the positions of s.
../inputs/grep1.dat:238414:
../inputs/grep1.dat:238415:   For each position, find the set of characters C that it matches.  Eliminate
../inputs/grep1.dat:238494:   any characters from C that fail on grounds of backward context.
../inputs/grep1.dat:238561:
../inputs/grep1.dat:238562:   Search through the groups, looking for a group whose label L has nonempty
../inputs/grep1.dat:238639:   intersection with C.  If L - C is nonempty, create a new group labeled
../inputs/grep1.dat:238713:   L - C and having the same positions as the current group, and set L to
../inputs/grep1.dat:238787:   the intersection of L and C.  Insert the position in this group, set
../inputs/grep1.dat:238859:   C = C - L, and resume scanning.
../inputs/grep1.dat:238894:
../inputs/grep1.dat:238895:   If after comparing with every group there are characters remaining in C,
../inputs/grep1.dat:238971:   create a new group labeled with the characters of C and insert this
../inputs/grep1.dat:239042:   position in that group. */
../inputs/grep1.dat:239072:void
../inputs/grep1.dat:239077:dfastate(s, d, trans)
../inputs/grep1.dat:239099:     int s;
../inputs/grep1.dat:239111:     struct dfa *d;
../inputs/grep1.dat:239131:     int trans[];
../inputs/grep1.dat:239149:{
../inputs/grep1.dat:239151:  position_set grps[NOTCHAR];	/* As many as will ever be needed. */
../inputs/grep1.dat:239219:  charclass labels[NOTCHAR];	/* Labels corresponding to the groups. */
../inputs/grep1.dat:239290:  int ngrps = 0;		/* Number of groups actually used. */
../inputs/grep1.dat:239346:  position pos;			/* Current position being considered. */
../inputs/grep1.dat:239405:  charclass matches;		/* Set of matching characters. */
../inputs/grep1.dat:239461:  int matchesf;			/* True if matches is nonempty. */
../inputs/grep1.dat:239514:  charclass intersect;		/* Intersection with some label set. */
../inputs/grep1.dat:239578:  int intersectf;		/* True if intersect is nonempty. */
../inputs/grep1.dat:239634:  charclass leftovers;		/* Stuff in the label that didn't match. */
../inputs/grep1.dat:239702:  int leftoversf;		/* True if leftovers is nonempty. */
../inputs/grep1.dat:239758:  static charclass letters;	/* Set of characters considered letters. */
../inputs/grep1.dat:239830:  static charclass newline;	/* Set of characters that aren't newline. */
../inputs/grep1.dat:239903:  position_set follows;		/* Union of the follows of some group. */
../inputs/grep1.dat:239970:  position_set tmp;		/* Temporary space for merging sets. */
../inputs/grep1.dat:240031:  int state;			/* New state. */
../inputs/grep1.dat:240063:  int wants_newline;		/* New state wants to know newline context. */
../inputs/grep1.dat:240132:  int state_newline;		/* New state on a newline transition. */
../inputs/grep1.dat:240195:  int wants_letter;		/* New state wants to know letter context. */
../inputs/grep1.dat:240262:  int state_letter;		/* New state on a letter transition. */
../inputs/grep1.dat:240323:  static initialized;		/* Flag for static initialization. */
../inputs/grep1.dat:240384:  int i, j, k;
../inputs/grep1.dat:240399:
../inputs/grep1.dat:240400:  /* Initialize the set of letters, if necessary. */
../inputs/grep1.dat:240453:  if (! initialized)
../inputs/grep1.dat:240474:    {
../inputs/grep1.dat:240480:      initialized = 1;
../inputs/grep1.dat:240503:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:240539:	if (ISALNUM(i))
../inputs/grep1.dat:240556:	  setbit(i, letters);
../inputs/grep1.dat:240579:      setbit('\n', newline);
../inputs/grep1.dat:240608:    }
../inputs/grep1.dat:240614:
../inputs/grep1.dat:240615:  zeroset(matches);
../inputs/grep1.dat:240635:
../inputs/grep1.dat:240636:  for (i = 0; i < d->states[s].elems.nelem; ++i)
../inputs/grep1.dat:240685:    {
../inputs/grep1.dat:240691:      pos = d->states[s].elems.elems[i];
../inputs/grep1.dat:240732:      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
../inputs/grep1.dat:240803:	setbit(d->tokens[pos.index], matches);
../inputs/grep1.dat:240843:      else if (d->tokens[pos.index] >= CSET)
../inputs/grep1.dat:240888:	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
../inputs/grep1.dat:240952:      else
../inputs/grep1.dat:240963:	continue;
../inputs/grep1.dat:240974:
../inputs/grep1.dat:240975:      /* Some characters may need to be eliminated from matches because
../inputs/grep1.dat:241047:	 they fail in the current context. */
../inputs/grep1.dat:241086:      if (pos.constraint != 0xFF)
../inputs/grep1.dat:241120:	{
../inputs/grep1.dat:241123:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
../inputs/grep1.dat:241172:					 d->states[s].newline, 1))
../inputs/grep1.dat:241204:	    clrbit('\n', matches);
../inputs/grep1.dat:241232:	  if (! MATCHES_NEWLINE_CONTEXT(pos.constraint,
../inputs/grep1.dat:241281:					 d->states[s].newline, 0))
../inputs/grep1.dat:241313:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:241355:	      matches[j] &= newline[j];
../inputs/grep1.dat:241388:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
../inputs/grep1.dat:241436:					d->states[s].letter, 1))
../inputs/grep1.dat:241466:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:241508:	      matches[j] &= ~letters[j];
../inputs/grep1.dat:241542:	  if (! MATCHES_LETTER_CONTEXT(pos.constraint,
../inputs/grep1.dat:241590:					d->states[s].letter, 0))
../inputs/grep1.dat:241620:	    for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:241662:	      matches[j] &= letters[j];
../inputs/grep1.dat:241695:
../inputs/grep1.dat:241696:	  /* If there are no characters left, there's no point in going on. */
../inputs/grep1.dat:241768:	  for (j = 0; j < CHARCLASS_INTS && !matches[j]; ++j)
../inputs/grep1.dat:241823:	    ;
../inputs/grep1.dat:241830:	  if (j == CHARCLASS_INTS)
../inputs/grep1.dat:241858:	    continue;
../inputs/grep1.dat:241873:	}
../inputs/grep1.dat:241876:
../inputs/grep1.dat:241877:      for (j = 0; j < ngrps; ++j)
../inputs/grep1.dat:241911:	{
../inputs/grep1.dat:241914:	  /* If matches contains a single character only, and the current
../inputs/grep1.dat:241981:	     group's label doesn't contain that character, go on to the
../inputs/grep1.dat:242046:	     next group. */
../inputs/grep1.dat:242067:	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
../inputs/grep1.dat:242134:	      && !tstbit(d->tokens[pos.index], labels[j]))
../inputs/grep1.dat:242186:	    continue;
../inputs/grep1.dat:242201:
../inputs/grep1.dat:242202:	  /* Check if this group's label has a nonempty intersection with
../inputs/grep1.dat:242269:	     matches. */
../inputs/grep1.dat:242287:	  intersectf = 0;
../inputs/grep1.dat:242306:	  for (k = 0; k < CHARCLASS_INTS; ++k)
../inputs/grep1.dat:242346:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
../inputs/grep1.dat:242416:	  if (! intersectf)
../inputs/grep1.dat:242437:	    continue;
../inputs/grep1.dat:242452:
../inputs/grep1.dat:242453:	  /* It does; now find the set differences both ways. */
../inputs/grep1.dat:242511:	  leftoversf = matchesf = 0;
../inputs/grep1.dat:242541:	  for (k = 0; k < CHARCLASS_INTS; ++k)
../inputs/grep1.dat:242581:	    {
../inputs/grep1.dat:242588:	      /* Even an optimizing compiler can't know this for sure. */
../inputs/grep1.dat:242655:	      int match = matches[k], label = labels[j][k];
../inputs/grep1.dat:242708:
../inputs/grep1.dat:242709:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
../inputs/grep1.dat:242770:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
../inputs/grep1.dat:242827:	    }
../inputs/grep1.dat:242834:
../inputs/grep1.dat:242835:	  /* If there were leftovers, create a new group labeled with them. */
../inputs/grep1.dat:242907:	  if (leftoversf)
../inputs/grep1.dat:242926:	    {
../inputs/grep1.dat:242933:	      copyset(leftovers, labels[ngrps]);
../inputs/grep1.dat:242975:	      copyset(intersect, labels[j]);
../inputs/grep1.dat:243013:	      MALLOC(grps[ngrps].elems, position, d->nleaves);
../inputs/grep1.dat:243069:	      copy(&grps[j], &grps[ngrps]);
../inputs/grep1.dat:243106:	      ++ngrps;
../inputs/grep1.dat:243122:	    }
../inputs/grep1.dat:243129:
../inputs/grep1.dat:243130:	  /* Put the position in the current group.  Note that there is no
../inputs/grep1.dat:243198:	     reason to call insert() here. */
../inputs/grep1.dat:243237:	  grps[j].elems[grps[j].nelem++] = pos;
../inputs/grep1.dat:243278:
../inputs/grep1.dat:243279:	  /* If every character matching the current position has been
../inputs/grep1.dat:243343:	     accounted for, we're done. */
../inputs/grep1.dat:243379:	  if (! matchesf)
../inputs/grep1.dat:243398:	    break;
../inputs/grep1.dat:243410:	}
../inputs/grep1.dat:243413:
../inputs/grep1.dat:243414:      /* If we've passed the last group, and there are still characters
../inputs/grep1.dat:243486:	 unaccounted for, then we'll have to create a new group. */
../inputs/grep1.dat:243547:      if (j == ngrps)
../inputs/grep1.dat:243569:	{
../inputs/grep1.dat:243572:	  copyset(matches, labels[ngrps]);
../inputs/grep1.dat:243608:	  zeroset(matches);
../inputs/grep1.dat:243629:	  MALLOC(grps[ngrps].elems, position, d->nleaves);
../inputs/grep1.dat:243681:	  grps[ngrps].nelem = 1;
../inputs/grep1.dat:243707:	  grps[ngrps].elems[0] = pos;
../inputs/grep1.dat:243738:	  ++ngrps;
../inputs/grep1.dat:243750:	}
../inputs/grep1.dat:243753:    }
../inputs/grep1.dat:243759:
../inputs/grep1.dat:243760:  MALLOC(follows.elems, position, d->nleaves);
../inputs/grep1.dat:243807:  MALLOC(tmp.elems, position, d->nleaves);
../inputs/grep1.dat:243850:
../inputs/grep1.dat:243851:  /* If we are a searching matcher, the default transition is to a state
../inputs/grep1.dat:243924:     containing the positions of state 0, otherwise the default transition
../inputs/grep1.dat:243999:     is to fail miserably. */
../inputs/grep1.dat:244029:  if (d->searchflag)
../inputs/grep1.dat:244050:    {
../inputs/grep1.dat:244056:      wants_newline = 0;
../inputs/grep1.dat:244081:      wants_letter = 0;
../inputs/grep1.dat:244105:      for (i = 0; i < d->states[0].elems.nelem; ++i)
../inputs/grep1.dat:244158:	{
../inputs/grep1.dat:244161:	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
../inputs/grep1.dat:244232:	    wants_newline = 1;
../inputs/grep1.dat:244256:	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
../inputs/grep1.dat:244326:	    wants_letter = 1;
../inputs/grep1.dat:244349:	}
../inputs/grep1.dat:244352:      copy(&d->states[0].elems, &follows);
../inputs/grep1.dat:244395:      state = state_index(d, &follows, 0, 0);
../inputs/grep1.dat:244441:      if (wants_newline)
../inputs/grep1.dat:244466:	state_newline = state_index(d, &follows, 1, 0);
../inputs/grep1.dat:244515:      else
../inputs/grep1.dat:244526:	state_newline = state;
../inputs/grep1.dat:244550:      if (wants_letter)
../inputs/grep1.dat:244574:	state_letter = state_index(d, &follows, 0, 1);
../inputs/grep1.dat:244622:      else
../inputs/grep1.dat:244633:	state_letter = state;
../inputs/grep1.dat:244656:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:244692:	if (i == '\n')
../inputs/grep1.dat:244708:	  trans[i] = state_newline;
../inputs/grep1.dat:244737:	else if (ISALNUM(i))
../inputs/grep1.dat:244759:	  trans[i] = state_letter;
../inputs/grep1.dat:244787:	else
../inputs/grep1.dat:244793:	  trans[i] = state;
../inputs/grep1.dat:244814:    }
../inputs/grep1.dat:244820:  else
../inputs/grep1.dat:244827:    for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:244861:      trans[i] = -1;
../inputs/grep1.dat:244882:
../inputs/grep1.dat:244883:  for (i = 0; i < ngrps; ++i)
../inputs/grep1.dat:244913:    {
../inputs/grep1.dat:244919:      follows.nelem = 0;
../inputs/grep1.dat:244944:
../inputs/grep1.dat:244945:      /* Find the union of the follows of the positions of the group.
../inputs/grep1.dat:245015:	 This is a hideously inefficient loop.  Fix it someday. */
../inputs/grep1.dat:245075:      for (j = 0; j < grps[i].nelem; ++j)
../inputs/grep1.dat:245117:	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
../inputs/grep1.dat:245181:	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
../inputs/grep1.dat:245247:
../inputs/grep1.dat:245248:      /* If we are building a searching matcher, throw in the positions
../inputs/grep1.dat:245320:	 of state 0 as well. */
../inputs/grep1.dat:245345:      if (d->searchflag)
../inputs/grep1.dat:245370:	for (j = 0; j < d->states[0].elems.nelem; ++j)
../inputs/grep1.dat:245418:	  insert(d->states[0].elems.elems[j], &follows);
../inputs/grep1.dat:245468:
../inputs/grep1.dat:245469:      /* Find out if the new state will want any context information. */
../inputs/grep1.dat:245542:      wants_newline = 0;
../inputs/grep1.dat:245567:      if (tstbit('\n', labels[i]))
../inputs/grep1.dat:245602:	for (j = 0; j < follows.nelem; ++j)
../inputs/grep1.dat:245639:	  if (PREV_NEWLINE_DEPENDENT(follows.elems[j].constraint))
../inputs/grep1.dat:245699:	    wants_newline = 1;
../inputs/grep1.dat:245723:
../inputs/grep1.dat:245724:      wants_letter = 0;
../inputs/grep1.dat:245748:      for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:245791:	if (labels[i][j] & letters[j])
../inputs/grep1.dat:245823:	  break;
../inputs/grep1.dat:245833:      if (j < CHARCLASS_INTS)
../inputs/grep1.dat:245863:	for (j = 0; j < follows.nelem; ++j)
../inputs/grep1.dat:245900:	  if (PREV_LETTER_DEPENDENT(follows.elems[j].constraint))
../inputs/grep1.dat:245959:	    wants_letter = 1;
../inputs/grep1.dat:245982:
../inputs/grep1.dat:245983:      /* Find the state(s) corresponding to the union of the follows. */
../inputs/grep1.dat:246056:      state = state_index(d, &follows, 0, 0);
../inputs/grep1.dat:246102:      if (wants_newline)
../inputs/grep1.dat:246127:	state_newline = state_index(d, &follows, 1, 0);
../inputs/grep1.dat:246176:      else
../inputs/grep1.dat:246187:	state_newline = state;
../inputs/grep1.dat:246211:      if (wants_letter)
../inputs/grep1.dat:246235:	state_letter = state_index(d, &follows, 0, 1);
../inputs/grep1.dat:246283:      else
../inputs/grep1.dat:246294:	state_letter = state;
../inputs/grep1.dat:246317:
../inputs/grep1.dat:246318:      /* Set the transitions for each character in the current label. */
../inputs/grep1.dat:246391:      for (j = 0; j < CHARCLASS_INTS; ++j)
../inputs/grep1.dat:246434:	for (k = 0; k < INTBITS; ++k)
../inputs/grep1.dat:246465:	  if (labels[i][j] & 1 << k)
../inputs/grep1.dat:246495:	    {
../inputs/grep1.dat:246502:	      int c = j * INTBITS + k;
../inputs/grep1.dat:246534:
../inputs/grep1.dat:246535:	      if (c == '\n')
../inputs/grep1.dat:246557:		trans[c] = state_newline;
../inputs/grep1.dat:246585:	      else if (ISALNUM(c))
../inputs/grep1.dat:246613:		trans[c] = state_letter;
../inputs/grep1.dat:246640:	      else if (c < NOTCHAR)
../inputs/grep1.dat:246669:		trans[c] = state;
../inputs/grep1.dat:246689:	    }
../inputs/grep1.dat:246696:    }
../inputs/grep1.dat:246702:
../inputs/grep1.dat:246703:  for (i = 0; i < ngrps; ++i)
../inputs/grep1.dat:246733:    free(grps[i].elems);
../inputs/grep1.dat:246758:  free(follows.elems);
../inputs/grep1.dat:246781:  free(tmp.elems);
../inputs/grep1.dat:246800:}
../inputs/grep1.dat:246802:
../inputs/grep1.dat:246803:/* Some routines for manipulating a compiled dfa's transition tables.
../inputs/grep1.dat:246873:   Each state may or may not have a transition table; if it does, and it
../inputs/grep1.dat:246946:   is a non-accepting state, then d->trans[state] points to its table.
../inputs/grep1.dat:247017:   If it is an accepting state then d->fails[state] points to its table.
../inputs/grep1.dat:247090:   If it has no table at all, then d->trans[state] is NULL.
../inputs/grep1.dat:247150:   TODO: Improve this comment, get rid of the unnecessary redundancy. */
../inputs/grep1.dat:247223:
../inputs/grep1.dat:247224:static void
../inputs/grep1.dat:247236:build_state(s, d)
../inputs/grep1.dat:247254:     int s;
../inputs/grep1.dat:247266:     struct dfa *d;
../inputs/grep1.dat:247286:{
../inputs/grep1.dat:247288:  int *trans;			/* The new transition table. */
../inputs/grep1.dat:247336:  int i;
../inputs/grep1.dat:247345:
../inputs/grep1.dat:247346:  /* Set an upper limit on the number of transition tables that will ever
../inputs/grep1.dat:247420:     exist at once.  1024 is arbitrary.  The idea is that the frequently
../inputs/grep1.dat:247493:     used transition tables will be quickly rebuilt, whereas the ones that
../inputs/grep1.dat:247568:     were only needed once or twice will be cleared away. */
../inputs/grep1.dat:247629:  if (d->trcount >= 1024)
../inputs/grep1.dat:247655:    {
../inputs/grep1.dat:247661:      for (i = 0; i < d->tralloc; ++i)
../inputs/grep1.dat:247700:	if (d->trans[i])
../inputs/grep1.dat:247718:	  {
../inputs/grep1.dat:247723:	    free((ptr_t) d->trans[i]);
../inputs/grep1.dat:247755:	    d->trans[i] = NULL;
../inputs/grep1.dat:247780:	  }
../inputs/grep1.dat:247785:	else if (d->fails[i])
../inputs/grep1.dat:247808:	  {
../inputs/grep1.dat:247813:	    free((ptr_t) d->fails[i]);
../inputs/grep1.dat:247845:	    d->fails[i] = NULL;
../inputs/grep1.dat:247870:	  }
../inputs/grep1.dat:247875:      d->trcount = 0;
../inputs/grep1.dat:247897:    }
../inputs/grep1.dat:247903:
../inputs/grep1.dat:247904:  ++d->trcount;
../inputs/grep1.dat:247920:
../inputs/grep1.dat:247921:  /* Set up the success bits for this state. */
../inputs/grep1.dat:247969:  d->success[s] = 0;
../inputs/grep1.dat:247990:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
../inputs/grep1.dat:248064:      s, *d))
../inputs/grep1.dat:248078:    d->success[s] |= 4;
../inputs/grep1.dat:248102:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
../inputs/grep1.dat:248176:      s, *d))
../inputs/grep1.dat:248190:    d->success[s] |= 2;
../inputs/grep1.dat:248214:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
../inputs/grep1.dat:248288:      s, *d))
../inputs/grep1.dat:248302:    d->success[s] |= 1;
../inputs/grep1.dat:248326:
../inputs/grep1.dat:248327:  MALLOC(trans, int, NOTCHAR);
../inputs/grep1.dat:248358:  dfastate(s, d, trans);
../inputs/grep1.dat:248383:
../inputs/grep1.dat:248384:  /* Now go through the new transition table, and make sure that the trans
../inputs/grep1.dat:248459:     and fail arrays are allocated large enough to hold a pointer for the
../inputs/grep1.dat:248533:     largest state mentioned in the table. */
../inputs/grep1.dat:248579:  for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:248611:    if (trans[i] >= d->tralloc)
../inputs/grep1.dat:248643:      {
../inputs/grep1.dat:248651:	int oldalloc = d->tralloc;
../inputs/grep1.dat:248679:
../inputs/grep1.dat:248680:	while (trans[i] >= d->tralloc)
../inputs/grep1.dat:248712:	  d->tralloc *= 2;
../inputs/grep1.dat:248732:	REALLOC(d->realtrans, int *, d->tralloc + 1);
../inputs/grep1.dat:248779:	d->trans = d->realtrans + 1;
../inputs/grep1.dat:248809:	REALLOC(d->fails, int *, d->tralloc);
../inputs/grep1.dat:248848:	REALLOC(d->success, int, d->tralloc);
../inputs/grep1.dat:248887:	REALLOC(d->newlines, int, d->tralloc);
../inputs/grep1.dat:248927:	while (oldalloc < d->tralloc)
../inputs/grep1.dat:248958:	  {
../inputs/grep1.dat:248963:	    d->trans[oldalloc] = NULL;
../inputs/grep1.dat:248995:	    d->fails[oldalloc++] = NULL;
../inputs/grep1.dat:249029:	  }
../inputs/grep1.dat:249034:      }
../inputs/grep1.dat:249042:
../inputs/grep1.dat:249043:  /* Keep the newline transition in a special place so we can use it as
../inputs/grep1.dat:249115:     a sentinel. */
../inputs/grep1.dat:249135:  d->newlines[s] = trans['\n'];
../inputs/grep1.dat:249167:  trans['\n'] = -1;
../inputs/grep1.dat:249187:
../inputs/grep1.dat:249188:  if (ACCEPTING(s, *d))
../inputs/grep1.dat:249212:    d->fails[s] = trans;
../inputs/grep1.dat:249237:  else
../inputs/grep1.dat:249244:    d->trans[s] = trans;
../inputs/grep1.dat:249269:}
../inputs/grep1.dat:249271:
../inputs/grep1.dat:249272:static void
../inputs/grep1.dat:249284:build_state_zero(d)
../inputs/grep1.dat:249304:     struct dfa *d;
../inputs/grep1.dat:249324:{
../inputs/grep1.dat:249326:  d->tralloc = 1;
../inputs/grep1.dat:249344:  d->trcount = 0;
../inputs/grep1.dat:249362:  CALLOC(d->realtrans, int *, d->tralloc + 1);
../inputs/grep1.dat:249409:  d->trans = d->realtrans + 1;
../inputs/grep1.dat:249440:  CALLOC(d->fails, int *, d->tralloc);
../inputs/grep1.dat:249479:  MALLOC(d->success, int, d->tralloc);
../inputs/grep1.dat:249518:  MALLOC(d->newlines, int, d->tralloc);
../inputs/grep1.dat:249558:  build_state(0, d);
../inputs/grep1.dat:249579:}
../inputs/grep1.dat:249581:
../inputs/grep1.dat:249582:/* Search through a buffer looking for a match to the given struct dfa.
../inputs/grep1.dat:249654:   Find the first occurrence of a string matching the regexp in the buffer,
../inputs/grep1.dat:249730:   and the shortest possible version thereof.  Return a pointer to the first
../inputs/grep1.dat:249807:   character after the match, or NULL if none is found.  Begin points to
../inputs/grep1.dat:249880:   the beginning of the buffer, and end points to the first character after
../inputs/grep1.dat:249956:   its end.  We store a newline in *end to act as a sentinel, so end had
../inputs/grep1.dat:250029:   better point somewhere valid.  Newline is a flag indicating whether to
../inputs/grep1.dat:250103:   allow newlines to be in the matching string.  If count is non-
../inputs/grep1.dat:250169:   NULL it points to a place we're supposed to increment every time we
../inputs/grep1.dat:250240:   see a newline.  Finally, if backref is non-NULL it points to a place
../inputs/grep1.dat:250312:   where we're supposed to store a 1 if backreferencing happened and the
../inputs/grep1.dat:250385:   match needs to be verified by a backtracking matcher.  Otherwise
../inputs/grep1.dat:250453:   we store a 0 in *backref. */
../inputs/grep1.dat:250485:char *
../inputs/grep1.dat:250492:dfaexec(d, begin, end, newline, count, backref)
../inputs/grep1.dat:250540:     struct dfa *d;
../inputs/grep1.dat:250560:     char *begin;
../inputs/grep1.dat:250578:     char *end;
../inputs/grep1.dat:250594:     int newline;
../inputs/grep1.dat:250612:     int *count;
../inputs/grep1.dat:250629:     int *backref;
../inputs/grep1.dat:250648:{
../inputs/grep1.dat:250650:  register s, s1, tmp;		/* Current state. */
../inputs/grep1.dat:250695:  register unsigned char *p;	/* Current input character. */
../inputs/grep1.dat:250755:  register **trans, *t;		/* Copy of d->trans so it can be optimized
../inputs/grep1.dat:250823:				   into a register. */
../inputs/grep1.dat:250850:  static sbit[NOTCHAR];	/* Table for anding with d->success. */
../inputs/grep1.dat:250914:  static sbit_init;
../inputs/grep1.dat:250934:
../inputs/grep1.dat:250935:  if (! sbit_init)
../inputs/grep1.dat:250954:    {
../inputs/grep1.dat:250960:      int i;
../inputs/grep1.dat:250973:
../inputs/grep1.dat:250974:      sbit_init = 1;
../inputs/grep1.dat:250995:      for (i = 0; i < NOTCHAR; ++i)
../inputs/grep1.dat:251031:	if (i == '\n')
../inputs/grep1.dat:251047:	  sbit[i] = 4;
../inputs/grep1.dat:251063:	else if (ISALNUM(i))
../inputs/grep1.dat:251085:	  sbit[i] = 2;
../inputs/grep1.dat:251101:	else
../inputs/grep1.dat:251107:	  sbit[i] = 1;
../inputs/grep1.dat:251123:    }
../inputs/grep1.dat:251129:
../inputs/grep1.dat:251130:  if (! d->tralloc)
../inputs/grep1.dat:251150:    build_state_zero(d);
../inputs/grep1.dat:251175:
../inputs/grep1.dat:251176:  s = s1 = 0;
../inputs/grep1.dat:251190:  p = (unsigned char *) begin;
../inputs/grep1.dat:251221:  trans = d->trans;
../inputs/grep1.dat:251241:  *end = '\n';
../inputs/grep1.dat:251256:
../inputs/grep1.dat:251257:  for (;;)
../inputs/grep1.dat:251268:    {
../inputs/grep1.dat:251274:      /* The dreaded inner loop. */
../inputs/grep1.dat:251310:      if ((t = trans[s]) != 0)
../inputs/grep1.dat:251341:	do
../inputs/grep1.dat:251345:	  {
../inputs/grep1.dat:251350:	    s1 = t[*p++];
../inputs/grep1.dat:251369:	    if (! (t = trans[s1]))
../inputs/grep1.dat:251397:	      goto last_was_s;
../inputs/grep1.dat:251421:	    s = t[*p++];
../inputs/grep1.dat:251439:	  }
../inputs/grep1.dat:251444:        while ((t = trans[s]) != 0);
../inputs/grep1.dat:251481:      goto last_was_s1;
../inputs/grep1.dat:251505:    last_was_s:
../inputs/grep1.dat:251521:      tmp = s, s = s1, s1 = tmp;
../inputs/grep1.dat:251554:    last_was_s1:
../inputs/grep1.dat:251571:
../inputs/grep1.dat:251572:      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
../inputs/grep1.dat:251635:	{
../inputs/grep1.dat:251638:	  if (d->success[s] & sbit[*p])
../inputs/grep1.dat:251671:	    {
../inputs/grep1.dat:251678:	      if (backref)
../inputs/grep1.dat:251698:		if (d->states[s].backref)
../inputs/grep1.dat:251726:		  *backref = 1;
../inputs/grep1.dat:251744:		else
../inputs/grep1.dat:251751:		  *backref = 0;
../inputs/grep1.dat:251769:	      return (char *) p;
../inputs/grep1.dat:251795:	    }
../inputs/grep1.dat:251802:
../inputs/grep1.dat:251803:	  s1 = s;
../inputs/grep1.dat:251814:	  s = d->fails[s][*p++];
../inputs/grep1.dat:251840:	  continue;
../inputs/grep1.dat:251853:	}
../inputs/grep1.dat:251856:
../inputs/grep1.dat:251857:      /* If the previous character was a newline, count it. */
../inputs/grep1.dat:251920:      if (count && (char *) p <= end && p[-1] == '\n')
../inputs/grep1.dat:251975:	++*count;
../inputs/grep1.dat:251986:
../inputs/grep1.dat:251987:      /* Check if we've run off the end of the buffer. */
../inputs/grep1.dat:252045:      if ((char *) p > end)
../inputs/grep1.dat:252073:	return NULL;
../inputs/grep1.dat:252087:
../inputs/grep1.dat:252088:      if (s >= 0)
../inputs/grep1.dat:252106:	{
../inputs/grep1.dat:252109:	  build_state(s, d);
../inputs/grep1.dat:252131:	  trans = d->trans;
../inputs/grep1.dat:252152:	  continue;
../inputs/grep1.dat:252165:	}
../inputs/grep1.dat:252168:
../inputs/grep1.dat:252169:      if (p[-1] == '\n' && newline)
../inputs/grep1.dat:252205:	{
../inputs/grep1.dat:252208:	  s = d->newlines[s1];
../inputs/grep1.dat:252232:	  continue;
../inputs/grep1.dat:252245:	}
../inputs/grep1.dat:252248:
../inputs/grep1.dat:252249:      s = 0;
../inputs/grep1.dat:252262:    }
../inputs/grep1.dat:252268:}
../inputs/grep1.dat:252270:
../inputs/grep1.dat:252271:/* Initialize the components of a dfa that the other routines don't
../inputs/grep1.dat:252339:   initialize for themselves. */
../inputs/grep1.dat:252372:void
../inputs/grep1.dat:252377:dfainit(d)
../inputs/grep1.dat:252388:     struct dfa *d;
../inputs/grep1.dat:252408:{
../inputs/grep1.dat:252410:  d->calloc = 1;
../inputs/grep1.dat:252427:  MALLOC(d->charclasses, charclass, d->calloc);
../inputs/grep1.dat:252475:  d->cindex = 0;
../inputs/grep1.dat:252492:
../inputs/grep1.dat:252493:  d->talloc = 1;
../inputs/grep1.dat:252510:  MALLOC(d->tokens, token, d->talloc);
../inputs/grep1.dat:252549:  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
../inputs/grep1.dat:252604:
../inputs/grep1.dat:252605:  d->searchflag = 0;
../inputs/grep1.dat:252626:  d->tralloc = 0;
../inputs/grep1.dat:252644:
../inputs/grep1.dat:252645:  d->musts = 0;
../inputs/grep1.dat:252661:}
../inputs/grep1.dat:252663:
../inputs/grep1.dat:252664:/* Parse and analyze a single string of the given length. */
../inputs/grep1.dat:252725:void
../inputs/grep1.dat:252730:dfacomp(s, len, d, searchflag)
../inputs/grep1.dat:252761:     char *s;
../inputs/grep1.dat:252775:     size_t len;
../inputs/grep1.dat:252792:     struct dfa *d;
../inputs/grep1.dat:252812:     int searchflag;
../inputs/grep1.dat:252833:{
../inputs/grep1.dat:252835:  if (case_fold)	/* dummy folding in service of dfamust() */
../inputs/grep1.dat:252896:    {
../inputs/grep1.dat:252902:      char *copy;
../inputs/grep1.dat:252920:      int i;
../inputs/grep1.dat:252933:
../inputs/grep1.dat:252934:      copy = malloc(len);
../inputs/grep1.dat:252960:      if (!copy)
../inputs/grep1.dat:252977:	dfaerror("out of memory");
../inputs/grep1.dat:253005:      
../inputs/grep1.dat:253012:      /* This is a kludge. */
../inputs/grep1.dat:253042:      case_fold = 0;
../inputs/grep1.dat:253063:      for (i = 0; i < len; ++i)
../inputs/grep1.dat:253095:	if (ISUPPER(s[i]))
../inputs/grep1.dat:253115:	  copy[i] = tolower(s[i]);
../inputs/grep1.dat:253143:	else
../inputs/grep1.dat:253149:	  copy[i] = s[i];
../inputs/grep1.dat:253168:
../inputs/grep1.dat:253169:      dfainit(d);
../inputs/grep1.dat:253187:      dfaparse(copy, len, d);
../inputs/grep1.dat:253217:      free(copy);
../inputs/grep1.dat:253235:      dfamust(d);
../inputs/grep1.dat:253253:      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
../inputs/grep1.dat:253324:      case_fold = 1;
../inputs/grep1.dat:253345:      dfaparse(s, len, d);
../inputs/grep1.dat:253372:      dfaanalyze(d, searchflag);
../inputs/grep1.dat:253405:    }
../inputs/grep1.dat:253411:  else
../inputs/grep1.dat:253418:    {
../inputs/grep1.dat:253424:        dfainit(d);
../inputs/grep1.dat:253444:        dfaparse(s, len, d);
../inputs/grep1.dat:253473:	dfamust(d);
../inputs/grep1.dat:253486:        dfaanalyze(d, searchflag);
../inputs/grep1.dat:253521:    }
../inputs/grep1.dat:253527:}
../inputs/grep1.dat:253529:
../inputs/grep1.dat:253530:/* Free the storage held by the components of a dfa. */
../inputs/grep1.dat:253586:void
../inputs/grep1.dat:253591:dfafree(d)
../inputs/grep1.dat:253602:     struct dfa *d;
../inputs/grep1.dat:253622:{
../inputs/grep1.dat:253624:  int i;
../inputs/grep1.dat:253633:  struct dfamust *dm, *ndm;
../inputs/grep1.dat:253661:
../inputs/grep1.dat:253662:  free((ptr_t) d->charclasses);
../inputs/grep1.dat:253694:  free((ptr_t) d->tokens);
../inputs/grep1.dat:253721:  for (i = 0; i < d->sindex; ++i)
../inputs/grep1.dat:253755:    free((ptr_t) d->states[i].elems.elems);
../inputs/grep1.dat:253799:  free((ptr_t) d->states);
../inputs/grep1.dat:253826:  for (i = 0; i < d->tindex; ++i)
../inputs/grep1.dat:253860:    if (d->follows[i].elems)
../inputs/grep1.dat:253889:      free((ptr_t) d->follows[i].elems);
../inputs/grep1.dat:253930:  free((ptr_t) d->follows);
../inputs/grep1.dat:253958:  for (i = 0; i < d->tralloc; ++i)
../inputs/grep1.dat:253993:    if (d->trans[i])
../inputs/grep1.dat:254014:      free((ptr_t) d->trans[i]);
../inputs/grep1.dat:254047:    else if (d->fails[i])
../inputs/grep1.dat:254073:      free((ptr_t) d->fails[i]);
../inputs/grep1.dat:254106:  free((ptr_t) d->realtrans);
../inputs/grep1.dat:254136:  free((ptr_t) d->fails);
../inputs/grep1.dat:254162:  free((ptr_t) d->newlines);
../inputs/grep1.dat:254191:  for (dm = d->musts; dm; dm = ndm)
../inputs/grep1.dat:254227:    {
../inputs/grep1.dat:254233:      ndm = dm->next;
../inputs/grep1.dat:254255:      free(dm->must);
../inputs/grep1.dat:254277:      free((ptr_t) dm);
../inputs/grep1.dat:254301:    }
../inputs/grep1.dat:254307:}
../inputs/grep1.dat:254309:
../inputs/grep1.dat:254310:/* Having found the postfix representation of the regular expression,
../inputs/grep1.dat:254380:   try to find a long sequence of characters that must appear in any line
../inputs/grep1.dat:254454:   containing the r.e.
../inputs/grep1.dat:254477:   Finding a "longest" sequence is beyond the scope here;
../inputs/grep1.dat:254535:   we take an easy way out and hope for the best.
../inputs/grep1.dat:254585:   (Take "(ab|a)b"--please.)
../inputs/grep1.dat:254614:
../inputs/grep1.dat:254615:   We do a bottom-up calculation of sequences of characters that must appear
../inputs/grep1.dat:254692:   in matches of r.e.'s represented by trees rooted at the nodes of the postfix
../inputs/grep1.dat:254772:   representation:
../inputs/grep1.dat:254791:	sequences that must appear at the left of the match ("left")
../inputs/grep1.dat:254853:	sequences that must appear at the right of the match ("right")
../inputs/grep1.dat:254917:	lists of sequences that must appear somewhere in the match ("in")
../inputs/grep1.dat:254984:	sequences that must constitute the match ("is")
../inputs/grep1.dat:255033:
../inputs/grep1.dat:255034:   When we get to the root of the tree, we use one of the longest of its
../inputs/grep1.dat:255107:   calculated "in" sequences as our answer.  The sequence we find is returned in
../inputs/grep1.dat:255188:   d->must (where "d" is the single argument passed to "dfamust");
../inputs/grep1.dat:255255:   the length of the sequence is returned in d->mustn.
../inputs/grep1.dat:255310:
../inputs/grep1.dat:255311:   The sequences calculated for the various types of node (in pseudo ANSI c)
../inputs/grep1.dat:255388:   are shown below.  "p" is the operand of unary operators (and the left-hand
../inputs/grep1.dat:255466:   operand of binary operators); "q" is the right-hand operand of binary
../inputs/grep1.dat:255539:   operators.
../inputs/grep1.dat:255553:
../inputs/grep1.dat:255554:   "ZERO" means "a zero-length sequence" below.
../inputs/grep1.dat:255602:
../inputs/grep1.dat:255603:	Type	left		right		is		in
../inputs/grep1.dat:255629:	----	----		-----		--		--
../inputs/grep1.dat:255655:	char c	# c		# c		# c		# c
../inputs/grep1.dat:255682:	
../inputs/grep1.dat:255684:	CSET	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:255713:	
../inputs/grep1.dat:255715:	STAR	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:255744:
../inputs/grep1.dat:255745:	QMARK	ZERO		ZERO		ZERO		ZERO
../inputs/grep1.dat:255775:
../inputs/grep1.dat:255776:	PLUS	p->left		p->right	ZERO		p->in
../inputs/grep1.dat:255812:
../inputs/grep1.dat:255813:	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
../inputs/grep1.dat:255875:		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
../inputs/grep1.dat:255924:		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
../inputs/grep1.dat:255990:						ZERO
../inputs/grep1.dat:256001:					
../inputs/grep1.dat:256007:	OR	longest common	longest common	(do p->is and	substrings common to
../inputs/grep1.dat:256076:		leading		trailing	q->is have same	p->in and q->in
../inputs/grep1.dat:256128:		(sub)sequence	(sub)sequence	length and	
../inputs/grep1.dat:256170:		of p->left	of p->right	content) ?	
../inputs/grep1.dat:256207:		and q->left	and q->right	p->is : NULL	
../inputs/grep1.dat:256248:
../inputs/grep1.dat:256249:   If there's anything else we recognize in the tree, all four sequences get set
../inputs/grep1.dat:256330:   to zero-length sequences.  If there's something we don't recognize in the tree,
../inputs/grep1.dat:256413:   we just return a zero-length sequence.
../inputs/grep1.dat:256455:
../inputs/grep1.dat:256456:   Break ties in favor of infrequent letters (choosing 'zzz' in preference to
../inputs/grep1.dat:256534:   'aaa')?
../inputs/grep1.dat:256545:
../inputs/grep1.dat:256546:   And. . .is it here or someplace that we might ponder "optimizations" such as
../inputs/grep1.dat:256626:	egrep 'psi|epsilon'	->	egrep 'psi'
../inputs/grep1.dat:256662:	egrep 'pepsi|epsilon'	->	egrep 'epsi'
../inputs/grep1.dat:256701:					(Yes, we now find "epsi" as a "string
../inputs/grep1.dat:256744:					that must occur", but we might also
../inputs/grep1.dat:256785:					simplify the *entire* r.e. being sought)
../inputs/grep1.dat:256831:	grep '[c]'		->	grep 'c'
../inputs/grep1.dat:256856:	grep '(ab|a)b'		->	grep 'ab'
../inputs/grep1.dat:256886:	grep 'ab*'		->	grep 'a'
../inputs/grep1.dat:256911:	grep 'a*b'		->	grep 'b'
../inputs/grep1.dat:256936:
../inputs/grep1.dat:256937:   There are several issues:
../inputs/grep1.dat:256966:
../inputs/grep1.dat:256967:   Is optimization easy (enough)?
../inputs/grep1.dat:257001:
../inputs/grep1.dat:257002:   Does optimization actually accomplish anything,
../inputs/grep1.dat:257053:   or is the automaton you get from "psi|epsilon" (for example)
../inputs/grep1.dat:257117:   the same as the one you get from "psi" (for example)?
../inputs/grep1.dat:257174:  
../inputs/grep1.dat:257177:   Are optimizable r.e.'s likely to be used in real-life situations
../inputs/grep1.dat:257245:   (something like 'ab*' is probably unlikely; something like is
../inputs/grep1.dat:257310:   'psi|epsilon' is likelier)? */
../inputs/grep1.dat:257344:
../inputs/grep1.dat:257345:static char *
../inputs/grep1.dat:257359:icatalloc(old, new)
../inputs/grep1.dat:257379:     char *old;
../inputs/grep1.dat:257395:     char *new;
../inputs/grep1.dat:257411:{
../inputs/grep1.dat:257413:  char *result;
../inputs/grep1.dat:257429:  int oldsize, newsize;
../inputs/grep1.dat:257453:
../inputs/grep1.dat:257454:  newsize = (new == NULL) ? 0 : strlen(new);
../inputs/grep1.dat:257499:  if (old == NULL)
../inputs/grep1.dat:257518:    oldsize = 0;
../inputs/grep1.dat:257535:  else if (newsize == 0)
../inputs/grep1.dat:257560:    return old;
../inputs/grep1.dat:257576:  else	oldsize = strlen(old);
../inputs/grep1.dat:257606:  if (old == NULL)
../inputs/grep1.dat:257625:    result = (char *) malloc(newsize + 1);
../inputs/grep1.dat:257668:  else
../inputs/grep1.dat:257675:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
../inputs/grep1.dat:257743:  if (result != NULL && new != NULL)
../inputs/grep1.dat:257780:    (void) strcpy(result + oldsize, new);
../inputs/grep1.dat:257822:  return result;
../inputs/grep1.dat:257839:}
../inputs/grep1.dat:257841:
../inputs/grep1.dat:257842:static char *
../inputs/grep1.dat:257856:icpyalloc(string)
../inputs/grep1.dat:257874:     char *string;
../inputs/grep1.dat:257893:{
../inputs/grep1.dat:257895:  return icatalloc((char *) NULL, string);
../inputs/grep1.dat:257938:}
../inputs/grep1.dat:257940:
../inputs/grep1.dat:257941:static char *
../inputs/grep1.dat:257955:istrstr(lookin, lookfor)
../inputs/grep1.dat:257980:     char *lookin;
../inputs/grep1.dat:257999:     char *lookfor;
../inputs/grep1.dat:258019:{
../inputs/grep1.dat:258021:  char *cp;
../inputs/grep1.dat:258033:  int len;
../inputs/grep1.dat:258044:
../inputs/grep1.dat:258045:  len = strlen(lookfor);
../inputs/grep1.dat:258070:  for (cp = lookin; *cp != '\0'; ++cp)
../inputs/grep1.dat:258109:    if (strncmp(cp, lookfor, len) == 0)
../inputs/grep1.dat:258149:      return cp;
../inputs/grep1.dat:258166:  return NULL;
../inputs/grep1.dat:258181:}
../inputs/grep1.dat:258183:
../inputs/grep1.dat:258184:static void
../inputs/grep1.dat:258196:ifree(cp)
../inputs/grep1.dat:258206:     char *cp;
../inputs/grep1.dat:258221:{
../inputs/grep1.dat:258223:  if (cp != NULL)
../inputs/grep1.dat:258241:    free(cp);
../inputs/grep1.dat:258255:}
../inputs/grep1.dat:258257:
../inputs/grep1.dat:258258:static void
../inputs/grep1.dat:258270:freelist(cpp)
../inputs/grep1.dat:258284:     char **cpp;
../inputs/grep1.dat:258301:{
../inputs/grep1.dat:258303:  int i;
../inputs/grep1.dat:258312:
../inputs/grep1.dat:258313:  if (cpp == NULL)
../inputs/grep1.dat:258332:    return;
../inputs/grep1.dat:258344:  for (i = 0; cpp[i] != NULL; ++i)
../inputs/grep1.dat:258379:    {
../inputs/grep1.dat:258385:      free(cpp[i]);
../inputs/grep1.dat:258405:      cpp[i] = NULL;
../inputs/grep1.dat:258426:    }
../inputs/grep1.dat:258432:}
../inputs/grep1.dat:258434:
../inputs/grep1.dat:258435:static char **
../inputs/grep1.dat:258450:enlist(cpp, new, len)
../inputs/grep1.dat:258472:     char **cpp;
../inputs/grep1.dat:258489:     char *new;
../inputs/grep1.dat:258505:     int len;
../inputs/grep1.dat:258519:{
../inputs/grep1.dat:258521:  int i, j;
../inputs/grep1.dat:258533:
../inputs/grep1.dat:258534:  if (cpp == NULL)
../inputs/grep1.dat:258553:    return NULL;
../inputs/grep1.dat:258570:  if ((new = icpyalloc(new)) == NULL)
../inputs/grep1.dat:258608:    {
../inputs/grep1.dat:258614:      freelist(cpp);
../inputs/grep1.dat:258635:      return NULL;
../inputs/grep1.dat:258654:    }
../inputs/grep1.dat:258660:  new[len] = '\0';
../inputs/grep1.dat:258679:  /* Is there already something in the list that's new (or longer)? */
../inputs/grep1.dat:258750:  for (i = 0; cpp[i] != NULL; ++i)
../inputs/grep1.dat:258785:    if (istrstr(cpp[i], new) != NULL)
../inputs/grep1.dat:258823:      {
../inputs/grep1.dat:258831:	free(new);
../inputs/grep1.dat:258843:	return cpp;
../inputs/grep1.dat:258856:      }
../inputs/grep1.dat:258864:  /* Eliminate any obsoleted strings. */
../inputs/grep1.dat:258905:  j = 0;
../inputs/grep1.dat:258914:  while (cpp[j] != NULL)
../inputs/grep1.dat:258939:    if (istrstr(new, cpp[j]) == NULL)
../inputs/grep1.dat:258977:      ++j;
../inputs/grep1.dat:258988:    else
../inputs/grep1.dat:258997:      {
../inputs/grep1.dat:259005:	free(cpp[j]);
../inputs/grep1.dat:259020:	if (--i == j)
../inputs/grep1.dat:259035:	  break;
../inputs/grep1.dat:259045:	cpp[j] = cpp[i];
../inputs/grep1.dat:259063:	cpp[i] = NULL;
../inputs/grep1.dat:259079:      }
../inputs/grep1.dat:259087:  /* Add the new string. */
../inputs/grep1.dat:259115:  cpp = (char **) realloc((char *) cpp, (i + 2) * sizeof *cpp);
../inputs/grep1.dat:259179:  if (cpp == NULL)
../inputs/grep1.dat:259198:    return NULL;
../inputs/grep1.dat:259215:  cpp[i] = new;
../inputs/grep1.dat:259231:  cpp[i + 1] = NULL;
../inputs/grep1.dat:259252:  return cpp;
../inputs/grep1.dat:259266:}
../inputs/grep1.dat:259268:
../inputs/grep1.dat:259269:/* Given pointers to two strings, return a pointer to an allocated
../inputs/grep1.dat:259336:   list of their distinct common substrings. Return NULL if something
../inputs/grep1.dat:259406:   seems wild. */
../inputs/grep1.dat:259424:static char **
../inputs/grep1.dat:259439:comsubs(left, right)
../inputs/grep1.dat:259460:     char *left;
../inputs/grep1.dat:259477:     char *right;
../inputs/grep1.dat:259495:{
../inputs/grep1.dat:259497:  char **cpp;
../inputs/grep1.dat:259511:  char *lcp;
../inputs/grep1.dat:259524:  char *rcp;
../inputs/grep1.dat:259537:  int i, len;
../inputs/grep1.dat:259551:
../inputs/grep1.dat:259552:  if (left == NULL || right == NULL)
../inputs/grep1.dat:259589:    return NULL;
../inputs/grep1.dat:259606:  cpp = (char **) malloc(sizeof *cpp);
../inputs/grep1.dat:259645:  if (cpp == NULL)
../inputs/grep1.dat:259664:    return NULL;
../inputs/grep1.dat:259681:  cpp[0] = NULL;
../inputs/grep1.dat:259698:  for (lcp = left; *lcp != '\0'; ++lcp)
../inputs/grep1.dat:259738:    {
../inputs/grep1.dat:259744:      len = 0;
../inputs/grep1.dat:259759:      rcp = index(right, *lcp);
../inputs/grep1.dat:259791:      while (rcp != NULL)
../inputs/grep1.dat:259817:	{
../inputs/grep1.dat:259820:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
../inputs/grep1.dat:259876:	    ;
../inputs/grep1.dat:259883:	  if (i > len)
../inputs/grep1.dat:259899:	    len = i;
../inputs/grep1.dat:259913:	  rcp = index(rcp + 1, *lcp);
../inputs/grep1.dat:259944:	}
../inputs/grep1.dat:259947:      if (len == 0)
../inputs/grep1.dat:259967:	continue;
../inputs/grep1.dat:259978:      if ((cpp = enlist(cpp, lcp, len)) == NULL)
../inputs/grep1.dat:260027:	break;
../inputs/grep1.dat:260035:    }
../inputs/grep1.dat:260041:  return cpp;
../inputs/grep1.dat:260055:}
../inputs/grep1.dat:260057:
../inputs/grep1.dat:260058:static char **
../inputs/grep1.dat:260073:addlists(old, new)
../inputs/grep1.dat:260092:char **old;
../inputs/grep1.dat:260104:char **new;
../inputs/grep1.dat:260116:{
../inputs/grep1.dat:260118:  int i;
../inputs/grep1.dat:260127:
../inputs/grep1.dat:260128:  if (old == NULL || new == NULL)
../inputs/grep1.dat:260162:    return NULL;
../inputs/grep1.dat:260179:  for (i = 0; new[i] != NULL; ++i)
../inputs/grep1.dat:260214:    {
../inputs/grep1.dat:260220:      old = enlist(old, new[i], strlen(new[i]));
../inputs/grep1.dat:260269:      if (old == NULL)
../inputs/grep1.dat:260292:	break;
../inputs/grep1.dat:260300:    }
../inputs/grep1.dat:260306:  return old;
../inputs/grep1.dat:260320:}
../inputs/grep1.dat:260322:
../inputs/grep1.dat:260323:/* Given two lists of substrings, return a new list giving substrings
../inputs/grep1.dat:260393:   common to both. */
../inputs/grep1.dat:260415:static char **
../inputs/grep1.dat:260430:inboth(left, right)
../inputs/grep1.dat:260450:     char **left;
../inputs/grep1.dat:260468:     char **right;
../inputs/grep1.dat:260487:{
../inputs/grep1.dat:260489:  char **both;
../inputs/grep1.dat:260504:  char **temp;
../inputs/grep1.dat:260519:  int lnum, rnum;
../inputs/grep1.dat:260537:
../inputs/grep1.dat:260538:  if (left == NULL || right == NULL)
../inputs/grep1.dat:260575:    return NULL;
../inputs/grep1.dat:260592:  both = (char **) malloc(sizeof *both);
../inputs/grep1.dat:260633:  if (both == NULL)
../inputs/grep1.dat:260653:    return NULL;
../inputs/grep1.dat:260670:  both[0] = NULL;
../inputs/grep1.dat:260688:  for (lnum = 0; left[lnum] != NULL; ++lnum)
../inputs/grep1.dat:260733:    {
../inputs/grep1.dat:260739:      for (rnum = 0; right[rnum] != NULL; ++rnum)
../inputs/grep1.dat:260789:	{
../inputs/grep1.dat:260792:	  temp = comsubs(left[lnum], right[rnum]);
../inputs/grep1.dat:260836:	  if (temp == NULL)
../inputs/grep1.dat:260857:	    {
../inputs/grep1.dat:260864:	      freelist(both);
../inputs/grep1.dat:260887:	      return NULL;
../inputs/grep1.dat:260907:	    }
../inputs/grep1.dat:260914:	  both = addlists(both, temp);
../inputs/grep1.dat:260946:	  freelist(temp);
../inputs/grep1.dat:260965:	  if (both == NULL)
../inputs/grep1.dat:260986:	    return NULL;
../inputs/grep1.dat:261004:	}
../inputs/grep1.dat:261007:    }
../inputs/grep1.dat:261013:  return both;
../inputs/grep1.dat:261028:}
../inputs/grep1.dat:261030:
../inputs/grep1.dat:261031:typedef struct
../inputs/grep1.dat:261046:{
../inputs/grep1.dat:261048:  char **in;
../inputs/grep1.dat:261061:  char *left;
../inputs/grep1.dat:261075:  char *right;
../inputs/grep1.dat:261090:  char *is;
../inputs/grep1.dat:261102:} must;
../inputs/grep1.dat:261110:
../inputs/grep1.dat:261111:static void
../inputs/grep1.dat:261123:resetmust(mp)
../inputs/grep1.dat:261137:must *mp;
../inputs/grep1.dat:261147:{
../inputs/grep1.dat:261149:  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
../inputs/grep1.dat:261198:  freelist(mp->in);
../inputs/grep1.dat:261218:}
../inputs/grep1.dat:261220:
../inputs/grep1.dat:261221:static void
../inputs/grep1.dat:261233:dfamust(dfa)
../inputs/grep1.dat:261246:struct dfa *dfa;
../inputs/grep1.dat:261263:{
../inputs/grep1.dat:261265:  must *musts;
../inputs/grep1.dat:261280:  must *mp;
../inputs/grep1.dat:261292:  char *result;
../inputs/grep1.dat:261308:  int ri;
../inputs/grep1.dat:261318:  int i;
../inputs/grep1.dat:261327:  int exact;
../inputs/grep1.dat:261340:  token t;
../inputs/grep1.dat:261351:  static must must0;
../inputs/grep1.dat:261372:  struct dfamust *dm;
../inputs/grep1.dat:261394:
../inputs/grep1.dat:261395:  result = "";
../inputs/grep1.dat:261410:  exact = 0;
../inputs/grep1.dat:261423:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
../inputs/grep1.dat:261485:  if (musts == NULL)
../inputs/grep1.dat:261506:    return;
../inputs/grep1.dat:261518:  mp = musts;
../inputs/grep1.dat:261532:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:261569:    mp[i] = must0;
../inputs/grep1.dat:261588:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:261625:    {
../inputs/grep1.dat:261631:      mp[i].in = (char **) malloc(sizeof *mp[i].in);
../inputs/grep1.dat:261684:      mp[i].left = malloc(2);
../inputs/grep1.dat:261714:      mp[i].right = malloc(2);
../inputs/grep1.dat:261745:      mp[i].is = malloc(2);
../inputs/grep1.dat:261773:      if (mp[i].in == NULL || mp[i].left == NULL ||
../inputs/grep1.dat:261825:	  mp[i].right == NULL || mp[i].is == NULL)
../inputs/grep1.dat:261869:	goto done;
../inputs/grep1.dat:261881:      mp[i].left[0] = mp[i].right[0] = mp[i].is[0] = '\0';
../inputs/grep1.dat:261940:      mp[i].in[0] = NULL;
../inputs/grep1.dat:261966:    }
../inputs/grep1.dat:261972:#ifdef DEBUG
../inputs/grep1.dat:261985:  fprintf(stderr, "dfamust:\n");
../inputs/grep1.dat:262018:  for (i = 0; i < dfa->tindex; ++i)
../inputs/grep1.dat:262054:    {
../inputs/grep1.dat:262060:      fprintf(stderr, " %d:", i);
../inputs/grep1.dat:262094:      prtok(dfa->tokens[i]);
../inputs/grep1.dat:262123:    }
../inputs/grep1.dat:262129:  putc('\n', stderr);
../inputs/grep1.dat:262151:#endif
../inputs/grep1.dat:262158:  for (ri = 0; ri < dfa->tindex; ++ri)
../inputs/grep1.dat:262197:    {
../inputs/grep1.dat:262203:      switch (t = dfa->tokens[ri])
../inputs/grep1.dat:262238:	{
../inputs/grep1.dat:262241:	case LPAREN:
../inputs/grep1.dat:262255:	case RPAREN:
../inputs/grep1.dat:262269:	  goto done;		/* "cannot happen" */
../inputs/grep1.dat:262306:	case EMPTY:
../inputs/grep1.dat:262319:	case BEGLINE:
../inputs/grep1.dat:262334:	case ENDLINE:
../inputs/grep1.dat:262349:	case BEGWORD:
../inputs/grep1.dat:262364:	case ENDWORD:
../inputs/grep1.dat:262379:	case LIMWORD:
../inputs/grep1.dat:262394:	case NOTLIMWORD:
../inputs/grep1.dat:262412:	case BACKREF:
../inputs/grep1.dat:262427:	  resetmust(mp);
../inputs/grep1.dat:262445:	  break;
../inputs/grep1.dat:262455:	case STAR:
../inputs/grep1.dat:262467:	case QMARK:
../inputs/grep1.dat:262480:	  if (mp <= musts)
../inputs/grep1.dat:262500:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:262539:	  --mp;
../inputs/grep1.dat:262548:	  resetmust(mp);
../inputs/grep1.dat:262566:	  break;
../inputs/grep1.dat:262576:	case OR:
../inputs/grep1.dat:262586:	case ORTOP:
../inputs/grep1.dat:262599:	  if (mp < &musts[2])
../inputs/grep1.dat:262622:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:262661:	  {
../inputs/grep1.dat:262666:	    char **new;
../inputs/grep1.dat:262683:	    must *lmp;
../inputs/grep1.dat:262699:	    must *rmp;
../inputs/grep1.dat:262715:	    int j, ln, rn, n;
../inputs/grep1.dat:262738:
../inputs/grep1.dat:262739:	    rmp = --mp;
../inputs/grep1.dat:262756:	    lmp = --mp;
../inputs/grep1.dat:262773:	    /* Guaranteed to be.  Unlikely, but. . . */
../inputs/grep1.dat:262822:	    if (strcmp(lmp->is, rmp->is) != 0)
../inputs/grep1.dat:262862:	      lmp->is[0] = '\0';
../inputs/grep1.dat:262888:	    /* Left side--easy */
../inputs/grep1.dat:262915:	    i = 0;
../inputs/grep1.dat:262927:	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
../inputs/grep1.dat:262993:	      ++i;
../inputs/grep1.dat:263005:	    lmp->left[i] = '\0';
../inputs/grep1.dat:263031:	    /* Right side */
../inputs/grep1.dat:263053:	    ln = strlen(lmp->right);
../inputs/grep1.dat:263083:	    rn = strlen(rmp->right);
../inputs/grep1.dat:263113:	    n = ln;
../inputs/grep1.dat:263126:	    if (n > rn)
../inputs/grep1.dat:263143:	      n = rn;
../inputs/grep1.dat:263158:	    for (i = 0; i < n; ++i)
../inputs/grep1.dat:263187:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
../inputs/grep1.dat:263248:		break;
../inputs/grep1.dat:263257:	    for (j = 0; j < i; ++j)
../inputs/grep1.dat:263286:	      lmp->right[j] = lmp->right[(ln - i) + j];
../inputs/grep1.dat:263335:	    lmp->right[j] = '\0';
../inputs/grep1.dat:263362:	    new = inboth(lmp->in, rmp->in);
../inputs/grep1.dat:263399:	    if (new == NULL)
../inputs/grep1.dat:263421:	      goto done;
../inputs/grep1.dat:263439:	    freelist(lmp->in);
../inputs/grep1.dat:263463:	    free((char *) lmp->in);
../inputs/grep1.dat:263492:	    lmp->in = new;
../inputs/grep1.dat:263512:	  }
../inputs/grep1.dat:263517:	  break;
../inputs/grep1.dat:263527:	case PLUS:
../inputs/grep1.dat:263539:	  if (mp <= musts)
../inputs/grep1.dat:263559:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:263598:	  --mp;
../inputs/grep1.dat:263607:	  mp->is[0] = '\0';
../inputs/grep1.dat:263628:	  break;
../inputs/grep1.dat:263638:	case END:
../inputs/grep1.dat:263649:	  if (mp != &musts[1])
../inputs/grep1.dat:263673:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:263712:	  for (i = 0; musts[0].in[i] != NULL; ++i)
../inputs/grep1.dat:263756:	    if (strlen(musts[0].in[i]) > strlen(result))
../inputs/grep1.dat:263806:	      result = musts[0].in[i];
../inputs/grep1.dat:263838:	  if (strcmp(result, musts[0].is) == 0)
../inputs/grep1.dat:263879:	    exact = 1;
../inputs/grep1.dat:263895:	  goto done;
../inputs/grep1.dat:263909:	case CAT:
../inputs/grep1.dat:263920:	  if (mp < &musts[2])
../inputs/grep1.dat:263943:	    goto done;		/* "cannot happen" */
../inputs/grep1.dat:263982:	  {
../inputs/grep1.dat:263987:	    must *lmp;
../inputs/grep1.dat:264003:	    must *rmp;
../inputs/grep1.dat:264019:
../inputs/grep1.dat:264020:	    rmp = --mp;
../inputs/grep1.dat:264037:	    lmp = --mp;
../inputs/grep1.dat:264054:	    /* In.  Everything in left, plus everything in
../inputs/grep1.dat:264106:	       right, plus catenation of
../inputs/grep1.dat:264140:	       left's right and right's left. */
../inputs/grep1.dat:264182:	    lmp->in = addlists(lmp->in, rmp->in);
../inputs/grep1.dat:264225:	    if (lmp->in == NULL)
../inputs/grep1.dat:264251:	      goto done;
../inputs/grep1.dat:264269:	    if (lmp->right[0] != '\0' &&
../inputs/grep1.dat:264303:		rmp->left[0] != '\0')
../inputs/grep1.dat:264327:	      {
../inputs/grep1.dat:264336:		char *tp;
../inputs/grep1.dat:264348:
../inputs/grep1.dat:264349:		tp = icpyalloc(lmp->right);
../inputs/grep1.dat:264379:		if (tp == NULL)
../inputs/grep1.dat:264397:		  goto done;
../inputs/grep1.dat:264412:		tp = icatalloc(tp, rmp->left);
../inputs/grep1.dat:264445:		if (tp == NULL)
../inputs/grep1.dat:264463:		  goto done;
../inputs/grep1.dat:264478:		lmp->in = enlist(lmp->in, tp,
../inputs/grep1.dat:264510:				 strlen(tp));
../inputs/grep1.dat:264528:		free(tp);
../inputs/grep1.dat:264540:		if (lmp->in == NULL)
../inputs/grep1.dat:264563:		  goto done;
../inputs/grep1.dat:264578:	      }
../inputs/grep1.dat:264587:	    /* Left-hand */
../inputs/grep1.dat:264608:	    if (lmp->is[0] != '\0')
../inputs/grep1.dat:264637:	      {
../inputs/grep1.dat:264646:		lmp->left = icatalloc(lmp->left,
../inputs/grep1.dat:264681:				      rmp->left);
../inputs/grep1.dat:264703:		if (lmp->left == NULL)
../inputs/grep1.dat:264728:		  goto done;
../inputs/grep1.dat:264743:	      }
../inputs/grep1.dat:264752:	    /* Right-hand */
../inputs/grep1.dat:264774:	    if (rmp->is[0] == '\0')
../inputs/grep1.dat:264803:	      lmp->right[0] = '\0';
../inputs/grep1.dat:264832:	    lmp->right = icatalloc(lmp->right, rmp->right);
../inputs/grep1.dat:264885:	    if (lmp->right == NULL)
../inputs/grep1.dat:264914:	      goto done;
../inputs/grep1.dat:264932:	    /* Guaranteed to be */
../inputs/grep1.dat:264960:	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
../inputs/grep1.dat:265011:	      {
../inputs/grep1.dat:265020:		lmp->is = icatalloc(lmp->is, rmp->is);
../inputs/grep1.dat:265061:		if (lmp->is == NULL)
../inputs/grep1.dat:265084:		  goto done;
../inputs/grep1.dat:265099:	      }
../inputs/grep1.dat:265108:	    else
../inputs/grep1.dat:265118:	      lmp->is[0] = '\0';
../inputs/grep1.dat:265144:	  }
../inputs/grep1.dat:265149:	  break;
../inputs/grep1.dat:265159:	default:
../inputs/grep1.dat:265169:	  if (t < END)
../inputs/grep1.dat:265185:	    {
../inputs/grep1.dat:265192:	      /* "cannot happen" */
../inputs/grep1.dat:265221:	      goto done;
../inputs/grep1.dat:265239:	    }
../inputs/grep1.dat:265246:	  else if (t == '\0')
../inputs/grep1.dat:265269:	    {
../inputs/grep1.dat:265276:	      /* not on *my* shift */
../inputs/grep1.dat:265307:	      goto done;
../inputs/grep1.dat:265325:	    }
../inputs/grep1.dat:265332:	  else if (t >= CSET)
../inputs/grep1.dat:265355:	    {
../inputs/grep1.dat:265362:	      /* easy enough */
../inputs/grep1.dat:265387:	      resetmust(mp);
../inputs/grep1.dat:265409:	    }
../inputs/grep1.dat:265416:	  else
../inputs/grep1.dat:265424:	    {
../inputs/grep1.dat:265431:	      /* plain character */
../inputs/grep1.dat:265460:	      resetmust(mp);
../inputs/grep1.dat:265482:	      mp->is[0] = mp->left[0] = mp->right[0] = t;
../inputs/grep1.dat:265533:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
../inputs/grep1.dat:265587:	      mp->in = enlist(mp->in, mp->is, 1);
../inputs/grep1.dat:265630:	      if (mp->in == NULL)
../inputs/grep1.dat:265657:		goto done;
../inputs/grep1.dat:265670:	    }
../inputs/grep1.dat:265677:	  break;
../inputs/grep1.dat:265687:	}
../inputs/grep1.dat:265690:#ifdef DEBUG
../inputs/grep1.dat:265703:      fprintf(stderr, " node: %d:", ri);
../inputs/grep1.dat:265744:      prtok(dfa->tokens[ri]);
../inputs/grep1.dat:265774:      fprintf(stderr, "\n  in:");
../inputs/grep1.dat:265808:      for (i = 0; mp->in[i]; ++i)
../inputs/grep1.dat:265842:	fprintf(stderr, " \"%s\"", mp->in[i]);
../inputs/grep1.dat:265882:      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
../inputs/grep1.dat:265933:      fprintf(stderr, "  left: \"%s\"\n", mp->left);
../inputs/grep1.dat:265986:      fprintf(stderr, "  right: \"%s\"\n", mp->right);
../inputs/grep1.dat:266041:#endif
../inputs/grep1.dat:266048:      ++mp;
../inputs/grep1.dat:266060:    }
../inputs/grep1.dat:266066: done:
../inputs/grep1.dat:266073:  if (strlen(result))
../inputs/grep1.dat:266095:    {
../inputs/grep1.dat:266101:      dm = (struct dfamust *) malloc(sizeof (struct dfamust));
../inputs/grep1.dat:266164:      dm->exact = exact;
../inputs/grep1.dat:266189:      dm->must = malloc(strlen(result) + 1);
../inputs/grep1.dat:266234:      strcpy(dm->must, result);
../inputs/grep1.dat:266266:      dm->next = dfa->musts;
../inputs/grep1.dat:266295:      dfa->musts = dm;
../inputs/grep1.dat:266318:    }
../inputs/grep1.dat:266324:  mp = musts;
../inputs/grep1.dat:266338:  for (i = 0; i <= dfa->tindex; ++i)
../inputs/grep1.dat:266375:    {
../inputs/grep1.dat:266381:      freelist(mp[i].in);
../inputs/grep1.dat:266407:      ifree((char *) mp[i].in);
../inputs/grep1.dat:266439:      ifree(mp[i].left);
../inputs/grep1.dat:266464:      ifree(mp[i].right);
../inputs/grep1.dat:266490:      ifree(mp[i].is);
../inputs/grep1.dat:266513:    }
../inputs/grep1.dat:266519:  free((char *) mp);
../inputs/grep1.dat:266540:}
../inputs/grep1.dat:266542:/* kwset.c - search for any of a set of keywords.
../inputs/grep1.dat:266592:   Copyright 1989 Free Software Foundation
../inputs/grep1.dat:266635:		  Written August 1989 by Mike Haertel.
../inputs/grep1.dat:266676:
../inputs/grep1.dat:266677:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:266749:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:266821:   the Free Software Foundation; either version 1, or (at your option)
../inputs/grep1.dat:266892:   any later version.
../inputs/grep1.dat:266914:
../inputs/grep1.dat:266915:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:266982:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:267048:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:267113:   GNU General Public License for more details.
../inputs/grep1.dat:267161:
../inputs/grep1.dat:267162:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:267231:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:267294:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:267355:
../inputs/grep1.dat:267356:   The author may be reached (Email) at the address mike@ai.mit.edu,
../inputs/grep1.dat:267425:   or (US mail) as Mike Haertel c/o Free Software Foundation. */
../inputs/grep1.dat:267490:
../inputs/grep1.dat:267491:/* The algorithm implemented by these routines bears a startling resemblence
../inputs/grep1.dat:267568:   to one discovered by Beate Commentz-Walter, although it is not identical.
../inputs/grep1.dat:267645:   See "A String Matching Algorithm Fast on the Average," Technical Report,
../inputs/grep1.dat:267721:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
../inputs/grep1.dat:267796:   Heidelberg, Germany.  See also Aho, A.V., and M. Corasick, "Efficient
../inputs/grep1.dat:267869:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
../inputs/grep1.dat:267939:   Vol. 18, No. 6, which describes the failure function used below. */
../inputs/grep1.dat:268010:
../inputs/grep1.dat:268011:
../inputs/grep1.dat:268012:#ifdef STDC_HEADERS
../inputs/grep1.dat:268032:#undef RE_DUP_MAX
../inputs/grep1.dat:268070:#define flag_limits 1
../inputs/grep1.dat:268092:#if flag_stdlib==0 
../inputs/grep1.dat:268132:#define flag_stdlib 1
../inputs/grep1.dat:268154:#endif
../inputs/grep1.dat:268161:#else
../inputs/grep1.dat:268167:#define INT_MAX 2147483647
../inputs/grep1.dat:268194:#define UCHAR_MAX 255
../inputs/grep1.dat:268216:#ifdef __STDC__
../inputs/grep1.dat:268252:#else
../inputs/grep1.dat:268258:#if flag_systypes==0
../inputs/grep1.dat:268302:#define flag_systypes 1
../inputs/grep1.dat:268326:#endif
../inputs/grep1.dat:268333:#endif
../inputs/grep1.dat:268340:extern char *malloc();
../inputs/grep1.dat:268363:extern void free();
../inputs/grep1.dat:268383:#endif
../inputs/grep1.dat:268390:
../inputs/grep1.dat:268391:#ifdef HAVE_MEMCHR
../inputs/grep1.dat:268410:#if flag_string==0
../inputs/grep1.dat:268449:#define flag_string 1
../inputs/grep1.dat:268471:#endif
../inputs/grep1.dat:268478:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:268499:#if flag_memory==0
../inputs/grep1.dat:268538:#define flag_memory 1
../inputs/grep1.dat:268560:#endif
../inputs/grep1.dat:268567:#endif
../inputs/grep1.dat:268574:#else
../inputs/grep1.dat:268580:#ifdef __STDC__
../inputs/grep1.dat:268596:extern void *memchr();
../inputs/grep1.dat:268619:#else
../inputs/grep1.dat:268625:extern char *memchr();
../inputs/grep1.dat:268648:#endif
../inputs/grep1.dat:268655:#endif
../inputs/grep1.dat:268662:
../inputs/grep1.dat:268663:#ifdef GREP
../inputs/grep1.dat:268675:extern char *xmalloc();
../inputs/grep1.dat:268699:#define malloc xmalloc
../inputs/grep1.dat:268722:#endif
../inputs/grep1.dat:268729:
../inputs/grep1.dat:268770:
../inputs/grep1.dat:268771:#define NCHAR (UCHAR_MAX + 1)
../inputs/grep1.dat:268801:#define obstack_chunk_alloc malloc
../inputs/grep1.dat:268836:#define obstack_chunk_free free
../inputs/grep1.dat:268868:
../inputs/grep1.dat:268869:/* Balanced tree of edges and labels leaving a given trie node. */
../inputs/grep1.dat:268936:struct tree
../inputs/grep1.dat:268948:{
../inputs/grep1.dat:268950:  struct tree *llink;		/* Left link; MUST be first field. */
../inputs/grep1.dat:269011:  struct tree *rlink;		/* Right link (to larger labels). */
../inputs/grep1.dat:269071:  struct trie *trie;		/* Trie node pointed to by this edge. */
../inputs/grep1.dat:269134:  unsigned char label;		/* Label on this edge. */
../inputs/grep1.dat:269184:  char balance;			/* Difference in depths of subtrees. */
../inputs/grep1.dat:269242:};
../inputs/grep1.dat:269245:
../inputs/grep1.dat:269246:/* Node of a trie representing a set of reversed keywords. */
../inputs/grep1.dat:269308:struct trie
../inputs/grep1.dat:269320:{
../inputs/grep1.dat:269322:  unsigned int accepting;	/* Word index of accepted word, or zero. */
../inputs/grep1.dat:269392:  struct tree *links;		/* Tree of edges leaving this node. */
../inputs/grep1.dat:269454:  struct trie *parent;		/* Parent of this node. */
../inputs/grep1.dat:269505:  struct trie *next;		/* List of all trie nodes in level order. */
../inputs/grep1.dat:269572:  struct trie *fail;		/* Aho-Corasick failure function. */
../inputs/grep1.dat:269631:  int depth;			/* Depth of this node from the root. */
../inputs/grep1.dat:269686:  int shift;			/* Shift function for search failures. */
../inputs/grep1.dat:269743:  int maxshift;			/* Max shift of self and descendents. */
../inputs/grep1.dat:269802:};
../inputs/grep1.dat:269805:
../inputs/grep1.dat:269806:/* Structure returned opaquely to the caller, containing everything. */
../inputs/grep1.dat:269878:struct kwset
../inputs/grep1.dat:269891:{
../inputs/grep1.dat:269893:  struct obstack obstack;	/* Obstack for node allocation. */
../inputs/grep1.dat:269954:  int words;			/* Number of words in the trie. */
../inputs/grep1.dat:270004:  struct trie *trie;		/* The trie itself. */
../inputs/grep1.dat:270049:  int mind;			/* Minimum depth of an accepting node. */
../inputs/grep1.dat:270105:  int maxd;			/* Maximum depth of any node. */
../inputs/grep1.dat:270152:  unsigned char delta[NCHAR];	/* Delta table for rapid search. */
../inputs/grep1.dat:270218:  struct trie *next[NCHAR];	/* Table of children of the root. */
../inputs/grep1.dat:270283:  char *target;			/* Target string if there's only one. */
../inputs/grep1.dat:270342:  int mind2;			/* Used in Boyer-Moore search for one string. */
../inputs/grep1.dat:270406:  char *trans;			/* Character translation table. */
../inputs/grep1.dat:270458:};
../inputs/grep1.dat:270461:
../inputs/grep1.dat:270462:/* Allocate and initialize a keyword set object, returning an opaque
../inputs/grep1.dat:270531:   pointer to it.  Return NULL if memory is not available. */
../inputs/grep1.dat:270593:kwset_t
../inputs/grep1.dat:270601:kwsalloc(trans)
../inputs/grep1.dat:270617:     char *trans;
../inputs/grep1.dat:270635:{
../inputs/grep1.dat:270637:  struct kwset *kwset;
../inputs/grep1.dat:270660:
../inputs/grep1.dat:270661:  kwset = (struct kwset *) malloc(sizeof (struct kwset));
../inputs/grep1.dat:270719:  if (!kwset)
../inputs/grep1.dat:270733:    return 0;
../inputs/grep1.dat:270747:
../inputs/grep1.dat:270748:  obstack_init(&kwset->obstack);
../inputs/grep1.dat:270781:  kwset->words = 0;
../inputs/grep1.dat:270801:  kwset->trie
../inputs/grep1.dat:270815:    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
../inputs/grep1.dat:270891:  if (!kwset->trie)
../inputs/grep1.dat:270911:    {
../inputs/grep1.dat:270917:      kwsfree((kwset_t) kwset);
../inputs/grep1.dat:270949:      return 0;
../inputs/grep1.dat:270965:    }
../inputs/grep1.dat:270971:  kwset->trie->accepting = 0;
../inputs/grep1.dat:271001:  kwset->trie->links = 0;
../inputs/grep1.dat:271027:  kwset->trie->parent = 0;
../inputs/grep1.dat:271054:  kwset->trie->next = 0;
../inputs/grep1.dat:271079:  kwset->trie->fail = 0;
../inputs/grep1.dat:271104:  kwset->trie->depth = 0;
../inputs/grep1.dat:271130:  kwset->trie->shift = 0;
../inputs/grep1.dat:271156:  kwset->mind = INT_MAX;
../inputs/grep1.dat:271181:  kwset->maxd = -1;
../inputs/grep1.dat:271201:  kwset->target = 0;
../inputs/grep1.dat:271222:  kwset->trans = trans;
../inputs/grep1.dat:271246:
../inputs/grep1.dat:271247:  return (kwset_t) kwset;
../inputs/grep1.dat:271273:}
../inputs/grep1.dat:271275:
../inputs/grep1.dat:271276:/* Add the given string to the contents of the keyword set.  Return NULL
../inputs/grep1.dat:271349:   for success, an error message otherwise. */
../inputs/grep1.dat:271396:char *
../inputs/grep1.dat:271403:kwsincr(kws, text, len)
../inputs/grep1.dat:271427:     kwset_t kws;
../inputs/grep1.dat:271445:     char *text;
../inputs/grep1.dat:271462:     size_t len;
../inputs/grep1.dat:271479:{
../inputs/grep1.dat:271481:  struct kwset *kwset;
../inputs/grep1.dat:271504:  register struct trie *trie;
../inputs/grep1.dat:271534:  register unsigned char label;
../inputs/grep1.dat:271566:  register struct tree *link;
../inputs/grep1.dat:271596:  register int depth;
../inputs/grep1.dat:271618:  struct tree *links[12];
../inputs/grep1.dat:271644:  enum { L, R } dirs[12];
../inputs/grep1.dat:271670:  struct tree *t, *r, *l, *rl, *lr;
../inputs/grep1.dat:271706:
../inputs/grep1.dat:271707:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:271739:  trie = kwset->trie;
../inputs/grep1.dat:271761:  text += len;
../inputs/grep1.dat:271776:
../inputs/grep1.dat:271777:  /* Descend the trie (built of reversed keywords) character-by-character,
../inputs/grep1.dat:271852:     installing new nodes when necessary. */
../inputs/grep1.dat:271897:  while (len--)
../inputs/grep1.dat:271913:    {
../inputs/grep1.dat:271919:      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
../inputs/grep1.dat:271997:
../inputs/grep1.dat:271998:      /* Descend the tree of outgoing links for this trie node,
../inputs/grep1.dat:272062:	 looking for the current character and keeping track
../inputs/grep1.dat:272116:	 of the path followed. */
../inputs/grep1.dat:272143:      link = trie->links;
../inputs/grep1.dat:272169:      links[0] = (struct tree *) &trie->links;
../inputs/grep1.dat:272216:      dirs[0] = L;
../inputs/grep1.dat:272235:      depth = 1;
../inputs/grep1.dat:272252:
../inputs/grep1.dat:272253:      while (link && label != link->label)
../inputs/grep1.dat:272296:	{
../inputs/grep1.dat:272299:	  links[depth] = link;
../inputs/grep1.dat:272323:	  if (label < link->label)
../inputs/grep1.dat:272351:	    dirs[depth++] = L, link = link->llink;
../inputs/grep1.dat:272395:	  else
../inputs/grep1.dat:272403:	    dirs[depth++] = R, link = link->rlink;
../inputs/grep1.dat:272447:	}
../inputs/grep1.dat:272450:
../inputs/grep1.dat:272451:      /* The current character doesn't have an outgoing link at
../inputs/grep1.dat:272515:	 this trie node, so build a new trie node and install
../inputs/grep1.dat:272570:	 a link in the current trie node's tree. */
../inputs/grep1.dat:272615:      if (!link)
../inputs/grep1.dat:272632:	{
../inputs/grep1.dat:272635:	  link = (struct tree *) obstack_alloc(&kwset->obstack,
../inputs/grep1.dat:272692:					       sizeof (struct tree));
../inputs/grep1.dat:272727:	  if (!link)
../inputs/grep1.dat:272741:	    return "memory exhausted";
../inputs/grep1.dat:272773:	  link->llink = 0;
../inputs/grep1.dat:272793:	  link->rlink = 0;
../inputs/grep1.dat:272813:	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
../inputs/grep1.dat:272876:						     sizeof (struct trie));
../inputs/grep1.dat:272910:	  if (!link->trie)
../inputs/grep1.dat:272930:	    return "memory exhausted";
../inputs/grep1.dat:272962:	  link->trie->accepting = 0;
../inputs/grep1.dat:272992:	  link->trie->links = 0;
../inputs/grep1.dat:273018:	  link->trie->parent = trie;
../inputs/grep1.dat:273048:	  link->trie->next = 0;
../inputs/grep1.dat:273073:	  link->trie->fail = 0;
../inputs/grep1.dat:273098:	  link->trie->depth = trie->depth + 1;
../inputs/grep1.dat:273138:	  link->trie->shift = 0;
../inputs/grep1.dat:273164:	  link->label = label;
../inputs/grep1.dat:273188:	  link->balance = 0;
../inputs/grep1.dat:273210:
../inputs/grep1.dat:273211:	  /* Install the new tree node in its parent. */
../inputs/grep1.dat:273261:	  if (dirs[--depth] == L)
../inputs/grep1.dat:273288:	    links[depth]->llink = link;
../inputs/grep1.dat:273321:	  else
../inputs/grep1.dat:273329:	    links[depth]->rlink = link;
../inputs/grep1.dat:273362:
../inputs/grep1.dat:273363:	  /* Back up the tree fixing the balance flags. */
../inputs/grep1.dat:273415:	  while (depth && !links[depth]->balance)
../inputs/grep1.dat:273458:	    {
../inputs/grep1.dat:273465:	      if (dirs[depth] == L)
../inputs/grep1.dat:273494:		--links[depth]->balance;
../inputs/grep1.dat:273521:	      else
../inputs/grep1.dat:273533:		++links[depth]->balance;
../inputs/grep1.dat:273560:	      --depth;
../inputs/grep1.dat:273576:	    }
../inputs/grep1.dat:273583:
../inputs/grep1.dat:273584:	  /* Rebalance the tree by pointer rotations if necessary. */
../inputs/grep1.dat:273647:	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
../inputs/grep1.dat:273710:			|| (dirs[depth] == R && ++links[depth]->balance)))
../inputs/grep1.dat:273764:	    {
../inputs/grep1.dat:273771:	      switch (links[depth]->balance)
../inputs/grep1.dat:273809:		{
../inputs/grep1.dat:273813:		case (char) -2:
../inputs/grep1.dat:273831:		  switch (dirs[depth + 1])
../inputs/grep1.dat:273860:		    {
../inputs/grep1.dat:273868:		    case L:
../inputs/grep1.dat:273882:		      r = links[depth], t = r->llink, rl = t->rlink;
../inputs/grep1.dat:273937:		      t->rlink = r, r->llink = rl;
../inputs/grep1.dat:273974:		      t->balance = r->balance = 0;
../inputs/grep1.dat:274011:		      break;
../inputs/grep1.dat:274026:		    case R:
../inputs/grep1.dat:274040:		      r = links[depth], l = r->llink, t = l->rlink;
../inputs/grep1.dat:274094:		      rl = t->rlink, lr = t->llink;
../inputs/grep1.dat:274132:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
../inputs/grep1.dat:274198:		      l->balance = t->balance != 1 ? 0 : -1;
../inputs/grep1.dat:274245:		      r->balance = t->balance != (char) -1 ? 0 : 1;
../inputs/grep1.dat:274299:		      t->balance = 0;
../inputs/grep1.dat:274323:		      break;
../inputs/grep1.dat:274338:		    }
../inputs/grep1.dat:274346:		  break;
../inputs/grep1.dat:274357:		case 2:
../inputs/grep1.dat:274367:		  switch (dirs[depth + 1])
../inputs/grep1.dat:274396:		    {
../inputs/grep1.dat:274404:		    case R:
../inputs/grep1.dat:274418:		      l = links[depth], t = l->rlink, lr = t->llink;
../inputs/grep1.dat:274473:		      t->llink = l, l->rlink = lr;
../inputs/grep1.dat:274510:		      t->balance = l->balance = 0;
../inputs/grep1.dat:274547:		      break;
../inputs/grep1.dat:274562:		    case L:
../inputs/grep1.dat:274576:		      l = links[depth], r = l->rlink, t = r->llink;
../inputs/grep1.dat:274630:		      lr = t->llink, rl = t->rlink;
../inputs/grep1.dat:274668:		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
../inputs/grep1.dat:274734:		      l->balance = t->balance != 1 ? 0 : -1;
../inputs/grep1.dat:274781:		      r->balance = t->balance != (char) -1 ? 0 : 1;
../inputs/grep1.dat:274835:		      t->balance = 0;
../inputs/grep1.dat:274859:		      break;
../inputs/grep1.dat:274874:		    }
../inputs/grep1.dat:274882:		  break;
../inputs/grep1.dat:274893:		}
../inputs/grep1.dat:274897:
../inputs/grep1.dat:274898:	      if (dirs[depth - 1] == L)
../inputs/grep1.dat:274931:		links[depth - 1]->llink = t;
../inputs/grep1.dat:274962:	      else
../inputs/grep1.dat:274974:		links[depth - 1]->rlink = t;
../inputs/grep1.dat:275005:	    }
../inputs/grep1.dat:275012:	}
../inputs/grep1.dat:275015:
../inputs/grep1.dat:275016:      trie = link->trie;
../inputs/grep1.dat:275041:    }
../inputs/grep1.dat:275047:
../inputs/grep1.dat:275048:  /* Mark the node we finally reached as accepting, encoding the
../inputs/grep1.dat:275113:     index number of this word in the keyword set so far. */
../inputs/grep1.dat:275174:  if (!trie->accepting)
../inputs/grep1.dat:275198:    trie->accepting = 1 + 2 * kwset->words;
../inputs/grep1.dat:275242:  ++kwset->words;
../inputs/grep1.dat:275260:
../inputs/grep1.dat:275261:  /* Keep track of the longest and shortest string of the keyword set. */
../inputs/grep1.dat:275335:  if (trie->depth < kwset->mind)
../inputs/grep1.dat:275368:    kwset->mind = trie->depth;
../inputs/grep1.dat:275399:  if (trie->depth > kwset->maxd)
../inputs/grep1.dat:275432:    kwset->maxd = trie->depth;
../inputs/grep1.dat:275463:
../inputs/grep1.dat:275464:  return 0;
../inputs/grep1.dat:275476:}
../inputs/grep1.dat:275478:
../inputs/grep1.dat:275479:/* Enqueue the trie nodes referenced from the given tree in the
../inputs/grep1.dat:275543:   given queue. */
../inputs/grep1.dat:275562:static void
../inputs/grep1.dat:275574:enqueue(tree, last)
../inputs/grep1.dat:275594:     struct tree *tree;
../inputs/grep1.dat:275618:     struct trie **last;
../inputs/grep1.dat:275643:{
../inputs/grep1.dat:275645:  if (!tree)
../inputs/grep1.dat:275658:    return;
../inputs/grep1.dat:275670:  enqueue(tree->llink, last);
../inputs/grep1.dat:275700:  enqueue(tree->rlink, last);
../inputs/grep1.dat:275730:  (*last) = (*last)->next = tree->trie;
../inputs/grep1.dat:275770:}
../inputs/grep1.dat:275772:
../inputs/grep1.dat:275773:/* Compute the Aho-Corasick failure function for the trie nodes referenced
../inputs/grep1.dat:275848:   from the given tree, given the failure function for their parent as
../inputs/grep1.dat:275919:   well as a last resort failure node. */
../inputs/grep1.dat:275961:static void
../inputs/grep1.dat:275973:treefails(tree, fail, recourse)
../inputs/grep1.dat:276005:     register struct tree *tree;
../inputs/grep1.dat:276038:     struct trie *fail;
../inputs/grep1.dat:276062:     struct trie *recourse;
../inputs/grep1.dat:276090:{
../inputs/grep1.dat:276092:  register struct tree *link;
../inputs/grep1.dat:276122:
../inputs/grep1.dat:276123:  if (!tree)
../inputs/grep1.dat:276136:    return;
../inputs/grep1.dat:276148:
../inputs/grep1.dat:276149:  treefails(tree->llink, fail, recourse);
../inputs/grep1.dat:276191:  treefails(tree->rlink, fail, recourse);
../inputs/grep1.dat:276233:
../inputs/grep1.dat:276234:  /* Find, in the chain of fails going back to the root, the first
../inputs/grep1.dat:276301:     node that has a descendent on the current label. */
../inputs/grep1.dat:276358:  while (fail)
../inputs/grep1.dat:276373:    {
../inputs/grep1.dat:276379:      link = fail->links;
../inputs/grep1.dat:276405:      while (link && tree->label != link->label)
../inputs/grep1.dat:276454:	if (tree->label < link->label)
../inputs/grep1.dat:276486:	  link = link->llink;
../inputs/grep1.dat:276509:	else
../inputs/grep1.dat:276515:	  link = link->rlink;
../inputs/grep1.dat:276538:      if (link)
../inputs/grep1.dat:276554:	{
../inputs/grep1.dat:276557:	  tree->trie->fail = link->trie;
../inputs/grep1.dat:276591:	  return;
../inputs/grep1.dat:276602:	}
../inputs/grep1.dat:276605:      fail = fail->fail;
../inputs/grep1.dat:276630:    }
../inputs/grep1.dat:276636:
../inputs/grep1.dat:276637:  tree->trie->fail = recourse;
../inputs/grep1.dat:276668:}
../inputs/grep1.dat:276670:
../inputs/grep1.dat:276671:/* Set delta entries for the links of the given tree such that
../inputs/grep1.dat:276734:   the preexisting delta value is larger than the current depth. */
../inputs/grep1.dat:276802:static void
../inputs/grep1.dat:276814:treedelta(tree, depth, delta)
../inputs/grep1.dat:276844:     register struct tree *tree;
../inputs/grep1.dat:276877:     register unsigned int depth;
../inputs/grep1.dat:276911:     unsigned char delta[];
../inputs/grep1.dat:276939:{
../inputs/grep1.dat:276941:  if (!tree)
../inputs/grep1.dat:276954:    return;
../inputs/grep1.dat:276966:  treedelta(tree->llink, depth, delta);
../inputs/grep1.dat:277006:  treedelta(tree->rlink, depth, delta);
../inputs/grep1.dat:277046:  if (depth < delta[tree->label])
../inputs/grep1.dat:277080:    delta[tree->label] = depth;
../inputs/grep1.dat:277112:}
../inputs/grep1.dat:277114:
../inputs/grep1.dat:277115:/* Return true if A has every label in B. */
../inputs/grep1.dat:277160:static int
../inputs/grep1.dat:277171:hasevery(a, b)
../inputs/grep1.dat:277186:     register struct tree *a;
../inputs/grep1.dat:277216:     register struct tree *b;
../inputs/grep1.dat:277246:{
../inputs/grep1.dat:277248:  if (!b)
../inputs/grep1.dat:277258:    return 1;
../inputs/grep1.dat:277272:  if (!hasevery(a, b->llink))
../inputs/grep1.dat:277302:    return 0;
../inputs/grep1.dat:277316:  if (!hasevery(a, b->rlink))
../inputs/grep1.dat:277346:    return 0;
../inputs/grep1.dat:277360:  while (a && b->label != a->label)
../inputs/grep1.dat:277396:    if (b->label < a->label)
../inputs/grep1.dat:277425:      a = a->llink;
../inputs/grep1.dat:277445:    else
../inputs/grep1.dat:277454:      a = a->rlink;
../inputs/grep1.dat:277474:  return !!a;
../inputs/grep1.dat:277488:}
../inputs/grep1.dat:277490:
../inputs/grep1.dat:277491:/* Compute a vector, indexed by character code, of the trie nodes
../inputs/grep1.dat:277557:   referenced from the given tree. */
../inputs/grep1.dat:277595:static void
../inputs/grep1.dat:277607:treenext(tree, next)
../inputs/grep1.dat:277628:     struct tree *tree;
../inputs/grep1.dat:277652:     struct trie *next[];
../inputs/grep1.dat:277678:{
../inputs/grep1.dat:277680:  if (!tree)
../inputs/grep1.dat:277693:    return;
../inputs/grep1.dat:277705:  treenext(tree->llink, next);
../inputs/grep1.dat:277736:  treenext(tree->rlink, next);
../inputs/grep1.dat:277767:  next[tree->label] = tree->trie;
../inputs/grep1.dat:277801:}
../inputs/grep1.dat:277803:
../inputs/grep1.dat:277804:/* Compute the shift for each trie node, as well as the delta
../inputs/grep1.dat:277866:   table and next cache for the given keyword set. */
../inputs/grep1.dat:277920:char *
../inputs/grep1.dat:277927:kwsprep(kws)
../inputs/grep1.dat:277940:     kwset_t kws;
../inputs/grep1.dat:277958:{
../inputs/grep1.dat:277960:  register struct kwset *kwset;
../inputs/grep1.dat:277992:  register int i;
../inputs/grep1.dat:278010:  register struct trie *curr, *fail;
../inputs/grep1.dat:278047:  register char *trans;
../inputs/grep1.dat:278071:  unsigned char delta[NCHAR];
../inputs/grep1.dat:278101:  struct trie *last, *next[NCHAR];
../inputs/grep1.dat:278136:
../inputs/grep1.dat:278137:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:278169:
../inputs/grep1.dat:278170:  /* Initial values for the delta table; will be changed later.  The
../inputs/grep1.dat:278239:     delta entry for a given character is the smallest depth of any
../inputs/grep1.dat:278307:     node at which an outgoing edge is labeled by that character. */
../inputs/grep1.dat:278376:  if (kwset->mind < 256)
../inputs/grep1.dat:278401:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:278433:      delta[i] = kwset->mind;
../inputs/grep1.dat:278463:  else
../inputs/grep1.dat:278470:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:278502:      delta[i] = 255;
../inputs/grep1.dat:278524:
../inputs/grep1.dat:278525:  /* Check if we can use the simple boyer-moore algorithm, instead
../inputs/grep1.dat:278592:     of the hairy commentz-walter algorithm. */
../inputs/grep1.dat:278640:  if (kwset->words == 1 && kwset->trans == 0)
../inputs/grep1.dat:278686:    {
../inputs/grep1.dat:278692:      /* Looking for just one string.  Extract it from the trie. */
../inputs/grep1.dat:278760:      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
../inputs/grep1.dat:278827:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
../inputs/grep1.dat:278892:	{
../inputs/grep1.dat:278895:	  kwset->target[i] = curr->links->label;
../inputs/grep1.dat:278937:	  curr = curr->links->trie;
../inputs/grep1.dat:278966:	}
../inputs/grep1.dat:278969:      /* Build the Boyer Moore delta.  Boy that's easy compared to CW. */
../inputs/grep1.dat:279043:      for (i = 0; i < kwset->mind; ++i)
../inputs/grep1.dat:279083:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
../inputs/grep1.dat:279149:      kwset->mind2 = kwset->mind;
../inputs/grep1.dat:279183:      /* Find the minimal delta2 shift that we might make after
../inputs/grep1.dat:279247:	 a backwards match has failed. */
../inputs/grep1.dat:279282:      for (i = 0; i < kwset->mind - 1; ++i)
../inputs/grep1.dat:279326:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
../inputs/grep1.dat:279383:	  kwset->mind2 = kwset->mind - (i + 1);
../inputs/grep1.dat:279424:    }
../inputs/grep1.dat:279430:  else
../inputs/grep1.dat:279437:    {
../inputs/grep1.dat:279443:      /* Traverse the nodes of the trie in level order, simultaneously
../inputs/grep1.dat:279514:	 computing the delta table, failure function, and shift function. */
../inputs/grep1.dat:279584:      for (curr = last = kwset->trie; curr; curr = curr->next)
../inputs/grep1.dat:279647:	{
../inputs/grep1.dat:279650:	  /* Enqueue the immediate descendents in the level order queue. */
../inputs/grep1.dat:279719:	  enqueue(curr->links, &last);
../inputs/grep1.dat:279751:
../inputs/grep1.dat:279752:	  curr->shift = kwset->mind;
../inputs/grep1.dat:279782:	  curr->maxshift = kwset->mind;
../inputs/grep1.dat:279815:
../inputs/grep1.dat:279816:	  /* Update the delta table for the descendents of this node. */
../inputs/grep1.dat:279882:	  treedelta(curr->links, curr->depth, delta);
../inputs/grep1.dat:279929:
../inputs/grep1.dat:279930:	  /* Compute the failure function for the decendents of this node. */
../inputs/grep1.dat:280001:	  treefails(curr->links, curr->fail, kwset->trie);
../inputs/grep1.dat:280053:
../inputs/grep1.dat:280054:	  /* Update the shifts at each node in the current node's chain
../inputs/grep1.dat:280119:	     of fails back to the root. */
../inputs/grep1.dat:280155:	  for (fail = curr->fail; fail; fail = fail->fail)
../inputs/grep1.dat:280207:	    {
../inputs/grep1.dat:280214:	      /* If the current node has some outgoing edge that the fail
../inputs/grep1.dat:280281:		 doesn't, then the shift at the fail should be no larger
../inputs/grep1.dat:280340:		 than the difference of their depths. */
../inputs/grep1.dat:280383:	      if (!hasevery(fail->links, curr->links))
../inputs/grep1.dat:280431:		if (curr->depth - fail->depth < fail->shift)
../inputs/grep1.dat:280478:		  fail->shift = curr->depth - fail->depth;
../inputs/grep1.dat:280523:
../inputs/grep1.dat:280524:	      /* If the current node is accepting then the shift at the
../inputs/grep1.dat:280589:		 fail and its descendents should be no larger than the
../inputs/grep1.dat:280646:		 difference of their depths. */
../inputs/grep1.dat:280680:	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
../inputs/grep1.dat:280754:		fail->maxshift = curr->depth - fail->depth;
../inputs/grep1.dat:280800:	    }
../inputs/grep1.dat:280807:	}
../inputs/grep1.dat:280810:
../inputs/grep1.dat:280811:      /* Traverse the trie in level order again, fixing up all nodes whose
../inputs/grep1.dat:280886:	 shift exceeds their inherited maxshift. */
../inputs/grep1.dat:280931:      for (curr = kwset->trie->next; curr; curr = curr->next)
../inputs/grep1.dat:280993:	{
../inputs/grep1.dat:280996:	  if (curr->maxshift > curr->parent->maxshift)
../inputs/grep1.dat:281044:	    curr->maxshift = curr->parent->maxshift;
../inputs/grep1.dat:281090:	  if (curr->shift > curr->maxshift)
../inputs/grep1.dat:281127:	    curr->shift = curr->maxshift;
../inputs/grep1.dat:281162:	}
../inputs/grep1.dat:281165:
../inputs/grep1.dat:281166:      /* Create a vector, indexed by character code, of the outgoing links
../inputs/grep1.dat:281241:	 from the root node. */
../inputs/grep1.dat:281266:      for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:281300:	next[i] = 0;
../inputs/grep1.dat:281314:      treenext(kwset->trie->links, next);
../inputs/grep1.dat:281356:
../inputs/grep1.dat:281357:      if ((trans = kwset->trans) != 0)
../inputs/grep1.dat:281396:	for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:281425:	  kwset->next[i] = next[(unsigned char) trans[i]];
../inputs/grep1.dat:281477:      else
../inputs/grep1.dat:281488:	for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:281517:	  kwset->next[i] = next[i];
../inputs/grep1.dat:281546:    }
../inputs/grep1.dat:281552:
../inputs/grep1.dat:281553:  /* Fix things up for any translation table. */
../inputs/grep1.dat:281602:  if ((trans = kwset->trans) != 0)
../inputs/grep1.dat:281637:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:281669:      kwset->delta[i] = delta[(unsigned char) trans[i]];
../inputs/grep1.dat:281726:  else
../inputs/grep1.dat:281733:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:281765:      kwset->delta[i] = delta[i];
../inputs/grep1.dat:281799:
../inputs/grep1.dat:281800:  return 0;
../inputs/grep1.dat:281812:}
../inputs/grep1.dat:281814:
../inputs/grep1.dat:281815:#define U(C) ((unsigned char) (C))
../inputs/grep1.dat:281850:
../inputs/grep1.dat:281851:/* Fast boyer-moore search. */
../inputs/grep1.dat:281882:static char *
../inputs/grep1.dat:281896:bmexec(kws, text, size)
../inputs/grep1.dat:281920:     kwset_t kws;
../inputs/grep1.dat:281938:     char *text;
../inputs/grep1.dat:281955:     size_t size;
../inputs/grep1.dat:281973:{
../inputs/grep1.dat:281975:  struct kwset *kwset;
../inputs/grep1.dat:281998:  register unsigned char *d1;
../inputs/grep1.dat:282028:  register char *ep, *sp, *tp;
../inputs/grep1.dat:282059:  register int d, gc, i, len, md2;
../inputs/grep1.dat:282094:
../inputs/grep1.dat:282095:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:282127:  len = kwset->mind;
../inputs/grep1.dat:282148:
../inputs/grep1.dat:282149:  if (len == 0)
../inputs/grep1.dat:282165:    return text;
../inputs/grep1.dat:282182:  if (len > size)
../inputs/grep1.dat:282200:    return 0;
../inputs/grep1.dat:282214:  if (len == 1)
../inputs/grep1.dat:282230:    return memchr(text, kwset->target[0], size);
../inputs/grep1.dat:282279:
../inputs/grep1.dat:282280:  d1 = kwset->delta;
../inputs/grep1.dat:282301:  sp = kwset->target + len;
../inputs/grep1.dat:282329:  gc = U(sp[-2]);
../inputs/grep1.dat:282347:  md2 = kwset->mind2;
../inputs/grep1.dat:282369:  tp = text + len;
../inputs/grep1.dat:282388:
../inputs/grep1.dat:282389:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
../inputs/grep1.dat:282464:  if (size > 12 * len)
../inputs/grep1.dat:282487:    /* 11 is not a bug, the initial offset happens only once. */
../inputs/grep1.dat:282552:    for (ep = text + size - 11 * len;;)
../inputs/grep1.dat:282592:      {
../inputs/grep1.dat:282600:	while (tp <= ep)
../inputs/grep1.dat:282618:	  {
../inputs/grep1.dat:282623:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282656:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282689:	    if (d == 0)
../inputs/grep1.dat:282706:	      goto found;
../inputs/grep1.dat:282725:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282758:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282791:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282824:	    if (d == 0)
../inputs/grep1.dat:282841:	      goto found;
../inputs/grep1.dat:282860:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282893:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282926:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:282959:	    if (d == 0)
../inputs/grep1.dat:282976:	      goto found;
../inputs/grep1.dat:282995:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:283028:	    d = d1[U(tp[-1])], tp += d;
../inputs/grep1.dat:283061:	  }
../inputs/grep1.dat:283066:	break;
../inputs/grep1.dat:283074:      found:
../inputs/grep1.dat:283087:	if (U(tp[-2]) == gc)
../inputs/grep1.dat:283109:	  {
../inputs/grep1.dat:283114:	    for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
../inputs/grep1.dat:283172:	      ;
../inputs/grep1.dat:283181:	    if (i > len)
../inputs/grep1.dat:283199:	      return tp - len;
../inputs/grep1.dat:283223:	  }
../inputs/grep1.dat:283228:	tp += md2;
../inputs/grep1.dat:283240:      }
../inputs/grep1.dat:283248:
../inputs/grep1.dat:283249:  /* Now we have only a few characters left to search.  We
../inputs/grep1.dat:283308:     carefully avoid ever producing an out-of-bounds pointer. */
../inputs/grep1.dat:283373:  ep = text + size;
../inputs/grep1.dat:283393:  d = d1[U(tp[-1])];
../inputs/grep1.dat:283414:  while (d <= ep - tp)
../inputs/grep1.dat:283437:    {
../inputs/grep1.dat:283443:      d = d1[U((tp += d)[-1])];
../inputs/grep1.dat:283475:      if (d != 0)
../inputs/grep1.dat:283493:	continue;
../inputs/grep1.dat:283504:      if (tp[-2] == gc)
../inputs/grep1.dat:283528:	{
../inputs/grep1.dat:283531:	  for (i = 3; i <= len && U(tp[-i]) == U(sp[-i]); ++i)
../inputs/grep1.dat:283587:	    ;
../inputs/grep1.dat:283594:	  if (i > len)
../inputs/grep1.dat:283610:	    return tp - len;
../inputs/grep1.dat:283632:	}
../inputs/grep1.dat:283635:      d = md2;
../inputs/grep1.dat:283650:    }
../inputs/grep1.dat:283656:
../inputs/grep1.dat:283657:  return 0;
../inputs/grep1.dat:283669:}
../inputs/grep1.dat:283671:
../inputs/grep1.dat:283672:/* Hairy multiple string search. */
../inputs/grep1.dat:283708:static char *
../inputs/grep1.dat:283722:cwexec(kws, text, len, kwsmatch)
../inputs/grep1.dat:283755:     kwset_t kws;
../inputs/grep1.dat:283773:     char *text;
../inputs/grep1.dat:283790:     size_t len;
../inputs/grep1.dat:283807:     struct kwsmatch *kwsmatch;
../inputs/grep1.dat:283839:{
../inputs/grep1.dat:283841:  struct kwset *kwset;
../inputs/grep1.dat:283864:  struct trie **next, *trie, *accept;
../inputs/grep1.dat:283902:  char *beg, *lim, *mch, *lmch;
../inputs/grep1.dat:283934:  register unsigned char c, *delta;
../inputs/grep1.dat:283970:  register int d;
../inputs/grep1.dat:283988:  register char *end, *qlim;
../inputs/grep1.dat:284017:  register struct tree *tree;
../inputs/grep1.dat:284047:  register char *trans;
../inputs/grep1.dat:284071:
../inputs/grep1.dat:284072:  /* Initialize register copies and look for easy ways out. */
../inputs/grep1.dat:284135:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:284167:  if (len < kwset->mind)
../inputs/grep1.dat:284192:    return 0;
../inputs/grep1.dat:284206:  next = kwset->next;
../inputs/grep1.dat:284228:  delta = kwset->delta;
../inputs/grep1.dat:284252:  trans = kwset->trans;
../inputs/grep1.dat:284276:  lim = text + len;
../inputs/grep1.dat:284296:  end = text;
../inputs/grep1.dat:284310:  if ((d = kwset->mind) != 0)
../inputs/grep1.dat:284340:    mch = 0;
../inputs/grep1.dat:284353:  else
../inputs/grep1.dat:284360:    {
../inputs/grep1.dat:284366:      mch = text, accept = kwset->trie;
../inputs/grep1.dat:284406:      goto match;
../inputs/grep1.dat:284424:    }
../inputs/grep1.dat:284430:
../inputs/grep1.dat:284431:  if (len >= 4 * kwset->mind)
../inputs/grep1.dat:284461:    qlim = lim - 4 * kwset->mind;
../inputs/grep1.dat:284495:  else
../inputs/grep1.dat:284502:    qlim = 0;
../inputs/grep1.dat:284516:
../inputs/grep1.dat:284517:  while (lim - end >= d)
../inputs/grep1.dat:284542:    {
../inputs/grep1.dat:284548:      if (qlim && end <= qlim)
../inputs/grep1.dat:284579:	{
../inputs/grep1.dat:284582:	  end += d - 1;
../inputs/grep1.dat:284599:	  while ((d = delta[c = *end]) && end < qlim)
../inputs/grep1.dat:284646:	    {
../inputs/grep1.dat:284653:	      end += d;
../inputs/grep1.dat:284670:	      end += delta[(unsigned char) *end];
../inputs/grep1.dat:284713:	      end += delta[(unsigned char) *end];
../inputs/grep1.dat:284756:	    }
../inputs/grep1.dat:284763:	  ++end;
../inputs/grep1.dat:284773:	}
../inputs/grep1.dat:284776:      else
../inputs/grep1.dat:284787:	d = delta[c = (end += d)[-1]];
../inputs/grep1.dat:284819:      if (d)
../inputs/grep1.dat:284832:	continue;
../inputs/grep1.dat:284843:      beg = end - 1;
../inputs/grep1.dat:284864:      trie = next[c];
../inputs/grep1.dat:284886:      if (trie->accepting)
../inputs/grep1.dat:284913:	{
../inputs/grep1.dat:284916:	  mch = beg;
../inputs/grep1.dat:284930:	  accept = trie;
../inputs/grep1.dat:284948:	}
../inputs/grep1.dat:284951:      d = trie->shift;
../inputs/grep1.dat:284974:      while (beg > text)
../inputs/grep1.dat:284999:	{
../inputs/grep1.dat:285002:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
../inputs/grep1.dat:285057:	  tree = trie->links;
../inputs/grep1.dat:285080:	  while (tree && c != tree->label)
../inputs/grep1.dat:285116:	    if (c < tree->label)
../inputs/grep1.dat:285142:	      tree = tree->llink;
../inputs/grep1.dat:285169:	    else
../inputs/grep1.dat:285179:	      tree = tree->rlink;
../inputs/grep1.dat:285206:	  if (tree)
../inputs/grep1.dat:285219:	    {
../inputs/grep1.dat:285226:	      trie = tree->trie;
../inputs/grep1.dat:285252:	      if (trie->accepting)
../inputs/grep1.dat:285280:		{
../inputs/grep1.dat:285284:		  mch = beg;
../inputs/grep1.dat:285299:		  accept = trie;
../inputs/grep1.dat:285318:		}
../inputs/grep1.dat:285322:	    }
../inputs/grep1.dat:285329:	  else
../inputs/grep1.dat:285337:	    break;
../inputs/grep1.dat:285349:	  d = trie->shift;
../inputs/grep1.dat:285369:	}
../inputs/grep1.dat:285372:      if (mch)
../inputs/grep1.dat:285387:	goto match;
../inputs/grep1.dat:285400:    }
../inputs/grep1.dat:285406:  return 0;
../inputs/grep1.dat:285418:
../inputs/grep1.dat:285419: match:
../inputs/grep1.dat:285427:  /* Given a known match, find the longest possible match anchored
../inputs/grep1.dat:285494:     at or before its starting point.  This is nearly a verbatim
../inputs/grep1.dat:285559:     copy of the preceding main search loops. */
../inputs/grep1.dat:285608:  if (lim - mch > kwset->maxd)
../inputs/grep1.dat:285639:    lim = mch + kwset->maxd;
../inputs/grep1.dat:285668:  lmch = 0;
../inputs/grep1.dat:285680:  d = 1;
../inputs/grep1.dat:285689:  while (lim - end >= d)
../inputs/grep1.dat:285714:    {
../inputs/grep1.dat:285720:      if ((d = delta[c = (end += d)[-1]]) != 0)
../inputs/grep1.dat:285768:	continue;
../inputs/grep1.dat:285779:      beg = end - 1;
../inputs/grep1.dat:285800:      if (!(trie = next[c]))
../inputs/grep1.dat:285829:	{
../inputs/grep1.dat:285832:	  d = 1;
../inputs/grep1.dat:285842:	  continue;
../inputs/grep1.dat:285855:	}
../inputs/grep1.dat:285858:      if (trie->accepting && beg <= mch)
../inputs/grep1.dat:285899:	{
../inputs/grep1.dat:285902:	  lmch = beg;
../inputs/grep1.dat:285917:	  accept = trie;
../inputs/grep1.dat:285935:	}
../inputs/grep1.dat:285938:      d = trie->shift;
../inputs/grep1.dat:285961:      while (beg > text)
../inputs/grep1.dat:285986:	{
../inputs/grep1.dat:285989:	  c = trans ? trans[(unsigned char) *--beg] : *--beg;
../inputs/grep1.dat:286044:	  tree = trie->links;
../inputs/grep1.dat:286067:	  while (tree && c != tree->label)
../inputs/grep1.dat:286103:	    if (c < tree->label)
../inputs/grep1.dat:286129:	      tree = tree->llink;
../inputs/grep1.dat:286156:	    else
../inputs/grep1.dat:286166:	      tree = tree->rlink;
../inputs/grep1.dat:286193:	  if (tree)
../inputs/grep1.dat:286206:	    {
../inputs/grep1.dat:286213:	      trie = tree->trie;
../inputs/grep1.dat:286239:	      if (trie->accepting && beg <= mch)
../inputs/grep1.dat:286281:		{
../inputs/grep1.dat:286285:		  lmch = beg;
../inputs/grep1.dat:286301:		  accept = trie;
../inputs/grep1.dat:286320:		}
../inputs/grep1.dat:286324:	    }
../inputs/grep1.dat:286331:	  else
../inputs/grep1.dat:286339:	    break;
../inputs/grep1.dat:286351:	  d = trie->shift;
../inputs/grep1.dat:286371:	}
../inputs/grep1.dat:286374:      if (lmch)
../inputs/grep1.dat:286390:	{
../inputs/grep1.dat:286393:	  mch = lmch;
../inputs/grep1.dat:286408:	  goto match;
../inputs/grep1.dat:286423:	}
../inputs/grep1.dat:286426:      if (!d)
../inputs/grep1.dat:286440:	d = 1;
../inputs/grep1.dat:286448:    }
../inputs/grep1.dat:286454:
../inputs/grep1.dat:286455:  if (kwsmatch)
../inputs/grep1.dat:286471:    {
../inputs/grep1.dat:286477:      kwsmatch->index = accept->accepting / 2;
../inputs/grep1.dat:286524:      kwsmatch->beg[0] = mch;
../inputs/grep1.dat:286554:      kwsmatch->size[0] = accept->depth;
../inputs/grep1.dat:286595:    }
../inputs/grep1.dat:286601:  return mch;
../inputs/grep1.dat:286615:}
../inputs/grep1.dat:286617:  
../inputs/grep1.dat:286620:/* Search through the given text for a match of any member of the
../inputs/grep1.dat:286686:   given keyword set.  Return a pointer to the first character of
../inputs/grep1.dat:286752:   the matching substring, or NULL if no match is found.  If FOUNDLEN
../inputs/grep1.dat:286822:   is non-NULL store in the referenced location the length of the
../inputs/grep1.dat:286888:   matching substring.  Similarly, if FOUNDIDX is non-NULL, store
../inputs/grep1.dat:286954:   in the referenced location the index number of the particular
../inputs/grep1.dat:287019:   keyword matched. */
../inputs/grep1.dat:287042:char *
../inputs/grep1.dat:287049:kwsexec(kws, text, size, kwsmatch)
../inputs/grep1.dat:287084:     kwset_t kws;
../inputs/grep1.dat:287102:     char *text;
../inputs/grep1.dat:287119:     size_t size;
../inputs/grep1.dat:287137:     struct kwsmatch *kwsmatch;
../inputs/grep1.dat:287169:{
../inputs/grep1.dat:287171:  struct kwset *kwset;
../inputs/grep1.dat:287194:  char *ret;
../inputs/grep1.dat:287207:
../inputs/grep1.dat:287208:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:287240:  if (kwset->words == 1 && kwset->trans == 0)
../inputs/grep1.dat:287286:    {
../inputs/grep1.dat:287292:      ret = bmexec(kws, text, size);
../inputs/grep1.dat:287329:      if (kwsmatch != 0 && ret != 0)
../inputs/grep1.dat:287366:	{
../inputs/grep1.dat:287369:	  kwsmatch->index = 0;
../inputs/grep1.dat:287393:	  kwsmatch->beg[0] = ret;
../inputs/grep1.dat:287420:	  kwsmatch->size[0] = kwset->mind;
../inputs/grep1.dat:287456:	}
../inputs/grep1.dat:287459:      return ret;
../inputs/grep1.dat:287477:    }
../inputs/grep1.dat:287483:  else
../inputs/grep1.dat:287490:    return cwexec(kws, text, size, kwsmatch);
../inputs/grep1.dat:287536:}
../inputs/grep1.dat:287538:
../inputs/grep1.dat:287539:/* Free the components of the given keyword set. */
../inputs/grep1.dat:287591:void
../inputs/grep1.dat:287596:kwsfree(kws)
../inputs/grep1.dat:287609:     kwset_t kws;
../inputs/grep1.dat:287627:{
../inputs/grep1.dat:287629:  struct kwset *kwset;
../inputs/grep1.dat:287652:
../inputs/grep1.dat:287653:  kwset = (struct kwset *) kws;
../inputs/grep1.dat:287685:  obstack_free(&kwset->obstack, 0);
../inputs/grep1.dat:287721:  free(kws);
../inputs/grep1.dat:287734:}
../inputs/grep1.dat:287736:/* obstack.c - subroutines used implicitly by object stack macros
../inputs/grep1.dat:287802:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
../inputs/grep1.dat:287861:
../inputs/grep1.dat:287862:This program is free software; you can redistribute it and/or modify it
../inputs/grep1.dat:287934:under the terms of the GNU General Public License as published by the
../inputs/grep1.dat:288004:Free Software Foundation; either version 2, or (at your option) any
../inputs/grep1.dat:288072:later version.
../inputs/grep1.dat:288087:
../inputs/grep1.dat:288088:This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:288152:but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:288215:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:288277:GNU General Public License for more details.
../inputs/grep1.dat:288322:
../inputs/grep1.dat:288323:You should have received a copy of the GNU General Public License
../inputs/grep1.dat:288389:along with this program; if not, write to the Free Software
../inputs/grep1.dat:288449:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
../inputs/grep1.dat:288505:
../inputs/grep1.dat:288531:
../inputs/grep1.dat:288532:/* This is just to get __GNU_LIBRARY__ defined.  */
../inputs/grep1.dat:288607:
../inputs/grep1.dat:288608:/* Comment out all this code if we are using the GNU C Library, and are not
../inputs/grep1.dat:288684:   actually compiling the library itself.  This code is part of the GNU C
../inputs/grep1.dat:288832:   and linking in this code is a waste when using the GNU C library
../inputs/grep1.dat:288900:   (especially if it is a shared library).  Rather than having every GNU
../inputs/grep1.dat:288973:   program understand `configure --with-gnu-libc' and omit the object files,
../inputs/grep1.dat:289050:   it is simpler to just do this in the source for each such file.  */
../inputs/grep1.dat:289121:
../inputs/grep1.dat:289122:#if defined (_LIBC) || !defined (__GNU_LIBRARY__)
../inputs/grep1.dat:289172:
../inputs/grep1.dat:289173:
../inputs/grep1.dat:289174:#ifdef __STDC__
../inputs/grep1.dat:289190:#define POINTER void *
../inputs/grep1.dat:289213:#else
../inputs/grep1.dat:289219:#define POINTER char *
../inputs/grep1.dat:289242:#endif
../inputs/grep1.dat:289249:
../inputs/grep1.dat:289250:/* Determine default alignment.  */
../inputs/grep1.dat:289286:struct fooalign {char x; double d;};
../inputs/grep1.dat:289323:#define DEFAULT_ALIGNMENT  \
../inputs/grep1.dat:289352:  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
../inputs/grep1.dat:289421:/* If malloc were really smart, it would round addresses to DEFAULT_ALIGNMENT.
../inputs/grep1.dat:289500:   But in fact it might be less smart and round addresses to as much as
../inputs/grep1.dat:289572:   DEFAULT_ROUNDING.  So we prepare for it to do that.  */
../inputs/grep1.dat:289631:union fooround {long x; double d;};
../inputs/grep1.dat:289667:#define DEFAULT_ROUNDING (sizeof (union fooround))
../inputs/grep1.dat:289718:
../inputs/grep1.dat:289719:/* When we copy a long block of data, this is the unit to do it with.
../inputs/grep1.dat:289789:   On some machines, copying successive ints does not work;
../inputs/grep1.dat:289849:   in such a case, redefine COPYING_UNIT to `long' (if that works)
../inputs/grep1.dat:289916:   or `char' as a last resort.  */
../inputs/grep1.dat:289951:#ifndef COPYING_UNIT
../inputs/grep1.dat:289972:#define COPYING_UNIT int
../inputs/grep1.dat:289997:#endif
../inputs/grep1.dat:290004:
../inputs/grep1.dat:290005:/* The non-GNU-C macros copy the obstack into this global variable
../inputs/grep1.dat:290072:   to avoid multiple evaluation.  */
../inputs/grep1.dat:290109:
../inputs/grep1.dat:290110:struct obstack *_obstack;
../inputs/grep1.dat:290136:
../inputs/grep1.dat:290137:/* Define a macro that either calls functions with the traditional malloc/free
../inputs/grep1.dat:290216:   calling interface, or calls functions with the mmalloc/mfree interface
../inputs/grep1.dat:290290:   (that adds an extra first argument), based on the state of use_extra_arg.
../inputs/grep1.dat:290367:   For free, do not use ?:, since some compilers, like the MIPS compilers,
../inputs/grep1.dat:290442:   do not allow (expr) ? void : void.  */
../inputs/grep1.dat:290484:
../inputs/grep1.dat:290485:#define CALL_CHUNKFUN(h, size) \
../inputs/grep1.dat:290518:  (((h) -> use_extra_arg) \
../inputs/grep1.dat:290546:   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
../inputs/grep1.dat:290595:   : (*(h)->chunkfun) ((size)))
../inputs/grep1.dat:290627:
../inputs/grep1.dat:290628:#define CALL_FREEFUN(h, old_chunk) \
../inputs/grep1.dat:290665:  do { \
../inputs/grep1.dat:290674:    if ((h) -> use_extra_arg) \
../inputs/grep1.dat:290706:      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
../inputs/grep1.dat:290761:    else \
../inputs/grep1.dat:290772:      (*(h)->freefun) ((old_chunk)); \
../inputs/grep1.dat:290811:  } while (0)
../inputs/grep1.dat:290825:
../inputs/grep1.dat:290826:
../inputs/grep1.dat:290828:/* Initialize an obstack H for use.  Specify chunk size SIZE (0 means default).
../inputs/grep1.dat:290908:   Objects start on multiples of ALIGNMENT (0 means use default).
../inputs/grep1.dat:290974:   CHUNKFUN is the function to use to allocate chunks,
../inputs/grep1.dat:291029:   and FREEFUN the function to free them.  */
../inputs/grep1.dat:291075:
../inputs/grep1.dat:291076:void
../inputs/grep1.dat:291081:_obstack_begin (h, size, alignment, chunkfun, freefun)
../inputs/grep1.dat:291136:     struct obstack *h;
../inputs/grep1.dat:291160:     int size;
../inputs/grep1.dat:291175:     int alignment;
../inputs/grep1.dat:291195:     POINTER (*chunkfun) ();
../inputs/grep1.dat:291224:     void (*freefun) ();
../inputs/grep1.dat:291249:{
../inputs/grep1.dat:291251:  register struct _obstack_chunk* chunk; /* points to new chunk */
../inputs/grep1.dat:291318:
../inputs/grep1.dat:291319:  if (alignment == 0)
../inputs/grep1.dat:291341:    alignment = DEFAULT_ALIGNMENT;
../inputs/grep1.dat:291376:  if (size == 0)
../inputs/grep1.dat:291393:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
../inputs/grep1.dat:291466:    {
../inputs/grep1.dat:291472:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
../inputs/grep1.dat:291534:	 Use the values for range checking, because if range checking is off,
../inputs/grep1.dat:291605:	 the extra bytes won't be missed terribly, but if range checking is on
../inputs/grep1.dat:291677:	 and we used a larger request, a whole extra 4096 bytes would be
../inputs/grep1.dat:291743:	 allocated.
../inputs/grep1.dat:291756:
../inputs/grep1.dat:291757:	 These number are irrelevant to the new GNU malloc.  I suspect it is
../inputs/grep1.dat:291827:	 less sensitive to the size of the request.  */
../inputs/grep1.dat:291876:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
../inputs/grep1.dat:291952:		    + 4 + DEFAULT_ROUNDING - 1)
../inputs/grep1.dat:291986:		   & ~(DEFAULT_ROUNDING - 1));
../inputs/grep1.dat:292019:      size = 4096 - extra;
../inputs/grep1.dat:292046:    }
../inputs/grep1.dat:292052:
../inputs/grep1.dat:292053:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
../inputs/grep1.dat:292111:  h->freefun = freefun;
../inputs/grep1.dat:292135:  h->chunk_size = size;
../inputs/grep1.dat:292159:  h->alignment_mask = alignment - 1;
../inputs/grep1.dat:292196:  h->use_extra_arg = 0;
../inputs/grep1.dat:292220:
../inputs/grep1.dat:292221:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
../inputs/grep1.dat:292278:  h->next_free = h->object_base = chunk->contents;
../inputs/grep1.dat:292329:  h->chunk_limit = chunk->limit
../inputs/grep1.dat:292361:    = (char *) chunk + h->chunk_size;
../inputs/grep1.dat:292399:  chunk->prev = 0;
../inputs/grep1.dat:292418:  /* The initial chunk now contains no empty object.  */
../inputs/grep1.dat:292475:  h->maybe_empty_object = 0;
../inputs/grep1.dat:292504:}
../inputs/grep1.dat:292506:
../inputs/grep1.dat:292507:void
../inputs/grep1.dat:292512:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
../inputs/grep1.dat:292574:     struct obstack *h;
../inputs/grep1.dat:292598:     int size;
../inputs/grep1.dat:292613:     int alignment;
../inputs/grep1.dat:292633:     POINTER (*chunkfun) ();
../inputs/grep1.dat:292662:     void (*freefun) ();
../inputs/grep1.dat:292687:     POINTER arg;
../inputs/grep1.dat:292705:{
../inputs/grep1.dat:292707:  register struct _obstack_chunk* chunk; /* points to new chunk */
../inputs/grep1.dat:292774:
../inputs/grep1.dat:292775:  if (alignment == 0)
../inputs/grep1.dat:292797:    alignment = DEFAULT_ALIGNMENT;
../inputs/grep1.dat:292832:  if (size == 0)
../inputs/grep1.dat:292849:    /* Default size is what GNU malloc can fit in a 4096-byte block.  */
../inputs/grep1.dat:292922:    {
../inputs/grep1.dat:292928:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
../inputs/grep1.dat:292990:	 Use the values for range checking, because if range checking is off,
../inputs/grep1.dat:293061:	 the extra bytes won't be missed terribly, but if range checking is on
../inputs/grep1.dat:293133:	 and we used a larger request, a whole extra 4096 bytes would be
../inputs/grep1.dat:293199:	 allocated.
../inputs/grep1.dat:293212:
../inputs/grep1.dat:293213:	 These number are irrelevant to the new GNU malloc.  I suspect it is
../inputs/grep1.dat:293283:	 less sensitive to the size of the request.  */
../inputs/grep1.dat:293332:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
../inputs/grep1.dat:293408:		    + 4 + DEFAULT_ROUNDING - 1)
../inputs/grep1.dat:293442:		   & ~(DEFAULT_ROUNDING - 1));
../inputs/grep1.dat:293475:      size = 4096 - extra;
../inputs/grep1.dat:293502:    }
../inputs/grep1.dat:293508:
../inputs/grep1.dat:293509:  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
../inputs/grep1.dat:293567:  h->freefun = freefun;
../inputs/grep1.dat:293591:  h->chunk_size = size;
../inputs/grep1.dat:293615:  h->alignment_mask = alignment - 1;
../inputs/grep1.dat:293652:  h->extra_arg = arg;
../inputs/grep1.dat:293674:  h->use_extra_arg = 1;
../inputs/grep1.dat:293698:
../inputs/grep1.dat:293699:  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
../inputs/grep1.dat:293756:  h->next_free = h->object_base = chunk->contents;
../inputs/grep1.dat:293807:  h->chunk_limit = chunk->limit
../inputs/grep1.dat:293839:    = (char *) chunk + h->chunk_size;
../inputs/grep1.dat:293877:  chunk->prev = 0;
../inputs/grep1.dat:293896:  /* The initial chunk now contains no empty object.  */
../inputs/grep1.dat:293953:  h->maybe_empty_object = 0;
../inputs/grep1.dat:293982:}
../inputs/grep1.dat:293984:
../inputs/grep1.dat:293985:/* Allocate a new current chunk for the obstack *H
../inputs/grep1.dat:294036:   on the assumption that LENGTH bytes need to be added
../inputs/grep1.dat:294092:   to the current object, or a new object of length LENGTH allocated.
../inputs/grep1.dat:294162:   Copies any partial object from the end of the old chunk
../inputs/grep1.dat:294221:   to the beginning of the new one.  */
../inputs/grep1.dat:294261:
../inputs/grep1.dat:294262:void
../inputs/grep1.dat:294267:_obstack_newchunk (h, length)
../inputs/grep1.dat:294297:     struct obstack *h;
../inputs/grep1.dat:294321:     int length;
../inputs/grep1.dat:294338:{
../inputs/grep1.dat:294340:  register struct _obstack_chunk*	old_chunk = h->chunk;
../inputs/grep1.dat:294396:  register struct _obstack_chunk*	new_chunk;
../inputs/grep1.dat:294441:  register long	new_size;
../inputs/grep1.dat:294467:  register int obj_size = h->next_free - h->object_base;
../inputs/grep1.dat:294524:  register int i;
../inputs/grep1.dat:294542:  int already;
../inputs/grep1.dat:294557:
../inputs/grep1.dat:294558:  /* Compute size for new chunk.  */
../inputs/grep1.dat:294595:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
../inputs/grep1.dat:294653:  if (new_size < h->chunk_size)
../inputs/grep1.dat:294685:    new_size = h->chunk_size;
../inputs/grep1.dat:294715:
../inputs/grep1.dat:294716:  /* Allocate and initialize the new chunk.  */
../inputs/grep1.dat:294764:  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
../inputs/grep1.dat:294818:  new_chunk->prev = old_chunk;
../inputs/grep1.dat:294849:  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
../inputs/grep1.dat:294918:
../inputs/grep1.dat:294919:  /* Move the existing object to the new chunk.
../inputs/grep1.dat:294967:     Word at a time is fast and is safe if the object
../inputs/grep1.dat:295021:     is sufficiently aligned.  */
../inputs/grep1.dat:295055:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
../inputs/grep1.dat:295105:    {
../inputs/grep1.dat:295111:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
../inputs/grep1.dat:295164:	   i >= 0; i--)
../inputs/grep1.dat:295181:	((COPYING_UNIT *)new_chunk->contents)[i]
../inputs/grep1.dat:295223:	  = ((COPYING_UNIT *)h->object_base)[i];
../inputs/grep1.dat:295265:      /* We used to copy the odd few remaining bytes as one extra COPYING_UNIT,
../inputs/grep1.dat:295345:	 but that can cross a page boundary on a machine
../inputs/grep1.dat:295395:	 which does not do strict alignment for COPYING_UNITS.  */
../inputs/grep1.dat:295455:      already = obj_size / sizeof (COPYING_UNIT) * sizeof (COPYING_UNIT);
../inputs/grep1.dat:295529:    }
../inputs/grep1.dat:295535:  else
../inputs/grep1.dat:295542:    already = 0;
../inputs/grep1.dat:295559:  /* Copy remaining bytes one by one.  */
../inputs/grep1.dat:295601:  for (i = already; i < obj_size; i++)
../inputs/grep1.dat:295640:    new_chunk->contents[i] = h->object_base[i];
../inputs/grep1.dat:295688:
../inputs/grep1.dat:295689:  /* If the object just copied was the only data in OLD_CHUNK,
../inputs/grep1.dat:295752:     free that chunk and remove it from the chain.
../inputs/grep1.dat:295803:     But not if that chunk might contain an empty object.  */
../inputs/grep1.dat:295865:  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
../inputs/grep1.dat:295937:    {
../inputs/grep1.dat:295943:      new_chunk->prev = old_chunk->prev;
../inputs/grep1.dat:295984:      CALL_FREEFUN (h, old_chunk);
../inputs/grep1.dat:296019:    }
../inputs/grep1.dat:296025:
../inputs/grep1.dat:296026:  h->object_base = new_chunk->contents;
../inputs/grep1.dat:296066:  h->next_free = h->object_base + obj_size;
../inputs/grep1.dat:296110:  /* The new chunk certainly contains no empty object yet.  */
../inputs/grep1.dat:296173:  h->maybe_empty_object = 0;
../inputs/grep1.dat:296202:}
../inputs/grep1.dat:296204:
../inputs/grep1.dat:296205:/* Return nonzero if object OBJ has been allocated from obstack H.
../inputs/grep1.dat:296272:   This is here for debugging.
../inputs/grep1.dat:296303:   If you use it in a program, you are probably losing.  */
../inputs/grep1.dat:296363:
../inputs/grep1.dat:296364:int
../inputs/grep1.dat:296368:_obstack_allocated_p (h, obj)
../inputs/grep1.dat:296398:     struct obstack *h;
../inputs/grep1.dat:296422:     POINTER obj;
../inputs/grep1.dat:296440:{
../inputs/grep1.dat:296442:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:296527:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:296604:
../inputs/grep1.dat:296605:  lp = (h)->chunk;
../inputs/grep1.dat:296624:  /* We use >= rather than > since the object cannot be exactly at
../inputs/grep1.dat:296691:     the beginning of the chunk but might be an empty object exactly
../inputs/grep1.dat:296760:     at the end of an adjacent chunk. */
../inputs/grep1.dat:296801:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:296873:    {
../inputs/grep1.dat:296879:      plp = lp->prev;
../inputs/grep1.dat:296901:      lp = plp;
../inputs/grep1.dat:296917:    }
../inputs/grep1.dat:296923:  return lp != 0;
../inputs/grep1.dat:296941:}
../inputs/grep1.dat:296943:
../inputs/grep1.dat:296945:/* Free objects in obstack H, including OBJ and everything allocate
../inputs/grep1.dat:297013:   more recently than OBJ.  If OBJ is zero, free everything in H.  */
../inputs/grep1.dat:297083:
../inputs/grep1.dat:297084:#undef obstack_free
../inputs/grep1.dat:297104:
../inputs/grep1.dat:297105:/* This function has two names with identical definitions.
../inputs/grep1.dat:297164:   This is the first one, called from non-ANSI code.  */
../inputs/grep1.dat:297221:
../inputs/grep1.dat:297222:void
../inputs/grep1.dat:297227:_obstack_free (h, obj)
../inputs/grep1.dat:297250:     struct obstack *h;
../inputs/grep1.dat:297274:     POINTER obj;
../inputs/grep1.dat:297292:{
../inputs/grep1.dat:297294:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:297379:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:297456:
../inputs/grep1.dat:297457:  lp = h->chunk;
../inputs/grep1.dat:297474:  /* We use >= because there cannot be an object at the beginning of a chunk.
../inputs/grep1.dat:297552:     But there can be an empty object at that address
../inputs/grep1.dat:297606:     at the end of another chunk.  */
../inputs/grep1.dat:297644:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:297716:    {
../inputs/grep1.dat:297722:      plp = lp->prev;
../inputs/grep1.dat:297744:      CALL_FREEFUN (h, lp);
../inputs/grep1.dat:297772:      lp = plp;
../inputs/grep1.dat:297788:      /* If we switch chunks, we can't tell whether the new current
../inputs/grep1.dat:297856:	 chunk contains an empty object, so assume that it may.  */
../inputs/grep1.dat:297917:      h->maybe_empty_object = 1;
../inputs/grep1.dat:297950:    }
../inputs/grep1.dat:297956:  if (lp)
../inputs/grep1.dat:297966:    {
../inputs/grep1.dat:297972:      h->object_base = h->next_free = (char *)(obj);
../inputs/grep1.dat:298025:      h->chunk_limit = lp->limit;
../inputs/grep1.dat:298059:      h->chunk = lp;
../inputs/grep1.dat:298080:    }
../inputs/grep1.dat:298086:  else if (obj != 0)
../inputs/grep1.dat:298107:    /* obj is not in any of the chunks! */
../inputs/grep1.dat:298150:    abort ();
../inputs/grep1.dat:298164:}
../inputs/grep1.dat:298166:
../inputs/grep1.dat:298167:/* This function is used from ANSI code.  */
../inputs/grep1.dat:298212:
../inputs/grep1.dat:298213:void
../inputs/grep1.dat:298218:obstack_free (h, obj)
../inputs/grep1.dat:298240:     struct obstack *h;
../inputs/grep1.dat:298264:     POINTER obj;
../inputs/grep1.dat:298282:{
../inputs/grep1.dat:298284:  register struct _obstack_chunk*  lp;	/* below addr of any objects in this chunk */
../inputs/grep1.dat:298369:  register struct _obstack_chunk*  plp;	/* point to previous chunk if any */
../inputs/grep1.dat:298446:
../inputs/grep1.dat:298447:  lp = h->chunk;
../inputs/grep1.dat:298464:  /* We use >= because there cannot be an object at the beginning of a chunk.
../inputs/grep1.dat:298542:     But there can be an empty object at that address
../inputs/grep1.dat:298596:     at the end of another chunk.  */
../inputs/grep1.dat:298634:  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
../inputs/grep1.dat:298706:    {
../inputs/grep1.dat:298712:      plp = lp->prev;
../inputs/grep1.dat:298734:      CALL_FREEFUN (h, lp);
../inputs/grep1.dat:298762:      lp = plp;
../inputs/grep1.dat:298778:      /* If we switch chunks, we can't tell whether the new current
../inputs/grep1.dat:298846:	 chunk contains an empty object, so assume that it may.  */
../inputs/grep1.dat:298907:      h->maybe_empty_object = 1;
../inputs/grep1.dat:298940:    }
../inputs/grep1.dat:298946:  if (lp)
../inputs/grep1.dat:298956:    {
../inputs/grep1.dat:298962:      h->object_base = h->next_free = (char *)(obj);
../inputs/grep1.dat:299015:      h->chunk_limit = lp->limit;
../inputs/grep1.dat:299049:      h->chunk = lp;
../inputs/grep1.dat:299070:    }
../inputs/grep1.dat:299076:  else if (obj != 0)
../inputs/grep1.dat:299097:    /* obj is not in any of the chunks! */
../inputs/grep1.dat:299140:    abort ();
../inputs/grep1.dat:299154:}
../inputs/grep1.dat:299156:
../inputs/grep1.dat:299158:#if 0
../inputs/grep1.dat:299164:/* These are now turned off because the applications do not use it
../inputs/grep1.dat:299231:   and it uses bcopy via obstack_grow, which causes trouble on sysV.  */
../inputs/grep1.dat:299304:
../inputs/grep1.dat:299305:/* Now define the functional versions of the obstack macros.
../inputs/grep1.dat:299366:   Define them to simply use the corresponding macros to do the job.  */
../inputs/grep1.dat:299439:
../inputs/grep1.dat:299440:#ifdef __STDC__
../inputs/grep1.dat:299456:/* These function definitions do not work with non-ANSI preprocessors;
../inputs/grep1.dat:299527:   they won't pass through the macro names in parentheses.  */
../inputs/grep1.dat:299590:
../inputs/grep1.dat:299591:/* The function names appear in parentheses in order to prevent
../inputs/grep1.dat:299655:   the macro-definitions of the names from being expanded there.  */
../inputs/grep1.dat:299724:
../inputs/grep1.dat:299725:POINTER (obstack_base) (obstack)
../inputs/grep1.dat:299758:     struct obstack *obstack;
../inputs/grep1.dat:299788:{
../inputs/grep1.dat:299790:  return obstack_base (obstack);
../inputs/grep1.dat:299823:}
../inputs/grep1.dat:299825:
../inputs/grep1.dat:299826:POINTER (obstack_next_free) (obstack)
../inputs/grep1.dat:299864:     struct obstack *obstack;
../inputs/grep1.dat:299894:{
../inputs/grep1.dat:299896:  return obstack_next_free (obstack);
../inputs/grep1.dat:299934:}
../inputs/grep1.dat:299936:
../inputs/grep1.dat:299937:int (obstack_object_size) (obstack)
../inputs/grep1.dat:299973:     struct obstack *obstack;
../inputs/grep1.dat:300003:{
../inputs/grep1.dat:300005:  return obstack_object_size (obstack);
../inputs/grep1.dat:300045:}
../inputs/grep1.dat:300047:
../inputs/grep1.dat:300048:int (obstack_room) (obstack)
../inputs/grep1.dat:300077:     struct obstack *obstack;
../inputs/grep1.dat:300107:{
../inputs/grep1.dat:300109:  return obstack_room (obstack);
../inputs/grep1.dat:300142:}
../inputs/grep1.dat:300144:
../inputs/grep1.dat:300145:void (obstack_grow) (obstack, pointer, length)
../inputs/grep1.dat:300192:     struct obstack *obstack;
../inputs/grep1.dat:300222:     POINTER pointer;
../inputs/grep1.dat:300244:     int length;
../inputs/grep1.dat:300261:{
../inputs/grep1.dat:300263:  obstack_grow (obstack, pointer, length);
../inputs/grep1.dat:300306:}
../inputs/grep1.dat:300308:
../inputs/grep1.dat:300309:void (obstack_grow0) (obstack, pointer, length)
../inputs/grep1.dat:300357:     struct obstack *obstack;
../inputs/grep1.dat:300387:     POINTER pointer;
../inputs/grep1.dat:300409:     int length;
../inputs/grep1.dat:300426:{
../inputs/grep1.dat:300428:  obstack_grow0 (obstack, pointer, length);
../inputs/grep1.dat:300472:}
../inputs/grep1.dat:300474:
../inputs/grep1.dat:300475:void (obstack_1grow) (obstack, character)
../inputs/grep1.dat:300517:     struct obstack *obstack;
../inputs/grep1.dat:300547:     int character;
../inputs/grep1.dat:300567:{
../inputs/grep1.dat:300569:  obstack_1grow (obstack, character);
../inputs/grep1.dat:300607:}
../inputs/grep1.dat:300609:
../inputs/grep1.dat:300610:void (obstack_blank) (obstack, length)
../inputs/grep1.dat:300649:     struct obstack *obstack;
../inputs/grep1.dat:300679:     int length;
../inputs/grep1.dat:300696:{
../inputs/grep1.dat:300698:  obstack_blank (obstack, length);
../inputs/grep1.dat:300733:}
../inputs/grep1.dat:300735:
../inputs/grep1.dat:300736:void (obstack_1grow_fast) (obstack, character)
../inputs/grep1.dat:300783:     struct obstack *obstack;
../inputs/grep1.dat:300813:     int character;
../inputs/grep1.dat:300833:{
../inputs/grep1.dat:300835:  obstack_1grow_fast (obstack, character);
../inputs/grep1.dat:300878:}
../inputs/grep1.dat:300880:
../inputs/grep1.dat:300881:void (obstack_blank_fast) (obstack, length)
../inputs/grep1.dat:300925:     struct obstack *obstack;
../inputs/grep1.dat:300955:     int length;
../inputs/grep1.dat:300972:{
../inputs/grep1.dat:300974:  obstack_blank_fast (obstack, length);
../inputs/grep1.dat:301014:}
../inputs/grep1.dat:301016:
../inputs/grep1.dat:301017:POINTER (obstack_finish) (obstack)
../inputs/grep1.dat:301052:     struct obstack *obstack;
../inputs/grep1.dat:301082:{
../inputs/grep1.dat:301084:  return obstack_finish (obstack);
../inputs/grep1.dat:301119:}
../inputs/grep1.dat:301121:
../inputs/grep1.dat:301122:POINTER (obstack_alloc) (obstack, length)
../inputs/grep1.dat:301164:     struct obstack *obstack;
../inputs/grep1.dat:301194:     int length;
../inputs/grep1.dat:301211:{
../inputs/grep1.dat:301213:  return obstack_alloc (obstack, length);
../inputs/grep1.dat:301255:}
../inputs/grep1.dat:301257:
../inputs/grep1.dat:301258:POINTER (obstack_copy) (obstack, pointer, length)
../inputs/grep1.dat:301308:     struct obstack *obstack;
../inputs/grep1.dat:301338:     POINTER pointer;
../inputs/grep1.dat:301360:     int length;
../inputs/grep1.dat:301377:{
../inputs/grep1.dat:301379:  return obstack_copy (obstack, pointer, length);
../inputs/grep1.dat:301429:}
../inputs/grep1.dat:301431:
../inputs/grep1.dat:301432:POINTER (obstack_copy0) (obstack, pointer, length)
../inputs/grep1.dat:301483:     struct obstack *obstack;
../inputs/grep1.dat:301513:     POINTER pointer;
../inputs/grep1.dat:301535:     int length;
../inputs/grep1.dat:301552:{
../inputs/grep1.dat:301554:  return obstack_copy0 (obstack, pointer, length);
../inputs/grep1.dat:301605:}
../inputs/grep1.dat:301607:
../inputs/grep1.dat:301608:#endif /* __STDC__ */
../inputs/grep1.dat:301630:
../inputs/grep1.dat:301631:#endif /* 0 */
../inputs/grep1.dat:301646:
../inputs/grep1.dat:301647:#endif	/* _LIBC or not __GNU_LIBRARY__.  */
../inputs/grep1.dat:301691:/* search.c - searching subroutines using dfa, kwset and regex for grep.
../inputs/grep1.dat:301764:   Copyright (C) 1992 Free Software Foundation, Inc.
../inputs/grep1.dat:301817:
../inputs/grep1.dat:301818:   This program is free software; you can redistribute it and/or modify
../inputs/grep1.dat:301890:   it under the terms of the GNU General Public License as published by
../inputs/grep1.dat:301962:   the Free Software Foundation; either version 2, or (at your option)
../inputs/grep1.dat:302033:   any later version.
../inputs/grep1.dat:302055:
../inputs/grep1.dat:302056:   This program is distributed in the hope that it will be useful,
../inputs/grep1.dat:302123:   but WITHOUT ANY WARRANTY; without even the implied warranty of
../inputs/grep1.dat:302189:   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
../inputs/grep1.dat:302254:   GNU General Public License for more details.
../inputs/grep1.dat:302302:
../inputs/grep1.dat:302303:   You should have received a copy of the GNU General Public License
../inputs/grep1.dat:302372:   along with this program; if not, write to the Free Software
../inputs/grep1.dat:302435:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
../inputs/grep1.dat:302496:
../inputs/grep1.dat:302497:   Written August 1992 by Mike Haertel. */
../inputs/grep1.dat:302540:
../inputs/grep1.dat:302564:
../inputs/grep1.dat:302565:#ifdef STDC_HEADERS
../inputs/grep1.dat:302585:#if flag_limits==0
../inputs/grep1.dat:302604:#undef RE_DUP_MAX
../inputs/grep1.dat:302642:#define flag_limits 1
../inputs/grep1.dat:302664:#endif
../inputs/grep1.dat:302671:#if flag_stdlib==0
../inputs/grep1.dat:302710:#define flag_stdlib 1
../inputs/grep1.dat:302732:#endif
../inputs/grep1.dat:302739:#else
../inputs/grep1.dat:302745:#define UCHAR_MAX 255
../inputs/grep1.dat:302767:#if flag_systypes==0
../inputs/grep1.dat:302811:#define flag_systypes 1
../inputs/grep1.dat:302835:#endif
../inputs/grep1.dat:302842:extern char *malloc();
../inputs/grep1.dat:302865:#endif
../inputs/grep1.dat:302872:
../inputs/grep1.dat:302873:#ifdef HAVE_MEMCHR
../inputs/grep1.dat:302892:#if flag_string==0
../inputs/grep1.dat:302931:#define flag_string 1
../inputs/grep1.dat:302953:#endif
../inputs/grep1.dat:302960:#ifdef NEED_MEMORY_H
../inputs/grep1.dat:302981:#if flag_memory==0
../inputs/grep1.dat:303020:#define flag_memory 1
../inputs/grep1.dat:303042:#endif
../inputs/grep1.dat:303049:#endif
../inputs/grep1.dat:303056:#else
../inputs/grep1.dat:303062:#ifdef __STDC__
../inputs/grep1.dat:303078:extern void *memchr();
../inputs/grep1.dat:303101:#else
../inputs/grep1.dat:303107:extern char *memchr();
../inputs/grep1.dat:303130:#endif
../inputs/grep1.dat:303137:#endif
../inputs/grep1.dat:303144:
../inputs/grep1.dat:303145:#if defined(HAVE_STRING_H) || defined(STDC_HEADERS)
../inputs/grep1.dat:303197:#undef bcopy
../inputs/grep1.dat:303210:#define bcopy(s, d, n) memcpy((d), (s), (n))
../inputs/grep1.dat:303255:#endif
../inputs/grep1.dat:303262:
../inputs/grep1.dat:303263:#ifdef isascii
../inputs/grep1.dat:303278:#define ISALNUM(C) (isascii(C) && isalnum(C))
../inputs/grep1.dat:303324:#define ISUPPER(C) (isascii(C) && isupper(C))
../inputs/grep1.dat:303370:#else
../inputs/grep1.dat:303376:#define ISALNUM(C) isalnum(C)
../inputs/grep1.dat:303406:#define ISUPPER(C) isupper(C)
../inputs/grep1.dat:303436:#endif
../inputs/grep1.dat:303443:
../inputs/grep1.dat:303444:#define TOLOWER(C) (ISUPPER(C) ? tolower(C) : (C))
../inputs/grep1.dat:303495:
../inputs/grep1.dat:303585:
../inputs/grep1.dat:303586:#define NCHAR (UCHAR_MAX + 1)
../inputs/grep1.dat:303616:
../inputs/grep1.dat:303617:#if __STDC__
../inputs/grep1.dat:303630:static void Gcompile(char *, size_t);
../inputs/grep1.dat:303668:static void Ecompile(char *, size_t);
../inputs/grep1.dat:303706:static char *EGexecute(char *, size_t, char **);
../inputs/grep1.dat:303755:static void Fcompile(char *, size_t);
../inputs/grep1.dat:303793:static char *Fexecute(char *, size_t, char **);
../inputs/grep1.dat:303841:#else
../inputs/grep1.dat:303847:static void Gcompile();
../inputs/grep1.dat:303871:static void Ecompile();
../inputs/grep1.dat:303895:static char *EGexecute();
../inputs/grep1.dat:303921:static void Fcompile();
../inputs/grep1.dat:303945:static char *Fexecute();
../inputs/grep1.dat:303970:#endif
../inputs/grep1.dat:303977:
../inputs/grep1.dat:303978:/* Here is the matchers vector for the main program. */
../inputs/grep1.dat:304034:struct matcher matchers[] = {
../inputs/grep1.dat:304064:  { "default", Gcompile, EGexecute },
../inputs/grep1.dat:304102:  { "grep", Gcompile, EGexecute },
../inputs/grep1.dat:304137:  { "ggrep", Gcompile, EGexecute },
../inputs/grep1.dat:304173:  { "egrep", Ecompile, EGexecute },
../inputs/grep1.dat:304209:  { "posix-egrep", Ecompile, EGexecute },
../inputs/grep1.dat:304251:  { "gegrep", Ecompile, EGexecute },
../inputs/grep1.dat:304288:  { "fgrep", Fcompile, Fexecute },
../inputs/grep1.dat:304323:  { "gfgrep", Fcompile, Fexecute },
../inputs/grep1.dat:304359:  { 0, 0, 0 },
../inputs/grep1.dat:304374:};
../inputs/grep1.dat:304377:
../inputs/grep1.dat:304378:/* For -w, we also consider _ to be word constituent.  */
../inputs/grep1.dat:304436:#define WCHAR(C) (ISALNUM(C) || (C) == '_')
../inputs/grep1.dat:304480:
../inputs/grep1.dat:304481:/* DFA compiled regexp. */
../inputs/grep1.dat:304508:static struct dfa dfa_1;
../inputs/grep1.dat:304533:
../inputs/grep1.dat:304534:/* Regex compiled regexp. */
../inputs/grep1.dat:304563:static struct re_pattern_buffer regex;
../inputs/grep1.dat:304602:
../inputs/grep1.dat:304603:/* KWset compiled pattern.  For Ecompile and Gcompile, we compile
../inputs/grep1.dat:304669:   a list of strings, at least one of which is known to occur in
../inputs/grep1.dat:304734:   any string matching the regexp. */
../inputs/grep1.dat:304772:static kwset_t kwset;
../inputs/grep1.dat:304794:
../inputs/grep1.dat:304795:/* Last compiled fixed string known to exactly match the regexp.
../inputs/grep1.dat:304860:   If kwsexec() returns < lastexact, then we don't need to
../inputs/grep1.dat:304919:   call the regexp matcher at all. */
../inputs/grep1.dat:304957:static int lastexact;
../inputs/grep1.dat:304979:
../inputs/grep1.dat:304980:void
../inputs/grep1.dat:304985:dfaerror(mesg)
../inputs/grep1.dat:305000:     char *mesg;
../inputs/grep1.dat:305017:{
../inputs/grep1.dat:305019:  fatal(mesg, 0);
../inputs/grep1.dat:305037:}
../inputs/grep1.dat:305039:
../inputs/grep1.dat:305040:static void
../inputs/grep1.dat:305052:kwsinit()
../inputs/grep1.dat:305062:{
../inputs/grep1.dat:305064:  static char trans[NCHAR];
../inputs/grep1.dat:305092:  int i;
../inputs/grep1.dat:305101:
../inputs/grep1.dat:305102:  if (match_icase)
../inputs/grep1.dat:305121:    for (i = 0; i < NCHAR; ++i)
../inputs/grep1.dat:305153:      trans[i] = TOLOWER(i);
../inputs/grep1.dat:305182:
../inputs/grep1.dat:305183:  if (!(kwset = kwsalloc(match_icase ? trans : (char *) 0)))
../inputs/grep1.dat:305244:    fatal("memory exhausted", 0);
../inputs/grep1.dat:305278:}  
../inputs/grep1.dat:305282:
../inputs/grep1.dat:305283:/* If the DFA turns out to have some set of fixed strings one of
../inputs/grep1.dat:305348:   which must occur in the match, then we build a kwset matcher
../inputs/grep1.dat:305412:   to find those strings, and thus quickly filter out impossible
../inputs/grep1.dat:305477:   matches. */
../inputs/grep1.dat:305492:static void
../inputs/grep1.dat:305504:kwsmusts()
../inputs/grep1.dat:305515:{
../inputs/grep1.dat:305517:  struct dfamust *dm;
../inputs/grep1.dat:305539:  char *err;
../inputs/grep1.dat:305552:
../inputs/grep1.dat:305553:  if (dfa_1.musts)
../inputs/grep1.dat:305572:    {
../inputs/grep1.dat:305578:      kwsinit();
../inputs/grep1.dat:305595:      /* First, we compile in the substrings known to be exact
../inputs/grep1.dat:305658:	 matches.  The kwset matcher will return the index
../inputs/grep1.dat:305710:	 of the matching string that it chooses. */
../inputs/grep1.dat:305755:      for (dm = dfa_1.musts; dm; dm = dm->next)
../inputs/grep1.dat:305803:	{
../inputs/grep1.dat:305806:	  if (!dm->exact)
../inputs/grep1.dat:305825:	    continue;
../inputs/grep1.dat:305840:	  ++lastexact;
../inputs/grep1.dat:305856:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
../inputs/grep1.dat:305920:	    fatal(err, 0);
../inputs/grep1.dat:305940:	}
../inputs/grep1.dat:305943:      /* Now, we compile the substrings that will require
../inputs/grep1.dat:306001:	 the use of the regexp matcher.  */
../inputs/grep1.dat:306038:      for (dm = dfa_1.musts; dm; dm = dm->next)
../inputs/grep1.dat:306086:	{
../inputs/grep1.dat:306089:	  if (dm->exact)
../inputs/grep1.dat:306107:	    continue;
../inputs/grep1.dat:306122:	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
../inputs/grep1.dat:306186:	    fatal(err, 0);
../inputs/grep1.dat:306206:	}
../inputs/grep1.dat:306209:      if ((err = kwsprep(kwset)) != 0)
../inputs/grep1.dat:306248:	fatal(err, 0);
../inputs/grep1.dat:306264:    }
../inputs/grep1.dat:306270:}
../inputs/grep1.dat:306272:
../inputs/grep1.dat:306273:static void
../inputs/grep1.dat:306285:Gcompile(pattern, size)
../inputs/grep1.dat:306309:     char *pattern;
../inputs/grep1.dat:306329:     size_t size;
../inputs/grep1.dat:306347:{
../inputs/grep1.dat:306349:#ifdef __STDC__
../inputs/grep1.dat:306365:  const
../inputs/grep1.dat:306373:#endif
../inputs/grep1.dat:306380:  char *err;
../inputs/grep1.dat:306393:
../inputs/grep1.dat:306394:  re_set_syntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE);
../inputs/grep1.dat:306454:  dfasyntax(RE_SYNTAX_GREP | RE_HAT_LISTS_NOT_NEWLINE, match_icase);
../inputs/grep1.dat:306523:
../inputs/grep1.dat:306524:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
../inputs/grep1.dat:306586:    fatal(err, 0);
../inputs/grep1.dat:306605:
../inputs/grep1.dat:306606:  dfainit(&dfa_1);
../inputs/grep1.dat:306625:
../inputs/grep1.dat:306626:  /* In the match_words and match_lines cases, we use a different pattern
../inputs/grep1.dat:306700:     for the DFA matcher that will quickly throw out cases that won't work.
../inputs/grep1.dat:306776:     Then if DFA succeeds we do some hairy stuff using the regex matcher
../inputs/grep1.dat:306849:     to decide whether the match should really count. */
../inputs/grep1.dat:306906:  if (match_words || match_lines)
../inputs/grep1.dat:306940:    {
../inputs/grep1.dat:306946:      /* In the whole-word case, we use the pattern:
../inputs/grep1.dat:306999:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
../inputs/grep1.dat:307044:	 In the whole-line case, we use the pattern:
../inputs/grep1.dat:307090:	 ^(userpattern)$.
../inputs/grep1.dat:307109:	 BUG: Using [A-Za-z_] is locale-dependent!  */
../inputs/grep1.dat:307157:
../inputs/grep1.dat:307158:      char *n = malloc(size + 50);
../inputs/grep1.dat:307193:      int i = 0;
../inputs/grep1.dat:307210:
../inputs/grep1.dat:307211:      strcpy(n, "");
../inputs/grep1.dat:307232:
../inputs/grep1.dat:307233:      if (match_lines)
../inputs/grep1.dat:307256:	strcpy(n, "^\\(");
../inputs/grep1.dat:307276:      if (match_words)
../inputs/grep1.dat:307299:	strcpy(n, "\\(^\\|[^0-9A-Za-z_]\\)\\(");
../inputs/grep1.dat:307341:
../inputs/grep1.dat:307342:      i = strlen(n);
../inputs/grep1.dat:307363:      bcopy(pattern, n + i, size);
../inputs/grep1.dat:307398:      i += size;
../inputs/grep1.dat:307415:
../inputs/grep1.dat:307416:      if (match_words)
../inputs/grep1.dat:307439:	strcpy(n + i, "\\)\\([^0-9A-Za-z_]\\|$\\)");
../inputs/grep1.dat:307485:      if (match_lines)
../inputs/grep1.dat:307508:	strcpy(n + i, "\\)$");
../inputs/grep1.dat:307532:
../inputs/grep1.dat:307533:      i += strlen(n + i);
../inputs/grep1.dat:307559:      dfacomp(n, i, &dfa_1, 1);
../inputs/grep1.dat:307591:    }
../inputs/grep1.dat:307597:  else
../inputs/grep1.dat:307604:    dfacomp(pattern, size, &dfa_1, 1);
../inputs/grep1.dat:307643:
../inputs/grep1.dat:307644:  kwsmusts();
../inputs/grep1.dat:307658:}
../inputs/grep1.dat:307660:
../inputs/grep1.dat:307661:static void
../inputs/grep1.dat:307673:Ecompile(pattern, size)
../inputs/grep1.dat:307697:     char *pattern;
../inputs/grep1.dat:307717:     size_t size;
../inputs/grep1.dat:307735:{
../inputs/grep1.dat:307737:#ifdef __STDC__
../inputs/grep1.dat:307753:  const
../inputs/grep1.dat:307761:#endif
../inputs/grep1.dat:307768:  char *err;
../inputs/grep1.dat:307781:
../inputs/grep1.dat:307782:  if (strcmp(matcher, "posix-egrep") == 0)
../inputs/grep1.dat:307825:    {
../inputs/grep1.dat:307831:      re_set_syntax(RE_SYNTAX_POSIX_EGREP);
../inputs/grep1.dat:307875:      dfasyntax(RE_SYNTAX_POSIX_EGREP, match_icase);
../inputs/grep1.dat:307928:    }
../inputs/grep1.dat:307934:  else
../inputs/grep1.dat:307941:    {
../inputs/grep1.dat:307947:      re_set_syntax(RE_SYNTAX_EGREP);
../inputs/grep1.dat:307985:      dfasyntax(RE_SYNTAX_EGREP, match_icase);
../inputs/grep1.dat:308032:    }
../inputs/grep1.dat:308038:
../inputs/grep1.dat:308039:  if ((err = re_compile_pattern(pattern, size, &regex)) != 0)
../inputs/grep1.dat:308101:    fatal(err, 0);
../inputs/grep1.dat:308120:
../inputs/grep1.dat:308121:  dfainit(&dfa_1);
../inputs/grep1.dat:308140:
../inputs/grep1.dat:308141:  /* In the match_words and match_lines cases, we use a different pattern
../inputs/grep1.dat:308215:     for the DFA matcher that will quickly throw out cases that won't work.
../inputs/grep1.dat:308291:     Then if DFA succeeds we do some hairy stuff using the regex matcher
../inputs/grep1.dat:308364:     to decide whether the match should really count. */
../inputs/grep1.dat:308421:  if (match_words || match_lines)
../inputs/grep1.dat:308455:    {
../inputs/grep1.dat:308461:      /* In the whole-word case, we use the pattern:
../inputs/grep1.dat:308514:	 (^|[^A-Za-z_])(userpattern)([^A-Za-z_]|$).
../inputs/grep1.dat:308559:	 In the whole-line case, we use the pattern:
../inputs/grep1.dat:308605:	 ^(userpattern)$.
../inputs/grep1.dat:308624:	 BUG: Using [A-Za-z_] is locale-dependent!  */
../inputs/grep1.dat:308672:
../inputs/grep1.dat:308673:      char *n = malloc(size + 50);
../inputs/grep1.dat:308708:      int i = 0;
../inputs/grep1.dat:308725:
../inputs/grep1.dat:308726:      strcpy(n, "");
../inputs/grep1.dat:308747:
../inputs/grep1.dat:308748:      if (match_lines)
../inputs/grep1.dat:308771:	strcpy(n, "^(");
../inputs/grep1.dat:308789:      if (match_words)
../inputs/grep1.dat:308812:	strcpy(n, "(^|[^0-9A-Za-z_])(");
../inputs/grep1.dat:308846:
../inputs/grep1.dat:308847:      i = strlen(n);
../inputs/grep1.dat:308868:      bcopy(pattern, n + i, size);
../inputs/grep1.dat:308903:      i += size;
../inputs/grep1.dat:308920:
../inputs/grep1.dat:308921:      if (match_words)
../inputs/grep1.dat:308944:	strcpy(n + i, ")([^0-9A-Za-z_]|$)");
../inputs/grep1.dat:308982:      if (match_lines)
../inputs/grep1.dat:309005:	strcpy(n + i, ")$");
../inputs/grep1.dat:309027:
../inputs/grep1.dat:309028:      i += strlen(n + i);
../inputs/grep1.dat:309054:      dfacomp(n, i, &dfa_1, 1);
../inputs/grep1.dat:309086:    }
../inputs/grep1.dat:309092:  else
../inputs/grep1.dat:309099:    dfacomp(pattern, size, &dfa_1, 1);
../inputs/grep1.dat:309138:
../inputs/grep1.dat:309139:  kwsmusts();
../inputs/grep1.dat:309153:}
../inputs/grep1.dat:309155:
../inputs/grep1.dat:309156:static char *
../inputs/grep1.dat:309170:EGexecute(buf, size, endp)
../inputs/grep1.dat:309197:     char *buf;
../inputs/grep1.dat:309213:     size_t size;
../inputs/grep1.dat:309231:     char **endp;
../inputs/grep1.dat:309249:{
../inputs/grep1.dat:309251:  register char *buflim, *beg, *end, save;
../inputs/grep1.dat:309294:  int backref, start, len;
../inputs/grep1.dat:309321:  struct kwsmatch kwsm;
../inputs/grep1.dat:309345:  static struct re_registers regs; /* This is static on account of a BRAIN-DEAD
../inputs/grep1.dat:309425:				    Q@#%!# library interface in regex.c.  */
../inputs/grep1.dat:309474:
../inputs/grep1.dat:309475:  buflim = buf + size;
../inputs/grep1.dat:309498:
../inputs/grep1.dat:309499:  for (beg = end = buf; end < buflim; beg = end + 1)
../inputs/grep1.dat:309552:    {
../inputs/grep1.dat:309558:      if (kwset)
../inputs/grep1.dat:309575:	{
../inputs/grep1.dat:309578:	  /* Find a possible match using the KWset matcher. */
../inputs/grep1.dat:309634:	  beg = kwsexec(kwset, beg, buflim - beg, &kwsm);
../inputs/grep1.dat:309685:	  if (!beg)
../inputs/grep1.dat:309698:	    goto failure;
../inputs/grep1.dat:309717:	  /* Narrow down to the line containing the candidate, and
../inputs/grep1.dat:309777:	     run it through DFA. */
../inputs/grep1.dat:309806:	  end = memchr(beg, '\n', buflim - beg);
../inputs/grep1.dat:309848:	  if (!end)
../inputs/grep1.dat:309861:	    end = buflim;
../inputs/grep1.dat:309880:	  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:309920:	    --beg;
../inputs/grep1.dat:309932:	  save = *end;
../inputs/grep1.dat:309948:	  if (kwsm.index < lastexact)
../inputs/grep1.dat:309979:	    goto success;
../inputs/grep1.dat:309998:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
../inputs/grep1.dat:310057:	    {
../inputs/grep1.dat:310064:	      *end = save;
../inputs/grep1.dat:310084:	      continue;
../inputs/grep1.dat:310101:	    }
../inputs/grep1.dat:310108:	  *end = save;
../inputs/grep1.dat:310124:	  /* Successful, no backreferences encountered. */
../inputs/grep1.dat:310176:	  if (!backref)
../inputs/grep1.dat:310193:	    goto success;
../inputs/grep1.dat:310212:	}
../inputs/grep1.dat:310215:      else
../inputs/grep1.dat:310226:	{
../inputs/grep1.dat:310229:	  /* No good fixed strings; start with DFA. */
../inputs/grep1.dat:310277:	  save = *buflim;
../inputs/grep1.dat:310296:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
../inputs/grep1.dat:310359:	  *buflim = save;
../inputs/grep1.dat:310378:	  if (!beg)
../inputs/grep1.dat:310391:	    goto failure;
../inputs/grep1.dat:310410:	  /* Narrow down to the line we've found. */
../inputs/grep1.dat:310456:	  end = memchr(beg, '\n', buflim - beg);
../inputs/grep1.dat:310498:	  if (!end)
../inputs/grep1.dat:310511:	    end = buflim;
../inputs/grep1.dat:310530:	  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:310570:	    --beg;
../inputs/grep1.dat:310582:	  /* Successful, no backreferences encountered! */
../inputs/grep1.dat:310634:	  if (!backref)
../inputs/grep1.dat:310651:	    goto success;
../inputs/grep1.dat:310670:	}
../inputs/grep1.dat:310673:      /* If we've made it to this point, this means DFA has seen
../inputs/grep1.dat:310738:	 a probable match, and we need to run it through Regex. */
../inputs/grep1.dat:310798:      regex.not_eol = 0;
../inputs/grep1.dat:310823:      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
../inputs/grep1.dat:310904:	{
../inputs/grep1.dat:310907:	  len = regs.end[0] - start;
../inputs/grep1.dat:310937:	  if (!match_lines && !match_words || match_lines && len == end - beg)
../inputs/grep1.dat:311009:	    goto success;
../inputs/grep1.dat:311028:	  /* If -w, check if the match aligns with word boundaries.
../inputs/grep1.dat:311089:	     We do this iteratively because:
../inputs/grep1.dat:311127:	     (a) the line may contain more than one occurence of the pattern, and
../inputs/grep1.dat:311202:	     (b) Several alternatives in the pattern might be valid at a given
../inputs/grep1.dat:311274:	     point, and we may need to consider a shorter one to find a word
../inputs/grep1.dat:311344:	     boundary. */
../inputs/grep1.dat:311363:	  if (match_words)
../inputs/grep1.dat:311383:	    while (start >= 0)
../inputs/grep1.dat:311407:	      {
../inputs/grep1.dat:311416:		if ((start == 0 || !WCHAR(beg[start - 1]))
../inputs/grep1.dat:311461:		    && (len == end - beg || !WCHAR(beg[start + len])))
../inputs/grep1.dat:311518:		  goto success;
../inputs/grep1.dat:311536:		if (len > 0)
../inputs/grep1.dat:311551:		  {
../inputs/grep1.dat:311557:		    /* Try a shorter length anchored at the same place. */
../inputs/grep1.dat:311618:		    --len;
../inputs/grep1.dat:311631:		    regex.not_eol = 1;
../inputs/grep1.dat:311656:		    len = re_match(&regex, beg, start + len, start, &regs);
../inputs/grep1.dat:311718:		  }
../inputs/grep1.dat:311724:		if (len <= 0)
../inputs/grep1.dat:311740:		  {
../inputs/grep1.dat:311746:		    /* Try looking further on. */
../inputs/grep1.dat:311782:		    if (start == end - beg)
../inputs/grep1.dat:311812:		      break;
../inputs/grep1.dat:311827:		    ++start;
../inputs/grep1.dat:311842:		    regex.not_eol = 0;
../inputs/grep1.dat:311867:		    start = re_search(&regex, beg, end - beg,
../inputs/grep1.dat:311915:				      start, end - beg - start, &regs);
../inputs/grep1.dat:311959:		    len = regs.end[0] - start;
../inputs/grep1.dat:311992:		  }
../inputs/grep1.dat:311998:	      }
../inputs/grep1.dat:312007:	}
../inputs/grep1.dat:312010:    }
../inputs/grep1.dat:312016:
../inputs/grep1.dat:312017: failure:
../inputs/grep1.dat:312027:  return 0;
../inputs/grep1.dat:312039:
../inputs/grep1.dat:312040: success:
../inputs/grep1.dat:312050:  *endp = end < buflim ? end + 1 : end;
../inputs/grep1.dat:312090:  return beg;
../inputs/grep1.dat:312104:}
../inputs/grep1.dat:312106:
../inputs/grep1.dat:312107:static void
../inputs/grep1.dat:312119:Fcompile(pattern, size)
../inputs/grep1.dat:312143:     char *pattern;
../inputs/grep1.dat:312163:     size_t size;
../inputs/grep1.dat:312181:{
../inputs/grep1.dat:312183:  char *beg, *lim, *err;
../inputs/grep1.dat:312208:
../inputs/grep1.dat:312209:  kwsinit();
../inputs/grep1.dat:312222:  beg = pattern;
../inputs/grep1.dat:312239:  do
../inputs/grep1.dat:312244:    {
../inputs/grep1.dat:312250:      for (lim = beg; lim < pattern + size && *lim != '\n'; ++lim)
../inputs/grep1.dat:312317:	;
../inputs/grep1.dat:312320:      if ((err = kwsincr(kwset, beg, lim - beg)) != 0)
../inputs/grep1.dat:312375:	fatal(err, 0);
../inputs/grep1.dat:312391:      if (lim < pattern + size)
../inputs/grep1.dat:312423:	++lim;
../inputs/grep1.dat:312431:      beg = lim;
../inputs/grep1.dat:312448:    }
../inputs/grep1.dat:312454:  while (beg < pattern + size);
../inputs/grep1.dat:312486:
../inputs/grep1.dat:312487:  if ((err = kwsprep(kwset)) != 0)
../inputs/grep1.dat:312522:    fatal(err, 0);
../inputs/grep1.dat:312541:}
../inputs/grep1.dat:312543:
../inputs/grep1.dat:312544:static char *
../inputs/grep1.dat:312558:Fexecute(buf, size, endp)
../inputs/grep1.dat:312584:     char *buf;
../inputs/grep1.dat:312600:     size_t size;
../inputs/grep1.dat:312618:     char **endp;
../inputs/grep1.dat:312636:{
../inputs/grep1.dat:312638:  register char *beg, *try, *end;
../inputs/grep1.dat:312672:  register size_t len;
../inputs/grep1.dat:312695:  struct kwsmatch kwsmatch;
../inputs/grep1.dat:312723:
../inputs/grep1.dat:312724:  for (beg = buf; beg <= buf + size; ++beg)
../inputs/grep1.dat:312768:    {
../inputs/grep1.dat:312774:      if (!(beg = kwsexec(kwset, beg, buf + size - beg, &kwsmatch)))
../inputs/grep1.dat:312843:	return 0;
../inputs/grep1.dat:312854:      len = kwsmatch.size[0];
../inputs/grep1.dat:312884:      if (match_lines)
../inputs/grep1.dat:312907:	{
../inputs/grep1.dat:312910:	  if (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:312947:	    continue;
../inputs/grep1.dat:312962:	  if (beg + len < buf + size && beg[len] != '\n')
../inputs/grep1.dat:313013:	    continue;
../inputs/grep1.dat:313028:	  goto success;
../inputs/grep1.dat:313045:	}
../inputs/grep1.dat:313048:      else if (match_words)
../inputs/grep1.dat:313076:	for (try = beg; len && try;)
../inputs/grep1.dat:313106:	  {
../inputs/grep1.dat:313111:	    if (try > buf && WCHAR((unsigned char) try[-1]))
../inputs/grep1.dat:313165:	      break;
../inputs/grep1.dat:313179:	    if (try + len < buf + size && WCHAR((unsigned char) try[len]))
../inputs/grep1.dat:313247:	      {
../inputs/grep1.dat:313256:		try = kwsexec(kwset, beg, --len, &kwsmatch);
../inputs/grep1.dat:313303:		len = kwsmatch.size[0];
../inputs/grep1.dat:313329:	      }
../inputs/grep1.dat:313338:	    else
../inputs/grep1.dat:313348:	      goto success;
../inputs/grep1.dat:313369:	  }
../inputs/grep1.dat:313374:      else
../inputs/grep1.dat:313385:	goto success;
../inputs/grep1.dat:313400:    }
../inputs/grep1.dat:313406:
../inputs/grep1.dat:313407:  return 0;
../inputs/grep1.dat:313419:
../inputs/grep1.dat:313420: success:
../inputs/grep1.dat:313430:  if ((end = memchr(beg + len, '\n', (buf + size) - (beg + len))) != 0)
../inputs/grep1.dat:313502:    ++end;
../inputs/grep1.dat:313513:  else
../inputs/grep1.dat:313520:    end = buf + size;
../inputs/grep1.dat:313542:  *endp = end;
../inputs/grep1.dat:313557:  while (beg > buf && beg[-1] != '\n')
../inputs/grep1.dat:313596:    --beg;
../inputs/grep1.dat:313607:  return beg;
../inputs/grep1.dat:313621:}
../inputs/grep1.dat:313623:
../inputs/grep1.dat:313624:if (out)
../inputs/grep1.dat:313633:if (gout)
../inputs/grep1.dat:313643:if (gsth)
../inputs/grep1.dat:313653:if out
../inputs/grep1.dat:313660:if gout
../inputs/grep1.dat:313668:if agout
../inputs/grep1.dat:313677:if agout end = buf + size;
../inputs/grep1.dat:313704:if aout
../inputs/grep1.dat:313712:if ag
../inputs/grep1.dat:313718:if g
../inputs/grep1.dat:313723:if a
../inputs/grep1.dat:313728:
../inputs/grep1.dat:313729:swswsif (out)
../inputs/grep1.dat:313743:wwif (gout)
../inputs/grep1.dat:313755:wssif (gsth)
../inputs/grep1.dat:313768:wswswsif out
../inputs/grep1.dat:313781:3if gout
../inputs/grep1.dat:313790:wsif agout
../inputs/grep1.dat:313801:3eif agout end = buf + size;
../inputs/grep1.dat:313830:dseif aout
../inputs/grep1.dat:313841:dsif ag
../inputs/grep1.dat:313849:isxsif g
../inputs/grep1.dat:313858:xxsxif awwsw
../inputs/grep1.dat:313871:
../inputs/grep1.dat:313872:swswsif (out)fvvfvf
../inputs/grep1.dat:313892:wwif (gout)
../inputs/grep1.dat:313904:wssif (gsth)
../inputs/grep1.dat:313917:wswswsif outvfvf
../inputs/grep1.dat:313934:3if goutfvf
../inputs/grep1.dat:313946:wsif agoutvfv
../inputs/grep1.dat:313960:3eif agoutvf end = buf + size;
../inputs/grep1.dat:313991:dseif aoutvfv
../inputs/grep1.dat:314005:dsif agvff
../inputs/grep1.dat:314016:isxsif gvfv
../inputs/grep1.dat:314028:xxsxif awwsw
../inputs/grep1.dat:314041:
../inputs/grep1.dat:314042:s  if (out)
../inputs/grep1.dat:314054:    if (gout)
../inputs/grep1.dat:314068: sds if (gsth)
../inputs/grep1.dat:314083:  if out
../inputs/grep1.dat:314092:dc if gout
../inputs/grep1.dat:314103:dv if agout
../inputs/grep1.dat:314115:argue if agout end = buf + size;
../inputs/grep1.dat:314148:  if aout
../inputs/grep1.dat:314158:          if ag
../inputs/grep1.dat:314174:  argue if g
../inputs/grep1.dat:314187: if a