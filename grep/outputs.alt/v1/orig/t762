#include <errno.h>
#include <stdio.h>
#include <stdlib.h>
#include <sys/types.h>
#include <string.h>
#include <memory.h>
#include <strings.h>
#include <sys/types.h>
#include <fcntl.h>
#include <unistd.h>
#define MAX(A,B) ((A) > (B) ? (A) : (B))
#include <sys/types.h>
#include <sys/stat.h>
#include <sys/mman.h>
  if (save > bufsalloc)
      while (save > bufsalloc)
      && bufstat.st_size - bufoffset >= bufalloc - bufsalloc)
  if (cc > 0)
  while (pending > 0 && lastout < lim)
  if (!out_quiet && pending > 0)
	if (p > bp)
	  while (p > bp && p[-1] != '\n');
      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
      while (i < out_before && beg > bufbeg && beg != lastout)
	  while (beg > bufbeg && beg[-1] != '\n');
  "usage: %s [-[[AB] ]<num>] [-[CEFGVchilnqsvwx]] [-[ef]] <expr> [<files...>]\n"
	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
  if (argc - optind > 1 && !no_filenames)
#include <alloca.h>
/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
/*#include <stdio.h> */
#include <stdlib.h>
#include <string.h>
      for (p = longopts, option_index = 0; p->name;
	if (!strncmp (p->name, nextchar, s - nextchar))
	    if (s - nextchar == strlen (p->name))
	      /* Don't test has_arg with >, because some C compilers don't
	      if (pfound->has_arg)
				 argv[0], pfound->name);
			     argv[0], argv[optind - 1][0], pfound->name);
	  else if (pfound->has_arg == 1)
	  if (pfound->flag)
	      *(pfound->flag) = pfound->val;
	  return pfound->val;
	    if (c < 040 || c >= 0177)
#include <sys/types.h>
#include <string.h>
#include <strings.h>
#include <stdlib.h>
/* Define the syntax stuff for \<, \>, etc.  */
#include <ctype.h>
#include <alloca.h>
#define MAX(a, b) ((a) > (b) ? (a) : (b))
    (destination)[1] = (number) >> 8;					\
/*#include <stdio.h>*/
#include <assert.h>
  unsigned char *buffer = bufp->buffer;
  print_partial_compiled_pattern (buffer, buffer + bufp->used);
  printf ("%d bytes used/%d bytes allocated.\n", bufp->used, bufp->allocated);
  if (bufp->fastmap_accurate && bufp->fastmap)
      print_fastmap (bufp->fastmap);
  printf ("re_nsub: %d\t", bufp->re_nsub);
  printf ("regs_alloc: %d\t", bufp->regs_allocated);
  printf ("can_be_null: %d\t", bufp->can_be_null);
  printf ("newline_anchor: %d\n", bufp->newline_anchor);
  printf ("no_sub: %d\t", bufp->no_sub);
  printf ("not_bol: %d\t", bufp->not_bol);
  printf ("not_eol: %d\t", bufp->not_eol);
  printf ("syntax: %d\n", bufp->syntax);
    while (b - bufp->buffer + (n) > bufp->allocated)			\
    unsigned char *old_buffer = bufp->buffer;				\
    if (bufp->allocated == MAX_BUF_SIZE) 				\
    bufp->allocated <<= 1;						\
    if (bufp->allocated > MAX_BUF_SIZE)					\
      bufp->allocated = MAX_BUF_SIZE; 					\
    bufp->buffer = (unsigned char *) realloc (bufp->buffer, bufp->allocated);\
    if (bufp->buffer == NULL)						\
    if (old_buffer != bufp->buffer)					\
        b = (b - old_buffer) + bufp->buffer;				\
        begalt = (begalt - old_buffer) + bufp->buffer;			\
          fixup_alt_jump = (fixup_alt_jump - old_buffer) + bufp->buffer;\
          laststart = (laststart - old_buffer) + bufp->buffer;		\
          pending_exact = (pending_exact - old_buffer) + bufp->buffer;	\
  char *translate = bufp->translate;
  bufp->syntax = syntax;
  bufp->fastmap_accurate = 0;
  bufp->not_bol = bufp->not_eol = 0;
  bufp->used = 0;
  /* Always count groups, whether or not bufp->no_sub is set.  */
  bufp->re_nsub = 0;				
  if (bufp->allocated == 0)
      if (bufp->buffer)
          RETALLOC (bufp->buffer, INIT_BUF_SIZE, unsigned char);
          bufp->buffer = TALLOC (INIT_BUF_SIZE, unsigned char);
      if (!bufp->buffer) return REG_ESPACE;
      bufp->allocated = INIT_BUF_SIZE;
  begalt = b = bufp->buffer;
                assert (p - 1 > pattern);
                    && !(p - 2 >= pattern && p[-2] == '[') 
                    && !(p - 3 >= pattern && p[-3] == '[' && p[-2] == '^')
            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
              bufp->re_nsub++;
              COMPILE_STACK_TOP.begalt_offset = begalt - bufp->buffer;
                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
              COMPILE_STACK_TOP.laststart_offset = b - bufp->buffer;
                  COMPILE_STACK_TOP.inner_group_offset = b - bufp->buffer + 2;
                begalt = bufp->buffer + COMPILE_STACK_TOP.begalt_offset;
                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
                laststart = bufp->buffer + COMPILE_STACK_TOP.laststart_offset;
                      = bufp->buffer + COMPILE_STACK_TOP.inner_group_offset;
                  /* Interval such as `{1}' => match exactly once. */
                if (lower_bound < 0 || upper_bound > RE_DUP_MAX
                    || lower_bound > upper_bound)
                      set_number_at <jump count> <upper bound>
                      set_number_at <succeed_n count> <lower bound>
                      succeed_n <after jump addr> <succed_n count>
                      <body of loop>
                      jump_n <succeed_n addr> <jump count>
                   { /* If the upper bound is > 1, we need to insert
                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
                                   b + 5 + (upper_bound > 1) * 5,
                     if (upper_bound > 1)
                   if (p > pattern  &&  p[-1] == '\\')
            case '>':
              if (c1 > regnum)
  bufp->used = b - bufp->buffer;
  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
       this_element >= 0; 
  if (range_start > range_end)
#define FAIL_STACK_PTR_EMPTY() (fail_stack_ptr->avail == 0)
  ((fail_stack).size > re_max_failures * MAX_FAILURE_ITEMS		\
  assert (fail_stack.avail >= NUM_NONREG_ITEMS);			\
  for (this_reg = high_reg; this_reg >= low_reg; this_reg--)		\
   area as BUFP->fastmap.
  register char *fastmap = bufp->fastmap;
  unsigned char *pattern = bufp->buffer;
  unsigned long size = bufp->used;
  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
  bufp->can_be_null = 0;
          bufp->can_be_null |= path_can_be_null;
	  bufp->can_be_null = 1;
          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
          if (!(bufp->syntax & RE_DOT_NEWLINE))
	  else if (bufp->can_be_null)
	  if (j > 0)
            bufp->can_be_null = 1;
  bufp->can_be_null |= path_can_be_null;
      bufp->regs_allocated = REGS_REALLOCATE;
      regs->num_regs = num_regs;
      regs->start = starts;
      regs->end = ends;
      bufp->regs_allocated = REGS_UNALLOCATED;
      regs->num_regs = 0;
      regs->start = regs->end = (regoff_t) 0;
/* Using the compiled pattern in BUFP->buffer, first tries to match the
   and STRING2 that matched the entire BUFP->buffer and its contained
  register char *fastmap = bufp->fastmap;
  register char *translate = bufp->translate;
  if (startpos < 0 || startpos > total_size)
  else if (endpos > total_size)
  if (bufp->used > 0 && (re_opcode_t) bufp->buffer[0] == begbuf && range > 0)
      if (startpos > 0)
  if (fastmap && !bufp->fastmap_accurate)
      if (fastmap && startpos < total_size && !bufp->can_be_null)
	  if (range > 0)	/* Searching forwards.  */
              if (startpos < size1 && startpos + range >= size1)
	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
                while (range > lim
                while (range > lim && !fastmap[(unsigned char) *d++])
	      register char c = (size1 == 0 || startpos >= size1
      if (range >= 0 && startpos == total_size && fastmap
          && !bufp->can_be_null)
      if (val >= 0)
      else if (range > 0) 
      /* End of string2 => fail.  */					\
      /* End of string1 => advance to string2.  */ 			\
  unsigned char *p = bufp->buffer;
  register unsigned char *pend = p + bufp->used;
  char *translate = bufp->translate;
  unsigned num_regs = bufp->re_nsub + 1;
  if (bufp->re_nsub)
  if (pos < 0 || pos > size1 + size2)
  if (size1 > 0 && pos <= size1)
                      || (same_str_p && d > match_end)
                  dend = ((d >= string1 && d <= end1)
          if (regs && !bufp->no_sub)
              if (bufp->regs_allocated == REGS_UNALLOCATED)
                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
                  regs->start = TALLOC (regs->num_regs, regoff_t);
                  regs->end = TALLOC (regs->num_regs, regoff_t);
                  if (regs->start == NULL || regs->end == NULL)
                  bufp->regs_allocated = REGS_REALLOCATE;
              else if (bufp->regs_allocated == REGS_REALLOCATE)
                  if (regs->num_regs < num_regs + 1)
                      regs->num_regs = num_regs + 1;
                      RETALLOC (regs->start, regs->num_regs, regoff_t);
                      RETALLOC (regs->end, regs->num_regs, regoff_t);
                      if (regs->start == NULL || regs->end == NULL)
		  assert (bufp->regs_allocated == REGS_FIXED);
              if (regs->num_regs > 0)
                  regs->start[0] = pos;
                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
              /* Go through the first `min (num_regs, regs->num_regs)'
	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
                    regs->start[mcnt] = regs->end[mcnt] = -1;
		      regs->start[mcnt] = POINTER_TO_OFFSET (regstart[mcnt]);
                      regs->end[mcnt] = POINTER_TO_OFFSET (regend[mcnt]);
              for (mcnt = num_regs; mcnt < regs->num_regs; mcnt++)
                regs->start[mcnt] = regs->end[mcnt] = -1;
	    } /* regs && !bufp->no_sub */
          if ((!(bufp->syntax & RE_DOT_NEWLINE) && TRANSLATE (*d) == '\n')
              || (bufp->syntax & RE_DOT_NOT_NULL && TRANSLATE (*d) == '\000'))
              while (r > 0 && !IS_ACTIVE (reg_info[r]))
                          if ((int) old_regend[r] >= (int) regstart[r])
	/* \<digit> has been turned into a `duplicate' command which is
           followed by the numeric value of <digit> as the register number.  */
                    /* End of string1 => advance to string2. */
		/* At end of register contents => success */
                if (mcnt > dend2 - d2)
              if (!bufp->not_bol) break;
          else if (d[-1] == '\n' && bufp->newline_anchor)
              if (!bufp->not_eol) break;
                   && bufp->newline_anchor)
		     || (bufp->newline_anchor && (re_opcode_t) *p2 == endline))
                    DEBUG_PRINT3 ("  %c != %c => pop_failure_jump.\n",
                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
              DEBUG_PRINT1 ("  Match => jump.\n");
          assert (mcnt >= 0);
          if (mcnt > 0)
 	  if (PTR_CHAR_POS ((unsigned char *) d) >= point)
          if (d >= string1 && d <= end1)
	  if (mcnt >= 0)
            } /* if mcnt > 0 */
      assert (reg_no > 0 && reg_no <= MAX_REGNUM);
      if (mcnt >= 0)
  bufp->regs_allocated = REGS_UNALLOCATED;
  bufp->no_sub = 0;
  bufp->newline_anchor = 1;
  preg->buffer = 0;
  preg->allocated = 0;
  preg->used = 0;
  preg->fastmap = 0;
      preg->translate = (char *) malloc (CHAR_SET_SIZE);
      if (preg->translate == NULL)
        preg->translate[i] = ISUPPER (i) ? tolower (i) : i;
    preg->translate = NULL;
      preg->newline_anchor = 1;
    preg->newline_anchor = 0;
  preg->no_sub = !!(cflags & REG_NOSUB);
  boolean want_reg_info = !preg->no_sub && nmatch > 0;
      if (ret >= 0)
  return ret >= 0 ? (int) REG_NOERROR : (int) REG_NOMATCH;
      || errcode >= (sizeof (re_error_msg) / sizeof (re_error_msg[0])))
      if (msg_size > errbuf_size)
  if (preg->buffer != NULL)
    free (preg->buffer);
  preg->buffer = NULL;
  preg->allocated = 0;
  preg->used = 0;
  if (preg->fastmap != NULL)
    free (preg->fastmap);
  preg->fastmap = NULL;
  preg->fastmap_accurate = 0;
  if (preg->translate != NULL)
    free (preg->translate);
  preg->translate = NULL;
/*#include <assert.h> */
/*#include <ctype.h> */
/*#include <stdio.h> */
#include <stdlib.h>
#include <sys/types.h>
#include <string.h>
#include <strings.h>
  if ((index) >= (nalloc))			  \
      while ((index) >= (nalloc))		  \
/* Find the index of charclass s in dfa->charclasses, or allocate a new charclass. */
  for (i = 0; i < dfa->cindex; ++i)
    if (equal(s, dfa->charclasses[i]))
  REALLOC_IF_NECESSARY(dfa->charclasses, charclass, dfa->calloc, dfa->cindex);
  ++dfa->cindex;
  copyset(s, dfa->charclasses[i]);
		  ? lexleft > 0 && *lexptr == ')'
		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
		  ? lexleft > 0 && *lexptr == '|'
		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
	          && lexleft > 0 && *lexptr == '\n'))
	case '>':
  REALLOC_IF_NECESSARY(dfa->tokens, token, dfa->talloc, dfa->tindex);
  dfa->tokens[dfa->tindex++] = t;
      ++dfa->nleaves;
  if (depth > dfa->depth)
    dfa->depth = depth;
     <normal character>
     <empty>
  if ((tok >= 0 && tok < NOTCHAR) || tok >= CSET || tok == BACKREF
  switch (dfa->tokens[tindex - 1])
    addtok(dfa->tokens[tindex + i]);
	ntokens = nsubtoks(dfa->tindex);
	tindex = dfa->tindex - ntokens;
  while (tok != RPAREN && tok != OR && tok >= 0)
  depth = d->depth;
  addtok(END - d->nregexps);
  if (d->nregexps)
  ++d->nregexps;
  for (i = 0; i < src->nelem; ++i)
    dst->elems[i] = src->elems[i];
  dst->nelem = src->nelem;
   S->elems must point to an array large enough to hold the resulting set. */
  for (i = 0; i < s->nelem && p.index < s->elems[i].index; ++i)
  if (i < s->nelem && p.index == s->elems[i].index)
    s->elems[i].constraint |= p.constraint;
      ++s->nelem;
      while (i < s->nelem)
	  t2 = s->elems[i];
	  s->elems[i++] = t1;
  m->nelem = 0;
  while (i < s1->nelem && j < s2->nelem)
    if (s1->elems[i].index > s2->elems[j].index)
      m->elems[m->nelem++] = s1->elems[i++];
    else if (s1->elems[i].index < s2->elems[j].index)
      m->elems[m->nelem++] = s2->elems[j++];
	m->elems[m->nelem] = s1->elems[i++];
	m->elems[m->nelem++].constraint |= s2->elems[j++].constraint;
  while (i < s1->nelem)
    m->elems[m->nelem++] = s1->elems[i++];
  while (j < s2->nelem)
    m->elems[m->nelem++] = s2->elems[j++];
  for (i = 0; i < s->nelem; ++i)
    if (p.index == s->elems[i].index)
  if (i < s->nelem)
    for (--s->nelem; i < s->nelem; ++i)
      s->elems[i] = s->elems[i + 1];
  for (i = 0; i < s->nelem; ++i)
    hash ^= s->elems[i].index + s->elems[i].constraint;
  for (i = 0; i < d->sindex; ++i)
      if (hash != d->states[i].hash || s->nelem != d->states[i].elems.nelem
	  || newline != d->states[i].newline || letter != d->states[i].letter)
      for (j = 0; j < s->nelem; ++j)
	if (s->elems[j].constraint
	    != d->states[i].elems.elems[j].constraint
	    || s->elems[j].index != d->states[i].elems.elems[j].index)
      if (j == s->nelem)
  REALLOC_IF_NECESSARY(d->states, dfa_state, d->salloc, d->sindex);
  d->states[i].hash = hash;
  MALLOC(d->states[i].elems.elems, position, s->nelem);
  copy(s, &d->states[i].elems);
  d->states[i].newline = newline;
  d->states[i].letter = letter;
  d->states[i].backref = 0;
  d->states[i].constraint = 0;
  d->states[i].first_end = 0;
  for (j = 0; j < s->nelem; ++j)
    if (d->tokens[s->elems[j].index] < 0)
	constraint = s->elems[j].constraint;
	  d->states[i].constraint |= constraint;
	if (! d->states[i].first_end)
	  d->states[i].first_end = d->tokens[s->elems[j].index];
    else if (d->tokens[s->elems[j].index] == BACKREF)
	d->states[i].constraint = NO_CONSTRAINT;
	d->states[i].backref = 1;
  ++d->sindex;
   S->elems must be large enough to hold the result. */
  MALLOC(visited, int, d->tindex);
  for (i = 0; i < d->tindex; ++i)
  for (i = 0; i < s->nelem; ++i)
    if (d->tokens[s->elems[i].index] >= NOTCHAR
	&& d->tokens[s->elems[i].index] != BACKREF
	&& d->tokens[s->elems[i].index] < CSET)
	old = s->elems[i];
	delete(s->elems[i], s);
	switch (d->tokens[old.index])
	for (j = 0; j < d->follows[old.index].nelem; ++j)
	    p.index = d->follows[old.index].elems[j].index;
  for (i = 0; i < d->tindex; ++i)
      prtok(d->tokens[i]);
  d->searchflag = searchflag;
  MALLOC(nullable, int, d->depth);
  MALLOC(nfirstpos, int, d->depth);
  MALLOC(firstpos, position, d->nleaves);
  o_firstpos = firstpos, firstpos += d->nleaves;
  MALLOC(nlastpos, int, d->depth);
  MALLOC(lastpos, position, d->nleaves);
  o_lastpos = lastpos, lastpos += d->nleaves;
  MALLOC(nalloc, int, d->tindex);
  for (i = 0; i < d->tindex; ++i)
  MALLOC(merged.elems, position, d->nleaves);
  CALLOC(d->follows, position_set, d->tindex);
  for (i = 0; i < d->tindex; ++i)
    switch (d->tokens[i])
	    merge(&tmp, &d->follows[pos[j].index], &merged);
	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
	    copy(&merged, &d->follows[pos[j].index]);
	if (d->tokens[i] != PLUS)
	    merge(&tmp, &d->follows[pos[j].index], &merged);
	    REALLOC_IF_NECESSARY(d->follows[pos[j].index].elems, position,
	    copy(&merged, &d->follows[pos[j].index]);
	    for (j = nlastpos[-1] - 1; j >= 0; --j)
	*nullable++ = d->tokens[i] == BACKREF;
	firstpos->index = lastpos->index = i;
	firstpos->constraint = lastpos->constraint = NO_CONSTRAINT;
	MALLOC(d->follows[i].elems, position, nalloc[i]);
      prtok(d->tokens[i]);
      for (j = nfirstpos[-1] - 1; j >= 0; --j)
	  prtok(d->tokens[firstpos[j].index]);
      for (j = nlastpos[-1] - 1; j >= 0; --j)
	  prtok(d->tokens[lastpos[j].index]);
  for (i = 0; i < d->tindex; ++i)
    if (d->tokens[i] < NOTCHAR || d->tokens[i] == BACKREF
	|| d->tokens[i] >= CSET)
	prtok(d->tokens[i]);
	for (j = d->follows[i].nelem - 1; j >= 0; --j)
	    fprintf(stderr, " %d:", d->follows[i].elems[j].index);
	    prtok(d->tokens[d->follows[i].elems[j].index]);
	copy(&d->follows[i], &merged);
	if (d->follows[i].nelem < merged.nelem)
	  REALLOC(d->follows[i].elems, position, merged.nelem);
	copy(&merged, &d->follows[i]);
  d->salloc = 1;
  d->sindex = 0;
  MALLOC(d->states, dfa_state, d->salloc);
  for (i = 0; i < d->states[s].elems.nelem; ++i)
      pos = d->states[s].elems.elems[i];
      if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR)
	setbit(d->tokens[pos.index], matches);
      else if (d->tokens[pos.index] >= CSET)
	copyset(d->charclasses[d->tokens[pos.index] - CSET], matches);
					 d->states[s].newline, 1))
					 d->states[s].newline, 0))
					d->states[s].letter, 1))
					d->states[s].letter, 0))
	  if (d->tokens[pos.index] >= 0 && d->tokens[pos.index] < NOTCHAR
	      && !tstbit(d->tokens[pos.index], labels[j]))
	      MALLOC(grps[ngrps].elems, position, d->nleaves);
	  MALLOC(grps[ngrps].elems, position, d->nleaves);
  MALLOC(follows.elems, position, d->nleaves);
  MALLOC(tmp.elems, position, d->nleaves);
  if (d->searchflag)
      for (i = 0; i < d->states[0].elems.nelem; ++i)
	  if (PREV_NEWLINE_DEPENDENT(d->states[0].elems.elems[i].constraint))
	  if (PREV_LETTER_DEPENDENT(d->states[0].elems.elems[i].constraint))
      copy(&d->states[0].elems, &follows);
	for (k = 0; k < d->follows[grps[i].elems[j].index].nelem; ++k)
	  insert(d->follows[grps[i].elems[j].index].elems[k], &follows);
      if (d->searchflag)
	for (j = 0; j < d->states[0].elems.nelem; ++j)
	  insert(d->states[0].elems.elems[j], &follows);
   is a non-accepting state, then d->trans[state] points to its table.
   If it is an accepting state then d->fails[state] points to its table.
   If it has no table at all, then d->trans[state] is NULL.
  if (d->trcount >= 1024)
      for (i = 0; i < d->tralloc; ++i)
	if (d->trans[i])
	    free((ptr_t) d->trans[i]);
	    d->trans[i] = NULL;
	else if (d->fails[i])
	    free((ptr_t) d->fails[i]);
	    d->fails[i] = NULL;
      d->trcount = 0;
  ++d->trcount;
  d->success[s] = 0;
  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
    d->success[s] |= 4;
  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
    d->success[s] |= 2;
  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 0,
    d->success[s] |= 1;
    if (trans[i] >= d->tralloc)
	int oldalloc = d->tralloc;
	while (trans[i] >= d->tralloc)
	  d->tralloc *= 2;
	REALLOC(d->realtrans, int *, d->tralloc + 1);
	d->trans = d->realtrans + 1;
	REALLOC(d->fails, int *, d->tralloc);
	REALLOC(d->success, int, d->tralloc);
	REALLOC(d->newlines, int, d->tralloc);
	while (oldalloc < d->tralloc)
	    d->trans[oldalloc] = NULL;
	    d->fails[oldalloc++] = NULL;
  d->newlines[s] = trans['\n'];
    d->fails[s] = trans;
    d->trans[s] = trans;
  d->tralloc = 1;
  d->trcount = 0;
  CALLOC(d->realtrans, int *, d->tralloc + 1);
  d->trans = d->realtrans + 1;
  CALLOC(d->fails, int *, d->tralloc);
  MALLOC(d->success, int, d->tralloc);
  MALLOC(d->newlines, int, d->tralloc);
  register **trans, *t;		/* Copy of d->trans so it can be optimized
  static sbit[NOTCHAR];	/* Table for anding with d->success. */
  if (! d->tralloc)
  trans = d->trans;
      if (s >= 0 && p <= (unsigned char *) end && d->fails[s])
	  if (d->success[s] & sbit[*p])
		if (d->states[s].backref)
	  s = d->fails[s][*p++];
      if ((char *) p > end)
      if (s >= 0)
	  trans = d->trans;
	  s = d->newlines[s1];
  d->calloc = 1;
  MALLOC(d->charclasses, charclass, d->calloc);
  d->cindex = 0;
  d->talloc = 1;
  MALLOC(d->tokens, token, d->talloc);
  d->tindex = d->depth = d->nleaves = d->nregexps = 0;
  d->searchflag = 0;
  d->tralloc = 0;
  d->musts = 0;
      d->cindex = d->tindex = d->depth = d->nleaves = d->nregexps = 0;
  free((ptr_t) d->charclasses);
  free((ptr_t) d->tokens);
  for (i = 0; i < d->sindex; ++i)
    free((ptr_t) d->states[i].elems.elems);
  free((ptr_t) d->states);
  for (i = 0; i < d->tindex; ++i)
    if (d->follows[i].elems)
      free((ptr_t) d->follows[i].elems);
  free((ptr_t) d->follows);
  for (i = 0; i < d->tralloc; ++i)
    if (d->trans[i])
      free((ptr_t) d->trans[i]);
    else if (d->fails[i])
      free((ptr_t) d->fails[i]);
  free((ptr_t) d->realtrans);
  free((ptr_t) d->fails);
  free((ptr_t) d->newlines);
  for (dm = d->musts; dm; dm = ndm)
      ndm = dm->next;
      free(dm->must);
   d->must (where "d" is the single argument passed to "dfamust");
   the length of the sequence is returned in d->mustn.
	PLUS	p->left		p->right	ZERO		p->in
	CAT	(p->is==ZERO)?	(q->is==ZERO)?	(p->is!=ZERO &&	p->in plus
		p->left :	q->right :	q->is!=ZERO) ?	q->in plus
		p->is##q->left	p->right##q->is	p->is##q->is :	p->right##q->left
	OR	longest common	longest common	(do p->is and	substrings common to
		leading		trailing	q->is have same	p->in and q->in
		of p->left	of p->right	content) ?	
		and q->left	and q->right	p->is : NULL	
	egrep 'psi|epsilon'	->	egrep 'psi'
	egrep 'pepsi|epsilon'	->	egrep 'epsi'
	grep '[c]'		->	grep 'c'
	grep '(ab|a)b'		->	grep 'ab'
	grep 'ab*'		->	grep 'a'
	grep 'a*b'		->	grep 'b'
	  if (i > len)
  mp->left[0] = mp->right[0] = mp->is[0] = '\0';
  freelist(mp->in);
  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
  for (i = 0; i <= dfa->tindex; ++i)
  for (i = 0; i <= dfa->tindex; ++i)
  for (i = 0; i < dfa->tindex; ++i)
      prtok(dfa->tokens[i]);
  for (ri = 0; ri < dfa->tindex; ++ri)
      switch (t = dfa->tokens[ri])
	    if (strcmp(lmp->is, rmp->is) != 0)
	      lmp->is[0] = '\0';
	    while (lmp->left[i] != '\0' && lmp->left[i] == rmp->left[i])
	    lmp->left[i] = '\0';
	    ln = strlen(lmp->right);
	    rn = strlen(rmp->right);
	    if (n > rn)
	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
	      lmp->right[j] = lmp->right[(ln - i) + j];
	    lmp->right[j] = '\0';
	    new = inboth(lmp->in, rmp->in);
	    freelist(lmp->in);
	    free((char *) lmp->in);
	    lmp->in = new;
	  mp->is[0] = '\0';
	    if (strlen(musts[0].in[i]) > strlen(result))
	    lmp->in = addlists(lmp->in, rmp->in);
	    if (lmp->in == NULL)
	    if (lmp->right[0] != '\0' &&
		rmp->left[0] != '\0')
		tp = icpyalloc(lmp->right);
		tp = icatalloc(tp, rmp->left);
		lmp->in = enlist(lmp->in, tp,
		if (lmp->in == NULL)
	    if (lmp->is[0] != '\0')
		lmp->left = icatalloc(lmp->left,
				      rmp->left);
		if (lmp->left == NULL)
	    if (rmp->is[0] == '\0')
	      lmp->right[0] = '\0';
	    lmp->right = icatalloc(lmp->right, rmp->right);
	    if (lmp->right == NULL)
	    if (lmp->is[0] != '\0' && rmp->is[0] != '\0')
		lmp->is = icatalloc(lmp->is, rmp->is);
		if (lmp->is == NULL)
	      lmp->is[0] = '\0';
	  else if (t >= CSET)
	      mp->is[0] = mp->left[0] = mp->right[0] = t;
	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
	      mp->in = enlist(mp->in, mp->is, 1);
	      if (mp->in == NULL)
      prtok(dfa->tokens[ri]);
      for (i = 0; mp->in[i]; ++i)
	fprintf(stderr, " \"%s\"", mp->in[i]);
      fprintf(stderr, "\n  is: \"%s\"\n", mp->is);
      fprintf(stderr, "  left: \"%s\"\n", mp->left);
      fprintf(stderr, "  right: \"%s\"\n", mp->right);
      dm->exact = exact;
      dm->must = malloc(strlen(result) + 1);
      strcpy(dm->must, result);
      dm->next = dfa->musts;
      dfa->musts = dm;
  for (i = 0; i <= dfa->tindex; ++i)
#include <limits.h>
#include <stdlib.h>
#include <stddef.h>
#include <sys/types.h>
#include <string.h>
#include <memory.h>
  obstack_init(&kwset->obstack);
  kwset->words = 0;
  kwset->trie
    = (struct trie *) obstack_alloc(&kwset->obstack, sizeof (struct trie));
  if (!kwset->trie)
  kwset->trie->accepting = 0;
  kwset->trie->links = 0;
  kwset->trie->parent = 0;
  kwset->trie->next = 0;
  kwset->trie->fail = 0;
  kwset->trie->depth = 0;
  kwset->trie->shift = 0;
  kwset->mind = INT_MAX;
  kwset->maxd = -1;
  kwset->target = 0;
  kwset->trans = trans;
  trie = kwset->trie;
      label = kwset->trans ? kwset->trans[(unsigned char) *--text] : *--text;
      link = trie->links;
      links[0] = (struct tree *) &trie->links;
      while (link && label != link->label)
	  if (label < link->label)
	    dirs[depth++] = L, link = link->llink;
	    dirs[depth++] = R, link = link->rlink;
	  link = (struct tree *) obstack_alloc(&kwset->obstack,
	  link->llink = 0;
	  link->rlink = 0;
	  link->trie = (struct trie *) obstack_alloc(&kwset->obstack,
	  if (!link->trie)
	  link->trie->accepting = 0;
	  link->trie->links = 0;
	  link->trie->parent = trie;
	  link->trie->next = 0;
	  link->trie->fail = 0;
	  link->trie->depth = trie->depth + 1;
	  link->trie->shift = 0;
	  link->label = label;
	  link->balance = 0;
	    links[depth]->llink = link;
	    links[depth]->rlink = link;
	  while (depth && !links[depth]->balance)
		--links[depth]->balance;
		++links[depth]->balance;
	  if (depth && ((dirs[depth] == L && --links[depth]->balance)
			|| (dirs[depth] == R && ++links[depth]->balance)))
	      switch (links[depth]->balance)
		      r = links[depth], t = r->llink, rl = t->rlink;
		      t->rlink = r, r->llink = rl;
		      t->balance = r->balance = 0;
		      r = links[depth], l = r->llink, t = l->rlink;
		      rl = t->rlink, lr = t->llink;
		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
		      l->balance = t->balance != 1 ? 0 : -1;
		      r->balance = t->balance != (char) -1 ? 0 : 1;
		      t->balance = 0;
		      l = links[depth], t = l->rlink, lr = t->llink;
		      t->llink = l, l->rlink = lr;
		      t->balance = l->balance = 0;
		      l = links[depth], r = l->rlink, t = r->llink;
		      lr = t->llink, rl = t->rlink;
		      t->llink = l, l->rlink = lr, t->rlink = r, r->llink = rl;
		      l->balance = t->balance != 1 ? 0 : -1;
		      r->balance = t->balance != (char) -1 ? 0 : 1;
		      t->balance = 0;
		links[depth - 1]->llink = t;
		links[depth - 1]->rlink = t;
      trie = link->trie;
  if (!trie->accepting)
    trie->accepting = 1 + 2 * kwset->words;
  ++kwset->words;
  if (trie->depth < kwset->mind)
    kwset->mind = trie->depth;
  if (trie->depth > kwset->maxd)
    kwset->maxd = trie->depth;
  enqueue(tree->llink, last);
  enqueue(tree->rlink, last);
  (*last) = (*last)->next = tree->trie;
  treefails(tree->llink, fail, recourse);
  treefails(tree->rlink, fail, recourse);
      link = fail->links;
      while (link && tree->label != link->label)
	if (tree->label < link->label)
	  link = link->llink;
	  link = link->rlink;
	  tree->trie->fail = link->trie;
      fail = fail->fail;
  tree->trie->fail = recourse;
  treedelta(tree->llink, depth, delta);
  treedelta(tree->rlink, depth, delta);
  if (depth < delta[tree->label])
    delta[tree->label] = depth;
  if (!hasevery(a, b->llink))
  if (!hasevery(a, b->rlink))
  while (a && b->label != a->label)
    if (b->label < a->label)
      a = a->llink;
      a = a->rlink;
  treenext(tree->llink, next);
  treenext(tree->rlink, next);
  next[tree->label] = tree->trie;
  if (kwset->mind < 256)
      delta[i] = kwset->mind;
  if (kwset->words == 1 && kwset->trans == 0)
      kwset->target = obstack_alloc(&kwset->obstack, kwset->mind);
      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
	  kwset->target[i] = curr->links->label;
	  curr = curr->links->trie;
      for (i = 0; i < kwset->mind; ++i)
	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
      kwset->mind2 = kwset->mind;
      for (i = 0; i < kwset->mind - 1; ++i)
	if (kwset->target[i] == kwset->target[kwset->mind - 1])
	  kwset->mind2 = kwset->mind - (i + 1);
      for (curr = last = kwset->trie; curr; curr = curr->next)
	  enqueue(curr->links, &last);
	  curr->shift = kwset->mind;
	  curr->maxshift = kwset->mind;
	  treedelta(curr->links, curr->depth, delta);
	  treefails(curr->links, curr->fail, kwset->trie);
	  for (fail = curr->fail; fail; fail = fail->fail)
	      if (!hasevery(fail->links, curr->links))
		if (curr->depth - fail->depth < fail->shift)
		  fail->shift = curr->depth - fail->depth;
	      if (curr->accepting && fail->maxshift > curr->depth - fail->depth)
		fail->maxshift = curr->depth - fail->depth;
      for (curr = kwset->trie->next; curr; curr = curr->next)
	  if (curr->maxshift > curr->parent->maxshift)
	    curr->maxshift = curr->parent->maxshift;
	  if (curr->shift > curr->maxshift)
	    curr->shift = curr->maxshift;
      treenext(kwset->trie->links, next);
      if ((trans = kwset->trans) != 0)
	  kwset->next[i] = next[(unsigned char) trans[i]];
	  kwset->next[i] = next[i];
  if ((trans = kwset->trans) != 0)
      kwset->delta[i] = delta[(unsigned char) trans[i]];
      kwset->delta[i] = delta[i];
  len = kwset->mind;
  if (len > size)
    return memchr(text, kwset->target[0], size);
  d1 = kwset->delta;
  sp = kwset->target + len;
  md2 = kwset->mind2;
  if (size > 12 * len)
	    if (i > len)
	  if (i > len)
  if (len < kwset->mind)
  next = kwset->next;
  delta = kwset->delta;
  trans = kwset->trans;
  if ((d = kwset->mind) != 0)
      mch = text, accept = kwset->trie;
  if (len >= 4 * kwset->mind)
    qlim = lim - 4 * kwset->mind;
  while (lim - end >= d)
      if (trie->accepting)
      d = trie->shift;
      while (beg > text)
	  tree = trie->links;
	  while (tree && c != tree->label)
	    if (c < tree->label)
	      tree = tree->llink;
	      tree = tree->rlink;
	      trie = tree->trie;
	      if (trie->accepting)
	  d = trie->shift;
  if (lim - mch > kwset->maxd)
    lim = mch + kwset->maxd;
  while (lim - end >= d)
      if (trie->accepting && beg <= mch)
      d = trie->shift;
      while (beg > text)
	  tree = trie->links;
	  while (tree && c != tree->label)
	    if (c < tree->label)
	      tree = tree->llink;
	      tree = tree->rlink;
	      trie = tree->trie;
	      if (trie->accepting && beg <= mch)
	  d = trie->shift;
      kwsmatch->index = accept->accepting / 2;
      kwsmatch->beg[0] = mch;
      kwsmatch->size[0] = accept->depth;
  if (kwset->words == 1 && kwset->trans == 0)
	  kwsmatch->index = 0;
	  kwsmatch->beg[0] = ret;
	  kwsmatch->size[0] = kwset->mind;
  obstack_free(&kwset->obstack, 0);
/*#include <stdio.h>*/
  ((PTR_INT_TYPE) ((char *)&((struct fooalign *) 0)->d - (char *)0))
  (((h) -> use_extra_arg) \
   ? (*(h)->chunkfun) ((h)->extra_arg, (size)) \
   : (*(h)->chunkfun) ((size)))
    if ((h) -> use_extra_arg) \
      (*(h)->freefun) ((h)->extra_arg, (old_chunk)); \
      (*(h)->freefun) ((old_chunk)); \
  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
  h->freefun = freefun;
  h->chunk_size = size;
  h->alignment_mask = alignment - 1;
  h->use_extra_arg = 0;
  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
  h->next_free = h->object_base = chunk->contents;
  h->chunk_limit = chunk->limit
    = (char *) chunk + h->chunk_size;
  chunk->prev = 0;
  h->maybe_empty_object = 0;
  h->chunkfun = (struct _obstack_chunk * (*)()) chunkfun;
  h->freefun = freefun;
  h->chunk_size = size;
  h->alignment_mask = alignment - 1;
  h->extra_arg = arg;
  h->use_extra_arg = 1;
  chunk = h->chunk = CALL_CHUNKFUN (h, h -> chunk_size);
  h->next_free = h->object_base = chunk->contents;
  h->chunk_limit = chunk->limit
    = (char *) chunk + h->chunk_size;
  chunk->prev = 0;
  h->maybe_empty_object = 0;
  register struct _obstack_chunk*	old_chunk = h->chunk;
  register int obj_size = h->next_free - h->object_base;
  new_size = (obj_size + length) + (obj_size >> 3) + 100;
  if (new_size < h->chunk_size)
    new_size = h->chunk_size;
  new_chunk = h->chunk = CALL_CHUNKFUN (h, new_size);
  new_chunk->prev = old_chunk;
  new_chunk->limit = h->chunk_limit = (char *) new_chunk + new_size;
  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
	   i >= 0; i--)
	((COPYING_UNIT *)new_chunk->contents)[i]
	  = ((COPYING_UNIT *)h->object_base)[i];
    new_chunk->contents[i] = h->object_base[i];
  if (h->object_base == old_chunk->contents && ! h->maybe_empty_object)
      new_chunk->prev = old_chunk->prev;
  h->object_base = new_chunk->contents;
  h->next_free = h->object_base + obj_size;
  h->maybe_empty_object = 0;
  lp = (h)->chunk;
  /* We use >= rather than > since the object cannot be exactly at
  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
      plp = lp->prev;
  lp = h->chunk;
  /* We use >= because there cannot be an object at the beginning of a chunk.
  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
      plp = lp->prev;
      h->maybe_empty_object = 1;
      h->object_base = h->next_free = (char *)(obj);
      h->chunk_limit = lp->limit;
      h->chunk = lp;
  lp = h->chunk;
  /* We use >= because there cannot be an object at the beginning of a chunk.
  while (lp != 0 && ((POINTER)lp >= obj || (POINTER)(lp)->limit < obj))
      plp = lp->prev;
      h->maybe_empty_object = 1;
      h->object_base = h->next_free = (char *)(obj);
      h->chunk_limit = lp->limit;
      h->chunk = lp;
/*#include <ctype.h>*/
#include <limits.h>
#include <stdlib.h>
#include <sys/types.h>
#include <string.h>
#include <memory.h>
      for (dm = dfa_1.musts; dm; dm = dm->next)
	  if (!dm->exact)
	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
      for (dm = dfa_1.musts; dm; dm = dm->next)
	  if (dm->exact)
	  if ((err = kwsincr(kwset, dm->must, strlen(dm->must))) != 0)
	  while (beg > buf && beg[-1] != '\n')
	  while (beg > buf && beg[-1] != '\n')
      if ((start = re_search(&regex, beg, end - beg, 0, end - beg, &regs)) >= 0)
	    while (start >= 0)
		if (len > 0)
	  if (beg > buf && beg[-1] != '\n')
	    if (try > buf && WCHAR((unsigned char) try[-1]))
  while (beg > buf && beg[-1] != '\n')
