2:   Copyright (C) 1992 Free Software Foundation, Inc.
16:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
18:   Written July 1992 by Mike Haertel.  */
22:#define GREP 1
23:#define STDC_HEADERS 1
24:#define HAVE_STRING_H 1
25:#define HAVE_SYS_PARAM_H 1
26:#define HAVE_UNISTD_H 1
27:#define HAVE_ALLOCA_H 1
28:#define HAVE_GETPAGESIZE 1
29:#define HAVE_MEMCHR 1
30:#define HAVE_STRERROR 1
31:#define HAVE_VALLOC 1
32:#define HAVE_WORKING_MMAP 1
44:#define flag_stdlib 1
47:#define flag_systypes 1
54:#define flag_string 1
57:#define flag_memory 1
61:#define flag_strings 1
73:#define flag_systypes 1
146:  errseen = 1;
216:#define flag_systypes 1
236:      initialized = 1;
238:      bufsalloc = MAX(8192, getpagesize());
243:      /* The 1 byte of overflow is a kludge for dfaexec(), which
246:      buffer = valloc(bufalloc + 1);
258:      bufmapped = 1;
259:      bufoffset = lseek(fd, 0, 1);
287:      nbuffer = valloc(bufalloc + 1);
312:      if (maddr == (caddr_t) -1)
320:	 but it doesn't, at least not on a Sun running 4.1.
396:  fwrite(beg, 1, lim - beg, stdout);
448:	  while (p > bp && p[-1] != '\n');
458:	  prline(p, nl + 1, '-');
459:	  p = nl + 1;
483:  used = 1;
503:      if (b == lim && ((b > beg && b[-1] == '\n') || b == beg))
508:	  nlines += 1;
558:      for (lim = buflim; lim > beg && lim[-1] != '\n'; --lim)
574:	  while (beg > bufbeg && beg[-1] != '\n');
605:   If we find it, install it in compile and execute, and return 1.  */
617:	return 1;
637:    prog = strrchr(prog, '/') + 1;
648:  while ((opt = getopt(argc, argv, "0123456789A:B:CEFGVX:bce:f:hiLlnqsvwxy"))
653:      case '1':
662:	out_before = 10 * out_before + opt - '0';
663:	out_after = 10 * out_after + opt - '0';
702:	out_byte = 1;
705:	out_quiet = 1;
706:	count_matches = 1;
710:	keys = xrealloc(keys, keycc + cc + 1);
715:	keyfound = 1;
721:	for (keyalloc = 1; keyalloc <= keycc; keyalloc *= 2)
728:	       && (cc = fread(keys + keycc, 1, keyalloc - keycc, fp)) > 0)
737:	if (keycc - oldcc > 0 && keys[keycc - 1] == '\n')
739:	keyfound = 1;
742:	no_filenames = 1;
746:	match_icase = 1;
751:	out_quiet = 1;
752:	list_files = -1;
755:	out_quiet = 1;
756:	list_files = 1;
759:	out_line = 1;
762:	out_quiet = 1;
765:	suppress_errors = 1;
768:	out_invert = 1;
771:	match_words = 1;
774:	match_lines = 1;
798:  if (argc - optind > 1 && !no_filenames)
799:    out_file = 1;
801:  status = 1;
825:		if (list_files == 1)
828:	    else if (list_files == -1)
844:	  if (list_files == 1)
847:      else if (list_files == -1)
858:   Copyright (C) 1987, 88, 89, 90, 91, 92, 1993
873:   Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
883:#define flag_config 1
891:#define flag_alloca 1
903:/* This tells Alpha OSF/1 not to define a getopt prototype in <stdio.h>.  */
929:#define flag_stdlib 1
976:/* XXX 1003.2 says this must be 1 before any call.  */
991:int opterr = 1;
1020:   as if it were the argument of an option with character code 1.
1040:#define flag_string 1
1187:     Start processing options with ARGV-element 1 (since ARGV-element 0
1193:      first_nonopt = last_nonopt = optind = 1;
1231:		 && (argv[optind][0] != '-' || argv[optind][1] == '\0')
1234:		     || argv[optind][0] != '+' || argv[optind][1] == '\0')
1274:      if ((argv[optind][0] != '-' || argv[optind][1] == '\0')
1277:	      || argv[optind][0] != '+' || argv[optind][1] == '\0')
1284:	  return 1;
1290:      nextchar = (argv[optind] + 1
1291:		  + (longopts != NULL && argv[optind][1] == '-'));
1296:	   && (argv[optind][1] == '-' || long_only))
1322:		exact = 1;
1333:	      ambig = 1;
1355:		optarg = s + 1;
1360:		      if (argv[optind - 1][1] == '-')
1369:			     argv[0], argv[optind - 1][0], pfound->name);
1375:	  else if (pfound->has_arg == 1)
1383:			     argv[0], argv[optind - 1]);
1402:      if (!long_only || argv[optind][1] == '-'
1410:	      if (argv[optind][1] == '-')
1440:	    if (c < 040 || c >= 0177)
1446:	    /* 1003.2 specifies the format of this message.  */
1453:    if (temp[1] == ':')
1485:		    /* 1003.2 specifies the format of this message.  */
1534:  while (1)
1536:      int this_option_optind = optind ? optind : 1;
1538:      c = getopt (argc, argv, "abc:d:0123456789");
1545:	case '1':
1593:   version 0.12.
1594:   (Implements POSIX draft P10003.2/D11.2, except for
1597:   Copyright (C) 1993 Free Software Foundation, Inc.
1611:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
1623:#define flag_systypes 1
1629:#define flag_config 1
1651:#define flag_string 1
1654:#define bcmp(s1, s2, n)	memcmp ((s1), (s2), (n))
1665:#define flag_strings 1
1672:#define flag_stdlib 1
1685:#define Sword 1
1721:   done = 1;
1744:   Defining isascii to 1 should let any compiler worth its salt
1748:#define isascii(c) 1
1786:#define SIGN_EXTEND_CHAR(c) ((((unsigned char) (c)) ^ 128) - 128)
1816:#define flag_alloca 1
1838:/* True if `size1' is non-NULL and PTR is pointing anywhere inside
1839:   `string1' or just past its end.  This works if PTR is NULL, which is
1842:  (size1 && string1 <= (ptr) && (ptr) <= string1 + size1)
1851:#define STREQ(s1, s2) ((strcmp (s1, s2) == 0))
1859:#define true 1
1867:   So regex.h defines a symbol `RE_EXACTN_VALUE' to be 1; the value of
1868:   `exactn' we use here must also be 1.  */
1875:  exactn = 1,
1884:           bit is 1.  A character too large to have a bit in the map is
2008:    (destination)[1] = (number) >> 8;					\
2027:    (destination) += SIGN_EXTEND_CHAR (*((source) + 1)) << 8;		\
2036:  int temp = SIGN_EXTEND_CHAR (*(source + 1)); 
2092:#define DEBUG_PRINT1(x) if (debug) printf (x)
2093:#define DEBUG_PRINT2(x1, x2) if (debug) printf (x1, x2)
2094:#define DEBUG_PRINT3(x1, x2, x3) if (debug) printf (x1, x2, x3)
2095:#define DEBUG_PRINT4(x1, x2, x3, x4) if (debug) printf (x1, x2, x3, x4)
2098:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)			\
2099:  if (debug) print_double_string (w, s1, sz1, s2, sz2)
2113:  while (i < (1 << BYTEWIDTH))
2118:          printchar (i - 1);
2119:          while (i < (1 << BYTEWIDTH)  &&  fastmap[i])
2121:              was_a_range = 1;
2127:              printchar (i - 1);
2196:            register int c, last = -100;
2200:	            (re_opcode_t) *(p - 1) == charset_not ? "^" : "");
2206:		  && (p[1 + (c/8)] & (1 << (c % 8))))
2209:		  if (last + 1 == c && ! in_range)
2212:		      in_range = 1;
2215:		  else if (last + 1 != c && in_range)
2232:	    p += 1 + *p;
2359:          printf ("?%d", *(p-1));
2397:print_double_string (where, string1, size1, string2, size2)
2399:    const char *string1;
2401:    int size1;
2412:          for (this_char = where - string1; this_char < size1; this_char++)
2413:            printchar (string1[this_char]);
2429:#define DEBUG_PRINT1(x)
2430:#define DEBUG_PRINT2(x1, x2)
2431:#define DEBUG_PRINT3(x1, x2, x3)
2432:#define DEBUG_PRINT4(x1, x2, x3, x4)
2434:#define DEBUG_PRINT_DOUBLE_STRING(w, s1, sz1, s2, sz2)
2486:static void store_op1 (), store_op2 ();
2487:static void insert_op1 (), insert_op2 ();
2533:    GET_BUFFER_SPACE (1);						\
2538:/* Ensure we have two more bytes of buffer space and then append C1 and C2.  */
2539:#define BUF_PUSH_2(c1, c2)						\
2542:    *b++ = (unsigned char) (c1);					\
2548:#define BUF_PUSH_3(c1, c2, c3)						\
2551:    *b++ = (unsigned char) (c1);					\
2560:  store_op1 (op, loc, (to) - (loc) - 3)
2568:  insert_op1 (op, loc, (to) - (loc) - 3, b)
2576:   into the pattern are two bytes long.  So if 2^16 bytes turns out to
2578:#define MAX_BUF_SIZE (1L << 16)
2590:    bufp->allocated <<= 1;						\
2624:   be able to hold values from -(MAX_BUF_SIZE - 1) to MAX_BUF_SIZE - 1.  */
2657:   |= 1 << (((unsigned char) c) % BYTEWIDTH))
2669:           num = num * 10 + c - '0'; 					\
2715:  register unsigned char c, c1;
2718:  const char *p1;
2762:  DEBUG_PRINT1 ("\nCompiling pattern: ");
2828:                   p == pattern + 1
2875:            /* 1 means zero (many) matches is allowed.  */
2901:                    PATFETCH (c1);
2902:                    if (!(c1 == '+' || c1 == '?'))
2909:                    c = c1;
2938:                assert (p - 1 > pattern);
3013:            p1 = p;
3016:            BUF_PUSH ((1 << BYTEWIDTH) / BYTEWIDTH);
3019:            bzero (b, (1 << BYTEWIDTH) / BYTEWIDTH);
3038:                    PATFETCH (c1);
3039:                    SET_LIST_BIT (c1);
3046:                if (c == ']' && p != p1 + 1)
3068:                else if (p[0] == '-' && p[1] != ']')
3073:                    PATFETCH (c1);
3084:                    char str[CHAR_CLASS_MAX_LENGTH + 1];
3087:                    c1 = 0;
3096:                            || c1 == CHAR_CLASS_MAX_LENGTH)
3098:                        str[c1++] = c;
3100:                    str[c1] = '\0';
3129:                        for (ch = 0; ch < 1 << BYTEWIDTH; ch++)
3149:                        c1++;
3150:                        while (c1--)    
3166:            while ((int) b[-1] > 0 && b[b[-1] - 1] == 0) 
3167:              b[-1]--; 
3168:            b += b[-1];
3228:                  RETALLOC (compile_stack.stack, compile_stack.size << 1,
3232:                  compile_stack.size <<= 1;
3241:                = fixup_alt_jump ? fixup_alt_jump - bufp->buffer + 1 : 0;
3286:                  STORE_JUMP (jump_past_alt, fixup_alt_jump, b - 1);
3309:                    ? bufp->buffer + COMPILE_STACK_TOP.fixup_alt_jump - 1 
3392:                int lower_bound = -1, upper_bound = -1;
3394:                beg_interval = p - 1;
3412:                  /* Interval such as `{1}' => match exactly once. */
3470:                    `upper_bound' is 1, though.)  */
3472:                   { /* If the upper bound is > 1, we need to insert
3474:                     unsigned nbytes = 10 + (upper_bound > 1) * 10;
3484:                                   b + 5 + (upper_bound > 1) * 5,
3495:                     if (upper_bound > 1)
3502:                            jump back only `upper_bound - 1' times.  */
3504:                                      upper_bound - 1);
3522:                                     upper_bound - 1, b);
3542:                   if (p > pattern  &&  p[-1] == '\\')
3604:            case '1': case '2': case '3': case '4': case '5':
3609:              c1 = c - '0';
3611:              if (c1 > regnum)
3615:              if (group_in_compile_stack (compile_stack, c1))
3619:              BUF_PUSH_2 (duplicate, c1);
3648:              || pending_exact + *pending_exact + 1 != b
3651:	      || *pending_exact == (1 << BYTEWIDTH) - 1
3656:		  ? *p == '\\' && (p[1] == '+' || p[1] == '?')
3661:                      : (p[0] == '\\' && p[1] == '{'))))
3668:	      pending_exact = b - 1;
3694:      DEBUG_PRINT1 ("\nCompiled pattern: \n");
3707:store_op1 (op, loc, arg)
3713:  STORE_NUMBER (loc + 1, arg);
3717:/* Like `store_op1', but" for 'two two-byte parameters ARG1 and ARG2.  */
3720:store_op2 (op, loc, arg1, arg2)
3723:    int arg1, arg2;
3726:  STORE_NUMBER (loc + 1, arg1);
3735:insert_op1 (op, loc, arg, end)
3747:  store_op1 (op, loc, arg);
3751:/* Like `insert_op1', but for two two-byte parameters ARG1 and ARG2.  */
3754:insert_op2 (op, loc, arg1, arg2, end)
3757:    int arg1, arg2;
3766:  store_op2 (op, loc, arg1, arg2);
3780:  boolean prev_prev_backslash = prev > pattern && prev[-1] == '\\';
3800:  const char *next_next = p + 1 < pend ? p + 1 : NULL;
3822:  for (this_element = compile_stack.avail - 1;  
3834:   starting character is in `P[-2]'.  (`P[-1]' is the character `-'.)
3938:   Return 1 if succeeds, and 0 if either ran out of memory
3949:          ((fail_stack).size << 1) * sizeof (fail_stack_elt_t)),	\
3953:      : ((fail_stack).size <<= 1, 					\
3954:         1)))
3959:   Return 1 if was able to do so and 0 if ran out of memory allocating
3966:       1))
4000:       of 0 + -1 isn't done as unsigned.  */				\
4024:    DEBUG_PRINT1 ("\n");						\
4046:	DEBUG_PRINT1 ("\n");						\
4061:    DEBUG_PRINT_DOUBLE_STRING (string_place, string1, size1, string2,   \
4063:    DEBUG_PRINT1 ("'\n");						\
4082:#define MAX_FAILURE_ITEMS ((num_regs - 1) * NUM_REG_ITEMS + NUM_NONREG_ITEMS)
4086:  ((highest_active_reg - lowest_active_reg + 1) * NUM_REG_ITEMS 	\
4103:   `pend', `string1', `size1', `string2', and `size2'.  */
4114:  DEBUG_PRINT1 ("POP_FAILURE_POINT:\n");				\
4131:  DEBUG_PRINT_DOUBLE_STRING (str, string1, size1, string2, size2);	\
4132:  DEBUG_PRINT1 ("'\n");							\
4163:   BUFP.  A fastmap records which of the (1 << BYTEWIDTH) possible
4167:   The caller must supply the address of a (1 << BYTEWIDTH)-byte data
4205:  bzero (fastmap, 1 << BYTEWIDTH);  /* Assume nothing's valid.  */
4206:  bufp->fastmap_accurate = 1;	    /* It will be when we're done.  */
4237:	  bufp->can_be_null = 1;
4245:          fastmap[p[1]] = 1;
4250:          for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4251:	    if (p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH)))
4252:              fastmap[j] = 1;
4258:	  for (j = *p * BYTEWIDTH; j < (1 << BYTEWIDTH); j++)
4259:            fastmap[j] = 1;
4261:	  for (j = *p++ * BYTEWIDTH - 1; j >= 0; j--)
4262:	    if (!(p[j / BYTEWIDTH] & (1 << (j % BYTEWIDTH))))
4263:              fastmap[j] = 1;
4268:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4270:	      fastmap[j] = 1;
4275:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4277:	      fastmap[j] = 1;
4283:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4284:            fastmap[j] = 1;
4302:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4304:	      fastmap[j] = 1;
4310:	  for (j = 0; j < (1 << BYTEWIDTH); j++)
4312:	      fastmap[j] = 1;
4366:	      && fail_stack.stack[fail_stack.avail - 1] == p)
4390:            bufp->can_be_null = 1;
4500:   virtual concatenation of STRING1 and STRING2, starting first at index
4501:   STARTPOS, then at STARTPOS + 1, and so on.
4503:   STRING1 and STRING2 have length SIZE1 and SIZE2, respectively.
4509:   In REGS, return the indices of the virtual concatenation of STRING1
4514:   concatenation of STRING1 and STRING2.
4517:   found, -1 if no match, or -2 if error (such as failure
4521:re_search_2 (bufp, string1, size1, string2, size2, startpos, range, regs, stop)
4523:     const char *string1, *string2;
4524:     int size1, size2;
4533:  int total_size = size1 + size2;
4538:    return -1;
4541:     the virtual concatenation of STRING1 and STRING2.  */
4542:  if (endpos < -1)
4543:    range = -1 - startpos;
4552:	return -1;
4554:	range = 1;
4577:              if (startpos < size1 && startpos + range >= size1)
4578:                lim = range - (size1 - startpos);
4580:	      d = (startpos >= size1 ? string2 - size1 : string1) + startpos;
4597:	      register char c = (size1 == 0 || startpos >= size1
4598:                                 ? string2[startpos - size1] 
4599:                                 : string1[startpos]);
4609:	return -1;
4611:      val = re_match_2 (bufp, string1, size1, string2, size2,
4633:  return -1;
4663:    unsigned is_active : 1;
4664:    unsigned matched_something : 1;
4665:    unsigned ever_matched_something : 1;
4686:            = 1;							\
4692:/* This converts PTR, a pointer into one of the search strings `string1'
4695:  (FIRST_STRING_P (ptr) ? (ptr) - string1 : (ptr) - string2 + size1)
4698:#define REG_UNSET_VALUE ((char *) -1)
4704:#define MATCHING_IN_FIRST_STRING  (dend == end_match_1)
4714:      /* End of string1 => advance to string2.  */ 			\
4721:   of `string1' and `string2'.  If only one string, it's `string2'.  */
4722:#define AT_STRINGS_BEG(d) ((d) == (size1 ? string1 : string2) || !size2)
4727:   two special cases to check for: if past the end of string1, look at
4729:   string2, look at the last character in string1.  */
4731:  (SYNTAX ((d) == end1 ? *string2					\
4732:           : (d) == string2 - 1 ? *(end1 - 1) : *(d))			\
4739:   || WORDCHAR_P (d - 1) != WORDCHAR_P (d))
4767:   use numbers larger than 255.  They must differ by 1, because of
4771:#define NO_HIGHEST_ACTIVE_REG (1 << BYTEWIDTH)
4772:#define NO_LOWEST_ACTIVE_REG (NO_HIGHEST_ACTIVE_REG + 1)
4792:   the (virtual) concatenation of STRING1 and STRING2 (of length SIZE1
4800:   We return -1 if no match, -2 if an internal error (such as the
4805:re_match_2 (bufp, string1, size1, string2, size2, pos, regs, stop)
4807:     const char *string1, *string2;
4808:     int size1, size2;
4815:  unsigned char *p1;
4818:  const char *end1, *end2;
4820:  /* Pointers into string1 and string2, just past the last characters in
4822:  const char *end_match_1, *end_match_2;
4852:  unsigned num_regs = bufp->re_nsub + 1;
4908:  DEBUG_PRINT1 ("\n\nEntering re_match_2.\n");
4948:  if (pos < 0 || pos > size1 + size2)
4951:      return -1;
4954:  /* Initialize subexpression text positions to -1 to mark ones that no
4957:  for (mcnt = 1; mcnt < num_regs; mcnt++)
4968:  /* We move `string1' into `string2' if the latter's empty -- but not if
4969:     `string1' is null.  */
4970:  if (size2 == 0 && string1 != NULL)
4972:      string2 = string1;
4973:      size2 = size1;
4974:      string1 = 0;
4975:      size1 = 0;
4977:  end1 = string1 + size1;
4981:  if (stop <= size1)
4983:      end_match_1 = string1 + stop;
4988:      end_match_1 = end1;
4989:      end_match_2 = string2 + stop - size1;
4998:  if (size1 > 0 && pos <= size1)
5000:      d = string1 + pos;
5001:      dend = end_match_1;
5005:      d = string2 + pos - size1;
5009:  DEBUG_PRINT1 ("The compiled pattern is: ");
5011:  DEBUG_PRINT1 ("The string to match is: `");
5012:  DEBUG_PRINT_DOUBLE_STRING (d, string1, size1, string2, size2);
5013:  DEBUG_PRINT1 ("'\n");
5024:          DEBUG_PRINT1 ("end of pattern ... ");
5030:              DEBUG_PRINT1 ("backtracking.\n");
5045:                      DEBUG_PRINT1 ("\nSAVING match as best so far.\n");
5047:                      for (mcnt = 1; mcnt < num_regs; mcnt++)
5061:                     end_match_1' while the restored d is in string2.
5065:                  DEBUG_PRINT1 ("Restoring best registers.\n");
5068:                  dend = ((d >= string1 && d <= end1)
5069:		           ? end_match_1 : end_match_2);
5071:		  for (mcnt = 1; mcnt < num_regs; mcnt++)
5079:          DEBUG_PRINT1 ("Accepting match.\n");
5087:                     extra element beyond `num_regs' for the `-1' marker
5089:                  regs->num_regs = MAX (RE_NREGS, num_regs + 1);
5100:                  if (regs->num_regs < num_regs + 1)
5102:                      regs->num_regs = num_regs + 1;
5122:                  regs->end[0] = (MATCHING_IN_FIRST_STRING ? d - string1
5123:			          : d - string2 + size1);
5128:	      for (mcnt = 1; mcnt < MIN (num_regs, regs->num_regs); mcnt++)
5131:                    regs->start[mcnt] = regs->end[mcnt] = -1;
5140:                 were in the pattern, set the extra elements to -1.  If
5143:                 -1 at the end.  */
5145:                regs->start[mcnt] = regs->end[mcnt] = -1;
5155:			    ? string1 
5156:			    : string2 - size1);
5173:          DEBUG_PRINT1 ("EXECUTING no_op.\n");
5211:          DEBUG_PRINT1 ("EXECUTING anychar.\n");
5229:	    boolean not = (re_opcode_t) *(p - 1) == charset_not;
5239:		&& p[1 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5242:	    p += 1 + *p;
5258:	  DEBUG_PRINT3 ("EXECUTING start_memory %d (%d):\n", *p, p[1]);
5261:	  p1 = p;		/* To send to group_match_null_string_p.  */
5265:              = group_match_null_string_p (&p1, pend, reg_info);
5281:          IS_ACTIVE (reg_info[*p]) = 1;
5301:	  DEBUG_PRINT3 ("EXECUTING stop_memory %d (%d):\n", *p, p[1]);
5331:                 new highest active register is 1.  */
5332:              unsigned char r = *p - 1;
5340:                 registers 1 and 2 as a result of the *, but when we pop
5341:                 back to the second ), we are at the stop_memory 1.
5363:              p1 = p + 2;
5365:              switch ((re_opcode_t) *p1++)
5373:                    EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5375:		      p1 += 2;
5381:	      p1 += mcnt;
5388:              if (mcnt < 0 && (re_opcode_t) *p1 == on_failure_jump
5389:                  && (re_opcode_t) p1[3] == start_memory && p1[4] == *p)
5394:                     regstart[1], and, e.g., with `((a*)*(b*)*)*'
5408:                      for (r = *p; r < *p + *(p + 1); r++)
5417:		  p1++;
5418:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5419:                  PUSH_FAILURE_POINT (p1 + mcnt, d, -2);
5452:		     ? regend[regno] : end_match_1);
5462:                    /* End of string1 => advance to string2. */
5496:          DEBUG_PRINT1 ("EXECUTING begline.\n");
5502:          else if (d[-1] == '\n' && bufp->newline_anchor)
5512:          DEBUG_PRINT1 ("EXECUTING endline.\n");
5520:          else if ((d == end1 ? *string2 : *d) == '\n'
5530:          DEBUG_PRINT1 ("EXECUTING begbuf.\n");
5538:          DEBUG_PRINT1 ("EXECUTING endbuf.\n");
5561:          DEBUG_PRINT1 ("EXECUTING on_failure_keep_string_jump");
5584:          DEBUG_PRINT1 ("EXECUTING on_failure_jump");
5593:             For example, in \(a*\)*\1, we need the preceding group,
5598:          p1 = p;
5602:             the result of a completed succeed_n, as in \(a\)\{1,3\}b\1
5604:          while (p1 < pend && (re_opcode_t) *p1 == no_op)
5605:            p1++;
5607:          if (p1 < pend && (re_opcode_t) *p1 == start_memory)
5613:              highest_active_reg = *(p1 + 1) + *(p1 + 2);
5615:                lowest_active_reg = *(p1 + 1);
5618:          DEBUG_PRINT1 (":\n");
5657:                DEBUG_PRINT1
5666:		p1 = p + mcnt;
5668:                /* p1[0] ... p1[2] are the `on_failure_jump' corresponding
5671:                if ((re_opcode_t) p1[3] == exactn && p1[5] != c)
5675:                                  c, p1[5]);
5678:		else if ((re_opcode_t) p1[3] == charset
5679:			 || (re_opcode_t) p1[3] == charset_not)
5681:		    int not = (re_opcode_t) p1[3] == charset_not;
5683:		    if (c < (unsigned char) (p1[4] * BYTEWIDTH)
5684:			&& p1[5 + c / BYTEWIDTH] & (1 << (c % BYTEWIDTH)))
5687:                    /* `not' is equal to 1 if c would match, which means
5692:                        DEBUG_PRINT1 ("  No match => pop_failure_jump.\n");
5698:	  if ((re_opcode_t) p[-1] != pop_failure_jump)
5700:	      p[-1] = (unsigned char) jump;
5701:              DEBUG_PRINT1 ("  Match => jump.\n");
5724:            DEBUG_PRINT1 ("EXECUTING pop_failure_jump.\n");
5745:          DEBUG_PRINT1 ("EXECUTING jump_past_alt.\n");
5755:          DEBUG_PRINT1 ("EXECUTING dummy_failure_jump.\n");
5768:          DEBUG_PRINT1 ("EXECUTING push_dummy_failure.\n");
5816:            DEBUG_PRINT1 ("EXECUTING set_number_at.\n");
5819:            p1 = p + mcnt;
5821:            DEBUG_PRINT3 ("  Setting 0x%x to %d.\n", p1, mcnt);
5822:	    STORE_NUMBER (p1, mcnt);
5827:          DEBUG_PRINT1 ("EXECUTING wordbound.\n");
5833:          DEBUG_PRINT1 ("EXECUTING notwordbound.\n");
5839:          DEBUG_PRINT1 ("EXECUTING wordbeg.\n");
5840:	  if (WORDCHAR_P (d) && (AT_STRINGS_BEG (d) || !WORDCHAR_P (d - 1)))
5845:          DEBUG_PRINT1 ("EXECUTING wordend.\n");
5846:	  if (!AT_STRINGS_BEG (d) && WORDCHAR_P (d - 1)
5852:#ifdef emacs19
5854:          DEBUG_PRINT1 ("EXECUTING before_dot.\n");
5860:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5866:          DEBUG_PRINT1 ("EXECUTING after_dot.\n");
5870:#else /* not emacs19 */
5872:          DEBUG_PRINT1 ("EXECUTING at_dot.\n");
5873:	  if (PTR_CHAR_POS ((unsigned char *) d) + 1 != point)
5876:#endif /* not emacs19 */
5884:          DEBUG_PRINT1 ("EXECUTING Emacs wordchar.\n");
5899:          DEBUG_PRINT1 ("EXECUTING Emacs notwordchar.\n");
5910:          DEBUG_PRINT1 ("EXECUTING non-Emacs wordchar.\n");
5919:          DEBUG_PRINT1 ("EXECUTING non-Emacs notwordchar.\n");
5938:          DEBUG_PRINT1 ("\nFAIL:\n");
5962:                  p1 = p + 1;
5963:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
5964:                  p1 += mcnt;	
5966:                  if ((is_a_jump_n && (re_opcode_t) *p1 == succeed_n)
5968:                          && (re_opcode_t) *p1 == on_failure_jump))
5976:          if (d >= string1 && d <= end1)
5977:	    dend = end_match_1;
5988:  return -1;         			/* Failure to match.  */
6011:  unsigned char *p1 = *p + 2;
6013:  while (p1 < end)
6019:      switch ((re_opcode_t) *p1)
6023:          p1++;
6024:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6037:                 /on_failure_jump/0/6/exactn/1/a/jump_past_alt/0/6
6038:                 /on_failure_jump/0/6/exactn/1/b/jump_past_alt/0/3
6039:                 /exactn/1/c						
6041:                 So, we have to first go through the first (n-1)
6045:              /* Deal with the first (n-1) alternatives, which start
6049:              while ((re_opcode_t) p1[mcnt-3] == jump_past_alt)
6055:                  if (!alt_match_null_string_p (p1, p1 + mcnt - 3, 
6061:                  p1 += mcnt;	
6065:                  if ((re_opcode_t) *p1 != on_failure_jump)
6070:		  p1++;
6071:                  EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6072:                  if ((re_opcode_t) p1[mcnt-3] != jump_past_alt)
6075:                      p1 -= 3;
6083:              EXTRACT_NUMBER (mcnt, p1 - 2);
6085:              if (!alt_match_null_string_p (p1, p1 + mcnt, reg_info))
6088:              p1 += mcnt;	/* Get past the n-th alternative.  */
6094:	  assert (p1[1] == **p);
6095:          *p = p1 + 2;
6100:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6103:    } /* while p1 < end */
6119:  unsigned char *p1 = p;
6121:  while (p1 < end)
6126:      switch ((re_opcode_t) *p1)
6130:          p1++;
6131:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6132:          p1 += mcnt;
6136:          if (!common_op_match_null_string_p (&p1, end, reg_info))
6139:    }  /* while p1 < end */
6158:  unsigned char *p1 = *p;
6160:  switch ((re_opcode_t) *p1++)
6179:      reg_no = *p1;
6181:      ret = group_match_null_string_p (&p1, end, reg_info);
6195:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6197:        p1 += mcnt;
6204:      p1 += 2;		
6205:      EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6209:          p1 -= 4;
6210:          EXTRACT_NUMBER_AND_INCR (mcnt, p1);
6211:          p1 += mcnt;
6218:      if (!REG_MATCH_NULL_STRING_P (reg_info[*p1]))
6223:      p1 += 4;
6230:  *p = p1;
6235:/* Return zero if TRANSLATE[S1] and TRANSLATE[S2] are identical for LEN
6239:bcmp_translate (s1, s2, len, translate)
6240:     unsigned char *s1, *s2;
6244:  register unsigned char *p1 = s1, *p2 = s2;
6247:      if (translate[*p1++] != translate[*p2++]) return 1;
6273:     (and at least one extra will be -1).  */
6282:  bufp->newline_anchor = 1;
6317:      re_comp_buf.fastmap = (char *) malloc (1 << BYTEWIDTH);
6326:  re_comp_buf.newline_anchor = 1;
6426:      preg->newline_anchor = 1;
6549:  msg_size = strlen (msg) + 1; /* Includes the null.  */
6555:          strncpy (errbuf, msg, errbuf_size - 1);
6556:          errbuf[errbuf_size - 1] = 0;
6599:   Copyright (C) 1988 Free Software Foundation, Inc.
6613:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.  */
6615:/* Written June, 1988 by Mike Haertel
6616:   Modified July, 1988 by Arthur David Olson to assist BMG speedups  */
6625:#define flag_stdlib 1
6630:#define flag_systypes 1
6639:#define flag_string 1
6646:#define flag_strings 1
6717:xmalloc_1(n)
6729:xrealloc_1(p, n)
6742:#define MALLOC(p, t, n) ((p) = (t *) xmalloc_1((n) * sizeof (t)))
6743:#define REALLOC(p, t, n) ((p) = (t *) xrealloc_1((ptr_t) (p), (n) * sizeof (t)))
6800:  return c[b / INTBITS] & 1 << b % INTBITS;
6808:  c[b / INTBITS] |= 1 << b % INTBITS;
6816:  c[b / INTBITS] &= ~(1 << b % INTBITS);
6851:equal(s1, s2)
6852:     charclass s1;
6858:    if (s1[i] != s2[i])
6860:  return 1;
6894:  syntax_bits_set = 1;
6975:  token c, c1, c2;
6996:	  backslash = 1;
7016:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == ')')
7019:		  : lexleft > 1 && lexptr[0] == '\\' && lexptr[1] == '|')
7025:	case '1':
7106:		  minrep = 10 * minrep + c - '0';
7117:		maxrep = 10 * maxrep + c - '0';
7137:	  laststart = 1;
7145:	  laststart = 1;
7152:	  laststart = 1;
7197:	      invert = 1;
7210:		for (c1 = 0; prednames[c1].name; ++c1)
7211:		  if (looking_at(prednames[c1].name))
7214:			if ((*prednames[c1].pred)(c2))
7216:		      lexptr += strlen(prednames[c1].name);
7217:		      lexleft -= strlen(prednames[c1].name);
7218:		      FETCH(c1, "Unbalanced [");
7223:	      FETCH(c1, "Unbalanced [");
7224:	      if (c1 == '-')
7230:			 which is left in c1, the lookahead character. */
7240:		      FETCH(c1, "Unbalanced [");
7258:	  while ((c = c1) != ']');
7393:  int ntoks1;
7395:  switch (dfa->tokens[tindex - 1])
7398:      return 1;
7402:      return 1 + nsubtoks(tindex - 1);
7406:      ntoks1 = nsubtoks(tindex - 1);
7407:      return 1 + ntoks1 + nsubtoks(tindex - 1 - ntoks1);
7437:	for (i = 1; i < minrep; ++i)
7498:  laststart = 1;
7507:  regexp(1);
7546:  position t1, t2;
7554:      t1 = p;
7559:	  s->elems[i++] = t1;
7560:	  t1 = t2;
7568:merge(s1, s2, m)
7569:     position_set *s1;
7576:  while (i < s1->nelem && j < s2->nelem)
7577:    if (s1->elems[i].index > s2->elems[j].index)
7578:      m->elems[m->nelem++] = s1->elems[i++];
7579:    else if (s1->elems[i].index < s2->elems[j].index)
7583:	m->elems[m->nelem] = s1->elems[i++];
7586:  while (i < s1->nelem)
7587:    m->elems[m->nelem++] = s1->elems[i++];
7605:      s->elems[i] = s->elems[i + 1];
7623:  newline = newline ? 1 : 0;
7624:  letter = letter ? 1 : 0;
7659:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 0, letter, 1)
7660:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 0)
7661:	    || SUCCEEDS_IN_CONTEXT(constraint, newline, 1, letter, 1))
7669:	d->states[i].backref = 1;
7708:	visited[old.index] = 1;
7738:	i = -1;
7853:	*nullable++ = 1;
7863:	tmp.nelem = nfirstpos[-1];
7866:	for (j = 0; j < nlastpos[-1]; ++j)
7870:				 nalloc[pos[j].index], merged.nelem - 1);
7877:	  nullable[-1] = 1;
7883:	tmp.nelem = nfirstpos[-1];
7885:	pos = lastpos + nlastpos[-1];
7890:				 nalloc[pos[j].index], merged.nelem - 1);
7897:	  nfirstpos[-2] += nfirstpos[-1];
7899:	  firstpos += nfirstpos[-1];
7904:	if (nullable[-1])
7905:	  nlastpos[-2] += nlastpos[-1];
7909:	    for (j = nlastpos[-1] - 1; j >= 0; --j)
7912:	    nlastpos[-2] = nlastpos[-1];
7917:	nullable[-2] = nullable[-1] && nullable[-2];
7924:	nfirstpos[-2] += nfirstpos[-1];
7928:	nlastpos[-2] += nlastpos[-1];
7932:	nullable[-2] = nullable[-1] || nullable[-2];
7945:	*nfirstpos++ = *nlastpos++ = 1;
7951:	nalloc[i] = 1;
7960:      fprintf(stderr, nullable[-1] ? " nullable: yes\n" : " nullable: no\n");
7962:      for (j = nfirstpos[-1] - 1; j >= 0; --j)
7968:      for (j = nlastpos[-1] - 1; j >= 0; --j)
7987:	for (j = d->follows[i].nelem - 1; j >= 0; --j)
8004:  for (i = 0; i < nfirstpos[-1]; ++i)
8012:      wants_newline = 1;
8015:  d->salloc = 1;
8090:      initialized = 1;
8114:					 d->states[s].newline, 1))
8121:					d->states[s].letter, 1))
8149:	    (intersect[k] = matches[k] & labels[j][k]) ? intersectf = 1 : 0;
8160:	      (leftovers[k] = ~match & label) ? leftoversf = 1 : 0;
8161:	      (matches[k] = match & ~label) ? matchesf = 1 : 0;
8191:	  grps[ngrps].nelem = 1;
8210:	    wants_newline = 1;
8212:	    wants_letter = 1;
8217:	state_newline = state_index(d, &follows, 1, 0);
8221:	state_letter = state_index(d, &follows, 0, 1);
8234:      trans[i] = -1;
8257:	    wants_newline = 1;
8266:	    wants_letter = 1;
8271:	state_newline = state_index(d, &follows, 1, 0);
8275:	state_letter = state_index(d, &follows, 0, 1);
8282:	  if (labels[i][j] & 1 << k)
8317:     exist at once.  1024 is arbitrary.  The idea is that the frequently
8320:  if (d->trcount >= 1024)
8340:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 1, d->states[s].letter, 0,
8343:  if (ACCEPTS_IN_CONTEXT(d->states[s].newline, 0, d->states[s].letter, 1,
8348:    d->success[s] |= 1;
8363:	REALLOC(d->realtrans, int *, d->tralloc + 1);
8364:	d->trans = d->realtrans + 1;
8378:  trans['\n'] = -1;
8390:  d->tralloc = 1;
8392:  CALLOC(d->realtrans, int *, d->tralloc + 1);
8393:  d->trans = d->realtrans + 1;
8410:   where we're supposed to store a 1 if backreferencing happened and the
8422:  register s, s1, tmp;		/* Current state. */
8433:      sbit_init = 1;
8440:	  sbit[i] = 1;
8446:  s = s1 = 0;
8457:	    s1 = t[*p++];
8458:	    if (! (t = trans[s1]))
8463:      goto last_was_s1;
8465:      tmp = s, s = s1, s1 = tmp;
8466:    last_was_s1:
8474:		  *backref = 1;
8480:	  s1 = s;
8486:      if (count && (char *) p <= end && p[-1] == '\n')
8500:      if (p[-1] == '\n' && newline)
8502:	  s = d->newlines[s1];
8516:  d->calloc = 1;
8520:  d->talloc = 1;
8560:      case_fold = 1;
8701:    result = (char *) malloc(newsize + 1);
8703:    result = (char *) realloc((void *) old, oldsize + newsize + 1);
8795:  cpp[i + 1] = NULL;
8824:	  for (i = 1; lcp[i] != '\0' && lcp[i] == rcp[i]; ++i)
8828:	  rcp = index(rcp + 1, *lcp);
8924:  musts = (must *) malloc((dfa->tindex + 1) * sizeof *musts);
9002:	      if (lmp->right[ln - i - 1] != rmp->right[rn - i - 1])
9022:	  if (mp != &musts[1])
9028:	    exact = 1;
9108:	      mp->is[1] = mp->left[1] = mp->right[1] = '\0';
9109:	      mp->in = enlist(mp->in, mp->is, 1);
9132:      dm->must = malloc(strlen(result) + 1);
9149:   Copyright 1989 Free Software Foundation
9150:		  Written August 1989 by Mike Haertel.
9154:   the Free Software Foundation; either version 1, or (at your option)
9164:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
9172:   IBM-Germany, Scientific Center Heidelberg, Tiergartenstrasse 15, D-6900
9174:   String Matching:  An Aid to Bibliographic Search," CACM June 1975,
9175:   Vol. 18, No. 6, which describes the failure function used below. */
9181:#define flag_limits 1
9184:#define flag_stdlib 1
9187:#define INT_MAX 2147483647
9194:#define flag_systypes 1
9204:#define flag_string 1
9209:#define flag_memory 1
9228:#define NCHAR (UCHAR_MAX + 1)
9299:  kwset->maxd = -1;
9319:  struct tree *links[12];
9320:  enum { L, R } dirs[12];
9339:      depth = 1;
9370:	  link->trie->depth = trie->depth + 1;
9398:		  switch (dirs[depth + 1])
9409:		      l->balance = t->balance != 1 ? 0 : -1;
9410:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9416:		  switch (dirs[depth + 1])
9427:		      l->balance = t->balance != 1 ? 0 : -1;
9428:		      r->balance = t->balance != (char) -1 ? 0 : 1;
9435:	      if (dirs[depth - 1] == L)
9436:		links[depth - 1]->llink = t;
9438:		links[depth - 1]->rlink = t;
9448:    trie->accepting = 1 + 2 * kwset->words;
9535:    return 1;
9589:  if (kwset->words == 1 && kwset->trans == 0)
9593:      for (i = kwset->mind - 1, curr = kwset->trie; i >= 0; --i)
9600:	delta[(unsigned char) kwset->target[i]] = kwset->mind - (i + 1);
9604:      for (i = 0; i < kwset->mind - 1; ++i)
9605:	if (kwset->target[i] == kwset->target[kwset->mind - 1])
9606:	  kwset->mind2 = kwset->mind - (i + 1);
9690:  register unsigned char *d1;
9701:  if (len == 1)
9704:  d1 = kwset->delta;
9710:  /* Significance of 12: 1 (initial offset) + 10 (skip loop) + 1 (md2). */
9711:  if (size > 12 * len)
9712:    /* 11 is not a bug, the initial offset happens only once. */
9713:    for (ep = text + size - 11 * len;;)
9717:	    d = d1[U(tp[-1])], tp += d;
9718:	    d = d1[U(tp[-1])], tp += d;
9721:	    d = d1[U(tp[-1])], tp += d;
9722:	    d = d1[U(tp[-1])], tp += d;
9723:	    d = d1[U(tp[-1])], tp += d;
9726:	    d = d1[U(tp[-1])], tp += d;
9727:	    d = d1[U(tp[-1])], tp += d;
9728:	    d = d1[U(tp[-1])], tp += d;
9731:	    d = d1[U(tp[-1])], tp += d;
9732:	    d = d1[U(tp[-1])], tp += d;
9749:  d = d1[U(tp[-1])];
9752:      d = d1[U((tp += d)[-1])];
9811:	  end += d - 1;
9821:	d = delta[c = (end += d)[-1]];
9824:      beg = end - 1;
9866:  d = 1;
9869:      if ((d = delta[c = (end += d)[-1]]) != 0)
9871:      beg = end - 1;
9874:	  d = 1;
9911:	d = 1;
9941:  if (kwset->words == 1 && kwset->trans == 0)
9968:   Copyright (C) 1988, 1993 Free Software Foundation, Inc.
9982:Foundation, 675 Mass Ave, Cambridge, MA 02139, USA.  */
10069:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10077:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10078:		    + 4 + DEFAULT_ROUNDING - 1)
10079:		   & ~(DEFAULT_ROUNDING - 1));
10086:  h->alignment_mask = alignment - 1;
10099:_obstack_begin_1 (h, size, alignment, chunkfun, freefun, arg)
10114:      /* 12 is sizeof (mhead) and 4 is EXTRA from GNU malloc.
10122:      int extra = ((((12 + DEFAULT_ROUNDING - 1) & ~(DEFAULT_ROUNDING - 1))
10123:		    + 4 + DEFAULT_ROUNDING - 1)
10124:		   & ~(DEFAULT_ROUNDING - 1));
10131:  h->alignment_mask = alignment - 1;
10133:  h->use_extra_arg = 1;
10163:  new_size = (obj_size + length) + (obj_size >> 3) + 100;
10175:  if (h->alignment_mask + 1 >= DEFAULT_ALIGNMENT)
10177:      for (i = obj_size / sizeof (COPYING_UNIT) - 1;
10258:      h->maybe_empty_object = 1;
10292:      h->maybe_empty_object = 1;
10359:void (obstack_1grow) (obstack, character)
10363:  obstack_1grow (obstack, character);
10373:void (obstack_1grow_fast) (obstack, character)
10377:  obstack_1grow_fast (obstack, character);
10422:   Copyright (C) 1992 Free Software Foundation, Inc.
10436:   Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
10438:   Written August 1992 by Mike Haertel. */
10446:#define flag_limits 1
10450:#define flag_stdlib 1
10456:#define flag_systypes 1
10464:#define flag_string 1
10469:#define flag_memory 1
10500:#define NCHAR (UCHAR_MAX + 1)
10533:static struct dfa dfa_1;
10579:  if (dfa_1.musts)
10585:      for (dm = dfa_1.musts; dm; dm = dm->next)
10595:      for (dm = dfa_1.musts; dm; dm = dm->next)
10623:  dfainit(&dfa_1);
10657:      dfacomp(n, i, &dfa_1, 1);
10660:    dfacomp(pattern, size, &dfa_1, 1);
10689:  dfainit(&dfa_1);
10723:      dfacomp(n, i, &dfa_1, 1);
10726:    dfacomp(pattern, size, &dfa_1, 1);
10745:  for (beg = end = buf; end < buflim; beg = end + 1)
10758:	  while (beg > buf && beg[-1] != '\n')
10763:	  if (!dfaexec(&dfa_1, beg, end, 0, (int *) 0, &backref))
10777:	  beg = dfaexec(&dfa_1, beg, buflim, 0, (int *) 0, &backref);
10785:	  while (beg > buf && beg[-1] != '\n')
10808:		if ((start == 0 || !WCHAR(beg[start - 1]))
10815:		    regex.not_eol = 1;
10837:  *endp = end < buflim ? end + 1 : end;
10883:	  if (beg > buf && beg[-1] != '\n')
10892:	    if (try > buf && WCHAR((unsigned char) try[-1]))
10914:  while (beg > buf && beg[-1] != '\n')
